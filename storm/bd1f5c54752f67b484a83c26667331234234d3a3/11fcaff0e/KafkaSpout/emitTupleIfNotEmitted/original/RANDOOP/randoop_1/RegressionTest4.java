import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        java.lang.String str28 = strConsumerRecord16.topic();
        long long29 = strConsumerRecord16.offset();
        long long30 = strConsumerRecord16.offset();
        java.lang.String str31 = strConsumerRecord16.toString();
        int int32 = strConsumerRecord16.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long39 = strConsumerRecord38.timestamp();
        int int40 = strConsumerRecord38.partition();
        java.io.Serializable serializable41 = strConsumerRecord38.value();
        java.lang.Class<?> wildcardClass42 = serializable41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long49 = strConsumerRecord48.timestamp();
        long long50 = strConsumerRecord48.checksum();
        java.util.Optional<java.lang.Integer> intOptional51 = strConsumerRecord48.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord48.timestampType();
        java.lang.String str53 = strConsumerRecord48.topic();
        long long54 = strConsumerRecord48.checksum();
        long long55 = strConsumerRecord48.timestamp();
        java.lang.String str56 = strConsumerRecord48.toString();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord48.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers64 = strConsumerRecord63.headers();
        java.io.Serializable serializable65 = strConsumerRecord63.value();
        java.lang.String str66 = strConsumerRecord63.key();
        java.lang.String str67 = strConsumerRecord63.key();
        int int68 = strConsumerRecord63.partition();
        java.util.Optional<java.lang.Integer> intOptional69 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration> strConsumerRecordConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (short) -1, (long) (byte) 100, timestampType4, (java.lang.Long) (-1L), 100, (-1), strConsumerRecord16, (java.lang.reflect.GenericDeclaration) wildcardClass42, headers57, intOptional69);
        int int71 = strConsumerRecord16.serializedValueSize();
        java.lang.String str72 = strConsumerRecord16.topic();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 10 + "'", serializable41, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str56, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 0 + "'", serializable65, (short) 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str22 = strConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int35 = strConsumerRecord34.serializedValueSize();
        int int36 = strConsumerRecord34.partition();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType23, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers37, intOptional45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int58 = strConsumerRecord57.serializedValueSize();
        int int59 = strConsumerRecord57.partition();
        org.apache.kafka.common.header.Headers headers60 = strConsumerRecord57.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType23, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers60);
        long long62 = strConsumerRecord61.checksum();
        java.io.Serializable serializable63 = strConsumerRecord61.value();
        long long64 = strConsumerRecord61.offset();
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord61.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (short) 1, (long) (short) 0, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (java.io.Serializable) timestampType65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)", 52, (long) 100, 100L, timestampType65, (long) (short) -1, (int) (byte) 1, (int) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = null)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertEquals("'" + serializable63 + "' != '" + (-1.0d) + "'", serializable63, (-1.0d));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long9 = strConsumerRecord8.timestamp();
        long long10 = strConsumerRecord8.checksum();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord8.leaderEpoch();
        long long12 = strConsumerRecord8.timestamp();
        java.io.Serializable serializable13 = strConsumerRecord8.value();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord8.headers();
        long long15 = strConsumerRecord8.offset();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord8.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str23 = strConsumerRecord22.topic();
        java.io.Serializable serializable24 = strConsumerRecord22.value();
        java.util.Optional<java.lang.Integer> intOptional25 = strConsumerRecord22.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>> objConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (-1), (long) 'a', (java.lang.Object) headers16, intOptional25);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertNotNull(intOptional25);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int25 = strConsumerRecord24.serializedValueSize();
        int int26 = strConsumerRecord24.partition();
        long long27 = strConsumerRecord24.offset();
        long long28 = strConsumerRecord24.offset();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord24.timestampType();
        java.lang.String str30 = strConsumerRecord24.toString();
        int int31 = strConsumerRecord24.serializedValueSize();
        java.io.Serializable serializable32 = strConsumerRecord24.value();
        java.io.Serializable serializable33 = strConsumerRecord24.value();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord40.timestampType();
        int int42 = strConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord40.timestampType();
        java.lang.String str44 = strConsumerRecord40.toString();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord40.leaderEpoch();
        long long46 = strConsumerRecord40.offset();
        java.util.Optional<java.lang.Integer> intOptional47 = strConsumerRecord40.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord40.headers();
        long long49 = strConsumerRecord40.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> timestampTypeConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 97, 35L, timestampType34, strConsumerRecord40);
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord40.headers();
        int int52 = strConsumerRecord40.partition();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, (long) ' ', "", (java.io.Serializable) timestampType53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int65 = strConsumerRecord64.serializedValueSize();
        int int66 = strConsumerRecord64.partition();
        long long67 = strConsumerRecord64.offset();
        int int68 = strConsumerRecord64.partition();
        java.lang.Class<?> wildcardClass69 = strConsumerRecord64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 1, (long) 97, (long) 97, timestampType53, (long) 97, (int) (short) 1, 35, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 10, (long) 'a', "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) 97);
        int int72 = strConsumerRecord71.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", 35, (long) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", (java.io.Serializable) timestampType73);
        int int75 = strConsumerRecord74.partition();
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 10 + "'", serializable32, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (short) 10 + "'", serializable33, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str44, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 52L + "'", long46 == 52L);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int23 = strConsumerRecord22.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional24 = strConsumerRecord22.leaderEpoch();
        java.lang.String str25 = strConsumerRecord22.key();
        long long26 = strConsumerRecord22.offset();
        java.lang.String str27 = strConsumerRecord22.toString();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord22.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (int) (short) 10, (long) '#', (long) 97, timestampType28, (long) 32, (int) (short) -1, (int) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord44.headers();
        org.apache.kafka.common.header.Headers headers46 = strConsumerRecord44.headers();
        int int47 = strConsumerRecord44.serializedKeySize();
        int int48 = strConsumerRecord44.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 97, (long) 10, timestampType28, (long) (short) 0, (int) '#', (int) ' ', "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType> charSequenceConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (int) (byte) 1, (-1L), (long) 52, timestampType4, (long) (-1), (int) '#', 0, charSequence8, timestampType49);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(intOptional24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 0, (long) '#', "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", serializable4);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        int int10 = strConsumerRecord5.serializedValueSize();
        int int11 = strConsumerRecord5.serializedKeySize();
        int int12 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long28 = strConsumerRecord27.timestamp();
        int int29 = strConsumerRecord27.partition();
        java.lang.String str30 = strConsumerRecord27.topic();
        long long31 = strConsumerRecord27.offset();
        java.io.Serializable serializable32 = strConsumerRecord27.value();
        long long33 = strConsumerRecord27.checksum();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord27.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '4', (-1L), (long) 0, timestampType16, (java.lang.Long) 10L, (int) (short) 10, 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) ' ', headers34);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.lang.String str37 = strConsumerRecord35.topic();
        int int38 = strConsumerRecord35.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 10 + "'", serializable32, (short) 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        int int11 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        int int13 = strConsumerRecord5.partition();
        java.lang.String str14 = strConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        int int16 = strConsumerRecord5.partition();
        int int17 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        java.lang.String str11 = strConsumerRecord5.key();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        int int16 = strConsumerRecord5.serializedValueSize();
        java.lang.String str17 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.lang.String str11 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.String str13 = strConsumerRecord5.toString();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.lang.String str15 = strConsumerRecord5.topic();
        long long16 = strConsumerRecord5.offset();
        int int17 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) (byte) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 52L);
        java.lang.String str6 = strConsumerRecord5.key();
        long long7 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass9 = intOptional8.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str6, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        java.lang.String str15 = strConsumerRecord9.toString();
        int int16 = strConsumerRecord9.partition();
        java.lang.String str17 = strConsumerRecord9.toString();
        java.lang.String str18 = strConsumerRecord9.toString();
        java.io.Serializable serializable19 = strConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int32 = strConsumerRecord31.serializedValueSize();
        long long33 = strConsumerRecord31.timestamp();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord31.headers();
        int int35 = strConsumerRecord31.partition();
        long long36 = strConsumerRecord31.offset();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord31.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", 97, (-1L), (long) (byte) 0, timestampType20, (java.lang.Long) (-1L), 35, 32, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 32, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value =  )", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = NoTimestampType)", headers37);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertNotNull(headers37);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType22, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str46 = strConsumerRecord45.topic();
        java.lang.Class<?> wildcardClass47 = strConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType22, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long59 = strConsumerRecord58.timestamp();
        int int60 = strConsumerRecord58.partition();
        java.lang.String str61 = strConsumerRecord58.topic();
        long long62 = strConsumerRecord58.offset();
        java.lang.Class<?> wildcardClass63 = strConsumerRecord58.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers70 = strConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long77 = strConsumerRecord76.timestamp();
        long long78 = strConsumerRecord76.checksum();
        long long79 = strConsumerRecord76.timestamp();
        java.util.Optional<java.lang.Integer> intOptional80 = strConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 1, (long) (byte) 100, (long) 100, timestampType22, (java.lang.Long) 100L, (int) 'a', (int) (short) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass63, headers70, intOptional80);
        int int82 = strConsumerRecord81.serializedValueSize();
        long long83 = strConsumerRecord81.checksum();
        long long84 = strConsumerRecord81.offset();
        int int85 = strConsumerRecord81.partition();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 100L + "'", long83 == 100L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.lang.String str11 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.lang.String str13 = strConsumerRecord5.key();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.lang.String str15 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        java.lang.String str12 = strConsumerRecord5.key();
        long long13 = strConsumerRecord5.offset();
        long long14 = strConsumerRecord5.checksum();
        java.lang.String str15 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.String str30 = strConsumerRecord28.topic();
        int int31 = strConsumerRecord28.serializedValueSize();
        int int32 = strConsumerRecord28.serializedValueSize();
        java.lang.String str33 = strConsumerRecord28.key();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        int int10 = strConsumerRecord5.partition();
        int int11 = strConsumerRecord5.serializedKeySize();
        long long12 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.checksum();
        long long12 = strConsumerRecord9.timestamp();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord9.leaderEpoch();
        java.lang.String str14 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord25.headers();
        org.apache.kafka.common.header.Headers headers27 = strConsumerRecord25.headers();
        int int28 = strConsumerRecord25.serializedKeySize();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord25.headers();
        long long30 = strConsumerRecord25.checksum();
        java.lang.String str31 = strConsumerRecord25.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> strComparableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", 100, (long) 32, (long) (short) 0, timestampType15, (long) 100, (-1), (int) (byte) -1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)", strConsumerRecord25);
        long long33 = strConsumerRecord25.offset();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.offset();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.serializedValueSize();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)", 35, (long) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)");
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.io.Serializable, org.apache.kafka.common.header.Headers> serializableKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.kafka.common.header.Headers> serializableKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.io.Serializable, org.apache.kafka.common.header.Headers>(serializableKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str77 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord68, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78);
        java.lang.String str80 = strConsumerRecord68.topic();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType49, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType59, (java.lang.Object) wildcardClass81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType20, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType49);
        long long84 = strConsumerRecord83.timestamp();
        long long85 = strConsumerRecord83.timestamp();
        int int86 = strConsumerRecord83.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 100L + "'", long85 == 100L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.offset();
        long long10 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        java.lang.String str15 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int30 = strConsumerRecord29.serializedValueSize();
        int int31 = strConsumerRecord29.partition();
        long long32 = strConsumerRecord29.offset();
        long long33 = strConsumerRecord29.offset();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord29.timestampType();
        java.io.Serializable serializable35 = strConsumerRecord29.value();
        java.lang.Class<?> wildcardClass36 = strConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) 'a', (long) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass36);
        java.io.Serializable serializable38 = strConsumerRecord37.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>> objConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (int) (byte) -1, (long) 0, 0L, timestampType16, (-1L), 100, 35, (java.lang.Object) strConsumerRecord37, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)");
        long long41 = strConsumerRecord37.checksum();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 10 + "'", serializable35, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(serializable38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        long long13 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        java.lang.String str15 = strConsumerRecord5.toString();
        java.lang.String str16 = strConsumerRecord5.key();
        java.lang.String str17 = strConsumerRecord5.topic();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str15, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        java.lang.String str20 = strConsumerRecord17.toString();
        int int21 = strConsumerRecord17.partition();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType22);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str34 = strConsumerRecord33.topic();
        java.lang.Class<?> wildcardClass35 = strConsumerRecord33.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int45 = strConsumerRecord44.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord44.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str53 = strConsumerRecord52.topic();
        org.apache.kafka.common.record.TimestampType timestampType54 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord44, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType54);
        java.lang.String str56 = strConsumerRecord44.topic();
        long long57 = strConsumerRecord44.offset();
        long long58 = strConsumerRecord44.offset();
        java.lang.String str59 = strConsumerRecord44.toString();
        int int60 = strConsumerRecord44.serializedKeySize();
        org.apache.kafka.common.header.Headers headers61 = strConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.GenericDeclaration> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (-1), (long) 1, (long) 52, timestampType22, (java.lang.Long) 35L, (int) (short) 100, 52, "", (java.lang.reflect.GenericDeclaration) wildcardClass35, headers61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int73 = strConsumerRecord72.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional74 = strConsumerRecord72.leaderEpoch();
        java.lang.String str75 = strConsumerRecord72.key();
        org.apache.kafka.common.header.Headers headers76 = strConsumerRecord72.headers();
        long long77 = strConsumerRecord72.offset();
        long long78 = strConsumerRecord72.checksum();
        int int79 = strConsumerRecord72.partition();
        java.lang.String str80 = strConsumerRecord72.key();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (int) '#', (long) 'a', (long) (short) 0, timestampType22, (long) 1, 0, 0, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) wildcardClass81);
        long long83 = strConsumerRecord82.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str20, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str59, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        java.lang.String str24 = strConsumerRecord12.topic();
        long long25 = strConsumerRecord12.offset();
        long long26 = strConsumerRecord12.offset();
        java.lang.String str27 = strConsumerRecord12.toString();
        int int28 = strConsumerRecord12.serializedValueSize();
        int int29 = strConsumerRecord12.partition();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)", (int) (short) 1, (long) 100, 0L, timestampType30, (long) (byte) 1, (int) (byte) 100, 10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        int int37 = strConsumerRecord36.partition();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.lang.String str16 = strConsumerRecord5.key();
        java.lang.String str17 = strConsumerRecord5.toString();
        java.lang.String str18 = strConsumerRecord5.toString();
        java.lang.Class<?> wildcardClass19 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        int int12 = strConsumerRecord5.partition();
        int int13 = strConsumerRecord5.partition();
        java.lang.String str14 = strConsumerRecord5.toString();
        int int15 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord13.headers();
        int int16 = strConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers18 = strConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int30 = strConsumerRecord29.serializedValueSize();
        int int31 = strConsumerRecord29.partition();
        long long32 = strConsumerRecord29.offset();
        long long33 = strConsumerRecord29.timestamp();
        int int34 = strConsumerRecord29.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int46 = strConsumerRecord45.serializedValueSize();
        int int47 = strConsumerRecord45.partition();
        java.lang.String str48 = strConsumerRecord45.topic();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord45.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (-1), (long) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) timestampType49);
        long long51 = strConsumerRecord50.checksum();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord50.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (int) (byte) -1, (long) (byte) 100, (long) 0, timestampType19, (java.lang.Long) 1L, 0, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType35, headers52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord62.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord62.timestampType();
        java.lang.String str65 = strConsumerRecord62.toString();
        int int66 = strConsumerRecord62.partition();
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord62.timestampType();
        int int68 = strConsumerRecord62.serializedValueSize();
        long long69 = strConsumerRecord62.checksum();
        org.apache.kafka.common.header.Headers headers70 = strConsumerRecord62.headers();
        long long71 = strConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional72 = strConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long80 = strConsumerRecord79.timestamp();
        int int81 = strConsumerRecord79.partition();
        java.lang.String str82 = strConsumerRecord79.topic();
        long long83 = strConsumerRecord79.offset();
        java.io.Serializable serializable84 = strConsumerRecord79.value();
        java.lang.String str85 = strConsumerRecord79.topic();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord79.timestampType();
        long long87 = strConsumerRecord79.offset();
        int int88 = strConsumerRecord79.serializedValueSize();
        java.lang.String str89 = strConsumerRecord79.toString();
        long long90 = strConsumerRecord79.checksum();
        org.apache.kafka.common.header.Headers headers91 = strConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", (int) '#', (long) (byte) 10, (long) ' ', timestampType35, (java.lang.Long) 10L, (int) (short) 1, (int) '#', intOptional72, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 32, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value =  )", headers91);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str65, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 52L + "'", long83 == 52L);
        org.junit.Assert.assertEquals("'" + serializable84 + "' != '" + (short) 10 + "'", serializable84, (short) 10);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 52L + "'", long87 == 52L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str89, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertNotNull(headers91);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType10);
        java.lang.String str12 = strConsumerRecord11.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord11.timestampType();
        int int14 = strConsumerRecord11.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord11.leaderEpoch();
        java.lang.String str16 = strConsumerRecord11.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int18 = strConsumerRecord17.serializedValueSize();
        int int19 = strConsumerRecord17.partition();
        java.lang.String str20 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (-1), (long) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) timestampType21);
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord41.timestampType();
        int int43 = strConsumerRecord41.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional44 = strConsumerRecord41.leaderEpoch();
        java.lang.String str45 = strConsumerRecord41.toString();
        java.io.Serializable serializable46 = strConsumerRecord41.value();
        org.apache.kafka.common.header.Headers headers47 = strConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers55 = strConsumerRecord54.headers();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord54.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long63 = strConsumerRecord62.timestamp();
        long long64 = strConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional65 = strConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Comparable<java.lang.String>> headersConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (short) -1, 0L, timestampType32, (java.lang.Long) 0L, 0, 97, headers47, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", headers56, intOptional65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord72.timestampType();
        int int74 = strConsumerRecord72.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional75 = strConsumerRecord72.leaderEpoch();
        java.lang.String str76 = strConsumerRecord72.toString();
        java.util.Optional<java.lang.Integer> intOptional77 = strConsumerRecord72.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", 97, (long) (byte) -1, (long) (byte) 0, timestampType21, (java.lang.Long) 52L, (int) 'a', (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", headers47, intOptional77);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 10, (long) 1, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        java.lang.String str80 = strConsumerRecord79.key();
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str45, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 10 + "'", serializable46, (short) 10);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str76, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str80, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.lang.String str15 = strConsumerRecord5.topic();
        long long16 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord5.leaderEpoch();
        java.lang.String str18 = strConsumerRecord5.key();
        java.lang.String str19 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord5.timestampType();
        long long21 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers7 = strConsumerRecord5.headers();
        int int8 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        java.lang.String str10 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.checksum();
        java.lang.String str9 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        long long12 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int20 = strConsumerRecord19.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional21 = strConsumerRecord19.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str28 = strConsumerRecord27.topic();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord19, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType29, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int47 = strConsumerRecord46.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional48 = strConsumerRecord46.leaderEpoch();
        java.lang.String str49 = strConsumerRecord46.topic();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int67 = strConsumerRecord66.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str75 = strConsumerRecord74.topic();
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord66, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType76);
        int int78 = strConsumerRecord66.serializedValueSize();
        java.lang.String str79 = strConsumerRecord66.key();
        java.lang.String str80 = strConsumerRecord66.key();
        java.util.Optional<java.lang.Integer> intOptional81 = strConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType29, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType50, headers57, intOptional81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long89 = strConsumerRecord88.timestamp();
        long long90 = strConsumerRecord88.timestamp();
        java.io.Serializable serializable91 = strConsumerRecord88.value();
        int int92 = strConsumerRecord88.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) 'a', (long) (-1), (java.io.Serializable) timestampType29, strConsumerRecord88);
        org.apache.kafka.common.header.Headers headers94 = strConsumerRecord88.headers();
        org.apache.kafka.common.record.TimestampType timestampType95 = strConsumerRecord88.timestampType();
        java.lang.String str96 = strConsumerRecord88.key();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable91 + "' != '" + (short) 10 + "'", serializable91, (short) 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>(typeKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) ' ', 52L, "", (java.io.Serializable) (short) -1);
        java.lang.String str40 = strConsumerRecord39.toString();
        long long41 = strConsumerRecord39.offset();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord39.timestampType();
        java.lang.String str43 = strConsumerRecord39.key();
        long long44 = strConsumerRecord39.checksum();
        int int45 = strConsumerRecord39.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str40, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long18 = strConsumerRecord17.timestamp();
        java.lang.String str19 = strConsumerRecord17.topic();
        java.lang.String str20 = strConsumerRecord17.key();
        int int21 = strConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord17.timestampType();
        java.lang.reflect.GenericDeclaration genericDeclaration27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord33.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord33.timestampType();
        java.lang.String str36 = strConsumerRecord33.toString();
        int int37 = strConsumerRecord33.partition();
        int int38 = strConsumerRecord33.partition();
        long long39 = strConsumerRecord33.offset();
        int int40 = strConsumerRecord33.partition();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord33.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Iterable<org.apache.kafka.common.header.Header>> genericDeclarationConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", 35, (long) 'a', (long) 52, timestampType23, (long) (short) 10, (int) (short) 0, 97, genericDeclaration27, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int53 = strConsumerRecord52.serializedValueSize();
        int int54 = strConsumerRecord52.partition();
        long long55 = strConsumerRecord52.offset();
        long long56 = strConsumerRecord52.offset();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord52.timestampType();
        long long58 = strConsumerRecord52.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord52.timestampType();
        java.lang.Class<?> wildcardClass60 = strConsumerRecord52.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", 10, (long) (short) 100, 52L, timestampType23, (long) 'a', 0, 0, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)", (java.io.Serializable) wildcardClass60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", 52, (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)", (java.io.Serializable) (short) 100);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str36, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        int int29 = strConsumerRecord28.serializedKeySize();
        java.lang.String str30 = strConsumerRecord28.toString();
        java.util.Optional<java.lang.Integer> intOptional31 = strConsumerRecord28.leaderEpoch();
        java.lang.String str32 = strConsumerRecord28.topic();
        java.lang.String str33 = strConsumerRecord28.toString();
        java.io.Serializable serializable34 = strConsumerRecord28.value();
        java.lang.String str35 = strConsumerRecord28.key();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str30, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str32, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str33, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + serializable34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        long long9 = strConsumerRecord5.timestamp();
        long long10 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.serializedValueSize();
        java.lang.String str9 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        java.lang.String str11 = strConsumerRecord5.toString();
        java.lang.String str12 = strConsumerRecord5.topic();
        java.lang.String str13 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.topic();
        java.lang.String str14 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        long long17 = strConsumerRecord5.offset();
        int int18 = strConsumerRecord5.serializedKeySize();
        long long19 = strConsumerRecord5.timestamp();
        java.lang.Class<?> wildcardClass20 = strConsumerRecord5.getClass();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str14, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.lang.String str12 = strConsumerRecord9.toString();
        int int13 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType35, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long51 = strConsumerRecord50.timestamp();
        int int52 = strConsumerRecord50.partition();
        java.io.Serializable serializable53 = strConsumerRecord50.value();
        java.lang.Class<?> wildcardClass54 = serializable53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long61 = strConsumerRecord60.timestamp();
        int int62 = strConsumerRecord60.partition();
        java.lang.String str63 = strConsumerRecord60.topic();
        long long64 = strConsumerRecord60.offset();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType35, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.GenericDeclaration) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, 1L, timestampType14, (long) (short) -1, 0, (int) (short) -1, "hi!", (java.io.Serializable) timestampType35);
        long long68 = strConsumerRecord67.timestamp();
        org.apache.kafka.common.header.Headers headers69 = strConsumerRecord67.headers();
        java.lang.Class<?> wildcardClass70 = strConsumerRecord67.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 10 + "'", serializable53, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        java.lang.String str15 = strConsumerRecord9.key();
        java.lang.String str16 = strConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long28 = strConsumerRecord27.timestamp();
        long long29 = strConsumerRecord27.checksum();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord27.leaderEpoch();
        long long31 = strConsumerRecord27.timestamp();
        long long32 = strConsumerRecord27.offset();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord27.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord27.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str49 = strConsumerRecord48.topic();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord48.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int62 = strConsumerRecord61.serializedValueSize();
        int int63 = strConsumerRecord61.partition();
        org.apache.kafka.common.header.Headers headers64 = strConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int71 = strConsumerRecord70.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional72 = strConsumerRecord70.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType50, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers64, intOptional72);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int85 = strConsumerRecord84.serializedValueSize();
        int int86 = strConsumerRecord84.partition();
        org.apache.kafka.common.header.Headers headers87 = strConsumerRecord84.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType50, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers87);
        long long89 = strConsumerRecord88.offset();
        java.lang.String str90 = strConsumerRecord88.topic();
        java.lang.String str91 = strConsumerRecord88.toString();
        java.io.Serializable serializable92 = strConsumerRecord88.value();
        java.util.Optional<java.lang.Integer> intOptional93 = strConsumerRecord88.leaderEpoch();
        int int94 = strConsumerRecord88.partition();
        int int95 = strConsumerRecord88.serializedKeySize();
        java.lang.String str96 = strConsumerRecord88.key();
        java.io.Serializable serializable97 = strConsumerRecord88.value();
        org.apache.kafka.common.header.Headers headers98 = strConsumerRecord88.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (int) (short) 10, (long) (byte) 100, (long) '4', timestampType17, (java.lang.Long) 97L, (int) (short) 100, 97, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) wildcardClass34, headers98);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertNotNull(headers87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L + "'", long89 == 1L);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str90, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str91, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertEquals("'" + serializable92 + "' != '" + (-1.0d) + "'", serializable92, (-1.0d));
        org.junit.Assert.assertNotNull(intOptional93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str96, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable97 + "' != '" + (-1.0d) + "'", serializable97, (-1.0d));
        org.junit.Assert.assertNotNull(headers98);
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        java.lang.String str7 = strConsumerRecord5.topic();
        int int8 = strConsumerRecord5.serializedKeySize();
        long long9 = strConsumerRecord5.checksum();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.timestamp();
        long long8 = strConsumerRecord5.checksum();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.serializedValueSize();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.partition();
        int int13 = strConsumerRecord5.serializedKeySize();
        java.lang.String str14 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        long long16 = strConsumerRecord5.offset();
        int int17 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        java.io.Serializable serializable21 = strConsumerRecord8.value();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord8.timestampType();
        int int24 = strConsumerRecord8.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord8.timestampType();
        java.util.Optional<java.lang.Integer> intOptional26 = strConsumerRecord8.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 10 + "'", serializable21, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional26);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int23 = strConsumerRecord22.serializedValueSize();
        int int24 = strConsumerRecord22.partition();
        long long25 = strConsumerRecord22.offset();
        long long26 = strConsumerRecord22.offset();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord22.timestampType();
        java.lang.String str28 = strConsumerRecord22.toString();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord22.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        int int37 = strConsumerRecord35.partition();
        long long38 = strConsumerRecord35.offset();
        long long39 = strConsumerRecord35.offset();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord35.headers();
        long long41 = strConsumerRecord35.checksum();
        int int42 = strConsumerRecord35.serializedKeySize();
        int int43 = strConsumerRecord35.serializedValueSize();
        long long44 = strConsumerRecord35.offset();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 0, 35L, 100L, timestampType11, (java.lang.Long) 52L, 10, (int) (byte) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable16, headers29, intOptional45);
        java.lang.String str47 = strConsumerRecord46.topic();
        int int48 = strConsumerRecord46.partition();
        int int49 = strConsumerRecord46.partition();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str47, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.partition();
        long long15 = strConsumerRecord5.checksum();
        long long16 = strConsumerRecord5.timestamp();
        java.lang.Class<?> wildcardClass17 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        long long17 = strConsumerRecord9.offset();
        int int18 = strConsumerRecord9.serializedValueSize();
        java.lang.String str19 = strConsumerRecord9.key();
        java.lang.String str20 = strConsumerRecord9.key();
        int int21 = strConsumerRecord9.serializedValueSize();
        int int22 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord32.headers();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord32.headers();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord32.leaderEpoch();
        long long36 = strConsumerRecord32.offset();
        java.io.Serializable serializable37 = strConsumerRecord32.value();
        org.apache.kafka.common.header.Headers headers38 = strConsumerRecord32.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long49 = strConsumerRecord48.timestamp();
        int int50 = strConsumerRecord48.partition();
        java.lang.String str51 = strConsumerRecord48.topic();
        long long52 = strConsumerRecord48.offset();
        java.io.Serializable serializable53 = strConsumerRecord48.value();
        java.lang.String str54 = strConsumerRecord48.topic();
        org.apache.kafka.common.record.TimestampType timestampType55 = strConsumerRecord48.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType66 = strConsumerRecord65.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType55, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType66);
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord67.timestampType();
        java.util.Optional<java.lang.Integer> intOptional69 = strConsumerRecord67.leaderEpoch();
        int int70 = strConsumerRecord67.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord67.timestampType();
        org.apache.kafka.common.header.Headers headers72 = strConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str79 = strConsumerRecord78.topic();
        java.io.Serializable serializable80 = strConsumerRecord78.value();
        java.lang.String str81 = strConsumerRecord78.topic();
        java.lang.String str82 = strConsumerRecord78.toString();
        java.lang.String str83 = strConsumerRecord78.key();
        java.util.Optional<java.lang.Integer> intOptional84 = strConsumerRecord78.leaderEpoch();
        org.apache.kafka.common.header.Headers headers85 = strConsumerRecord78.headers();
        org.apache.kafka.common.header.Headers headers86 = strConsumerRecord78.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Iterable<org.apache.kafka.common.header.Header>> headersConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = 1.0)", (int) (byte) 1, (long) 97, 97L, timestampType23, (java.lang.Long) 32L, 0, (int) (byte) 0, headers38, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers72, headers86);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (short) 0 + "'", serializable37, (short) 0);
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 10 + "'", serializable53, (short) 10);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 10 + "'", serializable80, (short) 10);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str82, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(intOptional84);
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertNotNull(headers86);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.offset();
        long long12 = strConsumerRecord9.offset();
        java.lang.String str13 = strConsumerRecord9.key();
        int int14 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 52L, (long) (short) 1, timestampType15, 10L, (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable20);
        int int22 = strConsumerRecord21.serializedValueSize();
        java.io.Serializable serializable23 = strConsumerRecord21.value();
        java.lang.String str24 = strConsumerRecord21.key();
        java.io.Serializable serializable25 = strConsumerRecord21.value();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(serializable23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str24, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertNull(serializable25);
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        java.lang.Class<?> wildcardClass17 = serializable16.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long28 = strConsumerRecord27.timestamp();
        int int29 = strConsumerRecord27.partition();
        java.lang.String str30 = strConsumerRecord27.topic();
        long long31 = strConsumerRecord27.offset();
        java.io.Serializable serializable32 = strConsumerRecord27.value();
        long long33 = strConsumerRecord27.checksum();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord27.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '4', (-1L), (long) 0, timestampType16, (java.lang.Long) 10L, (int) (short) 10, 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) ' ', headers34);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.lang.String str37 = strConsumerRecord35.topic();
        long long38 = strConsumerRecord35.offset();
        java.lang.String str39 = strConsumerRecord35.toString();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord35.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 10 + "'", serializable32, (short) 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), value =  )" + "'", str39, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), value =  )");
        org.junit.Assert.assertNotNull(intOptional40);
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.offset();
        java.lang.String str14 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", 0, (long) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", serializable4);
        int int6 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intOptional7);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        java.lang.String str57 = strConsumerRecord53.topic();
        int int58 = strConsumerRecord53.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str57, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord14.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord14.timestampType();
        java.lang.String str17 = strConsumerRecord14.toString();
        int int18 = strConsumerRecord14.partition();
        java.lang.String str19 = strConsumerRecord14.key();
        int int20 = strConsumerRecord14.partition();
        long long21 = strConsumerRecord14.checksum();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord14.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", 97, (long) (short) 1, 32L, timestampType4, (long) '4', 100, (int) (byte) 100, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)", (java.io.Serializable) timestampType22);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        int int15 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.key();
        long long7 = strConsumerRecord5.checksum();
        int int8 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType10);
        java.lang.String str12 = strConsumerRecord11.topic();
        java.lang.String str13 = strConsumerRecord11.topic();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord11.headers();
        int int15 = strConsumerRecord11.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int25 = strConsumerRecord24.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional26 = strConsumerRecord24.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str33 = strConsumerRecord32.topic();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord24, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType34, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int52 = strConsumerRecord51.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional53 = strConsumerRecord51.leaderEpoch();
        java.lang.String str54 = strConsumerRecord51.topic();
        org.apache.kafka.common.record.TimestampType timestampType55 = strConsumerRecord51.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers62 = strConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional73 = strConsumerRecord71.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str80 = strConsumerRecord79.topic();
        org.apache.kafka.common.record.TimestampType timestampType81 = strConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord71, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType81);
        int int83 = strConsumerRecord71.serializedValueSize();
        java.lang.String str84 = strConsumerRecord71.key();
        java.lang.String str85 = strConsumerRecord71.key();
        java.util.Optional<java.lang.Integer> intOptional86 = strConsumerRecord71.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType34, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType55, headers62, intOptional86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 1, (long) 'a', (long) (short) 1, timestampType34, (long) 10, (int) '#', (int) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)", 35, (long) 97, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(intOptional86);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        long long11 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        int int13 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        int int11 = strConsumerRecord5.serializedValueSize();
        java.lang.String str12 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord13.leaderEpoch();
        java.lang.String str16 = strConsumerRecord13.key();
        long long17 = strConsumerRecord13.checksum();
        int int18 = strConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers19 = strConsumerRecord13.headers();
        long long20 = strConsumerRecord13.offset();
        java.lang.String str21 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord36.timestampType();
        java.lang.String str39 = strConsumerRecord36.toString();
        int int40 = strConsumerRecord36.partition();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType41);
        int int43 = strConsumerRecord42.partition();
        int int44 = strConsumerRecord42.partition();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 1, 0L, 1L, timestampType22, (long) (-1), (-1), 1, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (java.io.Serializable) timestampType45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord56.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord56.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord56.timestampType();
        java.lang.String str60 = strConsumerRecord56.key();
        long long61 = strConsumerRecord56.timestamp();
        long long62 = strConsumerRecord56.offset();
        java.lang.String str63 = strConsumerRecord56.toString();
        long long64 = strConsumerRecord56.checksum();
        org.apache.kafka.common.header.Headers headers65 = strConsumerRecord56.headers();
        java.lang.String str66 = strConsumerRecord56.topic();
        long long67 = strConsumerRecord56.offset();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord56.leaderEpoch();
        java.lang.String str69 = strConsumerRecord56.key();
        java.lang.String str70 = strConsumerRecord56.toString();
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", 0, (long) 'a', (-1L), timestampType45, 0L, (int) (short) 1, (int) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) timestampType71);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str39, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str63, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str70, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        java.lang.String str21 = strConsumerRecord8.key();
        java.lang.String str22 = strConsumerRecord8.key();
        int int23 = strConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord8.timestampType();
        long long25 = strConsumerRecord8.checksum();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType10);
        java.lang.String str12 = strConsumerRecord11.topic();
        java.lang.String str13 = strConsumerRecord11.topic();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord11.headers();
        int int15 = strConsumerRecord11.partition();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.lang.String str13 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        int int13 = strConsumerRecord5.serializedValueSize();
        int int14 = strConsumerRecord5.serializedValueSize();
        int int15 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.offset();
        int int13 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.key();
        int int12 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.partition();
        java.lang.String str15 = strConsumerRecord5.key();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        int int14 = strConsumerRecord12.partition();
        java.lang.Class<?> wildcardClass15 = strConsumerRecord12.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long22 = strConsumerRecord21.timestamp();
        long long23 = strConsumerRecord21.checksum();
        long long24 = strConsumerRecord21.timestamp();
        java.lang.String str25 = strConsumerRecord21.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> typeConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 0L, (java.lang.reflect.Type) wildcardClass15, strConsumerRecord21);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 0, (long) (byte) 100, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) 0L);
        java.lang.String str28 = strConsumerRecord27.toString();
        int int29 = strConsumerRecord27.partition();
        int int30 = strConsumerRecord27.serializedKeySize();
        long long31 = strConsumerRecord27.timestamp();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)" + "'", str28, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType22, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType53, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType65, headers74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int82 = strConsumerRecord81.serializedValueSize();
        int int83 = strConsumerRecord81.partition();
        long long84 = strConsumerRecord81.offset();
        java.lang.String str85 = strConsumerRecord81.key();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord81.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (-1), 100L, (long) (short) 1, timestampType22, (long) (byte) 1, (int) (byte) 10, (int) (short) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType65, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", 35, 0L, (-1L), timestampType22, (long) 10, (int) '#', 52, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) 'a');
        java.lang.String str94 = strConsumerRecord93.key();
        long long95 = strConsumerRecord93.checksum();
        java.io.Serializable serializable96 = strConsumerRecord93.value();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 52L + "'", long84 == 52L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)" + "'", str94, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 10L + "'", long95 == 10L);
        org.junit.Assert.assertEquals("'" + serializable96 + "' != '" + 'a' + "'", serializable96, 'a');
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        int int23 = strConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType24, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long40 = strConsumerRecord39.timestamp();
        int int41 = strConsumerRecord39.partition();
        java.io.Serializable serializable42 = strConsumerRecord39.value();
        java.lang.Class<?> wildcardClass43 = serializable42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long50 = strConsumerRecord49.timestamp();
        int int51 = strConsumerRecord49.partition();
        java.lang.String str52 = strConsumerRecord49.topic();
        long long53 = strConsumerRecord49.offset();
        java.lang.Class<?> wildcardClass54 = strConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType24, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass43, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        java.io.Serializable serializable60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, 0L, 0L, timestampType24, (long) 10, (int) '#', 10, "hi!", serializable60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (byte) 100, (long) (short) -1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", serializable60);
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord62.leaderEpoch();
        java.lang.String str64 = strConsumerRecord62.key();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 10 + "'", serializable42, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str64, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) ' ', (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        int int11 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        java.lang.String str21 = strConsumerRecord8.key();
        java.lang.String str22 = strConsumerRecord8.key();
        int int23 = strConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord8.timestampType();
        java.lang.String str25 = strConsumerRecord8.key();
        java.lang.String str26 = strConsumerRecord8.toString();
        java.lang.String str27 = strConsumerRecord8.toString();
        java.io.Serializable serializable28 = strConsumerRecord8.value();
        int int29 = strConsumerRecord8.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str26, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (short) 10 + "'", serializable28, (short) 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.lang.String str14 = strConsumerRecord5.toString();
        long long15 = strConsumerRecord5.checksum();
        long long16 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord5.leaderEpoch();
        long long18 = strConsumerRecord5.timestamp();
        long long19 = strConsumerRecord5.timestamp();
        int int20 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.offset();
        java.lang.String str10 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        int int14 = strConsumerRecord5.serializedKeySize();
        java.lang.String str15 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord5.timestampType();
        int int17 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.checksum();
        java.lang.String str9 = strConsumerRecord5.topic();
        int int10 = strConsumerRecord5.serializedValueSize();
        java.lang.String str11 = strConsumerRecord5.toString();
        java.lang.String str12 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        long long11 = strConsumerRecord5.offset();
        long long12 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        java.lang.String str24 = strConsumerRecord8.key();
        long long25 = strConsumerRecord8.checksum();
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord8.headers();
        long long27 = strConsumerRecord8.offset();
        int int28 = strConsumerRecord8.partition();
        int int29 = strConsumerRecord8.serializedKeySize();
        java.lang.String str30 = strConsumerRecord8.key();
        java.io.Serializable serializable31 = strConsumerRecord8.value();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 10 + "'", serializable31, (short) 10);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        java.io.Serializable serializable11 = strConsumerRecord9.value();
        java.lang.String str12 = strConsumerRecord9.key();
        java.lang.String str13 = strConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", 10, 100L, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", (java.io.Serializable) timestampType14);
        java.lang.Class<?> wildcardClass16 = strConsumerRecord15.getClass();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 0 + "'", serializable11, (short) 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str10 = strConsumerRecord9.topic();
        java.lang.Class<?> wildcardClass11 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 10, (long) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass11);
        java.io.Serializable serializable13 = strConsumerRecord12.value();
        java.lang.Class<?> wildcardClass14 = serializable13.getClass();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(serializable13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        java.lang.String str13 = strConsumerRecord5.key();
        int int14 = strConsumerRecord5.serializedKeySize();
        java.lang.String str15 = strConsumerRecord5.toString();
        long long16 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedKeySize();
        int int16 = strConsumerRecord13.partition();
        java.io.Serializable serializable17 = strConsumerRecord13.value();
        int int18 = strConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers19 = strConsumerRecord13.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        int int27 = strConsumerRecord25.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord25.timestampType();
        java.lang.String str29 = strConsumerRecord25.toString();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord25.leaderEpoch();
        long long31 = strConsumerRecord25.offset();
        int int32 = strConsumerRecord25.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional33 = strConsumerRecord25.leaderEpoch();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int41 = strConsumerRecord40.serializedValueSize();
        int int42 = strConsumerRecord40.partition();
        long long43 = strConsumerRecord40.offset();
        long long44 = strConsumerRecord40.offset();
        long long45 = strConsumerRecord40.checksum();
        long long46 = strConsumerRecord40.checksum();
        long long47 = strConsumerRecord40.timestamp();
        int int48 = strConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = strConsumerRecord40.leaderEpoch();
        org.apache.kafka.common.header.Headers headers50 = strConsumerRecord40.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Iterable<org.apache.kafka.common.header.Header>> headerIterableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", 32, (long) 52, (long) 1, timestampType4, (java.lang.Long) 32L, (int) (byte) 10, (int) (short) 0, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers19, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers34, headers50);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str29, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertNotNull(headers50);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.io.Serializable serializable12 = strConsumerRecord9.value();
        java.lang.Class<?> wildcardClass13 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, 52L, "", (java.io.Serializable) wildcardClass13);
        java.io.Serializable serializable15 = strConsumerRecord14.value();
        java.lang.String str16 = strConsumerRecord14.key();
        int int17 = strConsumerRecord14.serializedKeySize();
        int int18 = strConsumerRecord14.serializedValueSize();
        int int19 = strConsumerRecord14.serializedKeySize();
        int int20 = strConsumerRecord14.serializedKeySize();
        java.lang.String str21 = strConsumerRecord14.key();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(serializable15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.lang.String str7 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(headers8);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        java.lang.Class<?> wildcardClass26 = strConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType14, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass26);
        int int28 = strConsumerRecord27.partition();
        java.lang.String str29 = strConsumerRecord27.topic();
        java.lang.String str30 = strConsumerRecord27.toString();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        int int15 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord5.leaderEpoch();
        long long18 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.lang.String str7 = strConsumerRecord5.key();
        long long8 = strConsumerRecord5.timestamp();
        java.lang.String str9 = strConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        long long12 = strConsumerRecord5.offset();
        java.lang.String str13 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.lang.Class<?> wildcardClass15 = headers14.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        int int10 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        java.lang.String str12 = strConsumerRecord5.topic();
        java.lang.String str13 = strConsumerRecord5.topic();
        long long14 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        int int10 = strConsumerRecord5.serializedKeySize();
        int int11 = strConsumerRecord5.partition();
        java.lang.Class<?> wildcardClass12 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers7 = strConsumerRecord5.headers();
        int int8 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.lang.String str13 = strConsumerRecord5.topic();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        int int12 = strConsumerRecord5.partition();
        int int13 = strConsumerRecord5.partition();
        int int14 = strConsumerRecord5.partition();
        java.lang.Class<?> wildcardClass15 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long18 = strConsumerRecord17.timestamp();
        int int19 = strConsumerRecord17.partition();
        java.lang.String str20 = strConsumerRecord17.topic();
        long long21 = strConsumerRecord17.offset();
        java.io.Serializable serializable22 = strConsumerRecord17.value();
        java.lang.String str23 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType24, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord50.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord62.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int73 = strConsumerRecord72.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional74 = strConsumerRecord72.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str81 = strConsumerRecord80.topic();
        org.apache.kafka.common.record.TimestampType timestampType82 = strConsumerRecord80.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord72, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType82);
        java.lang.String str84 = strConsumerRecord72.topic();
        java.lang.Class<?> wildcardClass85 = strConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType53, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType63, (java.lang.Object) wildcardClass85);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType24, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType53);
        long long88 = strConsumerRecord87.checksum();
        org.apache.kafka.common.header.Headers headers89 = strConsumerRecord87.headers();
        int int90 = strConsumerRecord87.serializedKeySize();
        java.io.Serializable serializable91 = strConsumerRecord87.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", 97, (long) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", serializable91);
        java.lang.Class<?> wildcardClass93 = strConsumerRecord92.getClass();
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 10 + "'", serializable22, (short) 10);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
        org.junit.Assert.assertNotNull(headers89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + serializable91 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable91.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        long long12 = strConsumerRecord5.checksum();
        long long13 = strConsumerRecord5.checksum();
        long long14 = strConsumerRecord5.checksum();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord5.headers();
        int int17 = strConsumerRecord5.serializedValueSize();
        int int18 = strConsumerRecord5.partition();
        int int19 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        int int10 = strConsumerRecord5.partition();
        java.lang.String str11 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.String str13 = strConsumerRecord5.key();
        int int14 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long22 = strConsumerRecord21.timestamp();
        int int23 = strConsumerRecord21.partition();
        java.lang.String str24 = strConsumerRecord21.topic();
        long long25 = strConsumerRecord21.offset();
        java.io.Serializable serializable26 = strConsumerRecord21.value();
        java.lang.String str27 = strConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType39 = strConsumerRecord38.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType28, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        long long42 = strConsumerRecord41.offset();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) 'a', (long) (short) 100, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", 35, (long) ' ', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (short) 10 + "'", serializable26, (short) 10);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        int int14 = strConsumerRecord12.partition();
        java.lang.Class<?> wildcardClass15 = strConsumerRecord12.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long22 = strConsumerRecord21.timestamp();
        long long23 = strConsumerRecord21.checksum();
        long long24 = strConsumerRecord21.timestamp();
        java.lang.String str25 = strConsumerRecord21.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> typeConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 0L, (java.lang.reflect.Type) wildcardClass15, strConsumerRecord21);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 0, (long) (byte) 100, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) 0L);
        long long28 = strConsumerRecord27.offset();
        java.lang.String str29 = strConsumerRecord27.toString();
        org.apache.kafka.common.header.Headers headers30 = strConsumerRecord27.headers();
        long long31 = strConsumerRecord27.checksum();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)" + "'", str29, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)");
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        java.io.Serializable serializable22 = strConsumerRecord8.value();
        int int23 = strConsumerRecord8.serializedKeySize();
        int int24 = strConsumerRecord8.partition();
        int int25 = strConsumerRecord8.serializedValueSize();
        long long26 = strConsumerRecord8.timestamp();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 10 + "'", serializable22, (short) 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (-1), (long) (short) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) true);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.lang.String str7 = strConsumerRecord5.topic();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str7, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + true + "'", serializable8, true);
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.partition();
        long long10 = strConsumerRecord5.offset();
        int int11 = strConsumerRecord5.serializedValueSize();
        long long12 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType26, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        java.lang.String str46 = strConsumerRecord43.topic();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int64 = strConsumerRecord63.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional65 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str72 = strConsumerRecord71.topic();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord63, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType73);
        int int75 = strConsumerRecord63.serializedValueSize();
        java.lang.String str76 = strConsumerRecord63.key();
        java.lang.String str77 = strConsumerRecord63.key();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType26, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType47, headers54, intOptional78);
        int int80 = strConsumerRecord79.partition();
        int int81 = strConsumerRecord79.serializedValueSize();
        int int82 = strConsumerRecord79.serializedValueSize();
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord79.headers();
        java.lang.Class<?> wildcardClass84 = headers83.getClass();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        java.lang.String str14 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        long long6 = strConsumerRecord5.offset();
        long long7 = strConsumerRecord5.timestamp();
        long long8 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.key();
        int int13 = strConsumerRecord5.serializedKeySize();
        java.lang.String str14 = strConsumerRecord5.key();
        java.lang.String str15 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        long long10 = strConsumerRecord5.checksum();
        long long11 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.lang.String str13 = strConsumerRecord5.topic();
        int int14 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        java.lang.String str8 = strConsumerRecord5.key();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        long long10 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        java.lang.Class<?> wildcardClass13 = timestampType12.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord16.timestampType();
        java.lang.String str20 = strConsumerRecord16.key();
        long long21 = strConsumerRecord16.timestamp();
        long long22 = strConsumerRecord16.offset();
        java.lang.String str23 = strConsumerRecord16.toString();
        java.io.Serializable serializable24 = strConsumerRecord16.value();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str36 = strConsumerRecord35.topic();
        java.lang.Class<?> wildcardClass37 = strConsumerRecord35.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers44 = strConsumerRecord43.headers();
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord43.headers();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord43.leaderEpoch();
        long long47 = strConsumerRecord43.offset();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord43.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long59 = strConsumerRecord58.timestamp();
        int int60 = strConsumerRecord58.partition();
        java.lang.String str61 = strConsumerRecord58.topic();
        long long62 = strConsumerRecord58.offset();
        java.io.Serializable serializable63 = strConsumerRecord58.value();
        java.lang.String str64 = strConsumerRecord58.topic();
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord75.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType65, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType76);
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord77.timestampType();
        java.util.Optional<java.lang.Integer> intOptional79 = strConsumerRecord77.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) (short) 0, (long) 1, timestampType25, (java.lang.Long) 10L, 0, (int) (short) 100, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) wildcardClass37, headers48, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 0L, (long) (byte) 100, timestampType25, 32L, (-1), (int) (byte) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100L);
        java.io.Serializable serializable87 = strConsumerRecord86.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Comparable<java.lang.String>> strConsumerRecordConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (short) 10, (long) ' ', strConsumerRecord86, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        long long90 = strConsumerRecord86.offset();
        java.lang.String str91 = strConsumerRecord86.topic();
        int int92 = strConsumerRecord86.serializedKeySize();
        org.apache.kafka.common.header.Headers headers93 = strConsumerRecord86.headers();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertEquals("'" + serializable63 + "' != '" + (short) 10 + "'", serializable63, (short) 10);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + serializable87 + "' != '" + 100L + "'", serializable87, 100L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str91, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(headers93);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        java.lang.Class<?> wildcardClass43 = strConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType18, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass43);
        long long45 = strConsumerRecord44.offset();
        int int46 = strConsumerRecord44.serializedKeySize();
        long long47 = strConsumerRecord44.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord44.timestampType();
        int int49 = strConsumerRecord44.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        long long13 = strConsumerRecord9.offset();
        long long14 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long31 = strConsumerRecord30.timestamp();
        int int32 = strConsumerRecord30.partition();
        java.lang.String str33 = strConsumerRecord30.topic();
        long long34 = strConsumerRecord30.offset();
        java.io.Serializable serializable35 = strConsumerRecord30.value();
        java.lang.String str36 = strConsumerRecord30.topic();
        java.io.Serializable serializable37 = strConsumerRecord30.value();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long48 = strConsumerRecord47.timestamp();
        long long49 = strConsumerRecord47.timestamp();
        java.io.Serializable serializable50 = strConsumerRecord47.value();
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord47.timestampType();
        java.lang.String str52 = strConsumerRecord47.toString();
        java.lang.Class<?> wildcardClass53 = strConsumerRecord47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long61 = strConsumerRecord60.timestamp();
        long long62 = strConsumerRecord60.checksum();
        long long63 = strConsumerRecord60.timestamp();
        java.lang.String str64 = strConsumerRecord60.topic();
        long long65 = strConsumerRecord60.timestamp();
        java.io.Serializable serializable66 = strConsumerRecord60.value();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord60.headers();
        long long68 = strConsumerRecord60.checksum();
        org.apache.kafka.common.header.Headers headers69 = strConsumerRecord60.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord75.timestampType();
        java.io.Serializable serializable77 = strConsumerRecord75.value();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord75.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) '4', 32L, (long) (byte) 0, timestampType38, (java.lang.Long) 35L, 35, 97, (java.lang.reflect.AnnotatedElement) wildcardClass53, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", headers69, intOptional78);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 1, 35L, 10L, timestampType15, (java.lang.Long) 10L, (int) (byte) 100, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", headers69);
        java.lang.Class<?> wildcardClass81 = timestampType15.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 10 + "'", serializable35, (short) 10);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (short) 10 + "'", serializable37, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 10 + "'", serializable50, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str52, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (short) 10 + "'", serializable66, (short) 10);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable77 + "' != '" + (short) 10 + "'", serializable77, (short) 10);
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        long long14 = strConsumerRecord9.timestamp();
        long long15 = strConsumerRecord9.offset();
        java.lang.String str16 = strConsumerRecord9.toString();
        java.io.Serializable serializable17 = strConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str29 = strConsumerRecord28.topic();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord36.headers();
        org.apache.kafka.common.header.Headers headers38 = strConsumerRecord36.headers();
        java.util.Optional<java.lang.Integer> intOptional39 = strConsumerRecord36.leaderEpoch();
        long long40 = strConsumerRecord36.offset();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord36.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long52 = strConsumerRecord51.timestamp();
        int int53 = strConsumerRecord51.partition();
        java.lang.String str54 = strConsumerRecord51.topic();
        long long55 = strConsumerRecord51.offset();
        java.io.Serializable serializable56 = strConsumerRecord51.value();
        java.lang.String str57 = strConsumerRecord51.topic();
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord51.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType69 = strConsumerRecord68.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType58, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType69);
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord70.timestampType();
        java.util.Optional<java.lang.Integer> intOptional72 = strConsumerRecord70.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) (short) 0, (long) 1, timestampType18, (java.lang.Long) 10L, 0, (int) (short) 100, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) wildcardClass30, headers41, intOptional72);
        int int74 = strConsumerRecord73.partition();
        java.lang.String str75 = strConsumerRecord73.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (short) 10 + "'", serializable56, (short) 10);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)" + "'", str75, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)");
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.io.Serializable serializable16 = strConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long27 = strConsumerRecord26.timestamp();
        int int28 = strConsumerRecord26.partition();
        java.lang.String str29 = strConsumerRecord26.topic();
        long long30 = strConsumerRecord26.offset();
        java.io.Serializable serializable31 = strConsumerRecord26.value();
        long long32 = strConsumerRecord26.checksum();
        java.lang.Class<?> wildcardClass33 = strConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord39.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord39.timestampType();
        java.lang.String str42 = strConsumerRecord39.toString();
        int int43 = strConsumerRecord39.partition();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord39.timestampType();
        int int45 = strConsumerRecord39.serializedValueSize();
        java.lang.Class<?> wildcardClass46 = strConsumerRecord39.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (int) ' ', (long) 'a', 0L, timestampType17, (long) (byte) 10, (int) (short) 0, 35, (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass46);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int58 = strConsumerRecord57.serializedValueSize();
        int int59 = strConsumerRecord57.partition();
        long long60 = strConsumerRecord57.offset();
        java.lang.String str61 = strConsumerRecord57.key();
        long long62 = strConsumerRecord57.checksum();
        java.lang.Class<?> wildcardClass63 = strConsumerRecord57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) 0, (-1L), (long) (short) 1, timestampType17, (long) 32, 32, (int) (byte) 100, "", (java.io.Serializable) wildcardClass63);
        long long65 = strConsumerRecord64.offset();
        java.lang.String str66 = strConsumerRecord64.key();
        java.io.Serializable serializable67 = strConsumerRecord64.value();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 10 + "'", serializable31, (short) 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str42, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(serializable67);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        java.lang.String str24 = strConsumerRecord8.key();
        long long25 = strConsumerRecord8.checksum();
        long long26 = strConsumerRecord8.offset();
        java.util.Optional<java.lang.Integer> intOptional27 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord8.timestampType();
        int int29 = strConsumerRecord8.serializedValueSize();
        java.lang.String str30 = strConsumerRecord8.topic();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(intOptional27);
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.partition();
        long long12 = strConsumerRecord5.offset();
        java.lang.String str13 = strConsumerRecord5.toString();
        int int14 = strConsumerRecord5.partition();
        long long15 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord5.timestampType();
        java.lang.Class<?> wildcardClass18 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        int int13 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        long long15 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        java.lang.String str10 = strConsumerRecord5.key();
        int int11 = strConsumerRecord5.serializedValueSize();
        java.lang.Class<?> wildcardClass12 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType10);
        java.lang.String str12 = strConsumerRecord11.topic();
        int int13 = strConsumerRecord11.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord62.timestampType();
        int int64 = strConsumerRecord62.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord62.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType65, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType48, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 1, (long) '#', timestampType31, (long) (short) 100, 0, (int) ' ', "hi!", (java.io.Serializable) 1L);
        long long74 = strConsumerRecord73.timestamp();
        java.io.Serializable serializable75 = strConsumerRecord73.value();
        int int76 = strConsumerRecord73.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 35L + "'", long74 == 35L);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + 1L + "'", serializable75, 1L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.lang.String str12 = strConsumerRecord9.toString();
        int int13 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType35, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long51 = strConsumerRecord50.timestamp();
        int int52 = strConsumerRecord50.partition();
        java.io.Serializable serializable53 = strConsumerRecord50.value();
        java.lang.Class<?> wildcardClass54 = serializable53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long61 = strConsumerRecord60.timestamp();
        int int62 = strConsumerRecord60.partition();
        java.lang.String str63 = strConsumerRecord60.topic();
        long long64 = strConsumerRecord60.offset();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType35, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.GenericDeclaration) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, 1L, timestampType14, (long) (short) -1, 0, (int) (short) -1, "hi!", (java.io.Serializable) timestampType35);
        org.apache.kafka.common.header.Headers headers68 = strConsumerRecord67.headers();
        int int69 = strConsumerRecord67.serializedKeySize();
        java.lang.String str70 = strConsumerRecord67.toString();
        java.lang.String str71 = strConsumerRecord67.key();
        long long72 = strConsumerRecord67.checksum();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 10 + "'", serializable53, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str70, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        int int18 = strConsumerRecord16.partition();
        long long19 = strConsumerRecord16.offset();
        long long20 = strConsumerRecord16.offset();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord16.timestampType();
        java.lang.String str22 = strConsumerRecord16.toString();
        int int23 = strConsumerRecord16.serializedValueSize();
        java.io.Serializable serializable24 = strConsumerRecord16.value();
        java.io.Serializable serializable25 = strConsumerRecord16.value();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        java.lang.String str36 = strConsumerRecord32.toString();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord32.leaderEpoch();
        long long38 = strConsumerRecord32.offset();
        java.util.Optional<java.lang.Integer> intOptional39 = strConsumerRecord32.leaderEpoch();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord32.headers();
        long long41 = strConsumerRecord32.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> timestampTypeConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 97, 35L, timestampType26, strConsumerRecord32);
        org.apache.kafka.common.header.Headers headers43 = strConsumerRecord32.headers();
        int int44 = strConsumerRecord32.partition();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int56 = strConsumerRecord55.serializedValueSize();
        int int57 = strConsumerRecord55.partition();
        long long58 = strConsumerRecord55.offset();
        long long59 = strConsumerRecord55.offset();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord55.timestampType();
        java.lang.String str61 = strConsumerRecord55.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = strConsumerRecord55.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 10, (long) 97, 35L, timestampType45, 0L, (int) 'a', 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.io.Serializable) timestampType62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType74 = strConsumerRecord73.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord73.timestampType();
        org.apache.kafka.common.header.Headers headers76 = strConsumerRecord73.headers();
        java.lang.String str77 = strConsumerRecord73.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord73.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)", 1, (long) (byte) 1, (long) (short) 1, timestampType45, (long) 52, (int) (short) 0, 97, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.io.Serializable) timestampType78);
        org.apache.kafka.common.record.TimestampType timestampType80 = strConsumerRecord79.timestampType();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str22, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 10 + "'", serializable25, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str36, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        java.lang.String str18 = strConsumerRecord5.toString();
        int int19 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        long long15 = strConsumerRecord5.timestamp();
        java.lang.String str16 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        java.lang.String str21 = strConsumerRecord8.key();
        int int22 = strConsumerRecord8.serializedKeySize();
        int int23 = strConsumerRecord8.serializedValueSize();
        java.lang.String str24 = strConsumerRecord8.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str24, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        int int27 = strConsumerRecord25.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType28, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType11, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        java.io.Serializable serializable36 = strConsumerRecord35.value();
        java.lang.String str37 = strConsumerRecord35.key();
        int int38 = strConsumerRecord35.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + '#' + "'", serializable36, '#');
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (int) (byte) -1, 35L, "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable4);
        java.lang.String str6 = strConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)" + "'", str6, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)");
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        long long14 = strConsumerRecord9.checksum();
        long long15 = strConsumerRecord9.checksum();
        int int16 = strConsumerRecord9.partition();
        int int17 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        java.lang.Class<?> wildcardClass19 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 1)", (int) (byte) 1, (long) 97, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) wildcardClass19);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>> strComparableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", (int) (byte) 0, (long) (byte) 0, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )");
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.serializedKeySize();
        int int11 = strConsumerRecord5.serializedKeySize();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.topic();
        java.lang.String str14 = strConsumerRecord5.key();
        java.lang.Class<?> wildcardClass15 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        int int57 = strConsumerRecord53.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord53.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional59 = strConsumerRecord53.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertNotNull(intOptional59);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        long long7 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        long long11 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        int int13 = strConsumerRecord5.partition();
        int int14 = strConsumerRecord5.partition();
        java.lang.String str15 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        java.lang.String str11 = strConsumerRecord9.key();
        int int12 = strConsumerRecord9.serializedKeySize();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str37 = strConsumerRecord36.topic();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType38, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers52, intOptional60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int73 = strConsumerRecord72.serializedValueSize();
        int int74 = strConsumerRecord72.partition();
        org.apache.kafka.common.header.Headers headers75 = strConsumerRecord72.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType38, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers75);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) -1, (long) '4', 0L, timestampType38, (long) (byte) 10, (-1), 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 1.0f);
        java.lang.String str83 = strConsumerRecord82.topic();
        java.lang.String str84 = strConsumerRecord82.toString();
        org.apache.kafka.common.header.Headers headers85 = strConsumerRecord82.headers();
        org.apache.kafka.common.header.Headers headers86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers> charSequenceConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (short) 0, (long) (short) 100, (long) 10, timestampType14, (java.lang.Long) 97L, 1, (int) '4', (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", headers85, headers86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)" + "'", str84, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)");
        org.junit.Assert.assertNotNull(headers85);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str18 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int31 = strConsumerRecord30.serializedValueSize();
        int int32 = strConsumerRecord30.partition();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType19, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers33, intOptional41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) ' ', 52L, "", (java.io.Serializable) (short) -1);
        java.lang.String str44 = strConsumerRecord43.toString();
        long long45 = strConsumerRecord43.offset();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord43.timestampType();
        java.io.Serializable serializable51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) ' ', (long) (byte) -1, (long) (short) 1, timestampType46, (long) 97, (int) (byte) 100, 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", serializable51);
        java.io.Serializable serializable53 = strConsumerRecord52.value();
        long long54 = strConsumerRecord52.timestamp();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str44, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNull(serializable53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedKeySize();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.lang.String str13 = strConsumerRecord5.toString();
        long long14 = strConsumerRecord5.checksum();
        java.lang.String str15 = strConsumerRecord5.key();
        long long16 = strConsumerRecord5.timestamp();
        long long17 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long19 = strConsumerRecord18.timestamp();
        int int20 = strConsumerRecord18.partition();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str41 = strConsumerRecord40.topic();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int63 = strConsumerRecord62.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional64 = strConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType42, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers56, intOptional64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int77 = strConsumerRecord76.serializedValueSize();
        int int78 = strConsumerRecord76.partition();
        org.apache.kafka.common.header.Headers headers79 = strConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType42, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 0, (long) '4', (long) 1, timestampType21, (java.lang.Long) 100L, (int) (byte) -1, (int) '#', "hi!", (java.io.Serializable) 10.0d, headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, (long) (byte) -1, (long) (-1), timestampType4, 52L, (int) (byte) -1, 0, "hi!", (java.io.Serializable) "hi!");
        java.io.Serializable serializable83 = strConsumerRecord82.value();
        org.apache.kafka.common.record.TimestampType timestampType84 = strConsumerRecord82.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType85 = strConsumerRecord82.timestampType();
        long long86 = strConsumerRecord82.timestamp();
        java.lang.String str87 = strConsumerRecord82.toString();
        org.apache.kafka.common.header.Headers headers88 = strConsumerRecord82.headers();
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + "hi!" + "'", serializable83, "hi!");
        org.junit.Assert.assertNull(timestampType84);
        org.junit.Assert.assertNull(timestampType85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)" + "'", str87, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.junit.Assert.assertNotNull(headers88);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        java.lang.String str28 = strConsumerRecord16.topic();
        long long29 = strConsumerRecord16.offset();
        long long30 = strConsumerRecord16.offset();
        java.lang.String str31 = strConsumerRecord16.toString();
        java.lang.String str32 = strConsumerRecord16.key();
        long long33 = strConsumerRecord16.checksum();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord16.headers();
        java.lang.String str35 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 1, (long) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) '4', 100L, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType36);
        long long39 = strConsumerRecord38.checksum();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord38.leaderEpoch();
        int int41 = strConsumerRecord38.partition();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        long long10 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.offset();
        java.lang.String str10 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord33.leaderEpoch();
        int int36 = strConsumerRecord33.serializedKeySize();
        java.lang.String str37 = strConsumerRecord33.key();
        java.lang.String str38 = strConsumerRecord33.toString();
        long long39 = strConsumerRecord33.timestamp();
        int int40 = strConsumerRecord33.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str38, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        java.lang.String str56 = strConsumerRecord53.toString();
        java.io.Serializable serializable57 = strConsumerRecord53.value();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord53.leaderEpoch();
        java.io.Serializable serializable59 = strConsumerRecord53.value();
        int int60 = strConsumerRecord53.partition();
        int int61 = strConsumerRecord53.partition();
        int int62 = strConsumerRecord53.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str56, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (-1.0d) + "'", serializable57, (-1.0d));
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (-1.0d) + "'", serializable59, (-1.0d));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        int int27 = strConsumerRecord25.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType28, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType11, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        java.lang.String str36 = strConsumerRecord35.topic();
        long long37 = strConsumerRecord35.offset();
        long long38 = strConsumerRecord35.checksum();
        java.lang.String str39 = strConsumerRecord35.toString();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str39, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str10 = strConsumerRecord9.topic();
        java.lang.Class<?> wildcardClass11 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 10, (long) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass11);
        long long13 = strConsumerRecord12.timestamp();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str77 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord68, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78);
        java.lang.String str80 = strConsumerRecord68.topic();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType49, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType59, (java.lang.Object) wildcardClass81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType20, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType49);
        java.lang.String str84 = strConsumerRecord83.key();
        java.io.Serializable serializable85 = strConsumerRecord83.value();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord83.timestampType();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + serializable85 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable85.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.String str30 = strConsumerRecord28.topic();
        org.apache.kafka.common.header.Headers headers31 = strConsumerRecord28.headers();
        java.lang.String str32 = strConsumerRecord28.key();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        java.lang.String str12 = strConsumerRecord5.topic();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.lang.String str15 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        long long15 = strConsumerRecord9.checksum();
        java.io.Serializable serializable16 = strConsumerRecord9.value();
        long long17 = strConsumerRecord9.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int29 = strConsumerRecord28.serializedValueSize();
        int int30 = strConsumerRecord28.partition();
        long long31 = strConsumerRecord28.offset();
        long long32 = strConsumerRecord28.offset();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord28.headers();
        long long34 = strConsumerRecord28.checksum();
        long long35 = strConsumerRecord28.checksum();
        org.apache.kafka.common.header.Headers headers36 = strConsumerRecord28.headers();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord28.headers();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord28.timestampType();
        int int39 = strConsumerRecord28.serializedKeySize();
        int int40 = strConsumerRecord28.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int48 = strConsumerRecord47.serializedValueSize();
        int int49 = strConsumerRecord47.partition();
        java.lang.String str50 = strConsumerRecord47.topic();
        long long51 = strConsumerRecord47.checksum();
        int int52 = strConsumerRecord47.serializedValueSize();
        org.apache.kafka.common.header.Headers headers53 = strConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", 0, (long) '#', 52L, timestampType18, (java.lang.Long) 35L, (int) (short) 0, (int) (byte) 100, "", (java.io.Serializable) timestampType41, headers53);
        long long55 = strConsumerRecord54.timestamp();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(headers36);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        long long15 = strConsumerRecord5.offset();
        java.lang.String str16 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedKeySize();
        long long10 = strConsumerRecord5.checksum();
        long long11 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        long long13 = strConsumerRecord5.checksum();
        int int14 = strConsumerRecord5.partition();
        long long15 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord53.timestampType();
        long long58 = strConsumerRecord53.timestamp();
        int int59 = strConsumerRecord53.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.lang.String str12 = strConsumerRecord9.toString();
        int int13 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType35, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long51 = strConsumerRecord50.timestamp();
        int int52 = strConsumerRecord50.partition();
        java.io.Serializable serializable53 = strConsumerRecord50.value();
        java.lang.Class<?> wildcardClass54 = serializable53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long61 = strConsumerRecord60.timestamp();
        int int62 = strConsumerRecord60.partition();
        java.lang.String str63 = strConsumerRecord60.topic();
        long long64 = strConsumerRecord60.offset();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType35, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.GenericDeclaration) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, 1L, timestampType14, (long) (short) -1, 0, (int) (short) -1, "hi!", (java.io.Serializable) timestampType35);
        long long68 = strConsumerRecord67.timestamp();
        java.lang.Class<?> wildcardClass69 = strConsumerRecord67.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 10 + "'", serializable53, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        java.lang.Class<?> wildcardClass43 = strConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType18, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass43);
        long long45 = strConsumerRecord44.offset();
        int int46 = strConsumerRecord44.serializedKeySize();
        long long47 = strConsumerRecord44.timestamp();
        java.lang.String str48 = strConsumerRecord44.key();
        java.io.Serializable serializable49 = strConsumerRecord44.value();
        long long50 = strConsumerRecord44.checksum();
        java.lang.String str51 = strConsumerRecord44.topic();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(serializable49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        long long7 = strConsumerRecord5.offset();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        long long10 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str37 = strConsumerRecord36.topic();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType38, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers52, intOptional60);
        java.util.Optional<java.lang.Integer> intOptional62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (short) -1, (long) (-1), 0L, timestampType15, (java.lang.Long) (-1L), (int) '#', (int) (byte) 0, (java.io.Serializable) (byte) -1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers26, headers52, intOptional62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int75 = strConsumerRecord74.serializedValueSize();
        int int76 = strConsumerRecord74.partition();
        long long77 = strConsumerRecord74.offset();
        long long78 = strConsumerRecord74.offset();
        org.apache.kafka.common.header.Headers headers79 = strConsumerRecord74.headers();
        long long80 = strConsumerRecord74.checksum();
        long long81 = strConsumerRecord74.checksum();
        org.apache.kafka.common.header.Headers headers82 = strConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 0, (long) (short) 1, 100L, timestampType15, (java.lang.Long) 0L, 0, (int) (byte) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 1L, headers82);
        org.apache.kafka.common.header.Headers headers84 = strConsumerRecord83.headers();
        int int85 = strConsumerRecord83.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 52L + "'", long78 == 52L);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        java.util.Optional<java.lang.Integer> intOptional57 = strConsumerRecord53.leaderEpoch();
        int int58 = strConsumerRecord53.serializedKeySize();
        int int59 = strConsumerRecord53.partition();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long27 = strConsumerRecord26.timestamp();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType56 = strConsumerRecord55.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int63 = strConsumerRecord62.serializedValueSize();
        int int64 = strConsumerRecord62.partition();
        org.apache.kafka.common.header.Headers headers65 = strConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType44, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType56, headers65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 0, 52L, (long) '#', timestampType16, (java.lang.Long) 0L, (int) (short) 10, (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType29, headers65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int81 = strConsumerRecord80.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional82 = strConsumerRecord80.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str89 = strConsumerRecord88.topic();
        org.apache.kafka.common.record.TimestampType timestampType90 = strConsumerRecord88.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord80, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType90);
        java.lang.String str92 = strConsumerRecord80.topic();
        long long93 = strConsumerRecord80.offset();
        long long94 = strConsumerRecord80.offset();
        java.lang.String str95 = strConsumerRecord80.toString();
        int int96 = strConsumerRecord80.serializedKeySize();
        java.lang.String str97 = strConsumerRecord80.topic();
        java.lang.Class<?> wildcardClass98 = strConsumerRecord80.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)", 10, (long) 32, 0L, timestampType29, (long) (short) -1, 10, (int) (byte) 10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) wildcardClass98);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType90 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType90.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 52L + "'", long93 == 52L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 52L + "'", long94 == 52L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str95, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        int int11 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.String str13 = strConsumerRecord5.topic();
        long long14 = strConsumerRecord5.checksum();
        java.lang.String str15 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long32 = strConsumerRecord31.timestamp();
        int int33 = strConsumerRecord31.partition();
        java.lang.String str34 = strConsumerRecord31.topic();
        long long35 = strConsumerRecord31.offset();
        java.io.Serializable serializable36 = strConsumerRecord31.value();
        long long37 = strConsumerRecord31.checksum();
        org.apache.kafka.common.header.Headers headers38 = strConsumerRecord31.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '4', (-1L), (long) 0, timestampType20, (java.lang.Long) 10L, (int) (short) 10, 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) ' ', headers38);
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord39.leaderEpoch();
        long long41 = strConsumerRecord39.checksum();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", 10, 0L, (long) ' ', timestampType42, (long) (byte) -1, (int) (byte) 10, 32, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 10 + "'", serializable36, (short) 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        long long13 = strConsumerRecord5.timestamp();
        long long14 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        long long16 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord5.leaderEpoch();
        long long19 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        java.io.Serializable serializable21 = strConsumerRecord8.value();
        long long22 = strConsumerRecord8.checksum();
        java.io.Serializable serializable23 = strConsumerRecord8.value();
        long long24 = strConsumerRecord8.timestamp();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord8.headers();
        java.lang.Class<?> wildcardClass26 = headers25.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 10 + "'", serializable21, (short) 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 10 + "'", serializable23, (short) 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedKeySize();
        long long10 = strConsumerRecord5.checksum();
        long long11 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        long long13 = strConsumerRecord5.checksum();
        int int14 = strConsumerRecord5.serializedKeySize();
        long long15 = strConsumerRecord5.offset();
        long long16 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 100, (long) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100.0d);
        java.lang.String str14 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int26 = strConsumerRecord25.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional27 = strConsumerRecord25.leaderEpoch();
        java.lang.String str28 = strConsumerRecord25.key();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord25.headers();
        long long30 = strConsumerRecord25.offset();
        long long31 = strConsumerRecord25.checksum();
        java.lang.String str32 = strConsumerRecord25.topic();
        long long33 = strConsumerRecord25.checksum();
        java.io.Serializable serializable34 = strConsumerRecord25.value();
        java.lang.Class<?> wildcardClass35 = strConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long42 = strConsumerRecord41.timestamp();
        java.lang.String str43 = strConsumerRecord41.topic();
        int int44 = strConsumerRecord41.serializedKeySize();
        int int45 = strConsumerRecord41.serializedValueSize();
        org.apache.kafka.common.header.Headers headers46 = strConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord52.timestampType();
        int int54 = strConsumerRecord52.serializedKeySize();
        int int55 = strConsumerRecord52.partition();
        java.io.Serializable serializable56 = strConsumerRecord52.value();
        int int57 = strConsumerRecord52.serializedValueSize();
        int int58 = strConsumerRecord52.partition();
        long long59 = strConsumerRecord52.checksum();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord52.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) '4', (long) (short) 0, (long) 1, timestampType15, (java.lang.Long) 100L, (int) (byte) 1, (int) (short) 1, "", (java.io.Serializable) wildcardClass35, headers46, intOptional60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        java.util.Optional<java.lang.Integer> intOptional75 = strConsumerRecord71.leaderEpoch();
        java.lang.String str76 = strConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers77 = strConsumerRecord71.headers();
        java.lang.Class<?> wildcardClass78 = headers77.getClass();
        org.apache.kafka.common.header.Headers headers79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", 10, (long) 0, (long) (short) 10, timestampType15, (java.lang.Long) 100L, (int) (short) 10, 52, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass78, headers79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(intOptional27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 10 + "'", serializable34, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (short) 10 + "'", serializable56, (short) 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.offset();
        java.lang.String str10 = strConsumerRecord5.toString();
        long long11 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        java.io.Serializable serializable11 = strConsumerRecord9.value();
        java.lang.String str12 = strConsumerRecord9.key();
        java.lang.String str13 = strConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", 10, 100L, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", (java.io.Serializable) timestampType14);
        long long16 = strConsumerRecord15.timestamp();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 0 + "'", serializable11, (short) 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord8.timestampType();
        java.lang.Class<?> wildcardClass24 = timestampType23.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long9 = strConsumerRecord8.timestamp();
        int int10 = strConsumerRecord8.partition();
        java.io.Serializable serializable11 = strConsumerRecord8.value();
        java.lang.String str12 = strConsumerRecord8.topic();
        int int13 = strConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord8.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Comparable<java.lang.String>> headerIterableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (byte) 1, (long) (short) 1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers14, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(headers14);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        long long14 = strConsumerRecord5.offset();
        java.lang.String str15 = strConsumerRecord5.toString();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        long long17 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) -1, (long) (short) -1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)", serializable4);
        long long6 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.io.Serializable serializable16 = strConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long27 = strConsumerRecord26.timestamp();
        int int28 = strConsumerRecord26.partition();
        java.lang.String str29 = strConsumerRecord26.topic();
        long long30 = strConsumerRecord26.offset();
        java.io.Serializable serializable31 = strConsumerRecord26.value();
        long long32 = strConsumerRecord26.checksum();
        java.lang.Class<?> wildcardClass33 = strConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord39.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord39.timestampType();
        java.lang.String str42 = strConsumerRecord39.toString();
        int int43 = strConsumerRecord39.partition();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord39.timestampType();
        int int45 = strConsumerRecord39.serializedValueSize();
        java.lang.Class<?> wildcardClass46 = strConsumerRecord39.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (int) ' ', (long) 'a', 0L, timestampType17, (long) (byte) 10, (int) (short) 0, 35, (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass46);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int58 = strConsumerRecord57.serializedValueSize();
        int int59 = strConsumerRecord57.partition();
        long long60 = strConsumerRecord57.offset();
        java.lang.String str61 = strConsumerRecord57.key();
        long long62 = strConsumerRecord57.checksum();
        java.lang.Class<?> wildcardClass63 = strConsumerRecord57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) 0, (-1L), (long) (short) 1, timestampType17, (long) 32, 32, (int) (byte) 100, "", (java.io.Serializable) wildcardClass63);
        long long65 = strConsumerRecord64.offset();
        java.lang.String str66 = strConsumerRecord64.key();
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord64.timestampType();
        java.lang.Class<?> wildcardClass68 = strConsumerRecord64.getClass();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 10 + "'", serializable31, (short) 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str42, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        int int14 = strConsumerRecord5.serializedKeySize();
        int int15 = strConsumerRecord5.serializedValueSize();
        int int16 = strConsumerRecord5.partition();
        java.lang.String str17 = strConsumerRecord5.topic();
        java.lang.String str18 = strConsumerRecord5.topic();
        long long19 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        java.lang.String str13 = strConsumerRecord5.toString();
        java.lang.Class<?> wildcardClass14 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.checksum();
        java.lang.String str12 = strConsumerRecord5.topic();
        long long13 = strConsumerRecord5.checksum();
        int int14 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.toString();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord9.leaderEpoch();
        long long15 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        int int28 = strConsumerRecord26.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord26.timestampType();
        java.lang.String str30 = strConsumerRecord26.toString();
        java.util.Optional<java.lang.Integer> intOptional31 = strConsumerRecord26.leaderEpoch();
        long long32 = strConsumerRecord26.offset();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord26.timestampType();
        int int34 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord26.headers();
        java.lang.Class<?> wildcardClass36 = strConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)", 100, (long) '#', (long) ' ', timestampType16, (long) (byte) 0, (int) (short) 1, 32, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) wildcardClass36);
        java.io.Serializable serializable38 = strConsumerRecord37.value();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(serializable38);
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int23 = strConsumerRecord22.serializedValueSize();
        int int24 = strConsumerRecord22.partition();
        long long25 = strConsumerRecord22.offset();
        long long26 = strConsumerRecord22.offset();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord22.timestampType();
        java.lang.String str28 = strConsumerRecord22.toString();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord22.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        int int37 = strConsumerRecord35.partition();
        long long38 = strConsumerRecord35.offset();
        long long39 = strConsumerRecord35.offset();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord35.headers();
        long long41 = strConsumerRecord35.checksum();
        int int42 = strConsumerRecord35.serializedKeySize();
        int int43 = strConsumerRecord35.serializedValueSize();
        long long44 = strConsumerRecord35.offset();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 0, 35L, 100L, timestampType11, (java.lang.Long) 52L, 10, (int) (byte) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable16, headers29, intOptional45);
        java.lang.String str47 = strConsumerRecord46.topic();
        int int48 = strConsumerRecord46.serializedKeySize();
        int int49 = strConsumerRecord46.serializedKeySize();
        int int50 = strConsumerRecord46.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str47, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        int int11 = strConsumerRecord5.serializedValueSize();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (-1), (long) (short) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) true);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        long long8 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType16, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (short) 0, (long) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) "");
        long long24 = strConsumerRecord23.offset();
        java.lang.String str25 = strConsumerRecord23.key();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str25, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        long long11 = strConsumerRecord5.checksum();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        long long13 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        int int15 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        long long15 = strConsumerRecord9.checksum();
        int int16 = strConsumerRecord9.serializedKeySize();
        java.lang.Class<?> wildcardClass17 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) ' ', (long) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass17);
        java.lang.String str19 = strConsumerRecord18.key();
        java.io.Serializable serializable20 = strConsumerRecord18.value();
        int int21 = strConsumerRecord18.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str19, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertNotNull(serializable20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        int int8 = strConsumerRecord5.serializedKeySize();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.serializedKeySize();
        int int11 = strConsumerRecord5.serializedValueSize();
        java.lang.String str12 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        long long14 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        java.lang.String str16 = strConsumerRecord5.toString();
        java.lang.Class<?> wildcardClass17 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        int int7 = strConsumerRecord5.serializedValueSize();
        int int8 = strConsumerRecord5.partition();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.lang.Class<?> wildcardClass10 = strConsumerRecord5.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 100, (long) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100.0d);
        int int6 = strConsumerRecord5.partition();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.offset();
        long long12 = strConsumerRecord9.offset();
        java.lang.String str13 = strConsumerRecord9.key();
        int int14 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        int int16 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord27.timestampType();
        int int29 = strConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord27.timestampType();
        java.lang.String str31 = strConsumerRecord27.toString();
        java.util.Optional<java.lang.Integer> intOptional32 = strConsumerRecord27.leaderEpoch();
        java.lang.String str33 = strConsumerRecord27.key();
        java.lang.String str34 = strConsumerRecord27.toString();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord27.leaderEpoch();
        int int36 = strConsumerRecord27.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord27.leaderEpoch();
        org.apache.kafka.common.header.Headers headers38 = strConsumerRecord27.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str53 = strConsumerRecord52.topic();
        org.apache.kafka.common.record.TimestampType timestampType54 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int66 = strConsumerRecord65.serializedValueSize();
        int int67 = strConsumerRecord65.partition();
        org.apache.kafka.common.header.Headers headers68 = strConsumerRecord65.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int75 = strConsumerRecord74.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional76 = strConsumerRecord74.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType54, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers68, intOptional76);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int89 = strConsumerRecord88.serializedValueSize();
        int int90 = strConsumerRecord88.partition();
        org.apache.kafka.common.header.Headers headers91 = strConsumerRecord88.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType54, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers91);
        long long93 = strConsumerRecord92.offset();
        java.io.Serializable serializable94 = strConsumerRecord92.value();
        org.apache.kafka.common.header.Headers headers95 = strConsumerRecord92.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Object> headerIterableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), value = 10)", 10, (long) 1, (long) (byte) 0, timestampType18, (long) (byte) 1, (int) (short) 1, (int) ' ', (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers38, (java.lang.Object) headers95);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str34, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertNotNull(headers91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + serializable94 + "' != '" + (-1.0d) + "'", serializable94, (-1.0d));
        org.junit.Assert.assertNotNull(headers95);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        java.lang.String str16 = strConsumerRecord13.toString();
        int int17 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        int int38 = strConsumerRecord36.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType39 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType39, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long55 = strConsumerRecord54.timestamp();
        int int56 = strConsumerRecord54.partition();
        java.io.Serializable serializable57 = strConsumerRecord54.value();
        java.lang.Class<?> wildcardClass58 = serializable57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long65 = strConsumerRecord64.timestamp();
        int int66 = strConsumerRecord64.partition();
        java.lang.String str67 = strConsumerRecord64.topic();
        long long68 = strConsumerRecord64.offset();
        java.lang.Class<?> wildcardClass69 = strConsumerRecord64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType39, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass58, (java.lang.reflect.GenericDeclaration) wildcardClass69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, 1L, timestampType18, (long) (short) -1, 0, (int) (short) -1, "hi!", (java.io.Serializable) timestampType39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long82 = strConsumerRecord81.timestamp();
        long long83 = strConsumerRecord81.checksum();
        long long84 = strConsumerRecord81.checksum();
        int int85 = strConsumerRecord81.serializedValueSize();
        org.apache.kafka.common.header.Headers headers86 = strConsumerRecord81.headers();
        java.lang.Class<?> wildcardClass87 = strConsumerRecord81.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100.0)", 10, (long) 0, 100L, timestampType18, 100L, (int) (byte) 10, (int) (byte) -1, "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = -1)", (java.io.Serializable) wildcardClass87);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (short) 10 + "'", serializable57, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 52L + "'", long68 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(headers86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType22, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        java.lang.String str30 = strConsumerRecord29.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord29.timestampType();
        long long32 = strConsumerRecord29.timestamp();
        java.lang.String str33 = strConsumerRecord29.topic();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str33, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        java.lang.String str16 = strConsumerRecord13.toString();
        int int17 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        int int38 = strConsumerRecord36.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType39 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType39, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long55 = strConsumerRecord54.timestamp();
        int int56 = strConsumerRecord54.partition();
        java.io.Serializable serializable57 = strConsumerRecord54.value();
        java.lang.Class<?> wildcardClass58 = serializable57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long65 = strConsumerRecord64.timestamp();
        int int66 = strConsumerRecord64.partition();
        java.lang.String str67 = strConsumerRecord64.topic();
        long long68 = strConsumerRecord64.offset();
        java.lang.Class<?> wildcardClass69 = strConsumerRecord64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType39, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass58, (java.lang.reflect.GenericDeclaration) wildcardClass69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, 1L, timestampType18, (long) (short) -1, 0, (int) (short) -1, "hi!", (java.io.Serializable) timestampType39);
        long long72 = strConsumerRecord71.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType84 = strConsumerRecord83.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType85 = strConsumerRecord83.timestampType();
        java.lang.String str86 = strConsumerRecord83.toString();
        int int87 = strConsumerRecord83.partition();
        java.lang.String str88 = strConsumerRecord83.key();
        int int89 = strConsumerRecord83.partition();
        long long90 = strConsumerRecord83.checksum();
        org.apache.kafka.common.record.TimestampType timestampType91 = strConsumerRecord83.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = 1.0)", (int) (byte) 0, 0L, (long) 'a', timestampType73, 35L, (int) (byte) -1, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) timestampType91);
        int int93 = strConsumerRecord92.serializedValueSize();
        long long94 = strConsumerRecord92.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (short) 10 + "'", serializable57, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 52L + "'", long68 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType85 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType85.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str86, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType91 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType91.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.timestamp();
        int int13 = strConsumerRecord5.partition();
        int int14 = strConsumerRecord5.partition();
        long long15 = strConsumerRecord5.timestamp();
        long long16 = strConsumerRecord5.timestamp();
        int int17 = strConsumerRecord5.serializedValueSize();
        java.lang.Class<?> wildcardClass18 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.offset();
        long long12 = strConsumerRecord9.offset();
        java.lang.String str13 = strConsumerRecord9.key();
        int int14 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        int int16 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord27.timestampType();
        int int29 = strConsumerRecord27.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord27.leaderEpoch();
        java.lang.String str31 = strConsumerRecord27.toString();
        long long32 = strConsumerRecord27.checksum();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord27.timestampType();
        java.lang.Class<?> wildcardClass34 = timestampType33.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, (long) (short) 10, 35L, timestampType17, (-1L), 52, (int) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass34);
        int int36 = strConsumerRecord35.serializedKeySize();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord35.headers();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(headers37);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        long long9 = strConsumerRecord8.offset();
        int int10 = strConsumerRecord8.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int43 = strConsumerRecord42.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional44 = strConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str51 = strConsumerRecord50.topic();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord50.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord42, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType52);
        java.lang.String str54 = strConsumerRecord42.topic();
        java.lang.Class<?> wildcardClass55 = strConsumerRecord42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType23, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType33, (java.lang.Object) wildcardClass55);
        java.lang.Class<?> wildcardClass57 = timestampType33.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration> strConsumerRecordConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (-1), 0L, strConsumerRecord8, (java.lang.reflect.GenericDeclaration) wildcardClass57);
        java.lang.Class<?> wildcardClass59 = strConsumerRecord8.getClass();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        int int10 = strConsumerRecord5.partition();
        java.lang.String str11 = strConsumerRecord5.toString();
        long long12 = strConsumerRecord5.checksum();
        long long13 = strConsumerRecord5.timestamp();
        java.lang.String str14 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        org.apache.kafka.common.header.Headers headers20 = strConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers21 = strConsumerRecord8.headers();
        java.lang.String str22 = strConsumerRecord8.key();
        long long23 = strConsumerRecord8.timestamp();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        java.lang.String str24 = strConsumerRecord8.key();
        long long25 = strConsumerRecord8.checksum();
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord8.headers();
        long long27 = strConsumerRecord8.offset();
        int int28 = strConsumerRecord8.partition();
        int int29 = strConsumerRecord8.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.common.header.Headers headers31 = strConsumerRecord8.headers();
        java.util.Optional<java.lang.Integer> intOptional32 = strConsumerRecord8.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertNotNull(intOptional32);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.timestamp();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.io.Serializable serializable16 = strConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (byte) 0, (long) 100, "hi!", (java.io.Serializable) timestampType17);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (byte) 10, 32L, (long) (short) 100, timestampType17, 1L, 0, (int) (short) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )");
        long long25 = strConsumerRecord24.offset();
        int int26 = strConsumerRecord24.serializedKeySize();
        java.lang.String str27 = strConsumerRecord24.key();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)" + "'", str27, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)");
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedKeySize();
        long long12 = strConsumerRecord5.timestamp();
        long long13 = strConsumerRecord5.checksum();
        long long14 = strConsumerRecord5.timestamp();
        long long15 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType12);
        java.lang.String str14 = strConsumerRecord13.toString();
        int int15 = strConsumerRecord13.serializedKeySize();
        int int16 = strConsumerRecord13.partition();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)" + "'", str14, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        java.util.Optional<java.lang.Integer> intOptional57 = strConsumerRecord53.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord53.leaderEpoch();
        long long59 = strConsumerRecord53.timestamp();
        int int60 = strConsumerRecord53.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord13.headers();
        int int16 = strConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers18 = strConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long30 = strConsumerRecord29.timestamp();
        int int31 = strConsumerRecord29.partition();
        java.lang.String str32 = strConsumerRecord29.topic();
        int int33 = strConsumerRecord29.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord29.timestampType();
        java.lang.String str35 = strConsumerRecord29.topic();
        java.util.Optional<java.lang.Integer> intOptional36 = strConsumerRecord29.leaderEpoch();
        java.lang.Class<?> wildcardClass37 = strConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (-1), (long) 35, (long) (byte) -1, timestampType19, (long) 52, (int) (short) 1, (int) (short) 10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = NoTimestampType)", (int) (short) 100, (-1L), "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 52)", (java.io.Serializable) (-1));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.lang.String str15 = strConsumerRecord5.topic();
        long long16 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord5.leaderEpoch();
        java.lang.String str18 = strConsumerRecord5.key();
        java.lang.String str19 = strConsumerRecord5.toString();
        java.lang.Class<?> wildcardClass20 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        int int26 = strConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType27, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) (short) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) "");
        java.lang.String str35 = strConsumerRecord34.key();
        java.util.Optional<java.lang.Integer> intOptional36 = strConsumerRecord34.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        int int48 = strConsumerRecord46.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType49);
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord50.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.record.TimestampType> intOptionalConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.record.TimestampType>("hi!", (-1), (long) (byte) 100, intOptional36, timestampType51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int66 = strConsumerRecord65.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional67 = strConsumerRecord65.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str74 = strConsumerRecord73.topic();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord73.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord65, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType75);
        java.lang.String str77 = strConsumerRecord65.topic();
        java.lang.Class<?> wildcardClass78 = strConsumerRecord65.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 100.0)", (int) (byte) 0, (long) (-1), (long) 10, timestampType51, (long) 100, (int) ' ', (int) (byte) 10, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass78);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", (int) (short) 0, (long) 10, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) (-1));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str35, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long9 = strConsumerRecord8.timestamp();
        int int10 = strConsumerRecord8.partition();
        java.io.Serializable serializable11 = strConsumerRecord8.value();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord18.timestampType();
        int int20 = strConsumerRecord18.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional21 = strConsumerRecord18.leaderEpoch();
        java.lang.String str22 = strConsumerRecord18.toString();
        java.util.Optional<java.lang.Integer> intOptional23 = strConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Object> intOptionalConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = null)", 100, (long) ' ', intOptional12, (java.lang.Object) strConsumerRecord18);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str22, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        java.io.Serializable serializable11 = strConsumerRecord9.value();
        java.lang.String str12 = strConsumerRecord9.key();
        java.lang.String str13 = strConsumerRecord9.toString();
        java.lang.String str14 = strConsumerRecord9.toString();
        long long15 = strConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        long long29 = strConsumerRecord26.offset();
        long long30 = strConsumerRecord26.offset();
        org.apache.kafka.common.header.Headers headers31 = strConsumerRecord26.headers();
        long long32 = strConsumerRecord26.checksum();
        long long33 = strConsumerRecord26.checksum();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord26.headers();
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord26.headers();
        java.lang.Class<?> wildcardClass36 = strConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)", (int) '#', (long) 97, (long) (short) 100, timestampType16, (long) 32, (int) (short) 100, 1, "", (java.io.Serializable) wildcardClass36);
        java.util.Optional<java.lang.Integer> intOptional38 = strConsumerRecord37.leaderEpoch();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 0 + "'", serializable11, (short) 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str14, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intOptional38);
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        int int9 = strConsumerRecord5.partition();
        java.lang.String str10 = strConsumerRecord5.key();
        java.lang.String str11 = strConsumerRecord5.topic();
        java.lang.String str12 = strConsumerRecord5.key();
        long long13 = strConsumerRecord5.timestamp();
        java.lang.String str14 = strConsumerRecord5.key();
        java.lang.Class<?> wildcardClass15 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", 0, (long) 52, (long) 35, timestampType14, (long) (byte) -1, (int) 'a', (int) (short) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        int int21 = strConsumerRecord20.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        java.lang.String str23 = strConsumerRecord20.topic();
        int int24 = strConsumerRecord20.serializedKeySize();
        java.lang.String str25 = strConsumerRecord20.topic();
        int int26 = strConsumerRecord20.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)" + "'", str23, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)" + "'", str25, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str18 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int31 = strConsumerRecord30.serializedValueSize();
        int int32 = strConsumerRecord30.partition();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType19, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers33, intOptional41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType19, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers56);
        long long58 = strConsumerRecord57.offset();
        java.lang.String str59 = strConsumerRecord57.topic();
        long long60 = strConsumerRecord57.offset();
        long long61 = strConsumerRecord57.checksum();
        java.lang.Class<?> wildcardClass62 = strConsumerRecord57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (int) (short) 0, (long) (byte) 10, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), value =  )", (java.io.Serializable) wildcardClass62);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str59, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        long long14 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        java.lang.String str16 = strConsumerRecord5.key();
        java.lang.String str17 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType16);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", 35, (long) 'a', 100L, timestampType18, (long) '#', (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 10L);
        java.io.Serializable serializable25 = strConsumerRecord24.value();
        java.lang.String str26 = strConsumerRecord24.key();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + 10L + "'", serializable25, 10L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str26, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        int int23 = strConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType24, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long40 = strConsumerRecord39.timestamp();
        int int41 = strConsumerRecord39.partition();
        java.io.Serializable serializable42 = strConsumerRecord39.value();
        java.lang.Class<?> wildcardClass43 = serializable42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long50 = strConsumerRecord49.timestamp();
        int int51 = strConsumerRecord49.partition();
        java.lang.String str52 = strConsumerRecord49.topic();
        long long53 = strConsumerRecord49.offset();
        java.lang.Class<?> wildcardClass54 = strConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType24, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass43, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        java.io.Serializable serializable60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, 0L, 0L, timestampType24, (long) 10, (int) '#', 10, "hi!", serializable60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType72 = strConsumerRecord71.timestampType();
        int int73 = strConsumerRecord71.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType74 = strConsumerRecord71.timestampType();
        java.lang.Class<?> wildcardClass75 = timestampType74.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) 'a', (long) ' ', (long) 0, timestampType24, (long) (short) 100, (-1), (int) (byte) 10, "hi!", (java.io.Serializable) wildcardClass75);
        long long77 = strConsumerRecord76.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        long long79 = strConsumerRecord76.offset();
        org.apache.kafka.common.header.Headers headers80 = strConsumerRecord76.headers();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 10 + "'", serializable42, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 32L + "'", long79 == 32L);
        org.junit.Assert.assertNotNull(headers80);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        long long10 = strConsumerRecord5.timestamp();
        int int11 = strConsumerRecord5.serializedKeySize();
        long long12 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.io.Serializable serializable12 = strConsumerRecord9.value();
        java.lang.Class<?> wildcardClass13 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, 52L, "", (java.io.Serializable) wildcardClass13);
        java.io.Serializable serializable15 = strConsumerRecord14.value();
        java.lang.String str16 = strConsumerRecord14.key();
        long long17 = strConsumerRecord14.offset();
        java.lang.String str18 = strConsumerRecord14.topic();
        int int19 = strConsumerRecord14.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord14.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(serializable15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(intOptional20);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 100, (long) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100.0d);
        java.lang.String str6 = strConsumerRecord5.key();
        int int7 = strConsumerRecord5.serializedKeySize();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str6, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType22, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        int int30 = strConsumerRecord29.partition();
        java.lang.String str31 = strConsumerRecord29.toString();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)" + "'", str31, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)");
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        java.lang.String str14 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.topic();
        java.lang.String str14 = strConsumerRecord5.toString();
        long long15 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str14, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int34 = strConsumerRecord33.serializedValueSize();
        int int35 = strConsumerRecord33.partition();
        org.apache.kafka.common.header.Headers headers36 = strConsumerRecord33.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int43 = strConsumerRecord42.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional44 = strConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType22, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers36, intOptional44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int57 = strConsumerRecord56.serializedValueSize();
        int int58 = strConsumerRecord56.partition();
        org.apache.kafka.common.header.Headers headers59 = strConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType22, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers59);
        long long61 = strConsumerRecord60.offset();
        java.lang.String str62 = strConsumerRecord60.topic();
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord60.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long74 = strConsumerRecord73.timestamp();
        int int75 = strConsumerRecord73.partition();
        java.io.Serializable serializable76 = strConsumerRecord73.value();
        java.lang.Class<?> wildcardClass77 = serializable76.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int84 = strConsumerRecord83.serializedValueSize();
        int int85 = strConsumerRecord83.partition();
        int int86 = strConsumerRecord83.partition();
        org.apache.kafka.common.header.Headers headers87 = strConsumerRecord83.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) ' ', (long) (byte) 1, 10L, timestampType63, (java.lang.Long) 32L, 0, 1, "", (java.io.Serializable) wildcardClass77, headers87);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>> typeConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", 97, (long) (short) 0, (java.lang.reflect.Type) wildcardClass77, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100.0)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(headers36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str62, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertEquals("'" + serializable76 + "' != '" + (short) 10 + "'", serializable76, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertNotNull(headers87);
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.key();
        int int13 = strConsumerRecord5.partition();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int23 = strConsumerRecord22.serializedValueSize();
        int int24 = strConsumerRecord22.partition();
        long long25 = strConsumerRecord22.offset();
        long long26 = strConsumerRecord22.offset();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord22.timestampType();
        java.lang.String str28 = strConsumerRecord22.toString();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord22.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        int int37 = strConsumerRecord35.partition();
        long long38 = strConsumerRecord35.offset();
        long long39 = strConsumerRecord35.offset();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord35.headers();
        long long41 = strConsumerRecord35.checksum();
        int int42 = strConsumerRecord35.serializedKeySize();
        int int43 = strConsumerRecord35.serializedValueSize();
        long long44 = strConsumerRecord35.offset();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 0, 35L, 100L, timestampType11, (java.lang.Long) 52L, 10, (int) (byte) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable16, headers29, intOptional45);
        java.util.Optional<java.lang.Integer> intOptional47 = strConsumerRecord46.leaderEpoch();
        int int48 = strConsumerRecord46.partition();
        org.apache.kafka.common.header.Headers headers49 = strConsumerRecord46.headers();
        int int50 = strConsumerRecord46.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        int int12 = strConsumerRecord5.serializedValueSize();
        int int13 = strConsumerRecord5.partition();
        int int14 = strConsumerRecord5.partition();
        int int15 = strConsumerRecord5.serializedKeySize();
        long long16 = strConsumerRecord5.offset();
        long long17 = strConsumerRecord5.checksum();
        java.io.Serializable serializable18 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        java.lang.String str16 = strConsumerRecord13.toString();
        int int17 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType18);
        int int20 = strConsumerRecord19.partition();
        int int21 = strConsumerRecord19.partition();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord19.timestampType();
        java.io.Serializable serializable27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long42 = strConsumerRecord41.timestamp();
        int int43 = strConsumerRecord41.partition();
        java.lang.String str44 = strConsumerRecord41.topic();
        long long45 = strConsumerRecord41.offset();
        java.io.Serializable serializable46 = strConsumerRecord41.value();
        java.lang.String str47 = strConsumerRecord41.topic();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType48, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str62 = strConsumerRecord61.toString();
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord61.leaderEpoch();
        int int64 = strConsumerRecord61.partition();
        int int65 = strConsumerRecord61.partition();
        int int66 = strConsumerRecord61.serializedValueSize();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long77 = strConsumerRecord76.timestamp();
        long long78 = strConsumerRecord76.checksum();
        long long79 = strConsumerRecord76.timestamp();
        java.lang.String str80 = strConsumerRecord76.topic();
        long long81 = strConsumerRecord76.timestamp();
        java.io.Serializable serializable82 = strConsumerRecord76.value();
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord76.headers();
        int int84 = strConsumerRecord76.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        java.util.Optional<java.lang.Integer> intOptional91 = strConsumerRecord90.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>> strConsumerRecordConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", 10, (long) 100, strConsumerRecord76, intOptional91);
        java.lang.String str93 = strConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional94 = strConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (int) (short) -1, 35L, (long) (short) 1, timestampType22, (java.lang.Long) 10L, (int) ' ', 0, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", serializable27, headers67, intOptional94);
        long long96 = strConsumerRecord95.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 10 + "'", serializable46, (short) 10);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str62, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable82 + "' != '" + (short) 10 + "'", serializable82, (short) 10);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long18 = strConsumerRecord17.timestamp();
        long long19 = strConsumerRecord17.checksum();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord17.leaderEpoch();
        long long21 = strConsumerRecord17.timestamp();
        long long22 = strConsumerRecord17.offset();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass24 = strConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (byte) 0, (long) '#', "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (java.io.Serializable) wildcardClass24);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100.0)", 52, (long) (byte) 1, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) wildcardClass24);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", 0, 0L, "", (java.io.Serializable) (byte) 1);
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord27.timestampType();
        java.util.Optional<java.lang.Integer> intOptional29 = strConsumerRecord27.leaderEpoch();
        int int30 = strConsumerRecord27.serializedValueSize();
        long long31 = strConsumerRecord27.offset();
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        int int57 = strConsumerRecord53.serializedValueSize();
        int int58 = strConsumerRecord53.partition();
        java.lang.String str59 = strConsumerRecord53.key();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord53.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str59, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional60);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers7 = strConsumerRecord5.headers();
        int int8 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        int int23 = strConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType24, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long40 = strConsumerRecord39.timestamp();
        int int41 = strConsumerRecord39.partition();
        java.io.Serializable serializable42 = strConsumerRecord39.value();
        java.lang.Class<?> wildcardClass43 = serializable42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long50 = strConsumerRecord49.timestamp();
        int int51 = strConsumerRecord49.partition();
        java.lang.String str52 = strConsumerRecord49.topic();
        long long53 = strConsumerRecord49.offset();
        java.lang.Class<?> wildcardClass54 = strConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType24, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass43, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long73 = strConsumerRecord72.timestamp();
        int int74 = strConsumerRecord72.partition();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord72.timestampType();
        java.lang.String str76 = strConsumerRecord72.toString();
        java.io.Serializable serializable77 = strConsumerRecord72.value();
        java.lang.Class<?> wildcardClass78 = strConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", (int) (byte) 1, (long) 32, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass78);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int86 = strConsumerRecord85.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional87 = strConsumerRecord85.leaderEpoch();
        java.lang.String str88 = strConsumerRecord85.key();
        long long89 = strConsumerRecord85.checksum();
        int int90 = strConsumerRecord85.serializedKeySize();
        org.apache.kafka.common.header.Headers headers91 = strConsumerRecord85.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> objConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", 35, (long) (byte) 0, (java.lang.Object) wildcardClass78, strConsumerRecord85);
        java.lang.String str93 = strConsumerRecord85.topic();
        java.lang.Class<?> wildcardClass94 = strConsumerRecord85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (int) 'a', 52L, (long) 32, timestampType24, (long) (byte) 0, (int) '#', (int) '4', (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.lang.reflect.AnnotatedElement) wildcardClass94);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (-1), (long) (short) 10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass94);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 10 + "'", serializable42, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str76, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable77 + "' != '" + (short) 10 + "'", serializable77, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(intOptional87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(headers91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        java.lang.String str14 = strConsumerRecord5.topic();
        long long15 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord33.leaderEpoch();
        java.io.Serializable serializable36 = strConsumerRecord33.value();
        long long37 = strConsumerRecord33.checksum();
        long long38 = strConsumerRecord33.offset();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) -1 + "'", serializable36, (byte) -1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        java.lang.String str7 = strConsumerRecord5.topic();
        long long8 = strConsumerRecord5.checksum();
        long long9 = strConsumerRecord5.offset();
        int int10 = strConsumerRecord5.partition();
        int int11 = strConsumerRecord5.serializedValueSize();
        java.lang.String str12 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int22 = strConsumerRecord21.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional23 = strConsumerRecord21.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str30 = strConsumerRecord29.topic();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord21, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType31);
        int int33 = strConsumerRecord21.partition();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord21.headers();
        int int35 = strConsumerRecord21.serializedKeySize();
        java.lang.String str36 = strConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long44 = strConsumerRecord43.timestamp();
        long long45 = strConsumerRecord43.checksum();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord43.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord43.timestampType();
        java.lang.String str48 = strConsumerRecord43.topic();
        java.util.Optional<java.lang.Integer> intOptional49 = strConsumerRecord43.leaderEpoch();
        org.apache.kafka.common.header.Headers headers50 = strConsumerRecord43.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord56.headers();
        java.io.Serializable serializable58 = strConsumerRecord56.value();
        java.lang.String str59 = strConsumerRecord56.key();
        java.lang.String str60 = strConsumerRecord56.key();
        int int61 = strConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional62 = strConsumerRecord56.leaderEpoch();
        long long63 = strConsumerRecord56.timestamp();
        java.util.Optional<java.lang.Integer> intOptional64 = strConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 1, (long) (byte) -1, (long) (byte) 0, timestampType8, (java.lang.Long) 32L, (int) (short) 100, (int) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", (java.io.Serializable) timestampType37, headers50, intOptional64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)", (int) (short) -1, (long) (short) -1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)");
        long long67 = strConsumerRecord66.checksum();
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertEquals("'" + serializable58 + "' != '" + (short) 0 + "'", serializable58, (short) 0);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        int int13 = strConsumerRecord9.serializedValueSize();
        java.lang.String str14 = strConsumerRecord9.key();
        java.io.Serializable serializable15 = strConsumerRecord9.value();
        java.lang.String str16 = strConsumerRecord9.key();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord9.headers();
        int int18 = strConsumerRecord9.serializedValueSize();
        long long19 = strConsumerRecord9.checksum();
        int int20 = strConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers21 = strConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.io.Serializable) timestampType22);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.String str13 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord9.headers();
        int int12 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord9.headers();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        long long15 = strConsumerRecord9.timestamp();
        int int16 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord27.timestampType();
        java.lang.String str31 = strConsumerRecord27.key();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int39 = strConsumerRecord38.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord38.leaderEpoch();
        java.lang.String str41 = strConsumerRecord38.key();
        long long42 = strConsumerRecord38.offset();
        java.lang.String str43 = strConsumerRecord38.toString();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord38.timestampType();
        java.lang.String str45 = strConsumerRecord38.toString();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord38.leaderEpoch();
        org.apache.kafka.common.header.Headers headers47 = strConsumerRecord38.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) 'a', 1L, (long) 'a', timestampType17, (java.lang.Long) 32L, (int) (short) 100, 10, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType32, headers47);
        int int49 = strConsumerRecord48.partition();
        java.lang.String str50 = strConsumerRecord48.key();
        long long51 = strConsumerRecord48.checksum();
        long long52 = strConsumerRecord48.checksum();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str43, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str45, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str50, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 32L + "'", long51 == 32L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 32L + "'", long52 == 32L);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        int int7 = strConsumerRecord5.serializedValueSize();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        int int11 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        int int8 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        int int10 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.partition();
        int int11 = strConsumerRecord5.partition();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        java.lang.String str14 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        java.lang.String str13 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        int int57 = strConsumerRecord53.serializedValueSize();
        int int58 = strConsumerRecord53.serializedValueSize();
        long long59 = strConsumerRecord53.timestamp();
        java.lang.String str60 = strConsumerRecord53.topic();
        long long61 = strConsumerRecord53.offset();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str60, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.toString();
        long long56 = strConsumerRecord53.checksum();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord53.headers();
        java.lang.Class<?> wildcardClass58 = headers57.getClass();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str55, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        int int19 = strConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType20, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long36 = strConsumerRecord35.timestamp();
        int int37 = strConsumerRecord35.partition();
        java.io.Serializable serializable38 = strConsumerRecord35.value();
        java.lang.Class<?> wildcardClass39 = serializable38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long46 = strConsumerRecord45.timestamp();
        int int47 = strConsumerRecord45.partition();
        java.lang.String str48 = strConsumerRecord45.topic();
        long long49 = strConsumerRecord45.offset();
        java.lang.Class<?> wildcardClass50 = strConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType20, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.GenericDeclaration) wildcardClass50);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType61 = strConsumerRecord60.timestampType();
        int int62 = strConsumerRecord60.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord60.leaderEpoch();
        java.lang.String str64 = strConsumerRecord60.toString();
        long long65 = strConsumerRecord60.checksum();
        int int66 = strConsumerRecord60.partition();
        long long67 = strConsumerRecord60.offset();
        java.lang.String str68 = strConsumerRecord60.toString();
        org.apache.kafka.common.record.TimestampType timestampType69 = strConsumerRecord60.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.String> strConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.String>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )", (int) (byte) 0, (long) '4', 100L, timestampType20, (long) (byte) -1, 100, (int) 'a', strConsumerRecord60, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        long long72 = strConsumerRecord60.timestamp();
        org.apache.kafka.common.header.Headers headers73 = strConsumerRecord60.headers();
        int int74 = strConsumerRecord60.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 10 + "'", serializable38, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str64, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str68, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        org.apache.storm.kafka.spout.KafkaSpoutConfig<org.apache.kafka.common.header.Headers, org.apache.kafka.common.record.TimestampType> headersKafkaSpoutConfig0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, org.apache.kafka.common.record.TimestampType> headersKafkaSpout1 = new org.apache.storm.kafka.spout.KafkaSpout<org.apache.kafka.common.header.Headers, org.apache.kafka.common.record.TimestampType>(headersKafkaSpoutConfig0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) ' ', 52L, "", (java.io.Serializable) (short) -1);
        java.lang.String str40 = strConsumerRecord39.toString();
        long long41 = strConsumerRecord39.checksum();
        int int42 = strConsumerRecord39.serializedKeySize();
        java.io.Serializable serializable43 = strConsumerRecord39.value();
        org.apache.kafka.common.header.Headers headers44 = strConsumerRecord39.headers();
        long long45 = strConsumerRecord39.offset();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str40, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) -1 + "'", serializable43, (short) -1);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long26 = strConsumerRecord25.timestamp();
        int int27 = strConsumerRecord25.partition();
        java.lang.String str28 = strConsumerRecord25.topic();
        java.lang.Class<?> wildcardClass29 = strConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str48 = strConsumerRecord47.topic();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord39, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType49);
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord39.headers();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (short) 100, (long) 'a', (long) ' ', timestampType16, (java.lang.Long) 0L, (int) (byte) 100, (-1), (java.lang.reflect.GenericDeclaration) wildcardClass29, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", headers52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 100, (long) (byte) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) (short) 100);
        int int55 = strConsumerRecord54.serializedValueSize();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord54.headers();
        java.lang.String str57 = strConsumerRecord54.key();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord54.leaderEpoch();
        java.lang.String str59 = strConsumerRecord54.topic();
        java.lang.String str60 = strConsumerRecord54.topic();
        int int61 = strConsumerRecord54.partition();
        java.lang.String str62 = strConsumerRecord54.toString();
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord54.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str57, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str59, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str60, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)" + "'", str62, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)");
        org.junit.Assert.assertNotNull(intOptional63);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.offset();
        long long12 = strConsumerRecord9.offset();
        java.lang.String str13 = strConsumerRecord9.key();
        int int14 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 52L, (long) (short) 1, timestampType15, 10L, (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable20);
        java.lang.String str22 = strConsumerRecord21.toString();
        long long23 = strConsumerRecord21.timestamp();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)" + "'", str22, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedValueSize();
        java.lang.String str11 = strConsumerRecord5.key();
        int int12 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long26 = strConsumerRecord25.timestamp();
        int int27 = strConsumerRecord25.partition();
        java.lang.String str28 = strConsumerRecord25.topic();
        long long29 = strConsumerRecord25.offset();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int37 = strConsumerRecord36.serializedValueSize();
        int int38 = strConsumerRecord36.partition();
        org.apache.kafka.common.header.Headers headers39 = strConsumerRecord36.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str59 = strConsumerRecord58.topic();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int81 = strConsumerRecord80.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional82 = strConsumerRecord80.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType60, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers74, intOptional82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers> annotatedElementConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers>("hi!", (int) (short) 1, 1L, 100L, timestampType16, (java.lang.Long) 1L, 100, (int) (byte) 10, (java.lang.reflect.AnnotatedElement) wildcardClass30, headers39, headers48, intOptional82);
        java.io.Serializable serializable89 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (short) -1, (long) '#', (long) (-1), timestampType16, 1L, 32, 97, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", serializable89);
        int int91 = strConsumerRecord90.serializedKeySize();
        java.io.Serializable serializable92 = strConsumerRecord90.value();
        org.apache.kafka.common.header.Headers headers93 = strConsumerRecord90.headers();
        long long94 = strConsumerRecord90.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 32 + "'", int91 == 32);
        org.junit.Assert.assertNull(serializable92);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 35L + "'", long94 == 35L);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.partition();
        int int11 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.String str13 = strConsumerRecord5.topic();
        long long14 = strConsumerRecord5.timestamp();
        java.lang.String str15 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        long long14 = strConsumerRecord9.timestamp();
        long long15 = strConsumerRecord9.offset();
        java.lang.String str16 = strConsumerRecord9.toString();
        long long17 = strConsumerRecord9.checksum();
        java.io.Serializable serializable18 = strConsumerRecord9.value();
        java.lang.String str19 = strConsumerRecord9.topic();
        org.apache.kafka.common.header.Headers headers20 = strConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        int int32 = strConsumerRecord30.serializedKeySize();
        int int33 = strConsumerRecord30.partition();
        java.io.Serializable serializable34 = strConsumerRecord30.value();
        int int35 = strConsumerRecord30.serializedValueSize();
        int int36 = strConsumerRecord30.serializedKeySize();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord30.headers();
        long long38 = strConsumerRecord30.offset();
        java.io.Serializable serializable39 = strConsumerRecord30.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType54 = strConsumerRecord53.timestampType();
        int int55 = strConsumerRecord53.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType56 = strConsumerRecord53.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType56);
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord57.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord57.timestampType();
        long long60 = strConsumerRecord57.checksum();
        java.io.Serializable serializable61 = strConsumerRecord57.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", 100, 52L, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", serializable61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str69 = strConsumerRecord68.topic();
        java.io.Serializable serializable70 = strConsumerRecord68.value();
        java.lang.String str71 = strConsumerRecord68.topic();
        java.lang.String str72 = strConsumerRecord68.toString();
        org.apache.kafka.common.header.Headers headers73 = strConsumerRecord68.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.io.Serializable>("", (int) (byte) 1, (long) 0, (long) 10, timestampType21, (java.lang.Long) 10L, (int) (short) 0, 32, (java.lang.Object) strConsumerRecord30, (java.io.Serializable) 52L, headers73);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 10 + "'", serializable34, (short) 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + (short) 10 + "'", serializable39, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + serializable70 + "' != '" + (short) 10 + "'", serializable70, (short) 10);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str72, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers73);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.offset();
        java.lang.String str10 = strConsumerRecord5.topic();
        int int11 = strConsumerRecord5.serializedValueSize();
        java.lang.Class<?> wildcardClass12 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        java.lang.String str24 = strConsumerRecord12.topic();
        long long25 = strConsumerRecord12.offset();
        long long26 = strConsumerRecord12.offset();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord12.timestampType();
        java.io.Serializable serializable28 = strConsumerRecord12.value();
        java.lang.Class<?> wildcardClass29 = strConsumerRecord12.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type> charSequenceConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) ' ', 10L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (java.lang.reflect.Type) wildcardClass29);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (short) 10 + "'", serializable28, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        int int23 = strConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType24, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long40 = strConsumerRecord39.timestamp();
        int int41 = strConsumerRecord39.partition();
        java.io.Serializable serializable42 = strConsumerRecord39.value();
        java.lang.Class<?> wildcardClass43 = serializable42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long50 = strConsumerRecord49.timestamp();
        int int51 = strConsumerRecord49.partition();
        java.lang.String str52 = strConsumerRecord49.topic();
        long long53 = strConsumerRecord49.offset();
        java.lang.Class<?> wildcardClass54 = strConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType24, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass43, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        java.io.Serializable serializable60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, 0L, 0L, timestampType24, (long) 10, (int) '#', 10, "hi!", serializable60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (byte) 100, (long) (short) -1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", serializable60);
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord62.leaderEpoch();
        java.lang.Class<?> wildcardClass64 = strConsumerRecord62.getClass();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 10 + "'", serializable42, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 100, (long) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100.0d);
        java.lang.String str10 = strConsumerRecord9.key();
        int int11 = strConsumerRecord9.serializedKeySize();
        java.lang.String str12 = strConsumerRecord9.toString();
        long long13 = strConsumerRecord9.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        int int26 = strConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord24.timestampType();
        java.lang.Class<?> wildcardClass28 = timestampType27.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str35 = strConsumerRecord34.topic();
        java.io.Serializable serializable36 = strConsumerRecord34.value();
        java.lang.String str37 = strConsumerRecord34.topic();
        java.lang.String str38 = strConsumerRecord34.toString();
        java.lang.String str39 = strConsumerRecord34.key();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord34.leaderEpoch();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord34.headers();
        org.apache.kafka.common.header.Headers headers42 = strConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)", (int) (byte) 100, 0L, (long) (short) 1, timestampType14, (java.lang.Long) (-1L), (int) (short) -1, (int) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)", (java.io.Serializable) wildcardClass28, headers42);
        java.lang.String str44 = strConsumerRecord43.topic();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)" + "'", str12, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 10 + "'", serializable36, (short) 10);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str38, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)" + "'", str44, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)");
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.timestamp();
        long long12 = strConsumerRecord5.offset();
        java.lang.String str13 = strConsumerRecord5.key();
        int int14 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.timestamp();
        long long12 = strConsumerRecord5.offset();
        java.lang.String str13 = strConsumerRecord5.key();
        long long14 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.partition();
        long long15 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        java.lang.String str21 = strConsumerRecord8.key();
        java.lang.String str22 = strConsumerRecord8.topic();
        java.io.Serializable serializable23 = strConsumerRecord8.value();
        long long24 = strConsumerRecord8.offset();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 10 + "'", serializable23, (short) 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        java.lang.String str14 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        int int10 = strConsumerRecord5.serializedKeySize();
        long long11 = strConsumerRecord5.timestamp();
        java.lang.String str12 = strConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord9.leaderEpoch();
        java.lang.String str12 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord23.timestampType();
        int int25 = strConsumerRecord23.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional26 = strConsumerRecord23.leaderEpoch();
        java.lang.String str27 = strConsumerRecord23.toString();
        long long28 = strConsumerRecord23.checksum();
        int int29 = strConsumerRecord23.partition();
        long long30 = strConsumerRecord23.offset();
        java.lang.String str31 = strConsumerRecord23.key();
        int int32 = strConsumerRecord23.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord23.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord39.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord39.timestampType();
        org.apache.kafka.common.header.Headers headers42 = strConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str49 = strConsumerRecord48.topic();
        java.lang.String str50 = strConsumerRecord48.topic();
        int int51 = strConsumerRecord48.partition();
        java.util.Optional<java.lang.Integer> intOptional52 = strConsumerRecord48.leaderEpoch();
        java.lang.String str53 = strConsumerRecord48.key();
        java.lang.String str54 = strConsumerRecord48.toString();
        java.lang.String str55 = strConsumerRecord48.toString();
        java.util.Optional<java.lang.Integer> intOptional56 = strConsumerRecord48.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", 52, (long) '#', (long) 1, timestampType13, (java.lang.Long) 10L, (int) (short) -1, 1, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType33, headers42, intOptional56);
        java.lang.String str58 = strConsumerRecord57.key();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str54, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str58, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long26 = strConsumerRecord25.timestamp();
        int int27 = strConsumerRecord25.partition();
        java.lang.String str28 = strConsumerRecord25.topic();
        long long29 = strConsumerRecord25.offset();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int37 = strConsumerRecord36.serializedValueSize();
        int int38 = strConsumerRecord36.partition();
        org.apache.kafka.common.header.Headers headers39 = strConsumerRecord36.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str59 = strConsumerRecord58.topic();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int81 = strConsumerRecord80.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional82 = strConsumerRecord80.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType60, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers74, intOptional82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers> annotatedElementConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers>("hi!", (int) (short) 1, 1L, 100L, timestampType16, (java.lang.Long) 1L, 100, (int) (byte) 10, (java.lang.reflect.AnnotatedElement) wildcardClass30, headers39, headers48, intOptional82);
        java.io.Serializable serializable89 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (short) -1, (long) '#', (long) (-1), timestampType16, 1L, 32, 97, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", serializable89);
        int int91 = strConsumerRecord90.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional92 = strConsumerRecord90.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType93 = strConsumerRecord90.timestampType();
        org.apache.kafka.common.header.Headers headers94 = strConsumerRecord90.headers();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 32 + "'", int91 == 32);
        org.junit.Assert.assertNotNull(intOptional92);
        org.junit.Assert.assertTrue("'" + timestampType93 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType93.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers94);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        int int10 = strConsumerRecord8.partition();
        long long11 = strConsumerRecord8.offset();
        java.lang.String str12 = strConsumerRecord8.key();
        long long13 = strConsumerRecord8.checksum();
        java.lang.Class<?> wildcardClass14 = strConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 100, (long) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100.0d);
        java.lang.String str25 = strConsumerRecord24.key();
        int int26 = strConsumerRecord24.serializedKeySize();
        java.lang.Class<?> wildcardClass27 = strConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) '4', (long) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass27);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", (int) '#', (long) 0, (java.lang.reflect.GenericDeclaration) wildcardClass14, (java.lang.reflect.GenericDeclaration) wildcardClass27);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str25, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType12);
        java.io.Serializable serializable14 = strConsumerRecord13.value();
        int int15 = strConsumerRecord13.partition();
        int int16 = strConsumerRecord13.serializedValueSize();
        long long17 = strConsumerRecord13.offset();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        java.lang.String str16 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.lang.String str13 = strConsumerRecord5.key();
        java.lang.String str14 = strConsumerRecord5.topic();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 0 + "'", serializable11, (short) 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long13 = strConsumerRecord12.timestamp();
        int int14 = strConsumerRecord12.partition();
        java.io.Serializable serializable15 = strConsumerRecord12.value();
        java.lang.Class<?> wildcardClass16 = strConsumerRecord12.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (byte) 10, (long) 32, (java.lang.reflect.GenericDeclaration) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 97, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) (byte) 10);
        java.lang.String str20 = strConsumerRecord19.key();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord19.timestampType();
        java.lang.String str22 = strConsumerRecord19.topic();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str20, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str22, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.topic();
        java.io.Serializable serializable24 = strConsumerRecord8.value();
        int int25 = strConsumerRecord8.serializedKeySize();
        java.lang.String str26 = strConsumerRecord8.key();
        java.lang.String str27 = strConsumerRecord8.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.offset();
        java.lang.String str10 = strConsumerRecord5.topic();
        long long11 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.partition();
        long long13 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int25 = strConsumerRecord24.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional26 = strConsumerRecord24.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str33 = strConsumerRecord32.topic();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord24, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType34, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord50.timestampType();
        java.lang.Object obj54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("", 0, (long) (byte) 100, (long) (byte) -1, timestampType34, (long) (byte) 100, (int) (short) 10, (int) (short) -1, timestampType53, obj54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 10, (-1L), 10L, timestampType53, 35L, 100, 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        java.io.Serializable serializable66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (int) (byte) 1, (long) 0, 35L, timestampType53, (long) 97, (-1), 35, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", serializable66);
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord67.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional68);
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.toString();
        int int13 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.lang.String str10 = strConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        long long14 = strConsumerRecord5.offset();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        long long10 = strConsumerRecord5.checksum();
        long long11 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        long long13 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long18 = strConsumerRecord17.timestamp();
        int int19 = strConsumerRecord17.partition();
        java.lang.String str20 = strConsumerRecord17.topic();
        long long21 = strConsumerRecord17.offset();
        java.io.Serializable serializable22 = strConsumerRecord17.value();
        java.lang.String str23 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType24, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord50.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord66.timestampType();
        int int68 = strConsumerRecord66.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType69 = strConsumerRecord66.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType69, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType52, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 1, (long) '#', timestampType35, (long) (short) 100, 0, (int) ' ', "hi!", (java.io.Serializable) 1L);
        java.io.Serializable serializable82 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int89 = strConsumerRecord88.serializedValueSize();
        int int90 = strConsumerRecord88.partition();
        int int91 = strConsumerRecord88.partition();
        org.apache.kafka.common.header.Headers headers92 = strConsumerRecord88.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, (long) ' ', (long) '4', timestampType35, (java.lang.Long) (-1L), (int) (byte) 1, (int) '4', "", serializable82, headers92);
        org.apache.kafka.common.header.Headers headers94 = strConsumerRecord93.headers();
        java.util.Optional<java.lang.Integer> intOptional95 = strConsumerRecord93.leaderEpoch();
        java.lang.String str96 = strConsumerRecord93.key();
        org.apache.kafka.common.record.TimestampType timestampType97 = strConsumerRecord93.timestampType();
        long long98 = strConsumerRecord93.offset();
        long long99 = strConsumerRecord93.timestamp();
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 10 + "'", serializable22, (short) 10);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + timestampType97 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType97.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 32L + "'", long98 == 32L);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 52L + "'", long99 == 52L);
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        int int15 = strConsumerRecord13.partition();
        long long16 = strConsumerRecord13.offset();
        int int17 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int28 = strConsumerRecord27.serializedValueSize();
        int int29 = strConsumerRecord27.partition();
        long long30 = strConsumerRecord27.offset();
        long long31 = strConsumerRecord27.offset();
        org.apache.kafka.common.header.Headers headers32 = strConsumerRecord27.headers();
        long long33 = strConsumerRecord27.checksum();
        long long34 = strConsumerRecord27.checksum();
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord27.headers();
        int int36 = strConsumerRecord27.partition();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord27.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord43.timestampType();
        int int45 = strConsumerRecord43.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord43.timestampType();
        java.lang.Class<?> wildcardClass47 = strConsumerRecord43.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.GenericDeclaration> intOptionalConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 1)", (int) (short) -1, (long) (byte) 10, (long) 35, timestampType18, (long) '4', (int) (short) 1, 10, intOptional37, (java.lang.reflect.GenericDeclaration) wildcardClass47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", 0, (long) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) (byte) 10);
        java.lang.String str50 = strConsumerRecord49.key();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str50, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        long long15 = strConsumerRecord9.checksum();
        int int16 = strConsumerRecord9.serializedKeySize();
        java.lang.Class<?> wildcardClass17 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) ' ', (long) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass17);
        java.lang.String str19 = strConsumerRecord18.key();
        java.io.Serializable serializable20 = strConsumerRecord18.value();
        java.util.Optional<java.lang.Integer> intOptional21 = strConsumerRecord18.leaderEpoch();
        long long22 = strConsumerRecord18.checksum();
        org.apache.kafka.common.header.Headers headers23 = strConsumerRecord18.headers();
        org.apache.kafka.common.header.Headers headers24 = strConsumerRecord18.headers();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str19, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertNotNull(serializable20);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertNotNull(headers24);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        long long14 = strConsumerRecord5.timestamp();
        java.lang.String str15 = strConsumerRecord5.key();
        int int16 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        org.apache.kafka.common.header.Headers headers20 = strConsumerRecord8.headers();
        long long21 = strConsumerRecord8.offset();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        long long12 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) ' ', 52L, "", (java.io.Serializable) (short) -1);
        java.lang.String str40 = strConsumerRecord39.toString();
        long long41 = strConsumerRecord39.offset();
        java.lang.String str42 = strConsumerRecord39.toString();
        long long43 = strConsumerRecord39.timestamp();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str40, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str42, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord8.timestampType();
        java.lang.String str12 = strConsumerRecord8.key();
        long long13 = strConsumerRecord8.timestamp();
        long long14 = strConsumerRecord8.offset();
        java.lang.String str15 = strConsumerRecord8.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int25 = strConsumerRecord24.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional26 = strConsumerRecord24.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str33 = strConsumerRecord32.topic();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord24, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34);
        java.lang.String str36 = strConsumerRecord24.topic();
        long long37 = strConsumerRecord24.offset();
        java.io.Serializable serializable38 = strConsumerRecord24.value();
        int int39 = strConsumerRecord24.serializedKeySize();
        long long40 = strConsumerRecord24.timestamp();
        long long41 = strConsumerRecord24.offset();
        java.lang.String str42 = strConsumerRecord24.topic();
        java.lang.String str43 = strConsumerRecord24.key();
        org.apache.kafka.common.header.Headers headers44 = strConsumerRecord24.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.common.header.Headers> objConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = 1.0)", (int) (byte) -1, (-1L), (java.lang.Object) str15, headers44);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 10 + "'", serializable38, (short) 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(headers44);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        java.lang.String str21 = strConsumerRecord8.key();
        int int22 = strConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord8.timestampType();
        int int24 = strConsumerRecord8.serializedValueSize();
        long long25 = strConsumerRecord8.timestamp();
        long long26 = strConsumerRecord8.timestamp();
        long long27 = strConsumerRecord8.timestamp();
        java.util.Optional<java.lang.Integer> intOptional28 = strConsumerRecord8.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(intOptional28);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long21 = strConsumerRecord20.timestamp();
        int int22 = strConsumerRecord20.partition();
        java.lang.String str23 = strConsumerRecord20.topic();
        long long24 = strConsumerRecord20.offset();
        java.io.Serializable serializable25 = strConsumerRecord20.value();
        java.lang.String str26 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord37.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType27, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType38);
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long51 = strConsumerRecord50.timestamp();
        int int52 = strConsumerRecord50.partition();
        java.lang.String str53 = strConsumerRecord50.topic();
        long long54 = strConsumerRecord50.offset();
        java.io.Serializable serializable55 = strConsumerRecord50.value();
        java.lang.String str56 = strConsumerRecord50.topic();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord50.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int64 = strConsumerRecord63.serializedValueSize();
        int int65 = strConsumerRecord63.partition();
        int int66 = strConsumerRecord63.partition();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (short) -1, (long) '4', (long) 10, timestampType40, (java.lang.Long) 100L, (int) (byte) 10, 0, "", (java.io.Serializable) timestampType57, headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.String> timestampTypeEnumConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.String>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (-1), (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType57, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        java.io.Serializable serializable75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) -1, (long) 35, (long) 35, timestampType57, (long) 97, (int) '4', (int) (byte) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = -1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10.0)", serializable75);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 10 + "'", serializable25, (short) 10);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 52L + "'", long54 == 52L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 10 + "'", serializable55, (short) 10);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(headers67);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        java.lang.String str24 = strConsumerRecord8.key();
        long long25 = strConsumerRecord8.checksum();
        java.lang.String str26 = strConsumerRecord8.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str26, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        java.lang.String str13 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.partition();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertNotNull(headers14);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        java.lang.Object obj3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.CharSequence> objConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 1)", 35, (long) 35, obj3, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)");
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str27 = strConsumerRecord26.topic();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        int int41 = strConsumerRecord39.partition();
        org.apache.kafka.common.header.Headers headers42 = strConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int49 = strConsumerRecord48.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional50 = strConsumerRecord48.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType28, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers42, intOptional50);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int63 = strConsumerRecord62.serializedValueSize();
        int int64 = strConsumerRecord62.partition();
        org.apache.kafka.common.header.Headers headers65 = strConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType28, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) -1, (long) '4', 0L, timestampType28, (long) (byte) 10, (-1), 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 1.0f);
        int int73 = strConsumerRecord72.serializedKeySize();
        java.lang.Class<?> wildcardClass74 = strConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (int) (short) -1, 0L, (long) '#', timestampType4, (long) 35, (int) '4', (-1), "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = 1.0)", (java.io.Serializable) wildcardClass74);
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord75.timestampType();
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNull(timestampType76);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.lang.String str13 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.partition();
        int int14 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        int int9 = strConsumerRecord5.partition();
        java.lang.String str10 = strConsumerRecord5.key();
        java.lang.String str11 = strConsumerRecord5.topic();
        java.lang.String str12 = strConsumerRecord5.key();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedValueSize();
        long long14 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        int int23 = strConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType24, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long40 = strConsumerRecord39.timestamp();
        int int41 = strConsumerRecord39.partition();
        java.io.Serializable serializable42 = strConsumerRecord39.value();
        java.lang.Class<?> wildcardClass43 = serializable42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long50 = strConsumerRecord49.timestamp();
        int int51 = strConsumerRecord49.partition();
        java.lang.String str52 = strConsumerRecord49.topic();
        long long53 = strConsumerRecord49.offset();
        java.lang.Class<?> wildcardClass54 = strConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType24, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass43, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        java.io.Serializable serializable60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, 0L, 0L, timestampType24, (long) 10, (int) '#', 10, "hi!", serializable60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (byte) 100, (long) (short) -1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", serializable60);
        int int63 = strConsumerRecord62.partition();
        java.lang.String str64 = strConsumerRecord62.toString();
        int int65 = strConsumerRecord62.partition();
        org.apache.kafka.common.record.TimestampType timestampType66 = strConsumerRecord62.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord62.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 10 + "'", serializable42, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)" + "'", str64, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        int int16 = strConsumerRecord5.serializedKeySize();
        int int17 = strConsumerRecord5.serializedKeySize();
        int int18 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str10 = strConsumerRecord9.topic();
        java.lang.Class<?> wildcardClass11 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 10, (long) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass11);
        java.io.Serializable serializable13 = strConsumerRecord12.value();
        int int14 = strConsumerRecord12.serializedKeySize();
        int int15 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord12.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(serializable13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intOptional16);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long18 = strConsumerRecord17.timestamp();
        int int19 = strConsumerRecord17.partition();
        java.io.Serializable serializable20 = strConsumerRecord17.value();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (byte) 0, (long) 100, "hi!", (java.io.Serializable) timestampType21);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (byte) 10, 32L, (long) (short) 100, timestampType21, 1L, 0, (int) (short) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int46 = strConsumerRecord45.serializedValueSize();
        int int47 = strConsumerRecord45.partition();
        java.lang.Class<?> wildcardClass48 = strConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long55 = strConsumerRecord54.timestamp();
        long long56 = strConsumerRecord54.checksum();
        long long57 = strConsumerRecord54.timestamp();
        java.lang.String str58 = strConsumerRecord54.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> typeConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 0L, (java.lang.reflect.Type) wildcardClass48, strConsumerRecord54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 0, (long) (byte) 100, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) 0L);
        long long61 = strConsumerRecord60.offset();
        java.lang.Class<?> wildcardClass62 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) -1, (long) (byte) 10, (long) '4', timestampType21, (long) (byte) -1, (int) (byte) 10, (int) (byte) -1, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass62);
        long long64 = strConsumerRecord63.checksum();
        int int65 = strConsumerRecord63.partition();
        long long66 = strConsumerRecord63.offset();
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 10 + "'", serializable20, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.timestamp();
        int int11 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        int int13 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.toString();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedValueSize();
        long long14 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        int int16 = strConsumerRecord5.serializedKeySize();
        int int17 = strConsumerRecord5.serializedKeySize();
        int int18 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord5.leaderEpoch();
        long long20 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        int int13 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.lang.String str15 = strConsumerRecord5.key();
        int int16 = strConsumerRecord5.partition();
        long long17 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedValueSize();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        java.lang.String str14 = strConsumerRecord5.toString();
        java.lang.String str15 = strConsumerRecord5.topic();
        int int16 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        java.lang.String str13 = strConsumerRecord9.toString();
        long long14 = strConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        int int27 = strConsumerRecord25.serializedKeySize();
        int int28 = strConsumerRecord25.partition();
        int int29 = strConsumerRecord25.serializedValueSize();
        long long30 = strConsumerRecord25.timestamp();
        org.apache.kafka.common.header.Headers headers31 = strConsumerRecord25.headers();
        org.apache.kafka.common.header.Headers headers32 = strConsumerRecord25.headers();
        long long33 = strConsumerRecord25.timestamp();
        long long34 = strConsumerRecord25.offset();
        java.lang.Class<?> wildcardClass35 = strConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers42 = strConsumerRecord41.headers();
        org.apache.kafka.common.header.Headers headers43 = strConsumerRecord41.headers();
        int int44 = strConsumerRecord41.partition();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord41.leaderEpoch();
        org.apache.kafka.common.header.Headers headers46 = strConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 52, 100L, (long) 52, timestampType15, (java.lang.Long) 52L, (int) (short) -1, 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) wildcardClass35, headers46);
        java.lang.String str48 = strConsumerRecord47.topic();
        java.lang.String str49 = strConsumerRecord47.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str48, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str49, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.lang.String str11 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.String str13 = strConsumerRecord5.toString();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.lang.String str15 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.String str30 = strConsumerRecord28.topic();
        int int31 = strConsumerRecord28.serializedValueSize();
        long long32 = strConsumerRecord28.offset();
        int int33 = strConsumerRecord28.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.serializedKeySize();
        long long9 = strConsumerRecord5.offset();
        long long10 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.key();
        int int12 = strConsumerRecord5.serializedValueSize();
        int int13 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        long long9 = strConsumerRecord5.checksum();
        java.lang.String str10 = strConsumerRecord5.toString();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.lang.String str13 = strConsumerRecord5.topic();
        int int14 = strConsumerRecord5.serializedKeySize();
        long long15 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.Class<?> wildcardClass13 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.partition();
        long long12 = strConsumerRecord5.offset();
        java.lang.String str13 = strConsumerRecord5.toString();
        int int14 = strConsumerRecord5.partition();
        long long15 = strConsumerRecord5.checksum();
        java.lang.String str16 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.timestamp();
        java.lang.String str12 = strConsumerRecord5.key();
        long long13 = strConsumerRecord5.checksum();
        java.lang.String str14 = strConsumerRecord5.key();
        java.lang.String str15 = strConsumerRecord5.key();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        java.lang.reflect.AnnotatedElement annotatedElement42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord52.timestampType();
        int int54 = strConsumerRecord52.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType55 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType55);
        java.io.Serializable serializable57 = strConsumerRecord56.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Object> annotatedElementConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Object>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", 52, (long) 100, (long) (byte) -1, timestampType15, (long) (byte) 10, (int) '4', 0, annotatedElement42, (java.lang.Object) strConsumerRecord56);
        java.lang.Class<?> wildcardClass59 = annotatedElementConsumerRecord58.getClass();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.timestamp();
        long long10 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        int int12 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long23 = strConsumerRecord22.timestamp();
        int int24 = strConsumerRecord22.partition();
        java.lang.String str25 = strConsumerRecord22.topic();
        int int26 = strConsumerRecord22.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord22.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) 1, 100L, (long) 1, timestampType12, (long) 35, 1, (int) (short) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType27);
        int int29 = strConsumerRecord28.serializedValueSize();
        long long30 = strConsumerRecord28.offset();
        java.lang.String str31 = strConsumerRecord28.toString();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)" + "'", str31, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)");
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long19 = strConsumerRecord18.timestamp();
        long long20 = strConsumerRecord18.checksum();
        long long21 = strConsumerRecord18.timestamp();
        java.lang.String str22 = strConsumerRecord18.topic();
        long long23 = strConsumerRecord18.timestamp();
        java.io.Serializable serializable24 = strConsumerRecord18.value();
        java.lang.String str25 = strConsumerRecord18.key();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 0, (long) (byte) 1, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (java.io.Serializable) timestampType26);
        java.lang.Class<?> wildcardClass28 = timestampType26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int35 = strConsumerRecord34.serializedValueSize();
        int int36 = strConsumerRecord34.partition();
        long long37 = strConsumerRecord34.offset();
        long long38 = strConsumerRecord34.offset();
        org.apache.kafka.common.header.Headers headers39 = strConsumerRecord34.headers();
        long long40 = strConsumerRecord34.checksum();
        int int41 = strConsumerRecord34.serializedKeySize();
        org.apache.kafka.common.header.Headers headers42 = strConsumerRecord34.headers();
        long long43 = strConsumerRecord34.checksum();
        java.lang.String str44 = strConsumerRecord34.toString();
        int int45 = strConsumerRecord34.serializedKeySize();
        org.apache.kafka.common.header.Headers headers46 = strConsumerRecord34.headers();
        java.util.Optional<java.lang.Integer> intOptional47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", (int) (byte) 100, 0L, (long) ' ', timestampType4, (java.lang.Long) 35L, (int) (short) -1, (int) 'a', "", (java.io.Serializable) wildcardClass28, headers46, intOptional47);
        int int49 = strConsumerRecord48.partition();
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str44, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        long long19 = strConsumerRecord13.offset();
        long long20 = strConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord39.timestampType();
        int int41 = strConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType42);
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord43.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord43.timestampType();
        long long46 = strConsumerRecord43.checksum();
        java.io.Serializable serializable47 = strConsumerRecord43.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", 100, 52L, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", serializable47);
        java.io.Serializable serializable49 = strConsumerRecord48.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (int) (short) 1, (long) 35, 100L, timestampType21, (long) 32, (int) (short) 0, (int) (short) -1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 1)", serializable49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (int) (short) 0, (long) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100.0)", (java.io.Serializable) (short) -1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        java.lang.String str14 = strConsumerRecord5.topic();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.lang.String str16 = strConsumerRecord5.key();
        long long17 = strConsumerRecord5.checksum();
        java.io.Serializable serializable18 = strConsumerRecord5.value();
        java.lang.String str19 = strConsumerRecord5.topic();
        java.io.Serializable serializable20 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 10 + "'", serializable20, (short) 10);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord27.timestampType();
        int int29 = strConsumerRecord27.serializedKeySize();
        int int30 = strConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)", (int) '#', (long) 32, 10L, timestampType17, (long) (byte) 10, (int) (byte) 100, (int) 'a', "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.io.Serializable) timestampType32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long44 = strConsumerRecord43.timestamp();
        long long45 = strConsumerRecord43.offset();
        long long46 = strConsumerRecord43.checksum();
        int int47 = strConsumerRecord43.serializedKeySize();
        java.lang.String str48 = strConsumerRecord43.toString();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long56 = strConsumerRecord55.timestamp();
        int int57 = strConsumerRecord55.partition();
        java.lang.String str58 = strConsumerRecord55.topic();
        int int59 = strConsumerRecord55.serializedValueSize();
        int int60 = strConsumerRecord55.serializedKeySize();
        int int61 = strConsumerRecord55.serializedKeySize();
        org.apache.kafka.common.header.Headers headers62 = strConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, 35L, 1L, timestampType17, (java.lang.Long) 35L, (int) (short) -1, (int) (short) 10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (java.io.Serializable) timestampType49, headers62);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str48, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(headers62);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        long long16 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(headers17);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord28.leaderEpoch();
        int int31 = strConsumerRecord28.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord28.timestampType();
        int int33 = strConsumerRecord28.serializedValueSize();
        java.lang.String str34 = strConsumerRecord28.key();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        int int19 = strConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType20, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 0, 1L, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) '#');
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int39 = strConsumerRecord38.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord38.leaderEpoch();
        java.lang.String str41 = strConsumerRecord38.key();
        long long42 = strConsumerRecord38.offset();
        java.lang.String str43 = strConsumerRecord38.toString();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord38.timestampType();
        java.lang.String str45 = strConsumerRecord38.toString();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord38.leaderEpoch();
        java.lang.Class<?> wildcardClass47 = strConsumerRecord38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)", 0, (long) '4', (long) (short) -1, timestampType28, (long) 100, (int) (byte) 10, 52, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", (java.io.Serializable) wildcardClass47);
        org.apache.kafka.common.header.Headers headers49 = strConsumerRecord48.headers();
        int int50 = strConsumerRecord48.serializedKeySize();
        long long51 = strConsumerRecord48.timestamp();
        long long52 = strConsumerRecord48.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str43, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str45, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str18 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int31 = strConsumerRecord30.serializedValueSize();
        int int32 = strConsumerRecord30.partition();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType19, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers33, intOptional41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType19, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers56);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) (byte) 10, (long) (short) 1, timestampType19, (long) '#', (int) (short) 10, 10, "hi!", (java.io.Serializable) ' ');
        long long64 = strConsumerRecord63.offset();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        long long8 = strConsumerRecord5.offset();
        int int9 = strConsumerRecord5.serializedKeySize();
        int int10 = strConsumerRecord5.serializedValueSize();
        long long11 = strConsumerRecord5.checksum();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        java.lang.String str16 = strConsumerRecord13.toString();
        int int17 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType18);
        int int20 = strConsumerRecord19.partition();
        int int21 = strConsumerRecord19.partition();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord19.timestampType();
        java.io.Serializable serializable27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long42 = strConsumerRecord41.timestamp();
        int int43 = strConsumerRecord41.partition();
        java.lang.String str44 = strConsumerRecord41.topic();
        long long45 = strConsumerRecord41.offset();
        java.io.Serializable serializable46 = strConsumerRecord41.value();
        java.lang.String str47 = strConsumerRecord41.topic();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType48, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str62 = strConsumerRecord61.toString();
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord61.leaderEpoch();
        int int64 = strConsumerRecord61.partition();
        int int65 = strConsumerRecord61.partition();
        int int66 = strConsumerRecord61.serializedValueSize();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long77 = strConsumerRecord76.timestamp();
        long long78 = strConsumerRecord76.checksum();
        long long79 = strConsumerRecord76.timestamp();
        java.lang.String str80 = strConsumerRecord76.topic();
        long long81 = strConsumerRecord76.timestamp();
        java.io.Serializable serializable82 = strConsumerRecord76.value();
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord76.headers();
        int int84 = strConsumerRecord76.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        java.util.Optional<java.lang.Integer> intOptional91 = strConsumerRecord90.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>> strConsumerRecordConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", 10, (long) 100, strConsumerRecord76, intOptional91);
        java.lang.String str93 = strConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional94 = strConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (int) (short) -1, 35L, (long) (short) 1, timestampType22, (java.lang.Long) 10L, (int) ' ', 0, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", serializable27, headers67, intOptional94);
        long long96 = strConsumerRecord95.checksum();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 10 + "'", serializable46, (short) 10);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str62, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable82 + "' != '" + (short) 10 + "'", serializable82, (short) 10);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 10L + "'", long96 == 10L);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        java.lang.String str8 = strConsumerRecord5.key();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        long long10 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        java.lang.String str12 = strConsumerRecord5.topic();
        long long13 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        java.lang.String str22 = strConsumerRecord8.topic();
        long long23 = strConsumerRecord8.checksum();
        java.lang.String str24 = strConsumerRecord8.key();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord8.headers();
        int int27 = strConsumerRecord8.serializedKeySize();
        org.apache.kafka.common.header.Headers headers28 = strConsumerRecord8.headers();
        long long29 = strConsumerRecord8.offset();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        int int15 = strConsumerRecord5.partition();
        int int16 = strConsumerRecord5.serializedKeySize();
        java.lang.String str17 = strConsumerRecord5.topic();
        java.lang.String str18 = strConsumerRecord5.topic();
        java.lang.String str19 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        int int10 = strConsumerRecord5.serializedValueSize();
        int int11 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        long long13 = strConsumerRecord5.offset();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.lang.String str15 = strConsumerRecord5.toString();
        int int16 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        long long10 = strConsumerRecord5.offset();
        int int11 = strConsumerRecord5.partition();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", (int) (short) 1, 52L, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        java.util.Optional<java.lang.Integer> intOptional6 = strConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        org.junit.Assert.assertNotNull(intOptional6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", serializable7, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) '4', (long) 52, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)");
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        org.junit.Assert.assertNotNull(headers6);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType12);
        java.io.Serializable serializable14 = strConsumerRecord13.value();
        int int15 = strConsumerRecord13.partition();
        int int16 = strConsumerRecord13.serializedKeySize();
        java.lang.String str17 = strConsumerRecord13.topic();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        long long15 = strConsumerRecord13.timestamp();
        long long16 = strConsumerRecord13.checksum();
        int int17 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) -1, 10L, (long) '4', timestampType18, (long) (short) 0, (int) (byte) -1, 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long35 = strConsumerRecord34.timestamp();
        int int36 = strConsumerRecord34.partition();
        java.io.Serializable serializable37 = strConsumerRecord34.value();
        java.lang.Class<?> wildcardClass38 = serializable37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int45 = strConsumerRecord44.serializedValueSize();
        int int46 = strConsumerRecord44.partition();
        int int47 = strConsumerRecord44.serializedValueSize();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int55 = strConsumerRecord54.serializedValueSize();
        int int56 = strConsumerRecord54.partition();
        long long57 = strConsumerRecord54.offset();
        long long58 = strConsumerRecord54.offset();
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord54.timestampType();
        java.lang.String str60 = strConsumerRecord54.toString();
        int int61 = strConsumerRecord54.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional62 = strConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", 32, (long) 35, 97L, timestampType18, (java.lang.Long) 0L, 0, 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (java.io.Serializable) wildcardClass38, headers48, intOptional62);
        org.apache.kafka.common.header.Headers headers64 = strConsumerRecord63.headers();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (short) 10 + "'", serializable37, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str60, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertNotNull(headers64);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.lang.String str12 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        java.lang.String str14 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord9.headers();
        java.lang.Class<?> wildcardClass12 = headers11.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 10, (long) 97, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass12);
        int int14 = strConsumerRecord13.partition();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord13.headers();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(headers15);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        java.lang.Class<?> wildcardClass43 = strConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType18, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass43);
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord44.headers();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord44.timestampType();
        java.io.Serializable serializable47 = strConsumerRecord44.value();
        int int48 = strConsumerRecord44.serializedValueSize();
        java.lang.String str49 = strConsumerRecord44.toString();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(serializable47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str49, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        int int9 = strConsumerRecord5.serializedKeySize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.topic();
        java.io.Serializable serializable24 = strConsumerRecord8.value();
        long long25 = strConsumerRecord8.offset();
        java.lang.Class<?> wildcardClass26 = strConsumerRecord8.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        int int19 = strConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType20);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int33 = strConsumerRecord32.serializedValueSize();
        int int34 = strConsumerRecord32.partition();
        long long35 = strConsumerRecord32.offset();
        long long36 = strConsumerRecord32.offset();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord32.headers();
        long long38 = strConsumerRecord32.checksum();
        long long39 = strConsumerRecord32.checksum();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord32.headers();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord32.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long48 = strConsumerRecord47.timestamp();
        int int49 = strConsumerRecord47.partition();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord47.timestampType();
        java.lang.String str51 = strConsumerRecord47.toString();
        long long52 = strConsumerRecord47.checksum();
        java.util.Optional<java.lang.Integer> intOptional53 = strConsumerRecord47.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional54 = strConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 0, (long) ' ', (long) '#', timestampType20, (java.lang.Long) (-1L), (int) ' ', (int) '#', "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (java.io.Serializable) 10, headers41, intOptional54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int66 = strConsumerRecord65.serializedValueSize();
        int int67 = strConsumerRecord65.partition();
        long long68 = strConsumerRecord65.offset();
        long long69 = strConsumerRecord65.offset();
        org.apache.kafka.common.record.TimestampType timestampType70 = strConsumerRecord65.timestampType();
        java.lang.String str71 = strConsumerRecord65.toString();
        org.apache.kafka.common.header.Headers headers72 = strConsumerRecord65.headers();
        long long73 = strConsumerRecord65.timestamp();
        long long74 = strConsumerRecord65.checksum();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord65.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", (int) (short) 0, (-1L), 100L, timestampType20, 97L, 52, (int) (short) 1, "", (java.io.Serializable) timestampType75);
        java.lang.Class<?> wildcardClass77 = timestampType75.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str51, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 52L + "'", long68 == 52L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 52L + "'", long69 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str71, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int22 = strConsumerRecord21.serializedValueSize();
        int int23 = strConsumerRecord21.partition();
        long long24 = strConsumerRecord21.offset();
        long long25 = strConsumerRecord21.offset();
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord21.headers();
        long long27 = strConsumerRecord21.checksum();
        int int28 = strConsumerRecord21.serializedKeySize();
        int int29 = strConsumerRecord21.serializedValueSize();
        long long30 = strConsumerRecord21.offset();
        java.util.Optional<java.lang.Integer> intOptional31 = strConsumerRecord21.leaderEpoch();
        int int32 = strConsumerRecord21.partition();
        java.io.Serializable serializable33 = strConsumerRecord21.value();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) -1, (long) (short) 10, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (java.io.Serializable) timestampType34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord45.timestampType();
        int int47 = strConsumerRecord45.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional48 = strConsumerRecord45.leaderEpoch();
        java.lang.String str49 = strConsumerRecord45.toString();
        long long50 = strConsumerRecord45.checksum();
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord45.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (short) 1, (long) 1, (long) (short) 0, timestampType34, 10L, 32, (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType51);
        java.io.Serializable serializable57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = null)", 97, 10L, 97L, timestampType34, 10L, (int) (byte) -1, (int) (byte) -1, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 32, serialized key size = 97, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = false)", serializable57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        int int70 = strConsumerRecord68.partition();
        int int71 = strConsumerRecord68.serializedValueSize();
        org.apache.kafka.common.header.Headers headers72 = strConsumerRecord68.headers();
        java.io.Serializable serializable73 = strConsumerRecord68.value();
        org.apache.kafka.common.record.TimestampType timestampType74 = strConsumerRecord68.timestampType();
        java.lang.String str75 = strConsumerRecord68.topic();
        long long76 = strConsumerRecord68.checksum();
        java.lang.Class<?> wildcardClass77 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type> charSequenceConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = ), value = 10)", (int) (short) 1, (long) (short) 1, (long) 0, timestampType34, (long) (byte) 10, (int) (byte) 10, (int) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", (java.lang.reflect.Type) wildcardClass77);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (short) 10 + "'", serializable33, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str49, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 10 + "'", serializable73, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.toString();
        long long56 = strConsumerRecord53.checksum();
        java.lang.String str57 = strConsumerRecord53.topic();
        java.lang.String str58 = strConsumerRecord53.topic();
        java.lang.String str59 = strConsumerRecord53.topic();
        long long60 = strConsumerRecord53.timestamp();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str55, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str57, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str58, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str59, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.lang.String str12 = strConsumerRecord9.toString();
        int int13 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType35, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long51 = strConsumerRecord50.timestamp();
        int int52 = strConsumerRecord50.partition();
        java.io.Serializable serializable53 = strConsumerRecord50.value();
        java.lang.Class<?> wildcardClass54 = serializable53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long61 = strConsumerRecord60.timestamp();
        int int62 = strConsumerRecord60.partition();
        java.lang.String str63 = strConsumerRecord60.topic();
        long long64 = strConsumerRecord60.offset();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType35, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.GenericDeclaration) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, 1L, timestampType14, (long) (short) -1, 0, (int) (short) -1, "hi!", (java.io.Serializable) timestampType35);
        org.apache.kafka.common.header.Headers headers68 = strConsumerRecord67.headers();
        java.lang.String str69 = strConsumerRecord67.key();
        java.lang.String str70 = strConsumerRecord67.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 10 + "'", serializable53, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence> charSequenceConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) '#', 0L, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.lang.String str15 = strConsumerRecord5.topic();
        int int16 = strConsumerRecord5.partition();
        java.lang.String str17 = strConsumerRecord5.topic();
        long long18 = strConsumerRecord5.offset();
        int int19 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str77 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord68, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78);
        java.lang.String str80 = strConsumerRecord68.topic();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType49, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType59, (java.lang.Object) wildcardClass81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType20, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType49);
        java.lang.String str84 = strConsumerRecord83.toString();
        java.lang.String str85 = strConsumerRecord83.key();
        int int86 = strConsumerRecord83.serializedValueSize();
        long long87 = strConsumerRecord83.offset();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)" + "'", str84, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        int int24 = strConsumerRecord8.serializedKeySize();
        java.lang.String str25 = strConsumerRecord8.topic();
        int int26 = strConsumerRecord8.serializedValueSize();
        java.lang.String str27 = strConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord8.timestampType();
        long long29 = strConsumerRecord8.checksum();
        java.lang.String str30 = strConsumerRecord8.key();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.topic();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.lang.String str13 = strConsumerRecord5.toString();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.timestamp();
        long long12 = strConsumerRecord5.offset();
        long long13 = strConsumerRecord5.offset();
        long long14 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        java.lang.String str22 = strConsumerRecord8.topic();
        java.lang.String str23 = strConsumerRecord8.topic();
        long long24 = strConsumerRecord8.checksum();
        java.lang.String str25 = strConsumerRecord8.toString();
        long long26 = strConsumerRecord8.checksum();
        java.lang.Class<?> wildcardClass27 = strConsumerRecord8.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str25, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        java.lang.String str24 = strConsumerRecord12.topic();
        long long25 = strConsumerRecord12.offset();
        long long26 = strConsumerRecord12.offset();
        java.lang.String str27 = strConsumerRecord12.toString();
        java.lang.String str28 = strConsumerRecord12.key();
        long long29 = strConsumerRecord12.checksum();
        long long30 = strConsumerRecord12.offset();
        java.util.Optional<java.lang.Integer> intOptional31 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)", (int) (short) -1, (long) (short) 10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.io.Serializable) timestampType32);
        int int34 = strConsumerRecord33.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        java.lang.Class<?> wildcardClass26 = strConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType14, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass26);
        int int28 = strConsumerRecord27.partition();
        long long29 = strConsumerRecord27.checksum();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord27.timestampType();
        org.apache.kafka.common.header.Headers headers31 = strConsumerRecord27.headers();
        java.lang.String str32 = strConsumerRecord27.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str32, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str77 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord68, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78);
        java.lang.String str80 = strConsumerRecord68.topic();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType49, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType59, (java.lang.Object) wildcardClass81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType20, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType49);
        long long84 = strConsumerRecord83.timestamp();
        java.lang.String str85 = strConsumerRecord83.key();
        long long86 = strConsumerRecord83.checksum();
        int int87 = strConsumerRecord83.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) ' ', (long) 97, "hi!", (java.io.Serializable) (short) 100);
        java.io.Serializable serializable6 = strConsumerRecord5.value();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (short) 100 + "'", serializable6, (short) 100);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 100 + "'", serializable7, (short) 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 100 + "'", serializable8, (short) 100);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        long long14 = strConsumerRecord9.timestamp();
        long long15 = strConsumerRecord9.offset();
        java.lang.String str16 = strConsumerRecord9.toString();
        long long17 = strConsumerRecord9.checksum();
        java.io.Serializable serializable18 = strConsumerRecord9.value();
        int int19 = strConsumerRecord9.partition();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord9.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional21 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long32 = strConsumerRecord31.timestamp();
        long long33 = strConsumerRecord31.checksum();
        java.util.Optional<java.lang.Integer> intOptional34 = strConsumerRecord31.leaderEpoch();
        long long35 = strConsumerRecord31.timestamp();
        int int36 = strConsumerRecord31.serializedKeySize();
        java.lang.Class<?> wildcardClass37 = strConsumerRecord31.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        java.lang.String str46 = strConsumerRecord43.key();
        org.apache.kafka.common.header.Headers headers47 = strConsumerRecord43.headers();
        long long48 = strConsumerRecord43.offset();
        int int49 = strConsumerRecord43.serializedValueSize();
        int int50 = strConsumerRecord43.serializedKeySize();
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord43.headers();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        int int60 = strConsumerRecord58.partition();
        long long61 = strConsumerRecord58.offset();
        long long62 = strConsumerRecord58.offset();
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord58.timestampType();
        java.lang.String str64 = strConsumerRecord58.toString();
        int int65 = strConsumerRecord58.serializedValueSize();
        java.io.Serializable serializable66 = strConsumerRecord58.value();
        java.io.Serializable serializable67 = strConsumerRecord58.value();
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord58.timestampType();
        java.lang.String str69 = strConsumerRecord58.toString();
        long long70 = strConsumerRecord58.checksum();
        org.apache.kafka.common.header.Headers headers71 = strConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> genericDeclarationConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("", (int) (byte) 0, (long) (-1), (long) (short) 1, timestampType22, (java.lang.Long) 1L, (int) (byte) 100, (int) (byte) 10, (java.lang.reflect.GenericDeclaration) wildcardClass37, strConsumerRecord43, headers71);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str64, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (short) 10 + "'", serializable66, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (short) 10 + "'", serializable67, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str69, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertNotNull(headers71);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.checksum();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        java.lang.String str14 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        java.lang.String str9 = strConsumerRecord5.topic();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord9.leaderEpoch();
        java.lang.String str12 = strConsumerRecord9.key();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord9.headers();
        long long14 = strConsumerRecord9.offset();
        long long15 = strConsumerRecord9.checksum();
        java.lang.String str16 = strConsumerRecord9.topic();
        java.lang.Class<?> wildcardClass17 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = ), value = -1.0)", (int) (byte) 1, (long) 97, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (java.io.Serializable) wildcardClass17);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long19 = strConsumerRecord18.timestamp();
        int int20 = strConsumerRecord18.partition();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str41 = strConsumerRecord40.topic();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int63 = strConsumerRecord62.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional64 = strConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType42, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers56, intOptional64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int77 = strConsumerRecord76.serializedValueSize();
        int int78 = strConsumerRecord76.partition();
        org.apache.kafka.common.header.Headers headers79 = strConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType42, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 0, (long) '4', (long) 1, timestampType21, (java.lang.Long) 100L, (int) (byte) -1, (int) '#', "hi!", (java.io.Serializable) 10.0d, headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, (long) (byte) -1, (long) (-1), timestampType4, 52L, (int) (byte) -1, 0, "hi!", (java.io.Serializable) "hi!");
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord82.headers();
        java.lang.String str84 = strConsumerRecord82.key();
        long long85 = strConsumerRecord82.timestamp();
        java.util.Optional<java.lang.Integer> intOptional86 = strConsumerRecord82.leaderEpoch();
        int int87 = strConsumerRecord82.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType88 = strConsumerRecord82.timestampType();
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNull(timestampType88);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        long long12 = strConsumerRecord5.checksum();
        long long13 = strConsumerRecord5.offset();
        long long14 = strConsumerRecord5.timestamp();
        java.lang.String str15 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str77 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord68, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78);
        java.lang.String str80 = strConsumerRecord68.topic();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType49, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType59, (java.lang.Object) wildcardClass81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType20, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType49);
        long long84 = strConsumerRecord83.checksum();
        org.apache.kafka.common.header.Headers headers85 = strConsumerRecord83.headers();
        int int86 = strConsumerRecord83.serializedKeySize();
        java.lang.String str87 = strConsumerRecord83.key();
        org.apache.kafka.common.header.Headers headers88 = strConsumerRecord83.headers();
        java.io.Serializable serializable89 = strConsumerRecord83.value();
        java.lang.Class<?> wildcardClass90 = strConsumerRecord83.getClass();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertTrue("'" + serializable89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        int int28 = strConsumerRecord16.serializedValueSize();
        java.lang.String str29 = strConsumerRecord16.key();
        java.lang.String str30 = strConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int45 = strConsumerRecord44.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord44.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str53 = strConsumerRecord52.topic();
        org.apache.kafka.common.record.TimestampType timestampType54 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord44, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType54);
        java.lang.String str56 = strConsumerRecord44.topic();
        long long57 = strConsumerRecord44.offset();
        long long58 = strConsumerRecord44.offset();
        java.lang.String str59 = strConsumerRecord44.toString();
        java.lang.String str60 = strConsumerRecord44.key();
        long long61 = strConsumerRecord44.checksum();
        long long62 = strConsumerRecord44.offset();
        java.lang.Class<?> wildcardClass63 = strConsumerRecord44.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", 0, 0L, (-1L), timestampType31, (long) 97, (int) (short) 1, 32, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) wildcardClass63);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 32, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 1, (long) (byte) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)", (java.io.Serializable) 97);
        long long66 = strConsumerRecord65.timestamp();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str59, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord33.leaderEpoch();
        int int36 = strConsumerRecord33.serializedKeySize();
        java.lang.String str37 = strConsumerRecord33.key();
        int int38 = strConsumerRecord33.serializedKeySize();
        int int39 = strConsumerRecord33.partition();
        java.lang.String str40 = strConsumerRecord33.topic();
        java.lang.String str41 = strConsumerRecord33.key();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord9.leaderEpoch();
        java.lang.String str12 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord31.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord31.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord31.timestampType();
        java.lang.String str35 = strConsumerRecord31.key();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        java.lang.Class<?> wildcardClass48 = strConsumerRecord46.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType36, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str60 = strConsumerRecord59.topic();
        java.lang.Class<?> wildcardClass61 = strConsumerRecord59.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType36, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass61);
        long long63 = strConsumerRecord62.offset();
        int int64 = strConsumerRecord62.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord62.timestampType();
        int int66 = strConsumerRecord62.serializedValueSize();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", (int) (byte) 10, (long) (short) -1, (long) 1, timestampType13, 35L, (int) '#', 0, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 32, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers67);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(headers67);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        long long10 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        java.lang.Class<?> wildcardClass12 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        java.lang.String str9 = strConsumerRecord5.topic();
        long long10 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        long long14 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.partition();
        int int11 = strConsumerRecord5.serializedKeySize();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.lang.String str13 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.String str30 = strConsumerRecord28.topic();
        int int31 = strConsumerRecord28.serializedValueSize();
        int int32 = strConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord28.headers();
        java.lang.String str34 = strConsumerRecord28.key();
        int int35 = strConsumerRecord28.serializedKeySize();
        java.io.Serializable serializable36 = strConsumerRecord28.value();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + serializable36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord8.headers();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord8.leaderEpoch();
        int int13 = strConsumerRecord8.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord20.timestampType();
        int int22 = strConsumerRecord20.serializedKeySize();
        int int23 = strConsumerRecord20.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord20.timestampType();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.common.header.Headers> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) ' ', (-1L), (java.io.Serializable) timestampType14, headers25);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers25);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        long long14 = strConsumerRecord5.timestamp();
        long long15 = strConsumerRecord5.timestamp();
        int int16 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        long long10 = strConsumerRecord5.checksum();
        long long11 = strConsumerRecord5.offset();
        long long12 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        int int24 = strConsumerRecord8.serializedKeySize();
        java.lang.String str25 = strConsumerRecord8.topic();
        long long26 = strConsumerRecord8.offset();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        long long13 = strConsumerRecord5.checksum();
        java.lang.String str14 = strConsumerRecord5.key();
        long long15 = strConsumerRecord5.timestamp();
        long long16 = strConsumerRecord5.checksum();
        long long17 = strConsumerRecord5.offset();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.checksum();
        java.lang.String str12 = strConsumerRecord5.key();
        java.lang.Class<?> wildcardClass13 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(intOptional11);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        int int7 = strConsumerRecord5.serializedValueSize();
        int int8 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        long long14 = strConsumerRecord5.checksum();
        long long15 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        long long11 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        java.lang.String str28 = strConsumerRecord16.topic();
        long long29 = strConsumerRecord16.offset();
        long long30 = strConsumerRecord16.offset();
        java.lang.String str31 = strConsumerRecord16.toString();
        java.lang.String str32 = strConsumerRecord16.key();
        long long33 = strConsumerRecord16.checksum();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord16.headers();
        java.lang.String str35 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 1, (long) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) '4', 100L, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType36);
        long long39 = strConsumerRecord38.checksum();
        int int40 = strConsumerRecord38.partition();
        java.lang.String str41 = strConsumerRecord38.key();
        int int42 = strConsumerRecord38.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str41, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        java.lang.String str17 = strConsumerRecord5.topic();
        java.lang.String str18 = strConsumerRecord5.toString();
        java.lang.String str19 = strConsumerRecord5.topic();
        java.lang.String str20 = strConsumerRecord5.topic();
        long long21 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord23.timestampType();
        int int25 = strConsumerRecord23.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord23.timestampType();
        java.lang.String str27 = strConsumerRecord23.toString();
        java.util.Optional<java.lang.Integer> intOptional28 = strConsumerRecord23.leaderEpoch();
        long long29 = strConsumerRecord23.offset();
        int int30 = strConsumerRecord23.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord23.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long38 = strConsumerRecord37.timestamp();
        long long39 = strConsumerRecord37.checksum();
        int int40 = strConsumerRecord37.serializedKeySize();
        int int41 = strConsumerRecord37.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional42 = strConsumerRecord37.leaderEpoch();
        int int43 = strConsumerRecord37.serializedValueSize();
        org.apache.kafka.common.header.Headers headers44 = strConsumerRecord37.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord50.timestampType();
        java.lang.String str54 = strConsumerRecord50.key();
        long long55 = strConsumerRecord50.timestamp();
        long long56 = strConsumerRecord50.offset();
        java.lang.String str57 = strConsumerRecord50.toString();
        long long58 = strConsumerRecord50.checksum();
        java.io.Serializable serializable59 = strConsumerRecord50.value();
        java.io.Serializable serializable60 = strConsumerRecord50.value();
        java.io.Serializable serializable61 = strConsumerRecord50.value();
        java.lang.String str62 = strConsumerRecord50.topic();
        long long63 = strConsumerRecord50.timestamp();
        java.util.Optional<java.lang.Integer> intOptional64 = strConsumerRecord50.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", (int) (byte) 0, 100L, (long) (-1), timestampType13, (java.lang.Long) 1L, 1, (int) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 52)", (java.io.Serializable) timestampType31, headers44, intOptional64);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str57, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 10 + "'", serializable59, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (short) 10 + "'", serializable60, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 10 + "'", serializable61, (short) 10);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(intOptional64);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType22, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType53, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType65, headers74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int82 = strConsumerRecord81.serializedValueSize();
        int int83 = strConsumerRecord81.partition();
        long long84 = strConsumerRecord81.offset();
        java.lang.String str85 = strConsumerRecord81.key();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord81.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (-1), 100L, (long) (short) 1, timestampType22, (long) (byte) 1, (int) (byte) 10, (int) (short) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType65, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType89 = strConsumerRecord88.timestampType();
        long long90 = strConsumerRecord88.offset();
        int int91 = strConsumerRecord88.partition();
        int int92 = strConsumerRecord88.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 52L + "'", long84 == 52L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord8.timestampType();
        java.lang.String str12 = strConsumerRecord8.key();
        long long13 = strConsumerRecord8.timestamp();
        long long14 = strConsumerRecord8.offset();
        java.lang.String str15 = strConsumerRecord8.toString();
        long long16 = strConsumerRecord8.checksum();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord8.headers();
        java.lang.String str18 = strConsumerRecord8.topic();
        long long19 = strConsumerRecord8.offset();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord8.leaderEpoch();
        int int21 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>> strConsumerRecordConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", 0, (long) ' ', strConsumerRecord8, intOptional22);
        int int24 = strConsumerRecord8.serializedKeySize();
        java.io.Serializable serializable25 = strConsumerRecord8.value();
        java.io.Serializable serializable26 = strConsumerRecord8.value();
        long long27 = strConsumerRecord8.offset();
        int int28 = strConsumerRecord8.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 10 + "'", serializable25, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (short) 10 + "'", serializable26, (short) 10);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        long long9 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        java.lang.String str12 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType22, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str46 = strConsumerRecord45.topic();
        java.lang.Class<?> wildcardClass47 = strConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType22, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass47);
        long long49 = strConsumerRecord48.offset();
        int int50 = strConsumerRecord48.serializedKeySize();
        long long51 = strConsumerRecord48.timestamp();
        java.lang.String str52 = strConsumerRecord48.key();
        java.io.Serializable serializable53 = strConsumerRecord48.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", 35, 32L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", serializable53);
        java.lang.String str55 = strConsumerRecord54.topic();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(serializable53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)" + "'", str55, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)");
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long23 = strConsumerRecord22.timestamp();
        int int24 = strConsumerRecord22.partition();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord22.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord51.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        int int60 = strConsumerRecord58.partition();
        org.apache.kafka.common.header.Headers headers61 = strConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType40, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType52, headers61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 0, 52L, (long) '#', timestampType12, (java.lang.Long) 0L, (int) (short) 10, (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType25, headers61);
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord63.timestampType();
        java.lang.String str65 = strConsumerRecord63.topic();
        java.lang.String str66 = strConsumerRecord63.topic();
        long long67 = strConsumerRecord63.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 35L + "'", long67 == 35L);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        java.lang.String str17 = strConsumerRecord5.topic();
        long long18 = strConsumerRecord5.checksum();
        int int19 = strConsumerRecord5.serializedValueSize();
        int int20 = strConsumerRecord5.partition();
        java.lang.String str21 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str21, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        int int24 = strConsumerRecord8.serializedKeySize();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord8.headers();
        int int26 = strConsumerRecord8.serializedKeySize();
        long long27 = strConsumerRecord8.checksum();
        java.lang.String str28 = strConsumerRecord8.key();
        long long29 = strConsumerRecord8.offset();
        int int30 = strConsumerRecord8.partition();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.serializedValueSize();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        java.lang.String str12 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.lang.String str14 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        int int26 = strConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord37.timestampType();
        int int39 = strConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord37.leaderEpoch();
        java.lang.String str41 = strConsumerRecord37.toString();
        long long42 = strConsumerRecord37.checksum();
        int int43 = strConsumerRecord37.partition();
        java.lang.Class<?> wildcardClass44 = strConsumerRecord37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord50.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord57.timestampType();
        int int59 = strConsumerRecord57.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord57.leaderEpoch();
        java.lang.String str61 = strConsumerRecord57.toString();
        java.util.Optional<java.lang.Integer> intOptional62 = strConsumerRecord57.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", 52, (long) '#', (long) (short) 1, timestampType27, (java.lang.Long) 0L, (int) (short) -1, 10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) wildcardClass44, headers51, intOptional62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '4', (long) ' ', (long) '4', timestampType10, (long) 52, (int) (short) 1, (int) (short) 10, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) '#');
        java.lang.String str65 = strConsumerRecord64.topic();
        long long66 = strConsumerRecord64.timestamp();
        java.lang.String str67 = strConsumerRecord64.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str41, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)" + "'", str67, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)");
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        java.io.Serializable serializable11 = strConsumerRecord9.value();
        java.lang.String str12 = strConsumerRecord9.key();
        int int13 = strConsumerRecord9.serializedValueSize();
        java.lang.String str14 = strConsumerRecord9.key();
        long long15 = strConsumerRecord9.checksum();
        int int16 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int32 = strConsumerRecord31.serializedValueSize();
        int int33 = strConsumerRecord31.partition();
        long long34 = strConsumerRecord31.offset();
        long long35 = strConsumerRecord31.timestamp();
        int int36 = strConsumerRecord31.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) ' ', (long) 52, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord44.timestampType();
        int int46 = strConsumerRecord44.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord44.timestampType();
        java.lang.String str48 = strConsumerRecord44.toString();
        java.util.Optional<java.lang.Integer> intOptional49 = strConsumerRecord44.leaderEpoch();
        long long50 = strConsumerRecord44.offset();
        java.util.Optional<java.lang.Integer> intOptional51 = strConsumerRecord44.leaderEpoch();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord58.leaderEpoch();
        java.lang.String str61 = strConsumerRecord58.key();
        long long62 = strConsumerRecord58.offset();
        java.lang.String str63 = strConsumerRecord58.toString();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord58.timestampType();
        java.lang.String str65 = strConsumerRecord58.toString();
        java.util.Optional<java.lang.Integer> intOptional66 = strConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (-1), (long) (byte) -1, (long) (short) -1, timestampType17, (java.lang.Long) 100L, 32, 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 10, serialized key size = 35, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", headers52, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord67.timestampType();
        int int69 = strConsumerRecord67.partition();
        int int70 = strConsumerRecord67.serializedKeySize();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 0 + "'", serializable11, (short) 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str48, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 52L + "'", long50 == 52L);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str63, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str65, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.serializedValueSize();
        long long15 = strConsumerRecord5.checksum();
        int int16 = strConsumerRecord5.partition();
        java.io.Serializable serializable17 = strConsumerRecord5.value();
        java.lang.String str18 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        java.lang.String str28 = strConsumerRecord16.topic();
        long long29 = strConsumerRecord16.offset();
        long long30 = strConsumerRecord16.offset();
        java.lang.String str31 = strConsumerRecord16.toString();
        java.lang.String str32 = strConsumerRecord16.key();
        long long33 = strConsumerRecord16.checksum();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord16.headers();
        java.lang.String str35 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 1, (long) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) '4', 100L, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType36);
        long long39 = strConsumerRecord38.checksum();
        int int40 = strConsumerRecord38.partition();
        java.lang.String str41 = strConsumerRecord38.key();
        java.util.Optional<java.lang.Integer> intOptional42 = strConsumerRecord38.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str41, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional42);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType22, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType53, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType65, headers74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int82 = strConsumerRecord81.serializedValueSize();
        int int83 = strConsumerRecord81.partition();
        long long84 = strConsumerRecord81.offset();
        java.lang.String str85 = strConsumerRecord81.key();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord81.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (-1), 100L, (long) (short) 1, timestampType22, (long) (byte) 1, (int) (byte) 10, (int) (short) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType65, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType89 = strConsumerRecord88.timestampType();
        long long90 = strConsumerRecord88.offset();
        int int91 = strConsumerRecord88.serializedValueSize();
        java.lang.String str92 = strConsumerRecord88.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 52L + "'", long84 == 52L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = hi!)" + "'", str92, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = hi!)");
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.serializedValueSize();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass12 = intOptional11.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        int int24 = strConsumerRecord8.serializedKeySize();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord8.headers();
        int int26 = strConsumerRecord8.serializedKeySize();
        long long27 = strConsumerRecord8.checksum();
        java.io.Serializable serializable28 = strConsumerRecord8.value();
        int int29 = strConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.header.Headers headers30 = strConsumerRecord8.headers();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (short) 10 + "'", serializable28, (short) 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(headers30);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        org.apache.kafka.common.record.TimestampType timestampType54 = strConsumerRecord53.timestampType();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        int int56 = strConsumerRecord53.serializedValueSize();
        long long57 = strConsumerRecord53.offset();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.key();
        long long7 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        int int11 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.lang.String str15 = strConsumerRecord5.topic();
        long long16 = strConsumerRecord5.offset();
        long long17 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord5.leaderEpoch();
        int int19 = strConsumerRecord5.serializedKeySize();
        long long20 = strConsumerRecord5.checksum();
        long long21 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)", 100, 97L, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) (short) 1);
        int int6 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord53.headers();
        int int58 = strConsumerRecord53.partition();
        long long59 = strConsumerRecord53.timestamp();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long19 = strConsumerRecord18.timestamp();
        long long20 = strConsumerRecord18.checksum();
        long long21 = strConsumerRecord18.timestamp();
        java.util.Optional<java.lang.Integer> intOptional22 = strConsumerRecord18.leaderEpoch();
        org.apache.kafka.common.header.Headers headers23 = strConsumerRecord18.headers();
        java.lang.String str24 = strConsumerRecord18.topic();
        long long25 = strConsumerRecord18.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100.0)", 10, 1L, (-1L), timestampType8, (long) 10, 97, 100, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence> charSequenceConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (-1), (long) (short) -1, (long) (byte) 0, timestampType8, (long) (-1), 10, (int) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        java.lang.String str15 = strConsumerRecord13.toString();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 10, (long) 35, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (java.io.Serializable) timestampType16);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord34.timestampType();
        int int36 = strConsumerRecord34.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType37, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) (short) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) "");
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord44.headers();
        java.lang.Class<?> wildcardClass46 = strConsumerRecord44.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)", 0, (long) 35, (long) 52, timestampType16, 52L, (int) (byte) 10, 10, (java.lang.reflect.GenericDeclaration) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 97, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        java.lang.Class<?> wildcardClass49 = genericDeclarationConsumerRecord48.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        java.lang.String str7 = strConsumerRecord5.topic();
        int int8 = strConsumerRecord5.serializedKeySize();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int25 = strConsumerRecord24.serializedValueSize();
        int int26 = strConsumerRecord24.partition();
        long long27 = strConsumerRecord24.offset();
        long long28 = strConsumerRecord24.offset();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord24.timestampType();
        java.lang.String str30 = strConsumerRecord24.toString();
        int int31 = strConsumerRecord24.serializedValueSize();
        java.io.Serializable serializable32 = strConsumerRecord24.value();
        java.io.Serializable serializable33 = strConsumerRecord24.value();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord40.timestampType();
        int int42 = strConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord40.timestampType();
        java.lang.String str44 = strConsumerRecord40.toString();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord40.leaderEpoch();
        long long46 = strConsumerRecord40.offset();
        java.util.Optional<java.lang.Integer> intOptional47 = strConsumerRecord40.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord40.headers();
        long long49 = strConsumerRecord40.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> timestampTypeConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 97, 35L, timestampType34, strConsumerRecord40);
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord40.headers();
        int int52 = strConsumerRecord40.partition();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, (long) ' ', "", (java.io.Serializable) timestampType53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int65 = strConsumerRecord64.serializedValueSize();
        int int66 = strConsumerRecord64.partition();
        long long67 = strConsumerRecord64.offset();
        int int68 = strConsumerRecord64.partition();
        java.lang.Class<?> wildcardClass69 = strConsumerRecord64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 1, (long) 97, (long) 97, timestampType53, (long) 97, (int) (short) 1, 35, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 10, (long) 'a', "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) 97);
        int int72 = strConsumerRecord71.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", 35, (long) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", (java.io.Serializable) timestampType73);
        long long75 = strConsumerRecord74.checksum();
        int int76 = strConsumerRecord74.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 10 + "'", serializable32, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (short) 10 + "'", serializable33, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str44, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 52L + "'", long46 == 52L);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.lang.String str12 = strConsumerRecord9.toString();
        int int13 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType14);
        int int16 = strConsumerRecord15.partition();
        long long17 = strConsumerRecord15.timestamp();
        java.lang.String str18 = strConsumerRecord15.key();
        java.lang.String str19 = strConsumerRecord15.toString();
        int int20 = strConsumerRecord15.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)" + "'", str19, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long13 = strConsumerRecord12.timestamp();
        long long14 = strConsumerRecord12.checksum();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 1, (long) (byte) 1, timestampType16, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int37 = strConsumerRecord36.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional38 = strConsumerRecord36.leaderEpoch();
        java.lang.String str39 = strConsumerRecord36.key();
        long long40 = strConsumerRecord36.checksum();
        int int41 = strConsumerRecord36.serializedKeySize();
        org.apache.kafka.common.header.Headers headers42 = strConsumerRecord36.headers();
        long long43 = strConsumerRecord36.offset();
        java.lang.String str44 = strConsumerRecord36.key();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord59.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType61 = strConsumerRecord59.timestampType();
        java.lang.String str62 = strConsumerRecord59.toString();
        int int63 = strConsumerRecord59.partition();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord59.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType64);
        int int66 = strConsumerRecord65.partition();
        int int67 = strConsumerRecord65.partition();
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord65.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 1, 0L, 1L, timestampType45, (long) (-1), (-1), 1, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (java.io.Serializable) timestampType68);
        java.lang.Class<?> wildcardClass70 = strConsumerRecord69.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) ' ', "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", (java.io.Serializable) wildcardClass70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord77.timestampType();
        int int79 = strConsumerRecord77.serializedKeySize();
        int int80 = strConsumerRecord77.partition();
        int int81 = strConsumerRecord77.serializedValueSize();
        long long82 = strConsumerRecord77.checksum();
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType90 = strConsumerRecord89.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType91 = strConsumerRecord89.timestampType();
        java.lang.String str92 = strConsumerRecord89.toString();
        int int93 = strConsumerRecord89.partition();
        org.apache.kafka.common.record.TimestampType timestampType94 = strConsumerRecord89.timestampType();
        long long95 = strConsumerRecord89.timestamp();
        int int96 = strConsumerRecord89.serializedKeySize();
        long long97 = strConsumerRecord89.checksum();
        java.util.Optional<java.lang.Integer> intOptional98 = strConsumerRecord89.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)", (int) (short) -1, (-1L), 52L, timestampType16, (java.lang.Long) 32L, (int) (short) 10, (int) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (java.io.Serializable) wildcardClass70, headers83, intOptional98);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str62, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + timestampType90 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType90.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType91 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType91.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str92, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1L) + "'", long95 == (-1L));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-1L) + "'", long97 == (-1L));
        org.junit.Assert.assertNotNull(intOptional98);
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.key();
        long long11 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.lang.String str13 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        java.lang.String str15 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        long long14 = strConsumerRecord9.timestamp();
        long long15 = strConsumerRecord9.offset();
        java.lang.String str16 = strConsumerRecord9.toString();
        long long17 = strConsumerRecord9.checksum();
        java.io.Serializable serializable18 = strConsumerRecord9.value();
        java.io.Serializable serializable19 = strConsumerRecord9.value();
        java.io.Serializable serializable20 = strConsumerRecord9.value();
        java.lang.String str21 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord44.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord44.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int67 = strConsumerRecord66.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str75 = strConsumerRecord74.topic();
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord66, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType76);
        java.lang.String str78 = strConsumerRecord66.topic();
        java.lang.Class<?> wildcardClass79 = strConsumerRecord66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType47, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType57, (java.lang.Object) wildcardClass79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) -1, (long) '#', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass79);
        java.io.Serializable serializable82 = strConsumerRecord81.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (short) -1, (long) '#', "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (int) (byte) -1, (long) 97, (-1L), timestampType22, (long) '#', (-1), (int) '4', "", serializable82);
        int int85 = strConsumerRecord84.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional86 = strConsumerRecord84.leaderEpoch();
        java.lang.Class<?> wildcardClass87 = strConsumerRecord84.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 10 + "'", serializable20, (short) 10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(serializable82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.serializedKeySize();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord53.headers();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord53.leaderEpoch();
        java.lang.String str59 = strConsumerRecord53.toString();
        java.lang.String str60 = strConsumerRecord53.toString();
        java.lang.String str61 = strConsumerRecord53.topic();
        java.lang.String str62 = strConsumerRecord53.topic();
        long long63 = strConsumerRecord53.checksum();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str59, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str60, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str62, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str18 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int31 = strConsumerRecord30.serializedValueSize();
        int int32 = strConsumerRecord30.partition();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType19, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers33, intOptional41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType19, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers56);
        long long58 = strConsumerRecord57.offset();
        java.lang.String str59 = strConsumerRecord57.topic();
        long long60 = strConsumerRecord57.offset();
        org.apache.kafka.common.header.Headers headers61 = strConsumerRecord57.headers();
        int int62 = strConsumerRecord57.partition();
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord57.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord57.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers75 = strConsumerRecord74.headers();
        int int76 = strConsumerRecord74.partition();
        java.lang.Class<?> wildcardClass77 = strConsumerRecord74.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) (byte) 10, 32L, timestampType64, (long) (byte) -1, 10, 32, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)", (java.io.Serializable) wildcardClass77);
        java.lang.Class<?> wildcardClass79 = strConsumerRecord78.getClass();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str59, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        long long13 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        java.lang.String str13 = strConsumerRecord5.topic();
        int int14 = strConsumerRecord5.serializedValueSize();
        long long15 = strConsumerRecord5.offset();
        java.lang.String str16 = strConsumerRecord5.toString();
        long long17 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord5.timestampType();
        int int19 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)", 100, 97L, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) (short) 1);
        java.io.Serializable serializable6 = strConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (short) 1 + "'", serializable6, (short) 1);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.lang.String str14 = strConsumerRecord5.topic();
        int int15 = strConsumerRecord5.serializedValueSize();
        java.lang.String str16 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        int int13 = strConsumerRecord5.serializedKeySize();
        long long14 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int18 = strConsumerRecord17.serializedValueSize();
        int int19 = strConsumerRecord17.partition();
        long long20 = strConsumerRecord17.offset();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        long long34 = strConsumerRecord32.offset();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 52, 0L, (long) (short) -1, timestampType22, (long) 'a', (int) (byte) 0, 52, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long47 = strConsumerRecord46.timestamp();
        int int48 = strConsumerRecord46.partition();
        java.lang.String str49 = strConsumerRecord46.topic();
        long long50 = strConsumerRecord46.offset();
        java.io.Serializable serializable51 = strConsumerRecord46.value();
        long long52 = strConsumerRecord46.offset();
        long long53 = strConsumerRecord46.checksum();
        org.apache.kafka.common.record.TimestampType timestampType54 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", 35, (long) (byte) 10, 0L, timestampType35, 1L, 97, 32, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Object> strComparableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Object>("", (int) ' ', (long) '4', (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.lang.Object) (byte) 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 52L + "'", long50 == 52L);
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (short) 10 + "'", serializable51, (short) 10);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        long long15 = strConsumerRecord5.offset();
        int int16 = strConsumerRecord5.partition();
        long long17 = strConsumerRecord5.offset();
        int int18 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.checksum();
        int int9 = strConsumerRecord5.serializedKeySize();
        long long10 = strConsumerRecord5.timestamp();
        java.lang.String str11 = strConsumerRecord5.toString();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        java.lang.String str9 = strConsumerRecord5.topic();
        long long10 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        long long13 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        java.lang.String str10 = strConsumerRecord5.key();
        int int11 = strConsumerRecord5.serializedValueSize();
        long long12 = strConsumerRecord5.timestamp();
        int int13 = strConsumerRecord5.partition();
        java.lang.String str14 = strConsumerRecord5.key();
        long long15 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long26 = strConsumerRecord25.timestamp();
        int int27 = strConsumerRecord25.partition();
        java.lang.String str28 = strConsumerRecord25.topic();
        long long29 = strConsumerRecord25.offset();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int37 = strConsumerRecord36.serializedValueSize();
        int int38 = strConsumerRecord36.partition();
        org.apache.kafka.common.header.Headers headers39 = strConsumerRecord36.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str59 = strConsumerRecord58.topic();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int81 = strConsumerRecord80.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional82 = strConsumerRecord80.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType60, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers74, intOptional82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers> annotatedElementConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers>("hi!", (int) (short) 1, 1L, 100L, timestampType16, (java.lang.Long) 1L, 100, (int) (byte) 10, (java.lang.reflect.AnnotatedElement) wildcardClass30, headers39, headers48, intOptional82);
        java.io.Serializable serializable89 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (short) -1, (long) '#', (long) (-1), timestampType16, 1L, 32, 97, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", serializable89);
        int int91 = strConsumerRecord90.serializedKeySize();
        org.apache.kafka.common.header.Headers headers92 = strConsumerRecord90.headers();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 32 + "'", int91 == 32);
        org.junit.Assert.assertNotNull(headers92);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        long long11 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        java.lang.String str14 = strConsumerRecord5.topic();
        java.lang.String str15 = strConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(intOptional16);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.serializedKeySize();
        int int11 = strConsumerRecord5.serializedKeySize();
        int int12 = strConsumerRecord5.partition();
        java.lang.String str13 = strConsumerRecord5.key();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        java.lang.String str9 = strConsumerRecord5.toString();
        int int10 = strConsumerRecord5.serializedValueSize();
        long long11 = strConsumerRecord5.offset();
        long long12 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        java.lang.String str14 = strConsumerRecord5.key();
        long long15 = strConsumerRecord5.checksum();
        java.lang.String str16 = strConsumerRecord5.key();
        java.lang.Class<?> wildcardClass17 = strConsumerRecord5.getClass();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 0 + "'", serializable13, (short) 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 100, (long) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100.0d);
        java.lang.String str10 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int22 = strConsumerRecord21.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional23 = strConsumerRecord21.leaderEpoch();
        java.lang.String str24 = strConsumerRecord21.key();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord21.headers();
        long long26 = strConsumerRecord21.offset();
        long long27 = strConsumerRecord21.checksum();
        java.lang.String str28 = strConsumerRecord21.topic();
        long long29 = strConsumerRecord21.checksum();
        java.io.Serializable serializable30 = strConsumerRecord21.value();
        java.lang.Class<?> wildcardClass31 = strConsumerRecord21.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long38 = strConsumerRecord37.timestamp();
        java.lang.String str39 = strConsumerRecord37.topic();
        int int40 = strConsumerRecord37.serializedKeySize();
        int int41 = strConsumerRecord37.serializedValueSize();
        org.apache.kafka.common.header.Headers headers42 = strConsumerRecord37.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord48.timestampType();
        int int50 = strConsumerRecord48.serializedKeySize();
        int int51 = strConsumerRecord48.partition();
        java.io.Serializable serializable52 = strConsumerRecord48.value();
        int int53 = strConsumerRecord48.serializedValueSize();
        int int54 = strConsumerRecord48.partition();
        long long55 = strConsumerRecord48.checksum();
        java.util.Optional<java.lang.Integer> intOptional56 = strConsumerRecord48.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) '4', (long) (short) 0, (long) 1, timestampType11, (java.lang.Long) 100L, (int) (byte) 1, (int) (short) 1, "", (java.io.Serializable) wildcardClass31, headers42, intOptional56);
        java.lang.String str58 = strConsumerRecord57.key();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (short) 10 + "'", serializable30, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (short) 10 + "'", serializable52, (short) 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        java.lang.String str13 = strConsumerRecord9.toString();
        long long14 = strConsumerRecord9.checksum();
        int int15 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long34 = strConsumerRecord33.timestamp();
        long long35 = strConsumerRecord33.checksum();
        java.util.Optional<java.lang.Integer> intOptional36 = strConsumerRecord33.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord33.timestampType();
        java.lang.String str38 = strConsumerRecord33.topic();
        org.apache.kafka.common.header.Headers headers39 = strConsumerRecord33.headers();
        int int40 = strConsumerRecord33.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord33.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 100, (long) (short) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) timestampType42);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord49.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord49.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord49.timestampType();
        java.lang.String str53 = strConsumerRecord49.key();
        org.apache.kafka.common.record.TimestampType timestampType54 = strConsumerRecord49.timestampType();
        int int55 = strConsumerRecord49.partition();
        java.io.Serializable serializable56 = strConsumerRecord49.value();
        java.lang.String str57 = strConsumerRecord49.topic();
        java.lang.String str58 = strConsumerRecord49.key();
        long long59 = strConsumerRecord49.checksum();
        java.lang.Class<?> wildcardClass60 = strConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.reflect.AnnotatedElement> timestampTypeEnumConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.reflect.AnnotatedElement>("hi!", (int) (byte) 1, 1L, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType42, (java.lang.reflect.AnnotatedElement) wildcardClass60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) '4', 10L, (long) 'a', timestampType16, 52L, (int) (byte) -1, 32, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass60);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (short) 10 + "'", serializable56, (short) 10);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        java.lang.String str24 = strConsumerRecord12.topic();
        java.lang.String str25 = strConsumerRecord12.key();
        int int26 = strConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (int) (short) -1, 100L, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType27);
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord28.headers();
        long long30 = strConsumerRecord28.checksum();
        org.apache.kafka.common.header.Headers headers31 = strConsumerRecord28.headers();
        java.io.Serializable serializable32 = strConsumerRecord28.value();
        java.lang.String str33 = strConsumerRecord28.topic();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertTrue("'" + serializable32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str33, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.lang.String str14 = strConsumerRecord5.topic();
        int int15 = strConsumerRecord5.partition();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        java.io.Serializable serializable17 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        int int7 = strConsumerRecord5.serializedValueSize();
        java.lang.String str8 = strConsumerRecord5.toString();
        java.lang.String str9 = strConsumerRecord5.topic();
        long long10 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.lang.String str13 = strConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType10);
        java.lang.String str12 = strConsumerRecord11.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord11.timestampType();
        java.lang.String str14 = strConsumerRecord11.toString();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord11.headers();
        java.lang.Class<?> wildcardClass16 = headers15.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str14, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long18 = strConsumerRecord17.timestamp();
        long long19 = strConsumerRecord17.checksum();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord17.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord17.timestampType();
        java.lang.String str22 = strConsumerRecord17.topic();
        org.apache.kafka.common.header.Headers headers23 = strConsumerRecord17.headers();
        int int24 = strConsumerRecord17.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional25 = strConsumerRecord17.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 100, (long) (short) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) timestampType26);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long37 = strConsumerRecord36.timestamp();
        int int38 = strConsumerRecord36.partition();
        java.lang.String str39 = strConsumerRecord36.topic();
        long long40 = strConsumerRecord36.offset();
        java.io.Serializable serializable41 = strConsumerRecord36.value();
        java.lang.String str42 = strConsumerRecord36.topic();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord53.headers();
        org.apache.kafka.common.header.Headers headers55 = strConsumerRecord53.headers();
        int int56 = strConsumerRecord53.serializedKeySize();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord53.headers();
        org.apache.kafka.common.header.Headers headers58 = strConsumerRecord53.headers();
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord53.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long70 = strConsumerRecord69.timestamp();
        int int71 = strConsumerRecord69.partition();
        java.lang.String str72 = strConsumerRecord69.topic();
        int int73 = strConsumerRecord69.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType74 = strConsumerRecord69.timestampType();
        java.lang.String str75 = strConsumerRecord69.topic();
        java.util.Optional<java.lang.Integer> intOptional76 = strConsumerRecord69.leaderEpoch();
        java.lang.Class<?> wildcardClass77 = strConsumerRecord69.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (-1), (long) 35, (long) (byte) -1, timestampType59, (long) 52, (int) (short) 1, (int) (short) 10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass77);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.record.TimestampType> timestampTypeConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) '4', 35L, 10L, timestampType26, (long) ' ', 0, (int) (short) -1, timestampType43, timestampType59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long90 = strConsumerRecord89.timestamp();
        long long91 = strConsumerRecord89.checksum();
        long long92 = strConsumerRecord89.timestamp();
        java.util.Optional<java.lang.Integer> intOptional93 = strConsumerRecord89.leaderEpoch();
        java.lang.String str94 = strConsumerRecord89.key();
        org.apache.kafka.common.record.TimestampType timestampType95 = strConsumerRecord89.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (-1), (long) (short) -1, 35L, timestampType26, 0L, (int) (byte) 1, (int) 'a', "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType95);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 10 + "'", serializable41, (short) 10);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertNotNull(headers58);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertNotNull(intOptional93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType26, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        java.lang.String str46 = strConsumerRecord43.topic();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int64 = strConsumerRecord63.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional65 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str72 = strConsumerRecord71.topic();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord63, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType73);
        int int75 = strConsumerRecord63.serializedValueSize();
        java.lang.String str76 = strConsumerRecord63.key();
        java.lang.String str77 = strConsumerRecord63.key();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType26, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType47, headers54, intOptional78);
        int int80 = strConsumerRecord79.partition();
        int int81 = strConsumerRecord79.serializedKeySize();
        long long82 = strConsumerRecord79.checksum();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) 0, (long) 52, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", serializable4);
        java.lang.String str6 = strConsumerRecord5.topic();
        int int7 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str6, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        int int11 = strConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord31.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord31.timestampType();
        java.io.Serializable serializable38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int45 = strConsumerRecord44.serializedValueSize();
        int int46 = strConsumerRecord44.partition();
        long long47 = strConsumerRecord44.offset();
        long long48 = strConsumerRecord44.offset();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord44.timestampType();
        java.lang.String str50 = strConsumerRecord44.toString();
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int58 = strConsumerRecord57.serializedValueSize();
        int int59 = strConsumerRecord57.partition();
        long long60 = strConsumerRecord57.offset();
        long long61 = strConsumerRecord57.offset();
        org.apache.kafka.common.header.Headers headers62 = strConsumerRecord57.headers();
        long long63 = strConsumerRecord57.checksum();
        int int64 = strConsumerRecord57.serializedKeySize();
        int int65 = strConsumerRecord57.serializedValueSize();
        long long66 = strConsumerRecord57.offset();
        java.util.Optional<java.lang.Integer> intOptional67 = strConsumerRecord57.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 0, 35L, 100L, timestampType33, (java.lang.Long) 52L, 10, (int) (byte) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable38, headers51, intOptional67);
        java.lang.Class<?> wildcardClass69 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.GenericDeclaration> charSequenceConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) 'a', (long) (byte) 100, (java.lang.CharSequence) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass69);
        java.lang.Class<?> wildcardClass71 = charSequenceConsumerRecord70.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord77.timestampType();
        int int79 = strConsumerRecord77.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional80 = strConsumerRecord77.leaderEpoch();
        java.lang.String str81 = strConsumerRecord77.toString();
        int int82 = strConsumerRecord77.partition();
        long long83 = strConsumerRecord77.timestamp();
        long long84 = strConsumerRecord77.checksum();
        org.apache.kafka.common.header.Headers headers85 = strConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", (int) (byte) -1, (-1L), (long) (byte) 1, timestampType13, (java.lang.Long) (-1L), (int) (short) 1, (int) 'a', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)", (java.io.Serializable) wildcardClass71, headers85);
        int int87 = strConsumerRecord86.serializedKeySize();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 52L + "'", long47 == 52L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str50, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str81, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        java.lang.String str13 = strConsumerRecord9.toString();
        long long14 = strConsumerRecord9.checksum();
        int int15 = strConsumerRecord9.partition();
        long long16 = strConsumerRecord9.offset();
        java.lang.String str17 = strConsumerRecord9.toString();
        int int18 = strConsumerRecord9.partition();
        long long19 = strConsumerRecord9.checksum();
        org.apache.kafka.common.header.Headers headers20 = strConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int34 = strConsumerRecord33.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord33, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType43);
        int int45 = strConsumerRecord33.serializedValueSize();
        java.io.Serializable serializable46 = strConsumerRecord33.value();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.io.Serializable serializable54 = strConsumerRecord53.value();
        long long55 = strConsumerRecord53.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> strConsumerRecordConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 1, 35L, (long) (short) -1, timestampType21, (long) (short) -1, (int) '4', (int) (short) 1, strConsumerRecord33, strConsumerRecord53);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 10 + "'", serializable46, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (short) 10 + "'", serializable54, (short) 10);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        java.io.Serializable serializable11 = strConsumerRecord9.value();
        java.lang.String str12 = strConsumerRecord9.key();
        int int13 = strConsumerRecord9.serializedValueSize();
        java.lang.String str14 = strConsumerRecord9.key();
        long long15 = strConsumerRecord9.checksum();
        int int16 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", 100, (long) '#', "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", (java.io.Serializable) timestampType17);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 0 + "'", serializable11, (short) 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        java.lang.String str10 = strConsumerRecord5.topic();
        int int11 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord20.timestampType();
        int int22 = strConsumerRecord20.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType23);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", 35, (long) 'a', 100L, timestampType25, (long) '#', (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 10L);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord45.timestampType();
        java.lang.String str49 = strConsumerRecord45.key();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord45.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType61 = strConsumerRecord60.timestampType();
        java.lang.Class<?> wildcardClass62 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType50, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int74 = strConsumerRecord73.serializedValueSize();
        int int75 = strConsumerRecord73.partition();
        long long76 = strConsumerRecord73.offset();
        long long77 = strConsumerRecord73.offset();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord73.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int85 = strConsumerRecord84.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional86 = strConsumerRecord84.leaderEpoch();
        java.lang.String str87 = strConsumerRecord84.key();
        org.apache.kafka.common.header.Headers headers88 = strConsumerRecord84.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("", (int) ' ', 0L, (long) '4', timestampType50, (java.lang.Long) 52L, (int) (short) -1, (int) (short) 10, (java.io.Serializable) 100, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78, headers88);
        java.lang.Class<?> wildcardClass90 = headers88.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.reflect.AnnotatedElement> timestampTypeEnumConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 1, (long) (byte) 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType25, (java.lang.reflect.AnnotatedElement) wildcardClass90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) '#', (long) (short) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        java.lang.Class<?> wildcardClass93 = strConsumerRecord92.getClass();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 52L + "'", long76 == 52L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence> charSequenceConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (int) (byte) 10, (long) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)");
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        java.lang.String str14 = strConsumerRecord9.topic();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord9.headers();
        int int16 = strConsumerRecord9.serializedValueSize();
        java.lang.String str17 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord28.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord28.timestampType();
        java.lang.String str32 = strConsumerRecord28.key();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord28.timestampType();
        int int34 = strConsumerRecord28.partition();
        java.io.Serializable serializable35 = strConsumerRecord28.value();
        java.lang.String str36 = strConsumerRecord28.topic();
        java.lang.Class<?> wildcardClass37 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 100, 10L, (long) ' ', timestampType18, (long) (short) 0, 10, (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) wildcardClass37);
        java.util.Optional<java.lang.Integer> intOptional39 = strConsumerRecord38.leaderEpoch();
        int int40 = strConsumerRecord38.partition();
        long long41 = strConsumerRecord38.checksum();
        java.lang.String str42 = strConsumerRecord38.toString();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 10 + "'", serializable35, (short) 10);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 10, NoTimestampType = 32, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str42, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 10, NoTimestampType = 32, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (-1), (long) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) timestampType13);
        long long15 = strConsumerRecord14.checksum();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord14.headers();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord14.headers();
        int int18 = strConsumerRecord14.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.timestamp();
        java.lang.String str22 = strConsumerRecord8.topic();
        long long23 = strConsumerRecord8.checksum();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        java.lang.String str11 = strConsumerRecord8.key();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord8.headers();
        long long13 = strConsumerRecord8.offset();
        int int14 = strConsumerRecord8.serializedValueSize();
        int int15 = strConsumerRecord8.serializedKeySize();
        java.lang.String str16 = strConsumerRecord8.toString();
        java.io.Serializable serializable17 = strConsumerRecord8.value();
        long long18 = strConsumerRecord8.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.String> strConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.String>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", 32, 100L, strConsumerRecord8, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.lang.String str7 = strConsumerRecord5.topic();
        int int8 = strConsumerRecord5.partition();
        java.lang.Class<?> wildcardClass9 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        int int15 = strConsumerRecord5.partition();
        long long16 = strConsumerRecord5.offset();
        java.io.Serializable serializable17 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.io.Serializable serializable12 = strConsumerRecord9.value();
        java.lang.Class<?> wildcardClass13 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, 52L, "", (java.io.Serializable) wildcardClass13);
        java.io.Serializable serializable15 = strConsumerRecord14.value();
        java.lang.String str16 = strConsumerRecord14.key();
        int int17 = strConsumerRecord14.serializedKeySize();
        int int18 = strConsumerRecord14.serializedValueSize();
        java.lang.String str19 = strConsumerRecord14.topic();
        java.lang.String str20 = strConsumerRecord14.key();
        int int21 = strConsumerRecord14.serializedValueSize();
        long long22 = strConsumerRecord14.offset();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(serializable15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.lang.String str7 = strConsumerRecord5.topic();
        int int8 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.offset();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        long long10 = strConsumerRecord5.timestamp();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.String str13 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord9.headers();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord9.leaderEpoch();
        java.lang.String str14 = strConsumerRecord9.key();
        java.lang.Class<?> wildcardClass15 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) '4', (long) (byte) 1, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass15);
        java.lang.String str17 = strConsumerRecord16.key();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        int int19 = strConsumerRecord16.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str17, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        int int12 = strConsumerRecord5.partition();
        int int13 = strConsumerRecord5.partition();
        java.lang.String str14 = strConsumerRecord5.topic();
        java.lang.String str15 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        java.lang.String str14 = strConsumerRecord9.topic();
        long long15 = strConsumerRecord9.checksum();
        long long16 = strConsumerRecord9.timestamp();
        int int17 = strConsumerRecord9.partition();
        int int18 = strConsumerRecord9.partition();
        long long19 = strConsumerRecord9.timestamp();
        long long20 = strConsumerRecord9.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord32.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        java.lang.String str36 = strConsumerRecord32.key();
        long long37 = strConsumerRecord32.timestamp();
        long long38 = strConsumerRecord32.offset();
        java.lang.String str39 = strConsumerRecord32.toString();
        long long40 = strConsumerRecord32.checksum();
        java.io.Serializable serializable41 = strConsumerRecord32.value();
        java.lang.String str42 = strConsumerRecord32.topic();
        org.apache.kafka.common.header.Headers headers43 = strConsumerRecord32.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long50 = strConsumerRecord49.timestamp();
        long long51 = strConsumerRecord49.checksum();
        java.util.Optional<java.lang.Integer> intOptional52 = strConsumerRecord49.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord49.timestampType();
        java.lang.String str54 = strConsumerRecord49.topic();
        org.apache.kafka.common.header.Headers headers55 = strConsumerRecord49.headers();
        int int56 = strConsumerRecord49.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional57 = strConsumerRecord49.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (int) (short) 0, 52L, 32L, timestampType21, (java.lang.Long) 32L, (int) (byte) 10, (int) ' ', "hi!", serializable26, headers43, intOptional57);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        java.lang.Class<?> wildcardClass60 = strConsumerRecord58.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str39, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 10 + "'", serializable41, (short) 10);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.key();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.toString();
        long long14 = strConsumerRecord5.timestamp();
        int int15 = strConsumerRecord5.serializedKeySize();
        int int16 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional11);
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str44 = strConsumerRecord43.topic();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord35, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType45, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType62 = strConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord61.timestampType();
        java.lang.Object obj65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("", 0, (long) (byte) 100, (long) (byte) -1, timestampType45, (long) (byte) 100, (int) (short) 10, (int) (short) -1, timestampType64, obj65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long73 = strConsumerRecord72.timestamp();
        long long74 = strConsumerRecord72.checksum();
        long long75 = strConsumerRecord72.timestamp();
        org.apache.kafka.common.header.Headers headers76 = strConsumerRecord72.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int83 = strConsumerRecord82.serializedValueSize();
        int int84 = strConsumerRecord82.partition();
        int int85 = strConsumerRecord82.partition();
        int int86 = strConsumerRecord82.partition();
        java.util.Optional<java.lang.Integer> intOptional87 = strConsumerRecord82.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 0, 10L, 52L, timestampType14, (java.lang.Long) 100L, (int) (short) 100, 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) "", headers76, intOptional87);
        long long89 = strConsumerRecord88.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType90 = strConsumerRecord88.timestampType();
        int int91 = strConsumerRecord88.serializedKeySize();
        java.lang.Class<?> wildcardClass92 = strConsumerRecord88.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertNotNull(intOptional87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 52L + "'", long89 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType90 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType90.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.lang.String str10 = strConsumerRecord5.key();
        int int11 = strConsumerRecord5.partition();
        java.lang.String str12 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        java.lang.Class<?> wildcardClass26 = strConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType14, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass26);
        int int28 = strConsumerRecord27.serializedValueSize();
        int int29 = strConsumerRecord27.serializedKeySize();
        java.lang.String str30 = strConsumerRecord27.key();
        long long31 = strConsumerRecord27.offset();
        long long32 = strConsumerRecord27.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.key();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        int int13 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        java.lang.String str24 = strConsumerRecord8.key();
        long long25 = strConsumerRecord8.checksum();
        java.io.Serializable serializable26 = strConsumerRecord8.value();
        int int27 = strConsumerRecord8.partition();
        java.io.Serializable serializable28 = strConsumerRecord8.value();
        long long29 = strConsumerRecord8.checksum();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (short) 10 + "'", serializable26, (short) 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (short) 10 + "'", serializable28, (short) 10);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        long long10 = strConsumerRecord5.offset();
        int int11 = strConsumerRecord5.serializedKeySize();
        long long12 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        java.util.Optional<java.lang.Integer> intOptional57 = strConsumerRecord53.leaderEpoch();
        int int58 = strConsumerRecord53.serializedValueSize();
        long long59 = strConsumerRecord53.offset();
        java.lang.String str60 = strConsumerRecord53.key();
        java.lang.String str61 = strConsumerRecord53.topic();
        int int62 = strConsumerRecord53.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str60, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        long long12 = strConsumerRecord5.offset();
        long long13 = strConsumerRecord5.timestamp();
        java.lang.String str14 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = ), value = -1.0)", (int) '4', (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = hi!)");
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str37 = strConsumerRecord36.topic();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType38, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers52, intOptional60);
        java.util.Optional<java.lang.Integer> intOptional62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (short) -1, (long) (-1), 0L, timestampType15, (java.lang.Long) (-1L), (int) '#', (int) (byte) 0, (java.io.Serializable) (byte) -1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers26, headers52, intOptional62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int75 = strConsumerRecord74.serializedValueSize();
        int int76 = strConsumerRecord74.partition();
        long long77 = strConsumerRecord74.offset();
        long long78 = strConsumerRecord74.offset();
        org.apache.kafka.common.header.Headers headers79 = strConsumerRecord74.headers();
        long long80 = strConsumerRecord74.checksum();
        long long81 = strConsumerRecord74.checksum();
        org.apache.kafka.common.header.Headers headers82 = strConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 0, (long) (short) 1, 100L, timestampType15, (java.lang.Long) 0L, 0, (int) (byte) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 1L, headers82);
        org.apache.kafka.common.record.TimestampType timestampType84 = strConsumerRecord83.timestampType();
        org.apache.kafka.common.header.Headers headers85 = strConsumerRecord83.headers();
        java.lang.Class<?> wildcardClass86 = strConsumerRecord83.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 52L + "'", long78 == 52L);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.timestamp();
        long long12 = strConsumerRecord5.checksum();
        int int13 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        long long15 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.lang.String str15 = strConsumerRecord5.key();
        java.lang.String str16 = strConsumerRecord5.key();
        int int17 = strConsumerRecord5.partition();
        int int18 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.partition();
        long long13 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        java.lang.String str22 = strConsumerRecord8.topic();
        long long23 = strConsumerRecord8.checksum();
        java.lang.String str24 = strConsumerRecord8.key();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord8.headers();
        int int27 = strConsumerRecord8.partition();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        int int14 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        long long16 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord8.timestampType();
        int int10 = strConsumerRecord8.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord8.leaderEpoch();
        java.lang.String str12 = strConsumerRecord8.toString();
        java.io.Serializable serializable13 = strConsumerRecord8.value();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord8.headers();
        int int15 = strConsumerRecord8.serializedValueSize();
        java.lang.Class<?> wildcardClass16 = strConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long31 = strConsumerRecord30.timestamp();
        long long32 = strConsumerRecord30.timestamp();
        long long33 = strConsumerRecord30.checksum();
        int int34 = strConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) -1, 10L, (long) '4', timestampType35, (long) (short) 0, (int) (byte) -1, 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long52 = strConsumerRecord51.timestamp();
        int int53 = strConsumerRecord51.partition();
        java.io.Serializable serializable54 = strConsumerRecord51.value();
        java.lang.Class<?> wildcardClass55 = serializable54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int62 = strConsumerRecord61.serializedValueSize();
        int int63 = strConsumerRecord61.partition();
        int int64 = strConsumerRecord61.serializedValueSize();
        org.apache.kafka.common.header.Headers headers65 = strConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        long long74 = strConsumerRecord71.offset();
        long long75 = strConsumerRecord71.offset();
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord71.timestampType();
        java.lang.String str77 = strConsumerRecord71.toString();
        int int78 = strConsumerRecord71.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional79 = strConsumerRecord71.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", 32, (long) 35, 97L, timestampType35, (java.lang.Long) 0L, 0, 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (java.io.Serializable) wildcardClass55, headers65, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.header.Headers> typeConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.header.Headers>("", 100, (long) '#', (java.lang.reflect.Type) wildcardClass16, headers65);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (short) 10 + "'", serializable54, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str77, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(intOptional79);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        int int13 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        long long14 = strConsumerRecord9.timestamp();
        long long15 = strConsumerRecord9.offset();
        java.lang.String str16 = strConsumerRecord9.toString();
        long long17 = strConsumerRecord9.checksum();
        java.io.Serializable serializable18 = strConsumerRecord9.value();
        java.io.Serializable serializable19 = strConsumerRecord9.value();
        java.io.Serializable serializable20 = strConsumerRecord9.value();
        java.lang.String str21 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord44.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord44.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int67 = strConsumerRecord66.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str75 = strConsumerRecord74.topic();
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord66, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType76);
        java.lang.String str78 = strConsumerRecord66.topic();
        java.lang.Class<?> wildcardClass79 = strConsumerRecord66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType47, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType57, (java.lang.Object) wildcardClass79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) -1, (long) '#', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass79);
        java.io.Serializable serializable82 = strConsumerRecord81.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (short) -1, (long) '#', "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (int) (byte) -1, (long) 97, (-1L), timestampType22, (long) '#', (-1), (int) '4', "", serializable82);
        long long85 = strConsumerRecord84.timestamp();
        java.lang.Class<?> wildcardClass86 = strConsumerRecord84.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 10 + "'", serializable20, (short) 10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(serializable82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", 0, (long) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", serializable4);
        int int6 = strConsumerRecord5.partition();
        int int7 = strConsumerRecord5.serializedValueSize();
        int int8 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord22.timestampType();
        int int24 = strConsumerRecord22.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional25 = strConsumerRecord22.leaderEpoch();
        java.lang.String str26 = strConsumerRecord22.toString();
        long long27 = strConsumerRecord22.checksum();
        int int28 = strConsumerRecord22.partition();
        java.lang.Class<?> wildcardClass29 = strConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers36 = strConsumerRecord35.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord42.timestampType();
        int int44 = strConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord42.leaderEpoch();
        java.lang.String str46 = strConsumerRecord42.toString();
        java.util.Optional<java.lang.Integer> intOptional47 = strConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", 52, (long) '#', (long) (short) 1, timestampType12, (java.lang.Long) 0L, (int) (short) -1, 10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) wildcardClass29, headers36, intOptional47);
        org.apache.kafka.common.header.Headers headers49 = strConsumerRecord48.headers();
        int int50 = strConsumerRecord48.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str26, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(headers36);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str46, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        int int14 = strConsumerRecord5.serializedKeySize();
        java.lang.String str15 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord5.headers();
        java.io.Serializable serializable17 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.io.Serializable serializable12 = strConsumerRecord9.value();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord32.timestampType();
        java.io.Serializable serializable39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int46 = strConsumerRecord45.serializedValueSize();
        int int47 = strConsumerRecord45.partition();
        long long48 = strConsumerRecord45.offset();
        long long49 = strConsumerRecord45.offset();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord45.timestampType();
        java.lang.String str51 = strConsumerRecord45.toString();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        int int60 = strConsumerRecord58.partition();
        long long61 = strConsumerRecord58.offset();
        long long62 = strConsumerRecord58.offset();
        org.apache.kafka.common.header.Headers headers63 = strConsumerRecord58.headers();
        long long64 = strConsumerRecord58.checksum();
        int int65 = strConsumerRecord58.serializedKeySize();
        int int66 = strConsumerRecord58.serializedValueSize();
        long long67 = strConsumerRecord58.offset();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 0, 35L, 100L, timestampType34, (java.lang.Long) 52L, 10, (int) (byte) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable39, headers52, intOptional68);
        java.lang.Class<?> wildcardClass70 = strConsumerRecord69.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.GenericDeclaration> charSequenceConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) 'a', (long) (byte) 100, (java.lang.CharSequence) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass70);
        java.lang.Class<?> wildcardClass72 = charSequenceConsumerRecord71.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", 1, (long) (short) 10, (long) (byte) 1, timestampType14, (long) (short) 1, (int) (byte) 1, (int) '4', "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass72);
        int int74 = strConsumerRecord73.partition();
        org.apache.kafka.common.header.Headers headers75 = strConsumerRecord73.headers();
        java.lang.String str76 = strConsumerRecord73.key();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str51, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str76, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        long long35 = strConsumerRecord33.timestamp();
        java.util.Optional<java.lang.Integer> intOptional36 = strConsumerRecord33.leaderEpoch();
        int int37 = strConsumerRecord33.serializedKeySize();
        java.lang.String str38 = strConsumerRecord33.toString();
        int int39 = strConsumerRecord33.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str38, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType26, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        java.lang.String str46 = strConsumerRecord43.topic();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int64 = strConsumerRecord63.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional65 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str72 = strConsumerRecord71.topic();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord63, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType73);
        int int75 = strConsumerRecord63.serializedValueSize();
        java.lang.String str76 = strConsumerRecord63.key();
        java.lang.String str77 = strConsumerRecord63.key();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType26, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType47, headers54, intOptional78);
        int int80 = strConsumerRecord79.partition();
        org.apache.kafka.common.record.TimestampType timestampType81 = strConsumerRecord79.timestampType();
        int int82 = strConsumerRecord79.serializedKeySize();
        java.lang.String str83 = strConsumerRecord79.key();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str83, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        java.lang.String str15 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int30 = strConsumerRecord29.serializedValueSize();
        int int31 = strConsumerRecord29.partition();
        long long32 = strConsumerRecord29.offset();
        long long33 = strConsumerRecord29.offset();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord29.timestampType();
        java.io.Serializable serializable35 = strConsumerRecord29.value();
        java.lang.Class<?> wildcardClass36 = strConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) 'a', (long) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass36);
        java.io.Serializable serializable38 = strConsumerRecord37.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>> objConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (int) (byte) -1, (long) 0, 0L, timestampType16, (-1L), 100, 35, (java.lang.Object) strConsumerRecord37, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)");
        java.io.Serializable serializable41 = strConsumerRecord37.value();
        int int42 = strConsumerRecord37.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 10 + "'", serializable35, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(serializable38);
        org.junit.Assert.assertNotNull(serializable41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        long long15 = strConsumerRecord13.checksum();
        long long16 = strConsumerRecord13.timestamp();
        java.lang.String str17 = strConsumerRecord13.topic();
        long long18 = strConsumerRecord13.timestamp();
        java.io.Serializable serializable19 = strConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        java.io.Serializable serializable25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str32 = strConsumerRecord31.topic();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord31.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", (int) (byte) 10, (long) (byte) 1, (long) (short) 10, timestampType20, (java.lang.Long) 35L, 32, (int) ' ', "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", serializable25, headers33);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long49 = strConsumerRecord48.timestamp();
        long long50 = strConsumerRecord48.checksum();
        long long51 = strConsumerRecord48.timestamp();
        java.util.Optional<java.lang.Integer> intOptional52 = strConsumerRecord48.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord48.timestampType();
        int int54 = strConsumerRecord48.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType55 = strConsumerRecord48.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord66.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord66.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType69 = strConsumerRecord66.timestampType();
        java.lang.String str70 = strConsumerRecord66.key();
        long long71 = strConsumerRecord66.timestamp();
        long long72 = strConsumerRecord66.offset();
        java.lang.String str73 = strConsumerRecord66.toString();
        long long74 = strConsumerRecord66.checksum();
        java.io.Serializable serializable75 = strConsumerRecord66.value();
        java.lang.String str76 = strConsumerRecord66.topic();
        org.apache.kafka.common.header.Headers headers77 = strConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.String> strComparableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.String>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", 52, 97L, (long) 10, timestampType55, (java.lang.Long) 100L, 35, (int) (byte) 0, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 1)", headers77);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long85 = strConsumerRecord84.timestamp();
        long long86 = strConsumerRecord84.checksum();
        long long87 = strConsumerRecord84.timestamp();
        org.apache.kafka.common.header.Headers headers88 = strConsumerRecord84.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (int) '4', 0L, (-1L), timestampType20, (java.lang.Long) 35L, (int) (short) 10, (int) '#', "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", (java.io.Serializable) 35, headers88);
        long long90 = strConsumerRecord89.timestamp();
        java.util.Optional<java.lang.Integer> intOptional91 = strConsumerRecord89.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 52L + "'", long72 == 52L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str73, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 10 + "'", serializable75, (short) 10);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertNotNull(intOptional91);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        java.lang.String str9 = strConsumerRecord5.topic();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        int int14 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
    }
}

