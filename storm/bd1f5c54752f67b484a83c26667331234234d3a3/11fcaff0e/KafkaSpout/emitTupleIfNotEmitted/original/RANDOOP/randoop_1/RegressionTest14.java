import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test07001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07001");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        java.lang.Class<?> wildcardClass43 = strConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType18, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass43);
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord44.headers();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord44.timestampType();
        java.io.Serializable serializable47 = strConsumerRecord44.value();
        java.util.Optional<java.lang.Integer> intOptional48 = strConsumerRecord44.leaderEpoch();
        java.lang.String str49 = strConsumerRecord44.topic();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(serializable47);
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test07002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07002");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.offset();
        long long14 = strConsumerRecord5.offset();
        int int15 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test07003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07003");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType22, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType53, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType65, headers74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int82 = strConsumerRecord81.serializedValueSize();
        int int83 = strConsumerRecord81.partition();
        long long84 = strConsumerRecord81.offset();
        java.lang.String str85 = strConsumerRecord81.key();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord81.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (-1), 100L, (long) (short) 1, timestampType22, (long) (byte) 1, (int) (byte) 10, (int) (short) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType65, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) "hi!");
        long long89 = strConsumerRecord88.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 52L + "'", long84 == 52L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
    }

    @Test
    public void test07004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07004");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        int int8 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        java.lang.String str10 = strConsumerRecord5.key();
        java.lang.String str11 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass13 = intOptional12.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test07005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07005");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        int int8 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        int int10 = strConsumerRecord5.serializedValueSize();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test07006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07006");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        java.lang.String str15 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable21 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int28 = strConsumerRecord27.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional29 = strConsumerRecord27.leaderEpoch();
        java.lang.String str30 = strConsumerRecord27.key();
        long long31 = strConsumerRecord27.checksum();
        int int32 = strConsumerRecord27.partition();
        int int33 = strConsumerRecord27.serializedKeySize();
        org.apache.kafka.common.header.Headers headers34 = strConsumerRecord27.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord40.timestampType();
        int int42 = strConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = strConsumerRecord40.leaderEpoch();
        java.lang.String str44 = strConsumerRecord40.toString();
        long long45 = strConsumerRecord40.checksum();
        long long46 = strConsumerRecord40.timestamp();
        java.util.Optional<java.lang.Integer> intOptional47 = strConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 35, null = -1, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), value = -1)", (int) (byte) 1, (long) 100, (long) 97, timestampType16, (java.lang.Long) (-1L), 100, 35, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = 1.0)", serializable21, headers34, intOptional47);
        long long49 = strConsumerRecord48.timestamp();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str44, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 97L + "'", long49 == 97L);
    }

    @Test
    public void test07007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07007");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType22, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        java.lang.String str30 = strConsumerRecord29.key();
        java.io.Serializable serializable31 = strConsumerRecord29.value();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord29.timestampType();
        long long33 = strConsumerRecord29.offset();
        long long34 = strConsumerRecord29.checksum();
        long long35 = strConsumerRecord29.offset();
        java.lang.String str36 = strConsumerRecord29.key();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + 0.0f + "'", serializable31, 0.0f);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str36, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07008");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.partition();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.partition();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.serializedKeySize();
        long long15 = strConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test07009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07009");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        int int15 = strConsumerRecord13.partition();
        long long16 = strConsumerRecord13.offset();
        long long17 = strConsumerRecord13.offset();
        org.apache.kafka.common.header.Headers headers18 = strConsumerRecord13.headers();
        long long19 = strConsumerRecord13.checksum();
        int int20 = strConsumerRecord13.serializedKeySize();
        java.lang.Class<?> wildcardClass21 = strConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) ' ', (long) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass21);
        java.lang.String str23 = strConsumerRecord22.key();
        java.io.Serializable serializable24 = strConsumerRecord22.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 10, 0L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = NoTimestampType)", serializable24);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str23, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertNotNull(serializable24);
    }

    @Test
    public void test07010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07010");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord62.timestampType();
        int int64 = strConsumerRecord62.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord62.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType65, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType48, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 1, (long) '#', timestampType31, (long) (short) 100, 0, (int) ' ', "hi!", (java.io.Serializable) 1L);
        org.apache.kafka.common.record.TimestampType timestampType74 = strConsumerRecord73.timestampType();
        int int75 = strConsumerRecord73.partition();
        long long76 = strConsumerRecord73.timestamp();
        long long77 = strConsumerRecord73.checksum();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 35L + "'", long76 == 35L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 100L + "'", long77 == 100L);
    }

    @Test
    public void test07011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07011");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        java.lang.String str14 = strConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        long long16 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        java.lang.String str18 = strConsumerRecord5.toString();
        java.lang.String str19 = strConsumerRecord5.key();
        int int20 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test07012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07012");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord9.headers();
        int int13 = strConsumerRecord9.partition();
        java.lang.String str14 = strConsumerRecord9.key();
        long long15 = strConsumerRecord9.checksum();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord9.headers();
        int int17 = strConsumerRecord9.serializedValueSize();
        java.lang.String str18 = strConsumerRecord9.toString();
        java.lang.Class<?> wildcardClass19 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (int) (byte) -1, 100L, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", (java.io.Serializable) wildcardClass19);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test07013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07013");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        long long13 = strConsumerRecord9.checksum();
        java.lang.String str14 = strConsumerRecord9.toString();
        long long15 = strConsumerRecord9.offset();
        int int16 = strConsumerRecord9.serializedKeySize();
        int int17 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int29 = strConsumerRecord28.serializedValueSize();
        int int30 = strConsumerRecord28.partition();
        long long31 = strConsumerRecord28.offset();
        long long32 = strConsumerRecord28.timestamp();
        int int33 = strConsumerRecord28.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord28.timestampType();
        java.lang.String str35 = strConsumerRecord28.key();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord42.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord42.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord42.timestampType();
        java.lang.String str46 = strConsumerRecord42.key();
        long long47 = strConsumerRecord42.timestamp();
        long long48 = strConsumerRecord42.offset();
        java.lang.String str49 = strConsumerRecord42.toString();
        java.io.Serializable serializable50 = strConsumerRecord42.value();
        long long51 = strConsumerRecord42.offset();
        java.io.Serializable serializable52 = strConsumerRecord42.value();
        int int53 = strConsumerRecord42.serializedValueSize();
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (int) (byte) 100, (long) (-1), (long) 32, timestampType18, (java.lang.Long) 35L, (int) 'a', 35, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = 32, serialized key size = 32, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", (java.io.Serializable) timestampType36, headers54);
        java.util.Optional<java.lang.Integer> intOptional56 = strConsumerRecord55.leaderEpoch();
        java.lang.String str57 = strConsumerRecord55.key();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str49, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 10 + "'", serializable50, (short) 10);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 52L + "'", long51 == 52L);
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (short) 10 + "'", serializable52, (short) 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = 32, serialized key size = 32, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)" + "'", str57, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = 32, serialized key size = 32, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)");
    }

    @Test
    public void test07014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07014");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertNotNull(headers15);
    }

    @Test
    public void test07015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07015");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.offset();
        long long12 = strConsumerRecord5.timestamp();
        int int13 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        long long16 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test07016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07016");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.lang.String str12 = strConsumerRecord9.toString();
        int int13 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType35, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long51 = strConsumerRecord50.timestamp();
        int int52 = strConsumerRecord50.partition();
        java.io.Serializable serializable53 = strConsumerRecord50.value();
        java.lang.Class<?> wildcardClass54 = serializable53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long61 = strConsumerRecord60.timestamp();
        int int62 = strConsumerRecord60.partition();
        java.lang.String str63 = strConsumerRecord60.topic();
        long long64 = strConsumerRecord60.offset();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType35, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.GenericDeclaration) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, 1L, timestampType14, (long) (short) -1, 0, (int) (short) -1, "hi!", (java.io.Serializable) timestampType35);
        org.apache.kafka.common.header.Headers headers68 = strConsumerRecord67.headers();
        int int69 = strConsumerRecord67.serializedKeySize();
        java.io.Serializable serializable70 = strConsumerRecord67.value();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 10 + "'", serializable53, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + serializable70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07017");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str26 = strConsumerRecord25.topic();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int39 = strConsumerRecord38.serializedValueSize();
        int int40 = strConsumerRecord38.partition();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord38.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int48 = strConsumerRecord47.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional49 = strConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType27, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers41, intOptional49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int62 = strConsumerRecord61.serializedValueSize();
        int int63 = strConsumerRecord61.partition();
        org.apache.kafka.common.header.Headers headers64 = strConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType27, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) -1, (long) '4', 0L, timestampType27, (long) (byte) 10, (-1), 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 1.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 1, (long) 'a', (long) (short) 0, timestampType27, 1L, (int) (short) -1, (int) (short) 0, "", (java.io.Serializable) (short) 1);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType88 = strConsumerRecord87.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType89 = strConsumerRecord87.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType90 = strConsumerRecord87.timestampType();
        java.lang.String str91 = strConsumerRecord87.key();
        org.apache.kafka.common.record.TimestampType timestampType92 = strConsumerRecord87.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, (long) (byte) 10, timestampType27, 0L, (int) '#', 97, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType92);
        int int94 = strConsumerRecord93.serializedValueSize();
        java.lang.String str95 = strConsumerRecord93.key();
        long long96 = strConsumerRecord93.offset();
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + timestampType88 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType88.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType90 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType90.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + timestampType92 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType92.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str95, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test07018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07018");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.timestamp();
        java.lang.String str14 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test07019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07019");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord8.timestampType();
        java.lang.String str12 = strConsumerRecord8.key();
        long long13 = strConsumerRecord8.timestamp();
        long long14 = strConsumerRecord8.offset();
        java.lang.String str15 = strConsumerRecord8.toString();
        long long16 = strConsumerRecord8.checksum();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord8.headers();
        java.lang.String str18 = strConsumerRecord8.topic();
        long long19 = strConsumerRecord8.offset();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord8.leaderEpoch();
        int int21 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>> strConsumerRecordConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", 0, (long) ' ', strConsumerRecord8, intOptional22);
        int int24 = strConsumerRecord8.serializedKeySize();
        java.io.Serializable serializable25 = strConsumerRecord8.value();
        java.io.Serializable serializable26 = strConsumerRecord8.value();
        long long27 = strConsumerRecord8.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord8.timestampType();
        java.lang.String str29 = strConsumerRecord8.topic();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord8.leaderEpoch();
        long long31 = strConsumerRecord8.offset();
        int int32 = strConsumerRecord8.partition();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 10 + "'", serializable25, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (short) 10 + "'", serializable26, (short) 10);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
    }

    @Test
    public void test07020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07020");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.lang.String str15 = strConsumerRecord5.key();
        java.lang.String str16 = strConsumerRecord5.key();
        int int17 = strConsumerRecord5.serializedValueSize();
        int int18 = strConsumerRecord5.partition();
        long long19 = strConsumerRecord5.checksum();
        int int20 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test07021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07021");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType26, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        java.lang.String str46 = strConsumerRecord43.topic();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int64 = strConsumerRecord63.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional65 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str72 = strConsumerRecord71.topic();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord63, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType73);
        int int75 = strConsumerRecord63.serializedValueSize();
        java.lang.String str76 = strConsumerRecord63.key();
        java.lang.String str77 = strConsumerRecord63.key();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType26, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType47, headers54, intOptional78);
        java.lang.String str80 = strConsumerRecord79.topic();
        java.lang.String str81 = strConsumerRecord79.key();
        long long82 = strConsumerRecord79.checksum();
        java.lang.String str83 = strConsumerRecord79.key();
        java.util.Optional<java.lang.Integer> intOptional84 = strConsumerRecord79.leaderEpoch();
        java.lang.Class<?> wildcardClass85 = strConsumerRecord79.getClass();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str80, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str81, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str83, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertNotNull(intOptional84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test07022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07022");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        int int14 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test07023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07023");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long23 = strConsumerRecord22.timestamp();
        int int24 = strConsumerRecord22.partition();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord22.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord51.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        int int60 = strConsumerRecord58.partition();
        org.apache.kafka.common.header.Headers headers61 = strConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType40, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType52, headers61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 0, 52L, (long) '#', timestampType12, (java.lang.Long) 0L, (int) (short) 10, (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType25, headers61);
        long long64 = strConsumerRecord63.checksum();
        java.lang.String str65 = strConsumerRecord63.key();
        java.lang.String str66 = strConsumerRecord63.toString();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord63.headers();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str65, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)" + "'", str66, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)");
        org.junit.Assert.assertNotNull(headers67);
    }

    @Test
    public void test07024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07024");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.timestamp();
        int int14 = strConsumerRecord5.partition();
        int int15 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test07025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07025");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.checksum();
        int int14 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test07026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07026");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long20 = strConsumerRecord19.timestamp();
        int int21 = strConsumerRecord19.partition();
        java.lang.String str22 = strConsumerRecord19.topic();
        long long23 = strConsumerRecord19.offset();
        java.io.Serializable serializable24 = strConsumerRecord19.value();
        java.lang.String str25 = strConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord19.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType26, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int48 = strConsumerRecord47.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional49 = strConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str56 = strConsumerRecord55.topic();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord55.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord47, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType57);
        java.lang.String str59 = strConsumerRecord47.topic();
        java.lang.String str60 = strConsumerRecord47.key();
        java.lang.Class<?> wildcardClass61 = strConsumerRecord47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.Type> timestampTypeConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.Type>("", (int) ' ', 0L, timestampType26, (java.lang.reflect.Type) wildcardClass61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", 100, (long) '4', "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long74 = strConsumerRecord73.timestamp();
        long long75 = strConsumerRecord73.offset();
        long long76 = strConsumerRecord73.offset();
        java.lang.String str77 = strConsumerRecord73.key();
        int int78 = strConsumerRecord73.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType79 = strConsumerRecord73.timestampType();
        java.io.Serializable serializable84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 52L, (long) (short) 1, timestampType79, 10L, (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable84);
        int int86 = strConsumerRecord85.serializedValueSize();
        java.io.Serializable serializable87 = strConsumerRecord85.value();
        java.lang.String str88 = strConsumerRecord85.key();
        java.util.Optional<java.lang.Integer> intOptional89 = strConsumerRecord85.leaderEpoch();
        long long90 = strConsumerRecord85.offset();
        org.apache.kafka.common.header.Headers headers91 = strConsumerRecord85.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = hi!, partition = 32, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 100)", (int) (short) -1, (-1L), (java.io.Serializable) 100, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers91);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 52L + "'", long76 == 52L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNull(serializable87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str88, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertNotNull(intOptional89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 52L + "'", long90 == 52L);
        org.junit.Assert.assertNotNull(headers91);
    }

    @Test
    public void test07027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07027");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (short) 100, (long) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) timestampType16);
        long long18 = strConsumerRecord17.offset();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
    }

    @Test
    public void test07028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07028");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        java.lang.String str11 = strConsumerRecord9.topic();
        int int12 = strConsumerRecord9.serializedKeySize();
        int int13 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int26 = strConsumerRecord25.serializedValueSize();
        int int27 = strConsumerRecord25.partition();
        int int28 = strConsumerRecord25.serializedValueSize();
        java.io.Serializable serializable29 = strConsumerRecord25.value();
        java.lang.String str30 = strConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) -1, (long) (byte) -1, 1L, timestampType15, (long) (byte) 1, 0, (int) 'a', "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 32, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value =  )", (java.io.Serializable) timestampType31);
        java.lang.Class<?> wildcardClass33 = timestampType31.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (short) 10 + "'", serializable29, (short) 10);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test07029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07029");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        java.lang.Class<?> wildcardClass43 = strConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType18, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass43);
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord44.headers();
        java.io.Serializable serializable46 = strConsumerRecord44.value();
        java.lang.String str47 = strConsumerRecord44.topic();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord44.headers();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(serializable46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(headers48);
    }

    @Test
    public void test07030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07030");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        java.lang.String str17 = strConsumerRecord5.topic();
        long long18 = strConsumerRecord5.checksum();
        int int19 = strConsumerRecord5.serializedValueSize();
        int int20 = strConsumerRecord5.partition();
        long long21 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test07031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07031");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.key();
        long long14 = strConsumerRecord5.checksum();
        java.lang.String str15 = strConsumerRecord5.topic();
        long long16 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test07032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07032");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        java.lang.Class<?> wildcardClass43 = strConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType18, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass43);
        java.io.Serializable serializable45 = strConsumerRecord44.value();
        long long46 = strConsumerRecord44.timestamp();
        java.lang.String str47 = strConsumerRecord44.key();
        java.util.Optional<java.lang.Integer> intOptional48 = strConsumerRecord44.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(serializable45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(intOptional48);
    }

    @Test
    public void test07033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07033");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.serializedKeySize();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test07034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07034");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        int int15 = strConsumerRecord5.partition();
        int int16 = strConsumerRecord5.serializedKeySize();
        long long17 = strConsumerRecord5.timestamp();
        int int18 = strConsumerRecord5.serializedKeySize();
        long long19 = strConsumerRecord5.checksum();
        java.lang.Class<?> wildcardClass20 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test07035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07035");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.lang.String str15 = strConsumerRecord5.topic();
        java.lang.String str16 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test07036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07036");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.topic();
        long long11 = strConsumerRecord5.checksum();
        java.lang.String str12 = strConsumerRecord5.toString();
        int int13 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test07037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07037");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (-1), (long) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) timestampType17);
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord37.timestampType();
        int int39 = strConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord37.leaderEpoch();
        java.lang.String str41 = strConsumerRecord37.toString();
        java.io.Serializable serializable42 = strConsumerRecord37.value();
        org.apache.kafka.common.header.Headers headers43 = strConsumerRecord37.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord50.headers();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord50.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long59 = strConsumerRecord58.timestamp();
        long long60 = strConsumerRecord58.timestamp();
        java.util.Optional<java.lang.Integer> intOptional61 = strConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Comparable<java.lang.String>> headersConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (short) -1, 0L, timestampType28, (java.lang.Long) 0L, 0, 97, headers43, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", headers52, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType69 = strConsumerRecord68.timestampType();
        int int70 = strConsumerRecord68.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional71 = strConsumerRecord68.leaderEpoch();
        java.lang.String str72 = strConsumerRecord68.toString();
        java.util.Optional<java.lang.Integer> intOptional73 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", 97, (long) (byte) -1, (long) (byte) 0, timestampType17, (java.lang.Long) 52L, (int) 'a', (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", headers43, intOptional73);
        long long75 = strConsumerRecord74.offset();
        long long76 = strConsumerRecord74.offset();
        int int77 = strConsumerRecord74.serializedValueSize();
        long long78 = strConsumerRecord74.timestamp();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str41, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 10 + "'", serializable42, (short) 10);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str72, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test07038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07038");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.checksum();
        java.lang.String str11 = strConsumerRecord5.topic();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test07039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07039");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        java.lang.String str24 = strConsumerRecord12.topic();
        long long25 = strConsumerRecord12.offset();
        long long26 = strConsumerRecord12.offset();
        java.lang.String str27 = strConsumerRecord12.toString();
        int int28 = strConsumerRecord12.serializedValueSize();
        int int29 = strConsumerRecord12.partition();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)", (int) (short) 1, (long) 100, 0L, timestampType30, (long) (byte) 1, (int) (byte) 100, 10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        int int37 = strConsumerRecord36.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
    }

    @Test
    public void test07040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07040");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.toString();
        java.lang.String str11 = strConsumerRecord5.toString();
        java.lang.Class<?> wildcardClass12 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test07041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07041");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.lang.String str7 = strConsumerRecord5.topic();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers11);
    }

    @Test
    public void test07042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07042");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.lang.String str9 = strConsumerRecord5.topic();
        long long10 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        long long12 = strConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test07043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07043");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        int int26 = strConsumerRecord24.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional27 = strConsumerRecord24.leaderEpoch();
        java.lang.String str28 = strConsumerRecord24.toString();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord24.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )", 52, (long) 0, (long) '4', timestampType14, (long) ' ', (int) ' ', (int) 'a', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord31.timestampType();
        long long33 = strConsumerRecord31.offset();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(intOptional27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test07044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07044");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        java.lang.String str14 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07045");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        java.lang.String str15 = strConsumerRecord13.topic();
        java.lang.String str16 = strConsumerRecord13.key();
        int int17 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord13.timestampType();
        java.lang.reflect.GenericDeclaration genericDeclaration23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord29.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord29.timestampType();
        java.lang.String str32 = strConsumerRecord29.toString();
        int int33 = strConsumerRecord29.partition();
        int int34 = strConsumerRecord29.partition();
        long long35 = strConsumerRecord29.offset();
        int int36 = strConsumerRecord29.partition();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord29.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Iterable<org.apache.kafka.common.header.Header>> genericDeclarationConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", 35, (long) 'a', (long) 52, timestampType19, (long) (short) 10, (int) (short) 0, 97, genericDeclaration23, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long48 = strConsumerRecord47.timestamp();
        int int49 = strConsumerRecord47.partition();
        java.lang.String str50 = strConsumerRecord47.topic();
        long long51 = strConsumerRecord47.offset();
        java.io.Serializable serializable52 = strConsumerRecord47.value();
        long long53 = strConsumerRecord47.checksum();
        int int54 = strConsumerRecord47.serializedValueSize();
        long long55 = strConsumerRecord47.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType56 = strConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", (int) (byte) 1, (long) (short) 0, (long) '4', timestampType19, (long) (short) -1, 35, (int) (short) 0, (java.io.Serializable) timestampType56, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 32, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1.0)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str32, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 52L + "'", long51 == 52L);
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (short) 10 + "'", serializable52, (short) 10);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07046");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.lang.String str15 = strConsumerRecord5.key();
        java.lang.String str16 = strConsumerRecord5.key();
        long long17 = strConsumerRecord5.offset();
        long long18 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(intOptional19);
    }

    @Test
    public void test07047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07047");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) ' ', 0L, (long) (short) 0, timestampType12, (long) (byte) -1, (int) '#', 100, "", (java.io.Serializable) 1.0d);
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord18.timestampType();
        int int20 = strConsumerRecord18.serializedKeySize();
        java.lang.String str21 = strConsumerRecord18.topic();
        java.io.Serializable serializable22 = strConsumerRecord18.value();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + 1.0d + "'", serializable22, 1.0d);
    }

    @Test
    public void test07048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07048");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.lang.String str11 = strConsumerRecord5.toString();
        long long12 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07049");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        java.lang.String str24 = strConsumerRecord12.topic();
        long long25 = strConsumerRecord12.offset();
        java.lang.String str26 = strConsumerRecord12.topic();
        java.lang.String str27 = strConsumerRecord12.topic();
        long long28 = strConsumerRecord12.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord47.timestampType();
        java.lang.String str51 = strConsumerRecord47.key();
        long long52 = strConsumerRecord47.timestamp();
        long long53 = strConsumerRecord47.offset();
        java.lang.String str54 = strConsumerRecord47.toString();
        long long55 = strConsumerRecord47.checksum();
        java.io.Serializable serializable56 = strConsumerRecord47.value();
        java.io.Serializable serializable57 = strConsumerRecord47.value();
        int int58 = strConsumerRecord47.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, (long) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)", (java.io.Serializable) timestampType59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long71 = strConsumerRecord70.timestamp();
        long long72 = strConsumerRecord70.checksum();
        java.util.Optional<java.lang.Integer> intOptional73 = strConsumerRecord70.leaderEpoch();
        long long74 = strConsumerRecord70.offset();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord70.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", 52, 1L, 52L, timestampType59, (long) '4', (int) '4', (int) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", (java.io.Serializable) timestampType75);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 97, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 97, 10L, (long) 52, timestampType29, (long) 100, (int) (byte) 10, 97, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )");
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord77.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str54, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (short) 10 + "'", serializable56, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (short) 10 + "'", serializable57, (short) 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional78);
    }

    @Test
    public void test07050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07050");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        java.lang.String str17 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord5.timestampType();
        java.lang.String str19 = strConsumerRecord5.key();
        long long20 = strConsumerRecord5.offset();
        int int21 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test07051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07051");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int21 = strConsumerRecord20.serializedValueSize();
        int int22 = strConsumerRecord20.partition();
        long long23 = strConsumerRecord20.offset();
        long long24 = strConsumerRecord20.offset();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord20.timestampType();
        java.lang.String str26 = strConsumerRecord20.toString();
        int int27 = strConsumerRecord20.serializedValueSize();
        java.io.Serializable serializable28 = strConsumerRecord20.value();
        java.io.Serializable serializable29 = strConsumerRecord20.value();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        int int38 = strConsumerRecord36.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType39 = strConsumerRecord36.timestampType();
        java.lang.String str40 = strConsumerRecord36.toString();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord36.leaderEpoch();
        long long42 = strConsumerRecord36.offset();
        java.util.Optional<java.lang.Integer> intOptional43 = strConsumerRecord36.leaderEpoch();
        org.apache.kafka.common.header.Headers headers44 = strConsumerRecord36.headers();
        long long45 = strConsumerRecord36.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> timestampTypeConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 97, 35L, timestampType30, strConsumerRecord36);
        org.apache.kafka.common.header.Headers headers47 = strConsumerRecord36.headers();
        int int48 = strConsumerRecord36.partition();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, (long) ' ', "", (java.io.Serializable) timestampType49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int61 = strConsumerRecord60.serializedValueSize();
        int int62 = strConsumerRecord60.partition();
        long long63 = strConsumerRecord60.offset();
        int int64 = strConsumerRecord60.partition();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 1, (long) 97, (long) 97, timestampType49, (long) 97, (int) (short) 1, 35, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 10, (long) 'a', "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) 97);
        int int68 = strConsumerRecord67.serializedValueSize();
        int int69 = strConsumerRecord67.serializedKeySize();
        java.lang.Class<?> wildcardClass70 = strConsumerRecord67.getClass();
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str26, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (short) 10 + "'", serializable28, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (short) 10 + "'", serializable29, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str40, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test07052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07052");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedValueSize();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        java.lang.String str14 = strConsumerRecord5.key();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        long long16 = strConsumerRecord5.checksum();
        java.io.Serializable serializable17 = strConsumerRecord5.value();
        long long18 = strConsumerRecord5.timestamp();
        java.lang.String str19 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test07053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07053");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        java.lang.String str16 = strConsumerRecord13.toString();
        int int17 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType18);
        int int20 = strConsumerRecord19.partition();
        int int21 = strConsumerRecord19.partition();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord19.timestampType();
        java.io.Serializable serializable27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long42 = strConsumerRecord41.timestamp();
        int int43 = strConsumerRecord41.partition();
        java.lang.String str44 = strConsumerRecord41.topic();
        long long45 = strConsumerRecord41.offset();
        java.io.Serializable serializable46 = strConsumerRecord41.value();
        java.lang.String str47 = strConsumerRecord41.topic();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType48, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str62 = strConsumerRecord61.toString();
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord61.leaderEpoch();
        int int64 = strConsumerRecord61.partition();
        int int65 = strConsumerRecord61.partition();
        int int66 = strConsumerRecord61.serializedValueSize();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long77 = strConsumerRecord76.timestamp();
        long long78 = strConsumerRecord76.checksum();
        long long79 = strConsumerRecord76.timestamp();
        java.lang.String str80 = strConsumerRecord76.topic();
        long long81 = strConsumerRecord76.timestamp();
        java.io.Serializable serializable82 = strConsumerRecord76.value();
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord76.headers();
        int int84 = strConsumerRecord76.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        java.util.Optional<java.lang.Integer> intOptional91 = strConsumerRecord90.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>> strConsumerRecordConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", 10, (long) 100, strConsumerRecord76, intOptional91);
        java.lang.String str93 = strConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional94 = strConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (int) (short) -1, 35L, (long) (short) 1, timestampType22, (java.lang.Long) 10L, (int) ' ', 0, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", serializable27, headers67, intOptional94);
        int int96 = strConsumerRecord95.serializedKeySize();
        int int97 = strConsumerRecord95.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 10 + "'", serializable46, (short) 10);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str62, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable82 + "' != '" + (short) 10 + "'", serializable82, (short) 10);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 32 + "'", int96 == 32);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 32 + "'", int97 == 32);
    }

    @Test
    public void test07054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07054");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long27 = strConsumerRecord26.timestamp();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType56 = strConsumerRecord55.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int63 = strConsumerRecord62.serializedValueSize();
        int int64 = strConsumerRecord62.partition();
        org.apache.kafka.common.header.Headers headers65 = strConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType44, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType56, headers65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 0, 52L, (long) '#', timestampType16, (java.lang.Long) 0L, (int) (short) 10, (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType29, headers65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType82 = strConsumerRecord81.timestampType();
        int int83 = strConsumerRecord81.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType84 = strConsumerRecord81.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 1, (long) (byte) 1, (long) '#', timestampType29, (long) 100, 52, 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) 52L);
        int int87 = strConsumerRecord86.serializedKeySize();
        long long88 = strConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers89 = strConsumerRecord86.headers();
        org.apache.kafka.common.header.Headers headers90 = strConsumerRecord86.headers();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 35L + "'", long88 == 35L);
        org.junit.Assert.assertNotNull(headers89);
        org.junit.Assert.assertNotNull(headers90);
    }

    @Test
    public void test07055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07055");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.checksum();
        long long14 = strConsumerRecord9.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long26 = strConsumerRecord25.timestamp();
        int int27 = strConsumerRecord25.partition();
        java.io.Serializable serializable28 = strConsumerRecord25.value();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (byte) 100, 100L, (long) 97, timestampType15, (long) 0, (int) (byte) 1, 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = 1.0)", (java.io.Serializable) timestampType29);
        java.lang.Class<?> wildcardClass31 = timestampType29.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (short) 10 + "'", serializable28, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test07056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07056");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        long long9 = strConsumerRecord5.timestamp();
        long long10 = strConsumerRecord5.checksum();
        java.lang.String str11 = strConsumerRecord5.key();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.offset();
        java.lang.String str14 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test07057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07057");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord53.headers();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord53.leaderEpoch();
        java.lang.String str59 = strConsumerRecord53.toString();
        java.lang.String str60 = strConsumerRecord53.toString();
        java.lang.String str61 = strConsumerRecord53.topic();
        java.lang.String str62 = strConsumerRecord53.key();
        int int63 = strConsumerRecord53.serializedKeySize();
        long long64 = strConsumerRecord53.timestamp();
        long long65 = strConsumerRecord53.timestamp();
        long long66 = strConsumerRecord53.checksum();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str59, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str60, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str62, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
    }

    @Test
    public void test07058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07058");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        int int9 = strConsumerRecord5.serializedKeySize();
        java.lang.String str10 = strConsumerRecord5.toString();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07059");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        long long57 = strConsumerRecord53.checksum();
        java.lang.String str58 = strConsumerRecord53.key();
        org.apache.kafka.common.header.Headers headers59 = strConsumerRecord53.headers();
        java.io.Serializable serializable60 = strConsumerRecord53.value();
        java.io.Serializable serializable61 = strConsumerRecord53.value();
        long long62 = strConsumerRecord53.checksum();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str58, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (-1.0d) + "'", serializable60, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (-1.0d) + "'", serializable61, (-1.0d));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
    }

    @Test
    public void test07060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07060");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        int int10 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        java.lang.String str12 = strConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test07061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07061");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        int int15 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        long long17 = strConsumerRecord5.timestamp();
        long long18 = strConsumerRecord5.timestamp();
        java.lang.String str19 = strConsumerRecord5.topic();
        java.lang.String str20 = strConsumerRecord5.topic();
        java.lang.String str21 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test07062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07062");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long22 = strConsumerRecord21.timestamp();
        int int23 = strConsumerRecord21.partition();
        java.lang.String str24 = strConsumerRecord21.topic();
        long long25 = strConsumerRecord21.offset();
        java.io.Serializable serializable26 = strConsumerRecord21.value();
        java.lang.String str27 = strConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType39 = strConsumerRecord38.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType28, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType55 = strConsumerRecord54.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType56 = strConsumerRecord54.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord54.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord66.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int77 = strConsumerRecord76.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str85 = strConsumerRecord84.topic();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord84.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord76, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType86);
        java.lang.String str88 = strConsumerRecord76.topic();
        java.lang.Class<?> wildcardClass89 = strConsumerRecord76.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType57, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType67, (java.lang.Object) wildcardClass89);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType28, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType57);
        long long92 = strConsumerRecord91.checksum();
        org.apache.kafka.common.header.Headers headers93 = strConsumerRecord91.headers();
        java.io.Serializable serializable94 = strConsumerRecord91.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (-1), 1L, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable94);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), value = 10)", 10, 97L, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)", (java.io.Serializable) 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (short) 10 + "'", serializable26, (short) 10);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertTrue("'" + serializable94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07063");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.lang.String str13 = strConsumerRecord5.toString();
        java.lang.String str14 = strConsumerRecord5.toString();
        long long15 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test07064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07064");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        int int21 = strConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.header.Headers headers22 = strConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers23 = strConsumerRecord8.headers();
        int int24 = strConsumerRecord8.serializedValueSize();
        java.lang.String str25 = strConsumerRecord8.topic();
        java.lang.String str26 = strConsumerRecord8.key();
        long long27 = strConsumerRecord8.offset();
        java.lang.String str28 = strConsumerRecord8.key();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test07065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07065");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.io.Serializable serializable12 = strConsumerRecord9.value();
        java.lang.Class<?> wildcardClass13 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, 52L, "", (java.io.Serializable) wildcardClass13);
        java.io.Serializable serializable15 = strConsumerRecord14.value();
        java.lang.String str16 = strConsumerRecord14.key();
        int int17 = strConsumerRecord14.serializedKeySize();
        int int18 = strConsumerRecord14.serializedValueSize();
        java.lang.String str19 = strConsumerRecord14.topic();
        java.lang.String str20 = strConsumerRecord14.toString();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(serializable15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str20, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test07066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07066");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        int int10 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test07067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07067");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        java.lang.String str9 = strConsumerRecord5.toString();
        int int10 = strConsumerRecord5.serializedValueSize();
        long long11 = strConsumerRecord5.offset();
        long long12 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        java.lang.String str14 = strConsumerRecord5.key();
        long long15 = strConsumerRecord5.checksum();
        long long16 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 0 + "'", serializable13, (short) 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07068");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long21 = strConsumerRecord20.timestamp();
        int int22 = strConsumerRecord20.partition();
        java.io.Serializable serializable23 = strConsumerRecord20.value();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long34 = strConsumerRecord33.timestamp();
        int int35 = strConsumerRecord33.partition();
        java.lang.String str36 = strConsumerRecord33.topic();
        long long37 = strConsumerRecord33.offset();
        java.io.Serializable serializable38 = strConsumerRecord33.value();
        long long39 = strConsumerRecord33.checksum();
        java.lang.Class<?> wildcardClass40 = strConsumerRecord33.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        java.lang.String str49 = strConsumerRecord46.toString();
        int int50 = strConsumerRecord46.partition();
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord46.timestampType();
        int int52 = strConsumerRecord46.serializedValueSize();
        java.lang.Class<?> wildcardClass53 = strConsumerRecord46.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> genericDeclarationConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (int) ' ', (long) 'a', 0L, timestampType24, (long) (byte) 10, (int) (short) 0, 35, (java.lang.reflect.GenericDeclaration) wildcardClass40, (java.lang.reflect.GenericDeclaration) wildcardClass53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int65 = strConsumerRecord64.serializedValueSize();
        int int66 = strConsumerRecord64.partition();
        long long67 = strConsumerRecord64.offset();
        java.lang.String str68 = strConsumerRecord64.key();
        long long69 = strConsumerRecord64.checksum();
        java.lang.Class<?> wildcardClass70 = strConsumerRecord64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) 0, (-1L), (long) (short) 1, timestampType24, (long) 32, 32, (int) (byte) 100, "", (java.io.Serializable) wildcardClass70);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", 1, (long) 10, timestampType24, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 35, null = -1, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), value = -1)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1))", 100, (long) 1, "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 10);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 10 + "'", serializable23, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 10 + "'", serializable38, (short) 10);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str49, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test07069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07069");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.topic();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.lang.String str15 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 0 + "'", serializable14, (short) 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertNotNull(headers17);
    }

    @Test
    public void test07070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07070");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord33.leaderEpoch();
        int int36 = strConsumerRecord33.serializedKeySize();
        java.lang.String str37 = strConsumerRecord33.key();
        int int38 = strConsumerRecord33.serializedKeySize();
        int int39 = strConsumerRecord33.partition();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord33.headers();
        java.lang.String str41 = strConsumerRecord33.toString();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str41, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
    }

    @Test
    public void test07071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07071");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedKeySize();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test07072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07072");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        int int13 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test07073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07073");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType22, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType53, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType65, headers74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int82 = strConsumerRecord81.serializedValueSize();
        int int83 = strConsumerRecord81.partition();
        long long84 = strConsumerRecord81.offset();
        java.lang.String str85 = strConsumerRecord81.key();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord81.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (-1), 100L, (long) (short) 1, timestampType22, (long) (byte) 1, (int) (byte) 10, (int) (short) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType65, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType89 = strConsumerRecord88.timestampType();
        long long90 = strConsumerRecord88.offset();
        int int91 = strConsumerRecord88.partition();
        java.util.Optional<java.lang.Integer> intOptional92 = strConsumerRecord88.leaderEpoch();
        long long93 = strConsumerRecord88.offset();
        long long94 = strConsumerRecord88.checksum();
        org.apache.kafka.common.record.TimestampType timestampType95 = strConsumerRecord88.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 52L + "'", long84 == 52L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(intOptional92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-1L) + "'", long94 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07074");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        int int9 = strConsumerRecord5.serializedKeySize();
        java.lang.String str10 = strConsumerRecord5.toString();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test07075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07075");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.timestamp();
        int int22 = strConsumerRecord8.serializedKeySize();
        long long23 = strConsumerRecord8.checksum();
        long long24 = strConsumerRecord8.timestamp();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test07076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07076");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.io.Serializable serializable16 = strConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (byte) 0, (long) 100, "hi!", (java.io.Serializable) timestampType17);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (byte) 10, 32L, (long) (short) 100, timestampType17, 1L, 0, (int) (short) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )");
        long long25 = strConsumerRecord24.checksum();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.common.header.Headers headers27 = strConsumerRecord24.headers();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers27);
    }

    @Test
    public void test07077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07077");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str22 = strConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int35 = strConsumerRecord34.serializedValueSize();
        int int36 = strConsumerRecord34.partition();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType23, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers37, intOptional45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int58 = strConsumerRecord57.serializedValueSize();
        int int59 = strConsumerRecord57.partition();
        org.apache.kafka.common.header.Headers headers60 = strConsumerRecord57.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType23, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) -1, (long) '4', 0L, timestampType23, (long) (byte) 10, (-1), 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 1.0f);
        int int68 = strConsumerRecord67.serializedValueSize();
        long long69 = strConsumerRecord67.checksum();
        org.apache.kafka.common.record.TimestampType timestampType70 = strConsumerRecord67.timestampType();
        java.io.Serializable serializable75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 10, NoTimestampType = 32, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 52, (long) ' ', (long) (byte) -1, timestampType70, (long) (byte) 100, 35, 35, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", serializable75);
        long long77 = strConsumerRecord76.timestamp();
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10L + "'", long69 == 10L);
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
    }

    @Test
    public void test07078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07078");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        java.lang.String str16 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07079");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        java.lang.Class<?> wildcardClass43 = strConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType18, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass43);
        long long45 = strConsumerRecord44.offset();
        java.lang.String str46 = strConsumerRecord44.toString();
        java.lang.String str47 = strConsumerRecord44.toString();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str46, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str47, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test07080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07080");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", 32, (long) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = a)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )");
    }

    @Test
    public void test07081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07081");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        java.lang.String str16 = strConsumerRecord13.toString();
        int int17 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType18);
        int int20 = strConsumerRecord19.partition();
        int int21 = strConsumerRecord19.partition();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord19.timestampType();
        java.io.Serializable serializable27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long42 = strConsumerRecord41.timestamp();
        int int43 = strConsumerRecord41.partition();
        java.lang.String str44 = strConsumerRecord41.topic();
        long long45 = strConsumerRecord41.offset();
        java.io.Serializable serializable46 = strConsumerRecord41.value();
        java.lang.String str47 = strConsumerRecord41.topic();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType48, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str62 = strConsumerRecord61.toString();
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord61.leaderEpoch();
        int int64 = strConsumerRecord61.partition();
        int int65 = strConsumerRecord61.partition();
        int int66 = strConsumerRecord61.serializedValueSize();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long77 = strConsumerRecord76.timestamp();
        long long78 = strConsumerRecord76.checksum();
        long long79 = strConsumerRecord76.timestamp();
        java.lang.String str80 = strConsumerRecord76.topic();
        long long81 = strConsumerRecord76.timestamp();
        java.io.Serializable serializable82 = strConsumerRecord76.value();
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord76.headers();
        int int84 = strConsumerRecord76.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        java.util.Optional<java.lang.Integer> intOptional91 = strConsumerRecord90.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>> strConsumerRecordConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", 10, (long) 100, strConsumerRecord76, intOptional91);
        java.lang.String str93 = strConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional94 = strConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (int) (short) -1, 35L, (long) (short) 1, timestampType22, (java.lang.Long) 10L, (int) ' ', 0, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", serializable27, headers67, intOptional94);
        java.lang.Class<?> wildcardClass96 = intOptional94.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 10 + "'", serializable46, (short) 10);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str62, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable82 + "' != '" + (short) 10 + "'", serializable82, (short) 10);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test07082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07082");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        long long18 = strConsumerRecord5.offset();
        int int19 = strConsumerRecord5.serializedValueSize();
        java.lang.String str20 = strConsumerRecord5.topic();
        long long21 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test07083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07083");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.lang.String str12 = strConsumerRecord9.toString();
        int int13 = strConsumerRecord9.partition();
        java.lang.String str14 = strConsumerRecord9.key();
        int int15 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int53 = strConsumerRecord52.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional54 = strConsumerRecord52.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str61 = strConsumerRecord60.topic();
        org.apache.kafka.common.record.TimestampType timestampType62 = strConsumerRecord60.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord52, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType62);
        java.lang.String str64 = strConsumerRecord52.topic();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord52.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType33, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType43, (java.lang.Object) wildcardClass65);
        java.lang.Class<?> wildcardClass67 = timestampTypeConsumerRecord66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int74 = strConsumerRecord73.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional75 = strConsumerRecord73.leaderEpoch();
        int int76 = strConsumerRecord73.partition();
        int int77 = strConsumerRecord73.serializedValueSize();
        org.apache.kafka.common.header.Headers headers78 = strConsumerRecord73.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, (-1L), 32L, timestampType16, (java.lang.Long) 10L, (int) (short) -1, (int) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass67, headers78);
        int int80 = strConsumerRecord79.serializedKeySize();
        java.lang.String str81 = strConsumerRecord79.topic();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str81, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
    }

    @Test
    public void test07084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07084");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str32 = strConsumerRecord31.topic();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int45 = strConsumerRecord44.serializedValueSize();
        int int46 = strConsumerRecord44.partition();
        org.apache.kafka.common.header.Headers headers47 = strConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional55 = strConsumerRecord53.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType33, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers47, intOptional55);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int68 = strConsumerRecord67.serializedValueSize();
        int int69 = strConsumerRecord67.partition();
        org.apache.kafka.common.header.Headers headers70 = strConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType33, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 0, (long) '4', (long) 1, timestampType12, (java.lang.Long) 100L, (int) (byte) -1, (int) '#', "hi!", (java.io.Serializable) 10.0d, headers70);
        java.util.Optional<java.lang.Integer> intOptional73 = strConsumerRecord72.leaderEpoch();
        java.io.Serializable serializable74 = strConsumerRecord72.value();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord72.timestampType();
        int int76 = strConsumerRecord72.partition();
        org.apache.kafka.common.record.TimestampType timestampType77 = strConsumerRecord72.timestampType();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + 10.0d + "'", serializable74, 10.0d);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + timestampType77 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType77.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07085");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        long long18 = strConsumerRecord13.timestamp();
        long long19 = strConsumerRecord13.offset();
        java.lang.String str20 = strConsumerRecord13.toString();
        java.io.Serializable serializable21 = strConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)", 52, 32L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType22);
        java.io.Serializable serializable28 = null;
        org.apache.kafka.common.header.Headers headers29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100), value = 0)", (int) '#', 32L, (long) (byte) 0, timestampType22, (java.lang.Long) 35L, 0, (int) ' ', "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = -1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10.0)", serializable28, headers29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str20, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 10 + "'", serializable21, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07086");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        int int8 = strConsumerRecord5.serializedKeySize();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        long long12 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
    }

    @Test
    public void test07087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07087");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        int int14 = strConsumerRecord12.partition();
        long long15 = strConsumerRecord12.offset();
        long long16 = strConsumerRecord12.offset();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord12.headers();
        long long18 = strConsumerRecord12.checksum();
        int int19 = strConsumerRecord12.serializedKeySize();
        int int20 = strConsumerRecord12.serializedValueSize();
        long long21 = strConsumerRecord12.offset();
        java.util.Optional<java.lang.Integer> intOptional22 = strConsumerRecord12.leaderEpoch();
        int int23 = strConsumerRecord12.partition();
        java.io.Serializable serializable24 = strConsumerRecord12.value();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long35 = strConsumerRecord34.timestamp();
        int int36 = strConsumerRecord34.partition();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord34.timestampType();
        long long38 = strConsumerRecord34.checksum();
        java.lang.String str39 = strConsumerRecord34.toString();
        long long40 = strConsumerRecord34.offset();
        int int41 = strConsumerRecord34.serializedKeySize();
        int int42 = strConsumerRecord34.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers50 = strConsumerRecord49.headers();
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord49.headers();
        java.lang.String str52 = strConsumerRecord49.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> timestampTypeEnumConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) -1, 10L, (long) 52, timestampType25, 97L, (int) (short) 0, (int) (short) 0, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType43, strConsumerRecord49);
        java.lang.reflect.AnnotatedElement annotatedElement54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.AnnotatedElement> timestampTypeConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", 100, (long) 32, timestampType43, annotatedElement54);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str39, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str52, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test07088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07088");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        java.io.Serializable serializable11 = strConsumerRecord9.value();
        java.lang.String str12 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord23.timestampType();
        int int25 = strConsumerRecord23.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional26 = strConsumerRecord23.leaderEpoch();
        java.lang.String str27 = strConsumerRecord23.toString();
        long long28 = strConsumerRecord23.timestamp();
        java.lang.String str29 = strConsumerRecord23.topic();
        org.apache.kafka.common.header.Headers headers30 = strConsumerRecord23.headers();
        int int31 = strConsumerRecord23.partition();
        java.lang.Class<?> wildcardClass32 = strConsumerRecord23.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", 97, 0L, 10L, timestampType13, 0L, (-1), (int) (short) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass32);
        int int34 = strConsumerRecord33.serializedValueSize();
        java.lang.Class<?> wildcardClass35 = strConsumerRecord33.getClass();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 0 + "'", serializable11, (short) 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test07089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07089");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07090");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedKeySize();
        long long12 = strConsumerRecord5.timestamp();
        long long13 = strConsumerRecord5.checksum();
        java.lang.String str14 = strConsumerRecord5.key();
        int int15 = strConsumerRecord5.serializedValueSize();
        int int16 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test07091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07091");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        long long12 = strConsumerRecord5.timestamp();
        long long13 = strConsumerRecord5.timestamp();
        long long14 = strConsumerRecord5.offset();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        int int16 = strConsumerRecord5.serializedKeySize();
        long long17 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable18 = strConsumerRecord5.value();
        int int19 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test07092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07092");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test07093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07093");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        int int10 = strConsumerRecord5.serializedValueSize();
        java.lang.String str11 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test07094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07094");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        int int28 = strConsumerRecord26.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional29 = strConsumerRecord26.leaderEpoch();
        java.lang.String str30 = strConsumerRecord26.toString();
        long long31 = strConsumerRecord26.checksum();
        int int32 = strConsumerRecord26.partition();
        java.lang.Class<?> wildcardClass33 = strConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        int int48 = strConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = strConsumerRecord46.leaderEpoch();
        java.lang.String str50 = strConsumerRecord46.toString();
        java.util.Optional<java.lang.Integer> intOptional51 = strConsumerRecord46.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", 52, (long) '#', (long) (short) 1, timestampType16, (java.lang.Long) 0L, (int) (short) -1, 10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) wildcardClass33, headers40, intOptional51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord66.timestampType();
        int int68 = strConsumerRecord66.serializedKeySize();
        int int69 = strConsumerRecord66.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType70 = strConsumerRecord66.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord66.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 100.0)", (int) (byte) 0, (long) (short) 0, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )", (java.io.Serializable) timestampType71);
        java.io.Serializable serializable73 = strConsumerRecord72.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType80 = strConsumerRecord79.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = strConsumerRecord79.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType82 = strConsumerRecord79.timestampType();
        java.lang.String str83 = strConsumerRecord79.key();
        long long84 = strConsumerRecord79.timestamp();
        long long85 = strConsumerRecord79.offset();
        java.lang.String str86 = strConsumerRecord79.toString();
        long long87 = strConsumerRecord79.checksum();
        java.io.Serializable serializable88 = strConsumerRecord79.value();
        java.lang.String str89 = strConsumerRecord79.topic();
        org.apache.kafka.common.header.Headers headers90 = strConsumerRecord79.headers();
        java.util.Optional<java.lang.Integer> intOptional91 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 10, 97L, (long) (short) -1, timestampType16, (java.lang.Long) 1L, (int) (short) 100, 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = 1.0)", serializable73, headers90, intOptional91);
        java.io.Serializable serializable93 = strConsumerRecord92.value();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str50, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 52L + "'", long85 == 52L);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str86, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + (short) 10 + "'", serializable88, (short) 10);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertTrue("'" + serializable93 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable93.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07095");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.checksum();
        long long14 = strConsumerRecord5.offset();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test07096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07096");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        long long57 = strConsumerRecord53.checksum();
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord53.timestampType();
        java.lang.String str59 = strConsumerRecord53.toString();
        java.lang.String str60 = strConsumerRecord53.toString();
        long long61 = strConsumerRecord53.checksum();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str59, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str60, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
    }

    @Test
    public void test07097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07097");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        int int13 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test07098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07098");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.partition();
        long long13 = strConsumerRecord5.checksum();
        java.lang.String str14 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test07099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07099");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        long long11 = strConsumerRecord5.offset();
        long long12 = strConsumerRecord5.checksum();
        int int13 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        int int16 = strConsumerRecord5.serializedValueSize();
        java.lang.String str17 = strConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord5.leaderEpoch();
        java.lang.String str20 = strConsumerRecord5.topic();
        int int21 = strConsumerRecord5.serializedKeySize();
        java.lang.Class<?> wildcardClass22 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test07100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07100");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        int int19 = strConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType20, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) (short) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) "");
        java.lang.String str28 = strConsumerRecord27.key();
        java.util.Optional<java.lang.Integer> intOptional29 = strConsumerRecord27.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, (long) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType30);
        java.lang.String str32 = strConsumerRecord31.key();
        int int33 = strConsumerRecord31.serializedValueSize();
        java.lang.String str34 = strConsumerRecord31.key();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str28, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str32, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str34, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07101");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers7 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 0 + "'", serializable9, (short) 0);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 0 + "'", serializable10, (short) 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test07102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07102");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        long long9 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        long long11 = strConsumerRecord5.offset();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
    }

    @Test
    public void test07103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07103");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.lang.Class<?> wildcardClass9 = headers8.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test07104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07104");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        java.lang.String str21 = strConsumerRecord8.key();
        java.lang.String str22 = strConsumerRecord8.toString();
        int int23 = strConsumerRecord8.partition();
        int int24 = strConsumerRecord8.partition();
        int int25 = strConsumerRecord8.serializedValueSize();
        long long26 = strConsumerRecord8.timestamp();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str22, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test07105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07105");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.lang.String str12 = strConsumerRecord5.key();
        java.lang.String str13 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test07106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07106");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        long long14 = strConsumerRecord9.timestamp();
        long long15 = strConsumerRecord9.offset();
        java.lang.String str16 = strConsumerRecord9.toString();
        long long17 = strConsumerRecord9.checksum();
        java.io.Serializable serializable18 = strConsumerRecord9.value();
        java.io.Serializable serializable19 = strConsumerRecord9.value();
        java.io.Serializable serializable20 = strConsumerRecord9.value();
        java.lang.String str21 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord44.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord44.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int67 = strConsumerRecord66.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str75 = strConsumerRecord74.topic();
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord66, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType76);
        java.lang.String str78 = strConsumerRecord66.topic();
        java.lang.Class<?> wildcardClass79 = strConsumerRecord66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType47, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType57, (java.lang.Object) wildcardClass79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) -1, (long) '#', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass79);
        java.io.Serializable serializable82 = strConsumerRecord81.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (short) -1, (long) '#', "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (int) (byte) -1, (long) 97, (-1L), timestampType22, (long) '#', (-1), (int) '4', "", serializable82);
        int int85 = strConsumerRecord84.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional86 = strConsumerRecord84.leaderEpoch();
        int int87 = strConsumerRecord84.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 10 + "'", serializable20, (short) 10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(serializable82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
    }

    @Test
    public void test07107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07107");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.offset();
        java.lang.String str10 = strConsumerRecord5.toString();
        long long11 = strConsumerRecord5.checksum();
        java.lang.String str12 = strConsumerRecord5.toString();
        int int13 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test07108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07108");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord20.timestampType();
        int int22 = strConsumerRecord20.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType23, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) (short) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) "");
        java.lang.String str31 = strConsumerRecord30.key();
        java.util.Optional<java.lang.Integer> intOptional32 = strConsumerRecord30.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord42.timestampType();
        int int44 = strConsumerRecord42.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType45);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.record.TimestampType> intOptionalConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.record.TimestampType>("hi!", (-1), (long) (byte) 100, intOptional32, timestampType47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int62 = strConsumerRecord61.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional63 = strConsumerRecord61.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str70 = strConsumerRecord69.topic();
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord69.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord61, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType71);
        java.lang.String str73 = strConsumerRecord61.topic();
        java.lang.Class<?> wildcardClass74 = strConsumerRecord61.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 100.0)", (int) (byte) 0, (long) (-1), (long) 10, timestampType47, (long) 100, (int) ' ', (int) (byte) 10, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass74);
        int int76 = strConsumerRecord75.partition();
        long long77 = strConsumerRecord75.checksum();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str31, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 100L + "'", long77 == 100L);
    }

    @Test
    public void test07109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07109");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        int int21 = strConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.header.Headers headers22 = strConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers23 = strConsumerRecord8.headers();
        long long24 = strConsumerRecord8.offset();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord8.headers();
        java.util.Optional<java.lang.Integer> intOptional26 = strConsumerRecord8.leaderEpoch();
        java.io.Serializable serializable27 = strConsumerRecord8.value();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (short) 10 + "'", serializable27, (short) 10);
    }

    @Test
    public void test07110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07110");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType26, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        java.lang.String str46 = strConsumerRecord43.topic();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int64 = strConsumerRecord63.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional65 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str72 = strConsumerRecord71.topic();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord63, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType73);
        int int75 = strConsumerRecord63.serializedValueSize();
        java.lang.String str76 = strConsumerRecord63.key();
        java.lang.String str77 = strConsumerRecord63.key();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType26, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType47, headers54, intOptional78);
        long long80 = strConsumerRecord79.offset();
        java.lang.String str81 = strConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers82 = strConsumerRecord79.headers();
        long long83 = strConsumerRecord79.checksum();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str81, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test07111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07111");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.lang.String str13 = strConsumerRecord5.toString();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test07112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07112");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        java.lang.String str15 = strConsumerRecord5.key();
        long long16 = strConsumerRecord5.offset();
        long long17 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass19 = intOptional18.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test07113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07113");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test07114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07114");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        java.lang.String str7 = strConsumerRecord5.topic();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test07115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07115");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.offset();
        java.lang.String str10 = strConsumerRecord5.toString();
        long long11 = strConsumerRecord5.checksum();
        java.lang.String str12 = strConsumerRecord5.key();
        long long13 = strConsumerRecord5.timestamp();
        long long14 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test07116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07116");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        java.lang.String str16 = strConsumerRecord13.toString();
        int int17 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        int int38 = strConsumerRecord36.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType39 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType39, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long55 = strConsumerRecord54.timestamp();
        int int56 = strConsumerRecord54.partition();
        java.io.Serializable serializable57 = strConsumerRecord54.value();
        java.lang.Class<?> wildcardClass58 = serializable57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long65 = strConsumerRecord64.timestamp();
        int int66 = strConsumerRecord64.partition();
        java.lang.String str67 = strConsumerRecord64.topic();
        long long68 = strConsumerRecord64.offset();
        java.lang.Class<?> wildcardClass69 = strConsumerRecord64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType39, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass58, (java.lang.reflect.GenericDeclaration) wildcardClass69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, 1L, timestampType18, (long) (short) -1, 0, (int) (short) -1, "hi!", (java.io.Serializable) timestampType39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType82 = strConsumerRecord81.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType83 = strConsumerRecord81.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType84 = strConsumerRecord81.timestampType();
        java.lang.String str85 = strConsumerRecord81.key();
        long long86 = strConsumerRecord81.timestamp();
        long long87 = strConsumerRecord81.offset();
        java.lang.String str88 = strConsumerRecord81.toString();
        long long89 = strConsumerRecord81.checksum();
        java.io.Serializable serializable90 = strConsumerRecord81.value();
        java.io.Serializable serializable91 = strConsumerRecord81.value();
        java.io.Serializable serializable92 = strConsumerRecord81.value();
        java.lang.String str93 = strConsumerRecord81.topic();
        org.apache.kafka.common.record.TimestampType timestampType94 = strConsumerRecord81.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, 1L, 35L, timestampType39, (long) '4', 32, 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) timestampType94);
        java.lang.String str96 = strConsumerRecord95.key();
        org.apache.kafka.common.header.Headers headers97 = strConsumerRecord95.headers();
        long long98 = strConsumerRecord95.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (short) 10 + "'", serializable57, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 52L + "'", long68 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType83 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType83.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 52L + "'", long87 == 52L);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str88, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable90 + "' != '" + (short) 10 + "'", serializable90, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable91 + "' != '" + (short) 10 + "'", serializable91, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable92 + "' != '" + (short) 10 + "'", serializable92, (short) 10);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str96, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        org.junit.Assert.assertNotNull(headers97);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 35L + "'", long98 == 35L);
    }

    @Test
    public void test07117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07117");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.toString();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        int int13 = strConsumerRecord5.partition();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str11, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 0 + "'", serializable12, (short) 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test07118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07118");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.partition();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.timestamp();
        java.lang.String str14 = strConsumerRecord5.key();
        java.lang.String str15 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test07119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07119");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        int int14 = strConsumerRecord5.serializedKeySize();
        long long15 = strConsumerRecord5.timestamp();
        java.lang.String str16 = strConsumerRecord5.key();
        int int17 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test07120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07120");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord33.leaderEpoch();
        int int36 = strConsumerRecord33.serializedKeySize();
        long long37 = strConsumerRecord33.timestamp();
        java.lang.String str38 = strConsumerRecord33.topic();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test07121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07121");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        java.io.Serializable serializable11 = strConsumerRecord9.value();
        java.lang.String str12 = strConsumerRecord9.key();
        java.lang.String str13 = strConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", 10, 100L, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", (java.io.Serializable) timestampType14);
        java.lang.Class<?> wildcardClass16 = timestampType14.getClass();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 0 + "'", serializable11, (short) 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test07122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07122");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        int int19 = strConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType20, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long36 = strConsumerRecord35.timestamp();
        int int37 = strConsumerRecord35.partition();
        java.io.Serializable serializable38 = strConsumerRecord35.value();
        java.lang.Class<?> wildcardClass39 = serializable38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long46 = strConsumerRecord45.timestamp();
        int int47 = strConsumerRecord45.partition();
        java.lang.String str48 = strConsumerRecord45.topic();
        long long49 = strConsumerRecord45.offset();
        java.lang.Class<?> wildcardClass50 = strConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType20, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.GenericDeclaration) wildcardClass50);
        java.io.Serializable serializable56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, 0L, 0L, timestampType20, (long) 10, (int) '#', 10, "hi!", serializable56);
        long long58 = strConsumerRecord57.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 10 + "'", serializable38, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
    }

    @Test
    public void test07123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07123");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str22 = strConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int35 = strConsumerRecord34.serializedValueSize();
        int int36 = strConsumerRecord34.partition();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType23, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers37, intOptional45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int58 = strConsumerRecord57.serializedValueSize();
        int int59 = strConsumerRecord57.partition();
        org.apache.kafka.common.header.Headers headers60 = strConsumerRecord57.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType23, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) -1, (long) '4', 0L, timestampType23, (long) (byte) 10, (-1), 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 1.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long78 = strConsumerRecord77.timestamp();
        long long79 = strConsumerRecord77.checksum();
        java.util.Optional<java.lang.Integer> intOptional80 = strConsumerRecord77.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType81 = strConsumerRecord77.timestampType();
        java.lang.Class<?> wildcardClass82 = timestampType81.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (short) 0, (long) (byte) 1, (long) 0, timestampType23, (long) 97, (int) '4', (int) (byte) 1, "", (java.io.Serializable) timestampType81);
        int int84 = strConsumerRecord83.partition();
        java.lang.String str85 = strConsumerRecord83.toString();
        int int86 = strConsumerRecord83.partition();
        long long87 = strConsumerRecord83.checksum();
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)" + "'", str85, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 97L + "'", long87 == 97L);
    }

    @Test
    public void test07124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07124");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.lang.String str7 = strConsumerRecord5.key();
        int int8 = strConsumerRecord5.serializedKeySize();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test07125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07125");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int21 = strConsumerRecord20.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional22 = strConsumerRecord20.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str29 = strConsumerRecord28.topic();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord20, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType30);
        java.lang.String str32 = strConsumerRecord20.topic();
        long long33 = strConsumerRecord20.offset();
        long long34 = strConsumerRecord20.offset();
        java.lang.String str35 = strConsumerRecord20.toString();
        int int36 = strConsumerRecord20.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long43 = strConsumerRecord42.timestamp();
        int int44 = strConsumerRecord42.partition();
        java.io.Serializable serializable45 = strConsumerRecord42.value();
        java.lang.Class<?> wildcardClass46 = serializable45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long53 = strConsumerRecord52.timestamp();
        long long54 = strConsumerRecord52.checksum();
        java.util.Optional<java.lang.Integer> intOptional55 = strConsumerRecord52.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType56 = strConsumerRecord52.timestampType();
        java.lang.String str57 = strConsumerRecord52.topic();
        long long58 = strConsumerRecord52.checksum();
        long long59 = strConsumerRecord52.timestamp();
        java.lang.String str60 = strConsumerRecord52.toString();
        org.apache.kafka.common.header.Headers headers61 = strConsumerRecord52.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers68 = strConsumerRecord67.headers();
        java.io.Serializable serializable69 = strConsumerRecord67.value();
        java.lang.String str70 = strConsumerRecord67.key();
        java.lang.String str71 = strConsumerRecord67.key();
        int int72 = strConsumerRecord67.partition();
        java.util.Optional<java.lang.Integer> intOptional73 = strConsumerRecord67.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration> strConsumerRecordConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (short) -1, (long) (byte) 100, timestampType8, (java.lang.Long) (-1L), 100, (-1), strConsumerRecord20, (java.lang.reflect.GenericDeclaration) wildcardClass46, headers61, intOptional73);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 1, (long) 52, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) (short) -1);
        java.lang.String str76 = strConsumerRecord75.topic();
        long long77 = strConsumerRecord75.offset();
        java.lang.String str78 = strConsumerRecord75.key();
        long long79 = strConsumerRecord75.offset();
        int int80 = strConsumerRecord75.serializedValueSize();
        java.lang.String str81 = strConsumerRecord75.key();
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str35, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (short) 10 + "'", serializable45, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str60, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (short) 0 + "'", serializable69, (short) 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str78, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 52L + "'", long79 == 52L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str81, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
    }

    @Test
    public void test07126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07126");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType14);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int33 = strConsumerRecord32.serializedValueSize();
        int int34 = strConsumerRecord32.partition();
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord32.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType14, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType26, headers35);
        java.lang.String str37 = strConsumerRecord36.topic();
        int int38 = strConsumerRecord36.partition();
        int int39 = strConsumerRecord36.partition();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord36.leaderEpoch();
        long long41 = strConsumerRecord36.timestamp();
        java.util.Optional<java.lang.Integer> intOptional42 = strConsumerRecord36.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str37, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 32 + "'", int39 == 32);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(intOptional42);
    }

    @Test
    public void test07127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07127");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.timestamp();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.checksum();
        int int14 = strConsumerRecord5.serializedKeySize();
        java.lang.String str15 = strConsumerRecord5.topic();
        java.lang.String str16 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test07128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07128");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        int int8 = strConsumerRecord5.serializedKeySize();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test07129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07129");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        long long15 = strConsumerRecord9.checksum();
        java.lang.String str16 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable18 = strConsumerRecord9.value();
        java.io.Serializable serializable19 = strConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord30.timestampType();
        java.lang.String str34 = strConsumerRecord30.key();
        long long35 = strConsumerRecord30.timestamp();
        long long36 = strConsumerRecord30.offset();
        java.lang.String str37 = strConsumerRecord30.toString();
        long long38 = strConsumerRecord30.checksum();
        java.io.Serializable serializable39 = strConsumerRecord30.value();
        long long40 = strConsumerRecord30.timestamp();
        java.lang.Class<?> wildcardClass41 = strConsumerRecord30.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long55 = strConsumerRecord54.timestamp();
        long long56 = strConsumerRecord54.offset();
        long long57 = strConsumerRecord54.offset();
        java.lang.String str58 = strConsumerRecord54.key();
        int int59 = strConsumerRecord54.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord54.timestampType();
        int int61 = strConsumerRecord54.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType62 = strConsumerRecord54.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long69 = strConsumerRecord68.timestamp();
        long long70 = strConsumerRecord68.offset();
        org.apache.kafka.common.header.Headers headers71 = strConsumerRecord68.headers();
        int int72 = strConsumerRecord68.serializedValueSize();
        org.apache.kafka.common.header.Headers headers73 = strConsumerRecord68.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.common.header.Headers> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (short) 0, (long) (short) 0, (java.lang.Object) timestampType62, headers73);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType85 = strConsumerRecord84.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord84.timestampType();
        java.lang.String str87 = strConsumerRecord84.toString();
        int int88 = strConsumerRecord84.partition();
        int int89 = strConsumerRecord84.partition();
        long long90 = strConsumerRecord84.offset();
        int int91 = strConsumerRecord84.partition();
        org.apache.kafka.common.header.Headers headers92 = strConsumerRecord84.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers> charSequenceConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", 10, (long) 97, 0L, timestampType62, (long) 100, 32, 35, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", headers92);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) '4', (long) (short) 10, (long) ' ', timestampType20, (java.lang.Long) 35L, (int) (byte) -1, (-1), "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) wildcardClass41, headers92);
        java.lang.Class<?> wildcardClass95 = timestampType20.getClass();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str37, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + (short) 10 + "'", serializable39, (short) 10);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 52L + "'", long70 == 52L);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertTrue("'" + timestampType85 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType85.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str87, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 52L + "'", long90 == 52L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test07130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07130");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        java.lang.String str15 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long43 = strConsumerRecord42.timestamp();
        int int44 = strConsumerRecord42.partition();
        java.lang.String str45 = strConsumerRecord42.topic();
        java.lang.Class<?> wildcardClass46 = strConsumerRecord42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int57 = strConsumerRecord56.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str65 = strConsumerRecord64.topic();
        org.apache.kafka.common.record.TimestampType timestampType66 = strConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord56, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType66);
        org.apache.kafka.common.header.Headers headers68 = strConsumerRecord56.headers();
        org.apache.kafka.common.header.Headers headers69 = strConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (short) 100, (long) 'a', (long) ' ', timestampType33, (java.lang.Long) 0L, (int) (byte) 100, (-1), (java.lang.reflect.GenericDeclaration) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", headers69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (byte) 10, (long) (short) 10, 0L, timestampType16, (long) ' ', 0, (int) (byte) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 'a');
        java.io.Serializable serializable72 = strConsumerRecord71.value();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + 'a' + "'", serializable72, 'a');
    }

    @Test
    public void test07131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07131");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        int int21 = strConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.header.Headers headers22 = strConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers23 = strConsumerRecord8.headers();
        long long24 = strConsumerRecord8.offset();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord8.headers();
        java.lang.String str26 = strConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord8.timestampType();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07132");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        java.lang.String str9 = strConsumerRecord5.topic();
        long long10 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        long long13 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        int int15 = strConsumerRecord5.serializedValueSize();
        long long16 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test07133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07133");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        java.lang.String str9 = strConsumerRecord5.topic();
        long long10 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.lang.String str14 = strConsumerRecord5.key();
        java.lang.String str15 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test07134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07134");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord33.leaderEpoch();
        long long36 = strConsumerRecord33.checksum();
        int int37 = strConsumerRecord33.serializedKeySize();
        long long38 = strConsumerRecord33.checksum();
        org.apache.kafka.common.header.Headers headers39 = strConsumerRecord33.headers();
        long long40 = strConsumerRecord33.offset();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test07135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07135");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        int int8 = strConsumerRecord5.serializedKeySize();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        long long11 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test07136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07136");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.lang.String str11 = strConsumerRecord5.topic();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
    }

    @Test
    public void test07137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07137");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.timestamp();
        long long8 = strConsumerRecord5.checksum();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        long long12 = strConsumerRecord5.offset();
        int int13 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test07138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07138");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        java.lang.String str14 = strConsumerRecord9.toString();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) 'a', (long) 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType16);
        int int18 = strConsumerRecord17.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test07139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07139");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        long long9 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        java.lang.String str13 = strConsumerRecord5.topic();
        java.lang.Class<?> wildcardClass14 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test07140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07140");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.serializedKeySize();
        int int11 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.checksum();
        int int14 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        int int16 = strConsumerRecord5.serializedValueSize();
        java.lang.String str17 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test07141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07141");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord13.headers();
        int int17 = strConsumerRecord13.partition();
        java.lang.String str18 = strConsumerRecord13.toString();
        org.apache.kafka.common.header.Headers headers19 = strConsumerRecord13.headers();
        java.lang.Class<?> wildcardClass20 = strConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (int) (short) 100, 32L, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) wildcardClass20);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", (-1), (long) (byte) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", (java.io.Serializable) timestampType22);
        int int24 = strConsumerRecord23.partition();
        int int25 = strConsumerRecord23.partition();
        java.util.Optional<java.lang.Integer> intOptional26 = strConsumerRecord23.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intOptional26);
    }

    @Test
    public void test07142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07142");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str44 = strConsumerRecord43.topic();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord35, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType45);
        java.lang.String str47 = strConsumerRecord35.topic();
        java.lang.Class<?> wildcardClass48 = strConsumerRecord35.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType16, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType26, (java.lang.Object) wildcardClass48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) -1, (long) '#', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass48);
        java.lang.String str51 = strConsumerRecord50.toString();
        java.util.Optional<java.lang.Integer> intOptional52 = strConsumerRecord50.leaderEpoch();
        java.io.Serializable serializable53 = strConsumerRecord50.value();
        java.util.Optional<java.lang.Integer> intOptional54 = strConsumerRecord50.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional55 = strConsumerRecord50.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str51, "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertNotNull(serializable53);
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertNotNull(intOptional55);
    }

    @Test
    public void test07143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07143");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType14);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int33 = strConsumerRecord32.serializedValueSize();
        int int34 = strConsumerRecord32.partition();
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord32.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType14, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType26, headers35);
        java.lang.String str37 = strConsumerRecord36.topic();
        int int38 = strConsumerRecord36.partition();
        int int39 = strConsumerRecord36.partition();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord36.headers();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord36.headers();
        java.io.Serializable serializable42 = strConsumerRecord36.value();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str37, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 32 + "'", int39 == 32);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + serializable42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07144");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        java.lang.String str18 = strConsumerRecord5.toString();
        long long19 = strConsumerRecord5.offset();
        int int20 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test07145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07145");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = -1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10.0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 100, 1L, (long) '4', timestampType12, 0L, (int) (byte) 10, (int) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = 32, serialized key size = 32, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)");
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord18.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord18.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07146");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        int int24 = strConsumerRecord8.serializedKeySize();
        long long25 = strConsumerRecord8.offset();
        long long26 = strConsumerRecord8.offset();
        org.apache.kafka.common.header.Headers headers27 = strConsumerRecord8.headers();
        java.lang.String str28 = strConsumerRecord8.topic();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test07147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07147");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.lang.String str12 = strConsumerRecord5.key();
        java.lang.String str13 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test07148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07148");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        java.lang.String str11 = strConsumerRecord5.key();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        int int14 = strConsumerRecord5.serializedKeySize();
        long long15 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(intOptional16);
    }

    @Test
    public void test07149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07149");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        int int16 = strConsumerRecord5.serializedKeySize();
        java.lang.String str17 = strConsumerRecord5.key();
        int int18 = strConsumerRecord5.serializedValueSize();
        java.lang.String str19 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test07150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07150");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        int int12 = strConsumerRecord5.partition();
        int int13 = strConsumerRecord5.partition();
        java.lang.String str14 = strConsumerRecord5.toString();
        java.lang.String str15 = strConsumerRecord5.key();
        java.lang.String str16 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test07151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07151");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str77 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord68, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78);
        java.lang.String str80 = strConsumerRecord68.topic();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType49, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType59, (java.lang.Object) wildcardClass81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType20, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType49);
        long long84 = strConsumerRecord83.checksum();
        java.lang.String str85 = strConsumerRecord83.toString();
        long long86 = strConsumerRecord83.checksum();
        java.lang.String str87 = strConsumerRecord83.toString();
        java.lang.String str88 = strConsumerRecord83.toString();
        java.util.Optional<java.lang.Integer> intOptional89 = strConsumerRecord83.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)" + "'", str85, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)" + "'", str87, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)" + "'", str88, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)");
        org.junit.Assert.assertNotNull(intOptional89);
    }

    @Test
    public void test07152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07152");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        java.util.Optional<java.lang.Integer> intOptional57 = strConsumerRecord53.leaderEpoch();
        long long58 = strConsumerRecord53.offset();
        long long59 = strConsumerRecord53.timestamp();
        int int60 = strConsumerRecord53.partition();
        int int61 = strConsumerRecord53.serializedValueSize();
        java.lang.String str62 = strConsumerRecord53.toString();
        int int63 = strConsumerRecord53.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str62, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
    }

    @Test
    public void test07153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07153");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass11 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test07154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07154");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        int int12 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord9.headers();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)", (int) (short) -1, (long) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 35, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10))", (java.io.Serializable) timestampType15);
        java.lang.String str17 = strConsumerRecord16.key();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 35, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10))" + "'", str17, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 35, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10))");
    }

    @Test
    public void test07155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07155");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        int int15 = strConsumerRecord13.partition();
        long long16 = strConsumerRecord13.offset();
        long long17 = strConsumerRecord13.offset();
        org.apache.kafka.common.header.Headers headers18 = strConsumerRecord13.headers();
        long long19 = strConsumerRecord13.checksum();
        java.lang.String str20 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord13.timestampType();
        java.io.Serializable serializable22 = strConsumerRecord13.value();
        java.io.Serializable serializable23 = strConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.String> strComparableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.String>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 1, (long) (byte) 1, (long) (short) 10, timestampType25, (long) 35, (int) (short) 1, (int) ' ', (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)", "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", 35, 32L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)", (java.io.Serializable) (byte) 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 10 + "'", serializable22, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 10 + "'", serializable23, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07156");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.header.Headers headers23 = strConsumerRecord8.headers();
        long long24 = strConsumerRecord8.checksum();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test07157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07157");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.timestamp();
        java.lang.String str12 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test07158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07158");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) 0, (long) 52, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", serializable4);
        long long6 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
    }

    @Test
    public void test07159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07159");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        long long13 = strConsumerRecord5.timestamp();
        long long14 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        int int16 = strConsumerRecord5.serializedKeySize();
        java.lang.String str17 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07160");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        java.lang.Class<?> wildcardClass26 = strConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType14, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass26);
        int int28 = strConsumerRecord27.partition();
        long long29 = strConsumerRecord27.checksum();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord27.timestampType();
        java.lang.String str31 = strConsumerRecord27.toString();
        org.apache.kafka.common.header.Headers headers32 = strConsumerRecord27.headers();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertNotNull(headers32);
    }

    @Test
    public void test07161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07161");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.String str30 = strConsumerRecord28.topic();
        int int31 = strConsumerRecord28.serializedValueSize();
        int int32 = strConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord28.headers();
        java.lang.String str34 = strConsumerRecord28.key();
        java.lang.String str35 = strConsumerRecord28.toString();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str35, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
    }

    @Test
    public void test07162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07162");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = -1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10.0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 10, (long) 0, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 35, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10))");
    }

    @Test
    public void test07163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07163");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord16.timestampType();
        java.lang.String str20 = strConsumerRecord16.key();
        long long21 = strConsumerRecord16.timestamp();
        long long22 = strConsumerRecord16.offset();
        java.lang.String str23 = strConsumerRecord16.toString();
        java.io.Serializable serializable24 = strConsumerRecord16.value();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str36 = strConsumerRecord35.topic();
        java.lang.Class<?> wildcardClass37 = strConsumerRecord35.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers44 = strConsumerRecord43.headers();
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord43.headers();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord43.leaderEpoch();
        long long47 = strConsumerRecord43.offset();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord43.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long59 = strConsumerRecord58.timestamp();
        int int60 = strConsumerRecord58.partition();
        java.lang.String str61 = strConsumerRecord58.topic();
        long long62 = strConsumerRecord58.offset();
        java.io.Serializable serializable63 = strConsumerRecord58.value();
        java.lang.String str64 = strConsumerRecord58.topic();
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord75.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType65, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType76);
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord77.timestampType();
        java.util.Optional<java.lang.Integer> intOptional79 = strConsumerRecord77.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) (short) 0, (long) 1, timestampType25, (java.lang.Long) 10L, 0, (int) (short) 100, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) wildcardClass37, headers48, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 0L, (long) (byte) 100, timestampType25, 32L, (-1), (int) (byte) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100L);
        java.io.Serializable serializable87 = strConsumerRecord86.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Comparable<java.lang.String>> strConsumerRecordConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (short) 10, (long) ' ', strConsumerRecord86, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        long long90 = strConsumerRecord86.offset();
        java.lang.String str91 = strConsumerRecord86.topic();
        int int92 = strConsumerRecord86.serializedKeySize();
        int int93 = strConsumerRecord86.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertEquals("'" + serializable63 + "' != '" + (short) 10 + "'", serializable63, (short) 10);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + serializable87 + "' != '" + 100L + "'", serializable87, 100L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str91, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
    }

    @Test
    public void test07164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07164");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str77 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord68, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78);
        java.lang.String str80 = strConsumerRecord68.topic();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType49, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType59, (java.lang.Object) wildcardClass81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType20, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType49);
        long long84 = strConsumerRecord83.checksum();
        org.apache.kafka.common.header.Headers headers85 = strConsumerRecord83.headers();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord83.timestampType();
        org.apache.kafka.common.header.Headers headers87 = strConsumerRecord83.headers();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers87);
    }

    @Test
    public void test07165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07165");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedValueSize();
        long long14 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        int int16 = strConsumerRecord5.partition();
        int int17 = strConsumerRecord5.serializedValueSize();
        long long18 = strConsumerRecord5.offset();
        java.io.Serializable serializable19 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
    }

    @Test
    public void test07166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07166");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        long long7 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.lang.String str11 = strConsumerRecord5.key();
        int int12 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test07167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07167");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord29.timestampType();
        int int31 = strConsumerRecord29.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType32, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType15, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord48.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord48.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord48.timestampType();
        java.lang.String str52 = strConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord48.timestampType();
        int int54 = strConsumerRecord48.partition();
        org.apache.kafka.common.header.Headers headers55 = strConsumerRecord48.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str66 = strConsumerRecord65.topic();
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord65.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int79 = strConsumerRecord78.serializedValueSize();
        int int80 = strConsumerRecord78.partition();
        org.apache.kafka.common.header.Headers headers81 = strConsumerRecord78.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int88 = strConsumerRecord87.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional89 = strConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType67, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers81, intOptional89);
        java.lang.String str91 = strConsumerRecord90.key();
        long long92 = strConsumerRecord90.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> headerIterableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 32, (long) 97, (long) 0, timestampType15, (long) (-1), (int) '#', 52, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers55, strConsumerRecord90);
        java.lang.Class<?> wildcardClass94 = headers55.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertNotNull(headers81);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(intOptional89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test07168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07168");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        java.lang.String str17 = strConsumerRecord5.topic();
        java.lang.String str18 = strConsumerRecord5.toString();
        java.lang.String str19 = strConsumerRecord5.topic();
        java.lang.String str20 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test07169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07169");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.lang.String str9 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        int int13 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test07170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07170");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        int int10 = strConsumerRecord8.partition();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord8.headers();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord8.leaderEpoch();
        java.lang.String str13 = strConsumerRecord8.key();
        java.lang.Class<?> wildcardClass14 = strConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        java.lang.Class<?> wildcardClass21 = strConsumerRecord20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.AnnotatedElement> typeConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)", (int) 'a', (long) (byte) 0, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.AnnotatedElement) wildcardClass21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test07171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07171");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        long long9 = strConsumerRecord5.timestamp();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test07172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07172");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        int int13 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable16 = strConsumerRecord9.value();
        long long17 = strConsumerRecord9.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord28.headers();
        java.io.Serializable serializable30 = strConsumerRecord28.value();
        java.lang.String str31 = strConsumerRecord28.key();
        int int32 = strConsumerRecord28.serializedValueSize();
        long long33 = strConsumerRecord28.offset();
        java.lang.String str34 = strConsumerRecord28.topic();
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord28.headers();
        java.lang.String str36 = strConsumerRecord28.key();
        java.lang.Class<?> wildcardClass37 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", 35, 32L, (long) (short) 10, timestampType49, (long) (short) 100, (int) '#', 0, "", (java.io.Serializable) true);
        long long56 = strConsumerRecord55.checksum();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord63.timestampType();
        long long65 = strConsumerRecord63.offset();
        long long66 = strConsumerRecord63.offset();
        int int67 = strConsumerRecord63.serializedKeySize();
        java.lang.String str68 = strConsumerRecord63.toString();
        java.io.Serializable serializable69 = strConsumerRecord63.value();
        int int70 = strConsumerRecord63.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord63.timestampType();
        int int72 = strConsumerRecord63.serializedValueSize();
        long long73 = strConsumerRecord63.timestamp();
        java.util.Optional<java.lang.Integer> intOptional74 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 97, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 100, 0L, 100L, timestampType18, (java.lang.Long) 35L, (-1), (int) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = 32, serialized key size = 32, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", (java.io.Serializable) wildcardClass37, headers57, intOptional74);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (short) 0 + "'", serializable30, (short) 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str68, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (short) 10 + "'", serializable69, (short) 10);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNotNull(intOptional74);
    }

    @Test
    public void test07173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07173");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        long long15 = strConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord13.timestampType();
        java.lang.String str18 = strConsumerRecord13.topic();
        long long19 = strConsumerRecord13.checksum();
        long long20 = strConsumerRecord13.timestamp();
        int int21 = strConsumerRecord13.partition();
        int int22 = strConsumerRecord13.partition();
        long long23 = strConsumerRecord13.timestamp();
        long long24 = strConsumerRecord13.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord13.timestampType();
        java.io.Serializable serializable30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord36.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType39 = strConsumerRecord36.timestampType();
        java.lang.String str40 = strConsumerRecord36.key();
        long long41 = strConsumerRecord36.timestamp();
        long long42 = strConsumerRecord36.offset();
        java.lang.String str43 = strConsumerRecord36.toString();
        long long44 = strConsumerRecord36.checksum();
        java.io.Serializable serializable45 = strConsumerRecord36.value();
        java.lang.String str46 = strConsumerRecord36.topic();
        org.apache.kafka.common.header.Headers headers47 = strConsumerRecord36.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long54 = strConsumerRecord53.timestamp();
        long long55 = strConsumerRecord53.checksum();
        java.util.Optional<java.lang.Integer> intOptional56 = strConsumerRecord53.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord53.timestampType();
        java.lang.String str58 = strConsumerRecord53.topic();
        org.apache.kafka.common.header.Headers headers59 = strConsumerRecord53.headers();
        int int60 = strConsumerRecord53.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional61 = strConsumerRecord53.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (int) (short) 0, 52L, 32L, timestampType25, (java.lang.Long) 32L, (int) (byte) 10, (int) ' ', "hi!", serializable30, headers47, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = ), value = 10)", (int) (short) -1, (long) (short) 100, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", (java.io.Serializable) ' ');
        int int64 = strConsumerRecord63.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str43, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (short) 10 + "'", serializable45, (short) 10);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test07174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07174");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long19 = strConsumerRecord18.timestamp();
        int int20 = strConsumerRecord18.partition();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str41 = strConsumerRecord40.topic();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int63 = strConsumerRecord62.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional64 = strConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType42, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers56, intOptional64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int77 = strConsumerRecord76.serializedValueSize();
        int int78 = strConsumerRecord76.partition();
        org.apache.kafka.common.header.Headers headers79 = strConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType42, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 0, (long) '4', (long) 1, timestampType21, (java.lang.Long) 100L, (int) (byte) -1, (int) '#', "hi!", (java.io.Serializable) 10.0d, headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, (long) (byte) -1, (long) (-1), timestampType4, 52L, (int) (byte) -1, 0, "hi!", (java.io.Serializable) "hi!");
        java.io.Serializable serializable83 = strConsumerRecord82.value();
        int int84 = strConsumerRecord82.serializedValueSize();
        java.io.Serializable serializable85 = strConsumerRecord82.value();
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + "hi!" + "'", serializable83, "hi!");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + serializable85 + "' != '" + "hi!" + "'", serializable85, "hi!");
    }

    @Test
    public void test07175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07175");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.lang.String str9 = strConsumerRecord5.topic();
        long long10 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        java.lang.String str14 = strConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test07176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07176");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.offset();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.timestamp();
        java.lang.String str12 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test07177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07177");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        int int13 = strConsumerRecord5.serializedKeySize();
        long long14 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test07178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07178");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.partition();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.partition();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
    }

    @Test
    public void test07179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07179");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord9.leaderEpoch();
        int int12 = strConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional28 = strConsumerRecord26.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str35 = strConsumerRecord34.topic();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord26, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType36);
        int int38 = strConsumerRecord26.serializedValueSize();
        java.lang.String str39 = strConsumerRecord26.key();
        java.lang.String str40 = strConsumerRecord26.key();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord26.leaderEpoch();
        long long42 = strConsumerRecord26.checksum();
        java.lang.String str43 = strConsumerRecord26.toString();
        long long44 = strConsumerRecord26.offset();
        java.lang.Class<?> wildcardClass45 = strConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.String> typeConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 0.0)", (int) (byte) 1, 1L, (long) 0, timestampType14, (long) (byte) 100, (int) (byte) -1, (int) '4', (java.lang.reflect.Type) wildcardClass45, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = -1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10.0)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str43, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test07180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07180");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.lang.String str16 = strConsumerRecord5.key();
        long long17 = strConsumerRecord5.checksum();
        long long18 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
    }

    @Test
    public void test07181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07181");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord37.timestampType();
        int int39 = strConsumerRecord37.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord37.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType40);
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord41.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord41.timestampType();
        long long44 = strConsumerRecord41.checksum();
        java.io.Serializable serializable45 = strConsumerRecord41.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", 100, 52L, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", serializable45);
        java.io.Serializable serializable47 = strConsumerRecord46.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        long long56 = strConsumerRecord53.offset();
        long long57 = strConsumerRecord53.checksum();
        org.apache.kafka.common.header.Headers headers58 = strConsumerRecord53.headers();
        int int59 = strConsumerRecord53.serializedKeySize();
        int int60 = strConsumerRecord53.serializedKeySize();
        org.apache.kafka.common.header.Headers headers61 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord67.timestampType();
        int int69 = strConsumerRecord67.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType70 = strConsumerRecord67.timestampType();
        java.lang.String str71 = strConsumerRecord67.toString();
        java.util.Optional<java.lang.Integer> intOptional72 = strConsumerRecord67.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord67.timestampType();
        java.lang.String str74 = strConsumerRecord67.topic();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord67.timestampType();
        java.util.Optional<java.lang.Integer> intOptional76 = strConsumerRecord67.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (int) (byte) 10, (long) (byte) 0, (long) '4', timestampType19, (java.lang.Long) 97L, 100, (int) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", serializable47, headers61, intOptional76);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = hi!)", 35, (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", (java.io.Serializable) (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(headers58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str71, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional76);
    }

    @Test
    public void test07182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07182");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        java.lang.Class<?> wildcardClass26 = strConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType14, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass26);
        long long28 = strConsumerRecord27.checksum();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord27.timestampType();
        java.io.Serializable serializable31 = strConsumerRecord27.value();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(serializable31);
    }

    @Test
    public void test07183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07183");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        java.lang.String str14 = strConsumerRecord5.key();
        int int15 = strConsumerRecord5.serializedKeySize();
        long long16 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable17 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
    }

    @Test
    public void test07184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07184");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        long long15 = strConsumerRecord9.checksum();
        int int16 = strConsumerRecord9.serializedKeySize();
        java.lang.Class<?> wildcardClass17 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) ' ', (long) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass17);
        java.lang.String str19 = strConsumerRecord18.topic();
        long long20 = strConsumerRecord18.checksum();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str19, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test07185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07185");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        int int7 = strConsumerRecord5.serializedValueSize();
        int int8 = strConsumerRecord5.partition();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.serializedValueSize();
        int int11 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.Class<?> wildcardClass13 = strConsumerRecord5.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test07186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07186");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long9 = strConsumerRecord8.timestamp();
        long long10 = strConsumerRecord8.checksum();
        long long11 = strConsumerRecord8.timestamp();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord8.headers();
        java.lang.String str13 = strConsumerRecord8.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Comparable<java.lang.String>> strConsumerRecordConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 0, (long) 100, strConsumerRecord8, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)");
        int int16 = strConsumerRecord8.serializedValueSize();
        long long17 = strConsumerRecord8.timestamp();
        java.lang.String str18 = strConsumerRecord8.key();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test07187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07187");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 52, 32L, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) 32);
        java.io.Serializable serializable10 = strConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional28 = strConsumerRecord26.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str35 = strConsumerRecord34.topic();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord26, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType36);
        java.lang.String str38 = strConsumerRecord26.topic();
        long long39 = strConsumerRecord26.offset();
        long long40 = strConsumerRecord26.offset();
        java.lang.String str41 = strConsumerRecord26.toString();
        java.lang.String str42 = strConsumerRecord26.key();
        long long43 = strConsumerRecord26.checksum();
        long long44 = strConsumerRecord26.offset();
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord26.headers();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord26.leaderEpoch();
        int int47 = strConsumerRecord26.serializedValueSize();
        java.lang.Class<?> wildcardClass48 = strConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)", (int) (short) 1, (long) '4', (long) 0, timestampType13, 32L, (int) (short) -1, 0, "", (java.io.Serializable) wildcardClass48);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 32 + "'", serializable10, 32);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str41, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test07188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07188");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        int int29 = strConsumerRecord28.serializedKeySize();
        java.lang.String str30 = strConsumerRecord28.toString();
        java.lang.String str31 = strConsumerRecord28.key();
        long long32 = strConsumerRecord28.offset();
        java.lang.Class<?> wildcardClass33 = strConsumerRecord28.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str30, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test07189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07189");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.offset();
        long long12 = strConsumerRecord9.offset();
        java.lang.String str13 = strConsumerRecord9.key();
        int int14 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 52L, (long) (short) 1, timestampType15, 10L, (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable20);
        int int22 = strConsumerRecord21.serializedValueSize();
        java.io.Serializable serializable23 = strConsumerRecord21.value();
        java.lang.String str24 = strConsumerRecord21.key();
        java.util.Optional<java.lang.Integer> intOptional25 = strConsumerRecord21.leaderEpoch();
        long long26 = strConsumerRecord21.offset();
        org.apache.kafka.common.header.Headers headers27 = strConsumerRecord21.headers();
        int int28 = strConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord21.headers();
        java.io.Serializable serializable30 = strConsumerRecord21.value();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(serializable23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str24, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertNull(serializable30);
    }

    @Test
    public void test07190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07190");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedKeySize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.lang.String str11 = strConsumerRecord5.topic();
        java.lang.Class<?> wildcardClass12 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test07191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07191");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord13.headers();
        int int16 = strConsumerRecord13.serializedKeySize();
        int int17 = strConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord35.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord35.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord35.timestampType();
        java.lang.String str39 = strConsumerRecord35.key();
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord35.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord50.timestampType();
        java.lang.Class<?> wildcardClass52 = strConsumerRecord50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType40, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str64 = strConsumerRecord63.topic();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord63.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType40, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass65);
        java.io.Serializable serializable67 = strConsumerRecord66.value();
        long long68 = strConsumerRecord66.timestamp();
        org.apache.kafka.common.header.Headers headers69 = strConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int76 = strConsumerRecord75.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional77 = strConsumerRecord75.leaderEpoch();
        java.lang.String str78 = strConsumerRecord75.topic();
        java.lang.String str79 = strConsumerRecord75.toString();
        org.apache.kafka.common.header.Headers headers80 = strConsumerRecord75.headers();
        long long81 = strConsumerRecord75.offset();
        java.lang.String str82 = strConsumerRecord75.key();
        int int83 = strConsumerRecord75.partition();
        org.apache.kafka.common.header.Headers headers84 = strConsumerRecord75.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Iterable<org.apache.kafka.common.header.Header>> headersConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", (int) (short) -1, (long) 32, (long) 97, timestampType18, (long) '#', (int) (short) 100, (int) (short) 10, headers69, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) (byte) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)", (java.io.Serializable) (short) -1);
        org.apache.kafka.common.header.Headers headers87 = strConsumerRecord86.headers();
        int int88 = strConsumerRecord86.serializedValueSize();
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(serializable67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(intOptional77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str79, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 52L + "'", long81 == 52L);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(headers87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test07192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07192");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        long long35 = strConsumerRecord33.timestamp();
        java.util.Optional<java.lang.Integer> intOptional36 = strConsumerRecord33.leaderEpoch();
        long long37 = strConsumerRecord33.timestamp();
        long long38 = strConsumerRecord33.offset();
        long long39 = strConsumerRecord33.checksum();
        long long40 = strConsumerRecord33.checksum();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    }

    @Test
    public void test07193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07193");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        java.lang.String str15 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long27 = strConsumerRecord26.timestamp();
        long long28 = strConsumerRecord26.checksum();
        java.util.Optional<java.lang.Integer> intOptional29 = strConsumerRecord26.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord26.timestampType();
        java.lang.String str31 = strConsumerRecord26.topic();
        org.apache.kafka.common.header.Headers headers32 = strConsumerRecord26.headers();
        int int33 = strConsumerRecord26.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional34 = strConsumerRecord26.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", (int) '4', (long) (short) -1, 97L, timestampType16, (long) '4', 97, (int) '#', "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", (java.io.Serializable) timestampType36);
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord37.timestampType();
        java.lang.String str39 = strConsumerRecord37.key();
        int int40 = strConsumerRecord37.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)" + "'", str39, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
    }

    @Test
    public void test07194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07194");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        java.lang.Class<?> wildcardClass43 = strConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType18, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass43);
        long long45 = strConsumerRecord44.offset();
        int int46 = strConsumerRecord44.serializedKeySize();
        long long47 = strConsumerRecord44.timestamp();
        java.lang.String str48 = strConsumerRecord44.key();
        int int49 = strConsumerRecord44.partition();
        java.util.Optional<java.lang.Integer> intOptional50 = strConsumerRecord44.leaderEpoch();
        long long51 = strConsumerRecord44.checksum();
        int int52 = strConsumerRecord44.partition();
        long long53 = strConsumerRecord44.checksum();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
    }

    @Test
    public void test07195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07195");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord22.timestampType();
        int int24 = strConsumerRecord22.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord22.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType25);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long41 = strConsumerRecord40.timestamp();
        int int42 = strConsumerRecord40.partition();
        java.lang.String str43 = strConsumerRecord40.topic();
        long long44 = strConsumerRecord40.offset();
        java.io.Serializable serializable45 = strConsumerRecord40.value();
        java.lang.String str46 = strConsumerRecord40.topic();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long59 = strConsumerRecord58.timestamp();
        int int60 = strConsumerRecord58.partition();
        java.lang.String str61 = strConsumerRecord58.topic();
        long long62 = strConsumerRecord58.offset();
        java.io.Serializable serializable63 = strConsumerRecord58.value();
        long long64 = strConsumerRecord58.checksum();
        org.apache.kafka.common.header.Headers headers65 = strConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '4', (-1L), (long) 0, timestampType47, (java.lang.Long) 10L, (int) (short) 10, 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) ' ', headers65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 35, (long) 1, 1L, timestampType25, (long) 100, (-1), (int) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) (-1L));
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long74 = strConsumerRecord73.timestamp();
        java.lang.String str75 = strConsumerRecord73.topic();
        int int76 = strConsumerRecord73.serializedKeySize();
        org.apache.kafka.common.header.Headers headers77 = strConsumerRecord73.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int84 = strConsumerRecord83.serializedValueSize();
        int int85 = strConsumerRecord83.partition();
        long long86 = strConsumerRecord83.offset();
        java.lang.String str87 = strConsumerRecord83.key();
        java.util.Optional<java.lang.Integer> intOptional88 = strConsumerRecord83.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = NoTimestampType)", 0, (long) 52, 52L, timestampType4, (java.lang.Long) 100L, (int) '#', (int) (short) -1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", headers77, intOptional88);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (short) 10 + "'", serializable45, (short) 10);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertEquals("'" + serializable63 + "' != '" + (short) 10 + "'", serializable63, (short) 10);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 52L + "'", long86 == 52L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(intOptional88);
    }

    @Test
    public void test07196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07196");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test07197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07197");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord53.timestampType();
        int int58 = strConsumerRecord53.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
    }

    @Test
    public void test07198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07198");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.toString();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        java.lang.reflect.AnnotatedElement annotatedElement19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long26 = strConsumerRecord25.timestamp();
        int int27 = strConsumerRecord25.partition();
        java.lang.String str28 = strConsumerRecord25.topic();
        long long29 = strConsumerRecord25.offset();
        java.io.Serializable serializable30 = strConsumerRecord25.value();
        long long31 = strConsumerRecord25.offset();
        java.lang.String str32 = strConsumerRecord25.key();
        java.lang.String str33 = strConsumerRecord25.key();
        int int34 = strConsumerRecord25.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.io.Serializable> annotatedElementConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 0, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 1)", 0, (long) 32, (long) 10, timestampType15, (long) 97, 97, 32, annotatedElement19, (java.io.Serializable) timestampType35);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (short) 10 + "'", serializable30, (short) 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07199");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.toString();
        long long56 = strConsumerRecord53.checksum();
        java.lang.String str57 = strConsumerRecord53.topic();
        java.lang.String str58 = strConsumerRecord53.topic();
        int int59 = strConsumerRecord53.serializedValueSize();
        java.lang.String str60 = strConsumerRecord53.toString();
        int int61 = strConsumerRecord53.partition();
        long long62 = strConsumerRecord53.offset();
        int int63 = strConsumerRecord53.partition();
        long long64 = strConsumerRecord53.timestamp();
        int int65 = strConsumerRecord53.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType66 = strConsumerRecord53.timestampType();
        long long67 = strConsumerRecord53.offset();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str55, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str57, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str58, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str60, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
    }

    @Test
    public void test07200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07200");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        java.lang.String str15 = strConsumerRecord9.key();
        java.lang.String str16 = strConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int53 = strConsumerRecord52.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional54 = strConsumerRecord52.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str61 = strConsumerRecord60.topic();
        org.apache.kafka.common.record.TimestampType timestampType62 = strConsumerRecord60.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord52, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType62);
        java.lang.String str64 = strConsumerRecord52.topic();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord52.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType33, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType43, (java.lang.Object) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long73 = strConsumerRecord72.timestamp();
        int int74 = strConsumerRecord72.partition();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord72.timestampType();
        long long76 = strConsumerRecord72.checksum();
        org.apache.kafka.common.record.TimestampType timestampType77 = strConsumerRecord72.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> timestampTypeEnumConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)", 10, (long) 0, 35L, timestampType17, (long) (byte) 100, (int) (byte) -1, 0, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType33, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType77);
        java.lang.Class<?> wildcardClass79 = timestampType77.getClass();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType77 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType77.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test07201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07201");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long13 = strConsumerRecord12.timestamp();
        int int14 = strConsumerRecord12.partition();
        java.io.Serializable serializable15 = strConsumerRecord12.value();
        java.lang.Class<?> wildcardClass16 = strConsumerRecord12.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (byte) 10, (long) 32, (java.lang.reflect.GenericDeclaration) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 97, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) (byte) 10);
        java.io.Serializable serializable20 = strConsumerRecord19.value();
        org.apache.kafka.common.header.Headers headers21 = strConsumerRecord19.headers();
        int int22 = strConsumerRecord19.serializedValueSize();
        java.lang.String str23 = strConsumerRecord19.key();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord19.timestampType();
        java.lang.String str25 = strConsumerRecord19.topic();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (byte) 10 + "'", serializable20, (byte) 10);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str23, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str25, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test07202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07202");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        int int27 = strConsumerRecord25.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType28, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType11, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        int int36 = strConsumerRecord35.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test07203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07203");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.lang.String str11 = strConsumerRecord5.toString();
        long long12 = strConsumerRecord5.offset();
        int int13 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test07204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07204");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        int int13 = strConsumerRecord5.serializedValueSize();
        long long14 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test07205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07205");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.key();
        int int12 = strConsumerRecord5.partition();
        java.lang.String str13 = strConsumerRecord5.topic();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test07206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07206");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.io.Serializable serializable12 = strConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (byte) 0, (long) 100, "hi!", (java.io.Serializable) timestampType13);
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord14.timestampType();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord14.headers();
        int int17 = strConsumerRecord14.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord14.leaderEpoch();
        java.io.Serializable serializable19 = strConsumerRecord14.value();
        java.lang.String str20 = strConsumerRecord14.key();
        int int21 = strConsumerRecord14.serializedValueSize();
        long long22 = strConsumerRecord14.offset();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + serializable19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
    }

    @Test
    public void test07207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07207");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord21.timestampType();
        java.lang.String str25 = strConsumerRecord21.key();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        java.lang.Class<?> wildcardClass38 = strConsumerRecord36.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType26, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass38);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str50 = strConsumerRecord49.topic();
        java.lang.Class<?> wildcardClass51 = strConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType26, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long63 = strConsumerRecord62.timestamp();
        long long64 = strConsumerRecord62.checksum();
        java.util.Optional<java.lang.Integer> intOptional65 = strConsumerRecord62.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType66 = strConsumerRecord62.timestampType();
        java.lang.Class<?> wildcardClass67 = timestampType66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord77.timestampType();
        int int79 = strConsumerRecord77.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional80 = strConsumerRecord77.leaderEpoch();
        java.lang.String str81 = strConsumerRecord77.toString();
        org.apache.kafka.common.record.TimestampType timestampType82 = strConsumerRecord77.timestampType();
        int int83 = strConsumerRecord77.partition();
        int int84 = strConsumerRecord77.partition();
        int int85 = strConsumerRecord77.partition();
        java.lang.String str86 = strConsumerRecord77.topic();
        java.lang.String str87 = strConsumerRecord77.topic();
        org.apache.kafka.common.header.Headers headers88 = strConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>> strConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)", (int) (byte) -1, (long) 97, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers88);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", (int) '#', 97L, (long) 52, timestampType26, (java.lang.Long) 0L, (int) (short) 0, 0, "", (java.io.Serializable) timestampType66, headers88);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1), value = hi!)", 35, 1L, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (java.io.Serializable) 97L);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str81, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(headers88);
    }

    @Test
    public void test07208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07208");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        int int10 = strConsumerRecord8.serializedValueSize();
        long long11 = strConsumerRecord8.offset();
        java.io.Serializable serializable12 = strConsumerRecord8.value();
        int int13 = strConsumerRecord8.serializedValueSize();
        java.lang.Class<?> wildcardClass14 = strConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord40.timestampType();
        int int42 = strConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType43, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long59 = strConsumerRecord58.timestamp();
        int int60 = strConsumerRecord58.partition();
        java.io.Serializable serializable61 = strConsumerRecord58.value();
        java.lang.Class<?> wildcardClass62 = serializable61.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long69 = strConsumerRecord68.timestamp();
        int int70 = strConsumerRecord68.partition();
        java.lang.String str71 = strConsumerRecord68.topic();
        long long72 = strConsumerRecord68.offset();
        java.lang.Class<?> wildcardClass73 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType43, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass62, (java.lang.reflect.GenericDeclaration) wildcardClass73);
        java.io.Serializable serializable79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, 0L, 0L, timestampType43, (long) 10, (int) '#', 10, "hi!", serializable79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (byte) 100, (long) (short) -1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", serializable79);
        java.util.Optional<java.lang.Integer> intOptional82 = strConsumerRecord81.leaderEpoch();
        java.lang.String str83 = strConsumerRecord81.toString();
        org.apache.kafka.common.header.Headers headers84 = strConsumerRecord81.headers();
        java.lang.Class<?> wildcardClass85 = strConsumerRecord81.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = ), partition = 1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = NoTimestampType)", (int) (byte) 1, 1L, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", (java.io.Serializable) wildcardClass85);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.Type> typeConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 0, (long) 'a', (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass85);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 10 + "'", serializable61, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 52L + "'", long72 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)" + "'", str83, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)");
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test07209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07209");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        int int15 = strConsumerRecord9.partition();
        int int16 = strConsumerRecord9.serializedValueSize();
        long long17 = strConsumerRecord9.timestamp();
        long long18 = strConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = 52, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = )", (int) (short) 10, (long) (short) 10, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType19);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07210");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        java.util.Optional<java.lang.Integer> intOptional57 = strConsumerRecord53.leaderEpoch();
        int int58 = strConsumerRecord53.serializedKeySize();
        long long59 = strConsumerRecord53.checksum();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
    }

    @Test
    public void test07211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07211");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord18.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord34.timestampType();
        int int36 = strConsumerRecord34.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType37, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType20, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long51 = strConsumerRecord50.timestamp();
        long long52 = strConsumerRecord50.checksum();
        long long53 = strConsumerRecord50.timestamp();
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord50.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 100, 52L, 1L, timestampType4, (java.lang.Long) 35L, (int) (short) 1, 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) 100, headers54);
        int int56 = strConsumerRecord55.serializedKeySize();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord55.headers();
        java.lang.String str58 = strConsumerRecord55.topic();
        java.lang.String str59 = strConsumerRecord55.toString();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord55.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str58, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 52, null = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), value = 100)" + "'", str59, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 52, null = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), value = 100)");
        org.junit.Assert.assertNotNull(intOptional60);
    }

    @Test
    public void test07212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07212");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str32 = strConsumerRecord31.topic();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int45 = strConsumerRecord44.serializedValueSize();
        int int46 = strConsumerRecord44.partition();
        org.apache.kafka.common.header.Headers headers47 = strConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional55 = strConsumerRecord53.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType33, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers47, intOptional55);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int68 = strConsumerRecord67.serializedValueSize();
        int int69 = strConsumerRecord67.partition();
        org.apache.kafka.common.header.Headers headers70 = strConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType33, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 0, (long) '4', (long) 1, timestampType12, (java.lang.Long) 100L, (int) (byte) -1, (int) '#', "hi!", (java.io.Serializable) 10.0d, headers70);
        java.util.Optional<java.lang.Integer> intOptional73 = strConsumerRecord72.leaderEpoch();
        java.io.Serializable serializable74 = strConsumerRecord72.value();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord72.timestampType();
        org.apache.kafka.common.header.Headers headers76 = strConsumerRecord72.headers();
        long long77 = strConsumerRecord72.timestamp();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + 10.0d + "'", serializable74, 10.0d);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
    }

    @Test
    public void test07213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07213");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord18.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord34.timestampType();
        int int36 = strConsumerRecord34.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType37, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType20, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long51 = strConsumerRecord50.timestamp();
        long long52 = strConsumerRecord50.checksum();
        long long53 = strConsumerRecord50.timestamp();
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord50.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 100, 52L, 1L, timestampType4, (java.lang.Long) 35L, (int) (short) 1, 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) 100, headers54);
        java.lang.String str56 = strConsumerRecord55.topic();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord55.timestampType();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord55.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str56, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertNull(timestampType57);
        org.junit.Assert.assertNotNull(intOptional58);
    }

    @Test
    public void test07214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07214");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
    }

    @Test
    public void test07215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07215");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        long long55 = strConsumerRecord53.checksum();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        int int57 = strConsumerRecord53.serializedValueSize();
        long long58 = strConsumerRecord53.timestamp();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
    }

    @Test
    public void test07216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07216");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.toString();
        long long56 = strConsumerRecord53.checksum();
        java.lang.String str57 = strConsumerRecord53.topic();
        int int58 = strConsumerRecord53.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional59 = strConsumerRecord53.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str55, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str57, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(intOptional59);
    }

    @Test
    public void test07217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07217");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.timestamp();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.checksum();
        int int14 = strConsumerRecord5.serializedKeySize();
        int int15 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test07218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07218");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.key();
        long long12 = strConsumerRecord5.offset();
        long long13 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test07219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07219");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        int int15 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        int int17 = strConsumerRecord5.partition();
        int int18 = strConsumerRecord5.serializedValueSize();
        int int19 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test07220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07220");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int42 = strConsumerRecord41.serializedValueSize();
        int int43 = strConsumerRecord41.partition();
        long long44 = strConsumerRecord41.offset();
        java.lang.String str45 = strConsumerRecord41.key();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str57 = strConsumerRecord56.topic();
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int70 = strConsumerRecord69.serializedValueSize();
        int int71 = strConsumerRecord69.partition();
        org.apache.kafka.common.header.Headers headers72 = strConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int79 = strConsumerRecord78.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional80 = strConsumerRecord78.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType58, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers72, intOptional80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 97, (long) 1, (long) (short) 0, timestampType18, (java.lang.Long) 100L, (-1), 0, "hi!", (java.io.Serializable) timestampType46, headers72);
        int int83 = strConsumerRecord82.serializedKeySize();
        java.lang.String str84 = strConsumerRecord82.key();
        org.apache.kafka.common.header.Headers headers85 = strConsumerRecord82.headers();
        java.io.Serializable serializable86 = strConsumerRecord82.value();
        long long87 = strConsumerRecord82.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertTrue("'" + serializable86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
    }

    @Test
    public void test07221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07221");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        long long9 = strConsumerRecord5.checksum();
        java.lang.String str10 = strConsumerRecord5.toString();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.topic();
        java.lang.String str13 = strConsumerRecord5.topic();
        long long14 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
    }

    @Test
    public void test07222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07222");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        long long12 = strConsumerRecord5.checksum();
        long long13 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        int int15 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test07223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07223");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        int int9 = strConsumerRecord5.partition();
        java.lang.String str10 = strConsumerRecord5.key();
        java.lang.String str11 = strConsumerRecord5.topic();
        java.lang.String str12 = strConsumerRecord5.key();
        int int13 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test07224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07224");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        int int15 = strConsumerRecord5.partition();
        int int16 = strConsumerRecord5.partition();
        long long17 = strConsumerRecord5.checksum();
        int int18 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test07225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07225");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.offset();
        long long12 = strConsumerRecord9.offset();
        java.lang.String str13 = strConsumerRecord9.key();
        int int14 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 52L, (long) (short) 1, timestampType15, 10L, (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable20);
        long long22 = strConsumerRecord21.offset();
        int int23 = strConsumerRecord21.partition();
        java.lang.String str24 = strConsumerRecord21.toString();
        int int25 = strConsumerRecord21.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord21.timestampType();
        int int27 = strConsumerRecord21.partition();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)" + "'", str24, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test07226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07226");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        long long10 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        long long12 = strConsumerRecord5.checksum();
        long long13 = strConsumerRecord5.timestamp();
        java.lang.String str14 = strConsumerRecord5.toString();
        java.lang.String str15 = strConsumerRecord5.topic();
        int int16 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test07227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07227");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType22, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType53, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType65, headers74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int82 = strConsumerRecord81.serializedValueSize();
        int int83 = strConsumerRecord81.partition();
        long long84 = strConsumerRecord81.offset();
        java.lang.String str85 = strConsumerRecord81.key();
        org.apache.kafka.common.record.TimestampType timestampType86 = strConsumerRecord81.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (-1), 100L, (long) (short) 1, timestampType22, (long) (byte) 1, (int) (byte) 10, (int) (short) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType65, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType89 = strConsumerRecord88.timestampType();
        int int90 = strConsumerRecord88.serializedValueSize();
        long long91 = strConsumerRecord88.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 52L + "'", long84 == 52L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    public void test07228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07228");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType22, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str46 = strConsumerRecord45.topic();
        java.lang.Class<?> wildcardClass47 = strConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType22, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long59 = strConsumerRecord58.timestamp();
        int int60 = strConsumerRecord58.partition();
        java.lang.String str61 = strConsumerRecord58.topic();
        long long62 = strConsumerRecord58.offset();
        java.lang.Class<?> wildcardClass63 = strConsumerRecord58.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers70 = strConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long77 = strConsumerRecord76.timestamp();
        long long78 = strConsumerRecord76.checksum();
        long long79 = strConsumerRecord76.timestamp();
        java.util.Optional<java.lang.Integer> intOptional80 = strConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 1, (long) (byte) 100, (long) 100, timestampType22, (java.lang.Long) 100L, (int) 'a', (int) (short) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass63, headers70, intOptional80);
        long long82 = strConsumerRecord81.offset();
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord81.headers();
        long long84 = strConsumerRecord81.offset();
        long long85 = strConsumerRecord81.timestamp();
        long long86 = strConsumerRecord81.timestamp();
        java.lang.Class<?> wildcardClass87 = strConsumerRecord81.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L + "'", long82 == 100L);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 100L + "'", long85 == 100L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 100L + "'", long86 == 100L);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test07229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07229");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType26, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord43.leaderEpoch();
        java.lang.String str46 = strConsumerRecord43.topic();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int64 = strConsumerRecord63.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional65 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str72 = strConsumerRecord71.topic();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord63, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType73);
        int int75 = strConsumerRecord63.serializedValueSize();
        java.lang.String str76 = strConsumerRecord63.key();
        java.lang.String str77 = strConsumerRecord63.key();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType26, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType47, headers54, intOptional78);
        long long80 = strConsumerRecord79.offset();
        long long81 = strConsumerRecord79.offset();
        long long82 = strConsumerRecord79.offset();
        java.lang.String str83 = strConsumerRecord79.toString();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)" + "'", str83, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)");
    }

    @Test
    public void test07230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07230");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        int int19 = strConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType20, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 0, 1L, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) '#');
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int39 = strConsumerRecord38.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord38.leaderEpoch();
        java.lang.String str41 = strConsumerRecord38.key();
        long long42 = strConsumerRecord38.offset();
        java.lang.String str43 = strConsumerRecord38.toString();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord38.timestampType();
        java.lang.String str45 = strConsumerRecord38.toString();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord38.leaderEpoch();
        java.lang.Class<?> wildcardClass47 = strConsumerRecord38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)", 0, (long) '4', (long) (short) -1, timestampType28, (long) 100, (int) (byte) 10, 52, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", (java.io.Serializable) wildcardClass47);
        org.apache.kafka.common.header.Headers headers49 = strConsumerRecord48.headers();
        java.util.Optional<java.lang.Integer> intOptional50 = strConsumerRecord48.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str43, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str45, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertNotNull(intOptional50);
    }

    @Test
    public void test07231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07231");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.toString();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord9.leaderEpoch();
        java.lang.String str15 = strConsumerRecord9.key();
        java.lang.String str16 = strConsumerRecord9.toString();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord9.leaderEpoch();
        int int18 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.header.Headers headers20 = strConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 10, (long) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = null)", (java.io.Serializable) timestampType21);
        org.apache.kafka.common.header.Headers headers23 = strConsumerRecord22.headers();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers23);
    }

    @Test
    public void test07232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07232");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        long long11 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.serializedValueSize();
        int int15 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test07233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07233");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        int int15 = strConsumerRecord5.partition();
        java.lang.String str16 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        java.lang.Class<?> wildcardClass18 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test07234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07234");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        int int8 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        java.lang.String str10 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07235");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        long long15 = strConsumerRecord5.checksum();
        long long16 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(headers17);
    }

    @Test
    public void test07236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07236");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType10);
        java.lang.String str12 = strConsumerRecord11.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord11.timestampType();
        java.lang.String str14 = strConsumerRecord11.topic();
        java.lang.String str15 = strConsumerRecord11.toString();
        java.io.Serializable serializable16 = strConsumerRecord11.value();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str15, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + serializable16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07237");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        java.lang.Class<?> wildcardClass13 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test07238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07238");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        long long15 = strConsumerRecord5.offset();
        java.lang.String str16 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord5.leaderEpoch();
        long long18 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test07239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07239");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord53.headers();
        long long58 = strConsumerRecord53.timestamp();
        int int59 = strConsumerRecord53.serializedKeySize();
        java.lang.String str60 = strConsumerRecord53.topic();
        int int61 = strConsumerRecord53.serializedValueSize();
        long long62 = strConsumerRecord53.timestamp();
        java.lang.String str63 = strConsumerRecord53.key();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str60, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str63, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07240");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.topic();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.lang.String str15 = strConsumerRecord5.toString();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str15, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test07241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07241");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        int int11 = strConsumerRecord5.serializedKeySize();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedKeySize();
        java.lang.String str14 = strConsumerRecord5.topic();
        java.lang.String str15 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test07242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07242");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long19 = strConsumerRecord18.timestamp();
        int int20 = strConsumerRecord18.partition();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str41 = strConsumerRecord40.topic();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int63 = strConsumerRecord62.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional64 = strConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType42, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers56, intOptional64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int77 = strConsumerRecord76.serializedValueSize();
        int int78 = strConsumerRecord76.partition();
        org.apache.kafka.common.header.Headers headers79 = strConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType42, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 0, (long) '4', (long) 1, timestampType21, (java.lang.Long) 100L, (int) (byte) -1, (int) '#', "hi!", (java.io.Serializable) 10.0d, headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, (long) (byte) -1, (long) (-1), timestampType4, 52L, (int) (byte) -1, 0, "hi!", (java.io.Serializable) "hi!");
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord82.headers();
        java.lang.String str84 = strConsumerRecord82.key();
        long long85 = strConsumerRecord82.timestamp();
        java.util.Optional<java.lang.Integer> intOptional86 = strConsumerRecord82.leaderEpoch();
        long long87 = strConsumerRecord82.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType88 = strConsumerRecord82.timestampType();
        java.io.Serializable serializable89 = strConsumerRecord82.value();
        long long90 = strConsumerRecord82.timestamp();
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNull(timestampType88);
        org.junit.Assert.assertEquals("'" + serializable89 + "' != '" + "hi!" + "'", serializable89, "hi!");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
    }

    @Test
    public void test07243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07243");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str18 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int31 = strConsumerRecord30.serializedValueSize();
        int int32 = strConsumerRecord30.partition();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType19, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers33, intOptional41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType19, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers56);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) -1, (long) '4', 0L, timestampType19, (long) (byte) 10, (-1), 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 1.0f);
        long long64 = strConsumerRecord63.checksum();
        org.apache.kafka.common.header.Headers headers65 = strConsumerRecord63.headers();
        org.apache.kafka.common.header.Headers headers66 = strConsumerRecord63.headers();
        long long67 = strConsumerRecord63.checksum();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10L + "'", long67 == 10L);
    }

    @Test
    public void test07244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07244");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord13.headers();
        java.io.Serializable serializable15 = strConsumerRecord13.value();
        java.lang.String str16 = strConsumerRecord13.key();
        java.lang.String str17 = strConsumerRecord13.toString();
        java.lang.String str18 = strConsumerRecord13.toString();
        long long19 = strConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int31 = strConsumerRecord30.serializedValueSize();
        int int32 = strConsumerRecord30.partition();
        long long33 = strConsumerRecord30.offset();
        long long34 = strConsumerRecord30.offset();
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord30.headers();
        long long36 = strConsumerRecord30.checksum();
        long long37 = strConsumerRecord30.checksum();
        org.apache.kafka.common.header.Headers headers38 = strConsumerRecord30.headers();
        org.apache.kafka.common.header.Headers headers39 = strConsumerRecord30.headers();
        java.lang.Class<?> wildcardClass40 = strConsumerRecord30.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)", (int) '#', (long) 97, (long) (short) 100, timestampType20, (long) 32, (int) (short) 100, 1, "", (java.io.Serializable) wildcardClass40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", 100, (long) 52, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)");
        java.lang.String str43 = strConsumerRecord42.topic();
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 0 + "'", serializable15, (short) 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str18, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)" + "'", str43, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)");
    }

    @Test
    public void test07245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07245");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord16.headers();
        java.io.Serializable serializable18 = strConsumerRecord16.value();
        java.lang.String str19 = strConsumerRecord16.key();
        java.lang.String str20 = strConsumerRecord16.toString();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord16.timestampType();
        int int22 = strConsumerRecord16.partition();
        int int23 = strConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord16.timestampType();
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", (-1), (long) '4', 52L, timestampType24, (long) 52, (int) '4', 100, strComparable28, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord39.timestampType();
        int int41 = strConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord39.timestampType();
        java.lang.String str43 = strConsumerRecord39.toString();
        java.util.Optional<java.lang.Integer> intOptional44 = strConsumerRecord39.leaderEpoch();
        java.lang.String str45 = strConsumerRecord39.toString();
        java.lang.String str46 = strConsumerRecord39.toString();
        int int47 = strConsumerRecord39.partition();
        int int48 = strConsumerRecord39.serializedValueSize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord58.leaderEpoch();
        java.lang.String str61 = strConsumerRecord58.key();
        long long62 = strConsumerRecord58.offset();
        java.lang.String str63 = strConsumerRecord58.toString();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord58.timestampType();
        java.lang.String str65 = strConsumerRecord58.toString();
        org.apache.kafka.common.record.TimestampType timestampType66 = strConsumerRecord58.timestampType();
        java.io.Serializable serializable71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", 32, (long) ' ', (long) 'a', timestampType66, (long) (byte) 10, (int) '#', (int) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", serializable71);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, org.apache.kafka.common.record.TimestampType> strConsumerRecordConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, org.apache.kafka.common.record.TimestampType>("", (int) '#', 1L, (long) 97, timestampType24, (long) (-1), (int) (byte) 100, (int) ' ', strConsumerRecord39, timestampType66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int80 = strConsumerRecord79.serializedValueSize();
        int int81 = strConsumerRecord79.partition();
        int int82 = strConsumerRecord79.partition();
        int int83 = strConsumerRecord79.partition();
        long long84 = strConsumerRecord79.offset();
        int int85 = strConsumerRecord79.serializedValueSize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("", 10, (long) 97, (java.io.Serializable) 97, strConsumerRecord79);
        long long87 = strConsumerRecord79.timestamp();
        java.io.Serializable serializable88 = strConsumerRecord79.value();
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 0 + "'", serializable18, (short) 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str20, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str43, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str45, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str46, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str63, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str65, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 52L + "'", long84 == 52L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + (short) 10 + "'", serializable88, (short) 10);
    }

    @Test
    public void test07246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07246");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.lang.String str12 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        long long14 = strConsumerRecord5.checksum();
        int int15 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test07247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07247");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord28.leaderEpoch();
        int int31 = strConsumerRecord28.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord28.timestampType();
        java.lang.String str33 = strConsumerRecord28.toString();
        int int34 = strConsumerRecord28.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str33, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test07248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07248");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int22 = strConsumerRecord21.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional23 = strConsumerRecord21.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str30 = strConsumerRecord29.topic();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord21, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType31);
        int int33 = strConsumerRecord21.serializedValueSize();
        java.io.Serializable serializable34 = strConsumerRecord21.value();
        long long35 = strConsumerRecord21.checksum();
        int int36 = strConsumerRecord21.partition();
        int int37 = strConsumerRecord21.partition();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord47.headers();
        org.apache.kafka.common.header.Headers headers49 = strConsumerRecord47.headers();
        int int50 = strConsumerRecord47.partition();
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord47.timestampType();
        int int52 = strConsumerRecord47.partition();
        java.lang.String str53 = strConsumerRecord47.key();
        java.lang.String str54 = strConsumerRecord47.toString();
        java.lang.String str55 = strConsumerRecord47.key();
        java.lang.Class<?> wildcardClass56 = strConsumerRecord47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int63 = strConsumerRecord62.serializedValueSize();
        int int64 = strConsumerRecord62.partition();
        long long65 = strConsumerRecord62.offset();
        long long66 = strConsumerRecord62.timestamp();
        int int67 = strConsumerRecord62.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord62.leaderEpoch();
        org.apache.kafka.common.header.Headers headers69 = strConsumerRecord62.headers();
        long long70 = strConsumerRecord62.offset();
        org.apache.kafka.common.header.Headers headers71 = strConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers> annotatedElementConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (int) (short) 0, (long) (byte) 0, 52L, timestampType38, (long) 0, 1, 0, (java.lang.reflect.AnnotatedElement) wildcardClass56, headers71);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 100, 1L, (long) (byte) 100, timestampType4, 10L, (int) (byte) -1, (int) (short) -1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)", (java.io.Serializable) wildcardClass56);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 10 + "'", serializable34, (short) 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str54, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 52L + "'", long70 == 52L);
        org.junit.Assert.assertNotNull(headers71);
    }

    @Test
    public void test07249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07249");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        long long15 = strConsumerRecord9.checksum();
        int int16 = strConsumerRecord9.serializedKeySize();
        int int17 = strConsumerRecord9.serializedValueSize();
        long long18 = strConsumerRecord9.offset();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord9.leaderEpoch();
        int int20 = strConsumerRecord9.partition();
        java.io.Serializable serializable21 = strConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) -1, (long) (short) 10, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (java.io.Serializable) timestampType22);
        org.apache.kafka.common.header.Headers headers24 = strConsumerRecord23.headers();
        java.util.Optional<java.lang.Integer> intOptional25 = strConsumerRecord23.leaderEpoch();
        java.lang.Class<?> wildcardClass26 = intOptional25.getClass();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 10 + "'", serializable21, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test07250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07250");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.partition();
        int int13 = strConsumerRecord5.serializedKeySize();
        java.lang.String str14 = strConsumerRecord5.topic();
        java.lang.String str15 = strConsumerRecord5.toString();
        long long16 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test07251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07251");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        java.lang.String str21 = strConsumerRecord8.key();
        java.lang.String str22 = strConsumerRecord8.key();
        int int23 = strConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord8.timestampType();
        java.lang.String str25 = strConsumerRecord8.key();
        java.lang.String str26 = strConsumerRecord8.toString();
        java.lang.String str27 = strConsumerRecord8.toString();
        java.io.Serializable serializable28 = strConsumerRecord8.value();
        long long29 = strConsumerRecord8.timestamp();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str26, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (short) 10 + "'", serializable28, (short) 10);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    }

    @Test
    public void test07252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07252");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.toString();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str11, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07253");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 100, (long) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)", serializable4);
    }

    @Test
    public void test07254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07254");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.toString();
        long long56 = strConsumerRecord53.checksum();
        long long57 = strConsumerRecord53.timestamp();
        java.lang.Class<?> wildcardClass58 = strConsumerRecord53.getClass();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str55, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test07255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07255");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        int int12 = strConsumerRecord9.partition();
        int int13 = strConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        java.io.Serializable serializable15 = strConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        int int17 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.io.Serializable> charSequenceConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 32, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value =  )", (int) (short) 100, (long) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType18);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07256");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.partition();
        int int13 = strConsumerRecord5.serializedKeySize();
        java.lang.String str14 = strConsumerRecord5.topic();
        java.lang.String str15 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional16);
    }

    @Test
    public void test07257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07257");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        java.lang.String str8 = strConsumerRecord5.key();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        long long10 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        long long12 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test07258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07258");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        int int15 = strConsumerRecord5.partition();
        int int16 = strConsumerRecord5.serializedKeySize();
        long long17 = strConsumerRecord5.timestamp();
        int int18 = strConsumerRecord5.partition();
        long long19 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
    }

    @Test
    public void test07259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07259");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedKeySize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.lang.String str11 = strConsumerRecord5.topic();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        long long14 = strConsumerRecord5.offset();
        int int15 = strConsumerRecord5.partition();
        java.lang.String str16 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord5.timestampType();
        long long18 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test07260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07260");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        int int15 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        java.lang.String str17 = strConsumerRecord5.toString();
        int int18 = strConsumerRecord5.serializedValueSize();
        long long19 = strConsumerRecord5.checksum();
        java.lang.String str20 = strConsumerRecord5.key();
        java.lang.String str21 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str21, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07261");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.toString();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord9.leaderEpoch();
        long long15 = strConsumerRecord9.offset();
        int int16 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord9.leaderEpoch();
        long long18 = strConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers19 = strConsumerRecord9.headers();
        java.lang.String str20 = strConsumerRecord9.key();
        java.lang.Class<?> wildcardClass21 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (int) (short) 10, 10L, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (java.io.Serializable) wildcardClass21);
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord22.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07262");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        long long17 = strConsumerRecord13.checksum();
        java.lang.String str18 = strConsumerRecord13.toString();
        long long19 = strConsumerRecord13.offset();
        int int20 = strConsumerRecord13.serializedKeySize();
        int int21 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long33 = strConsumerRecord32.timestamp();
        int int34 = strConsumerRecord32.partition();
        java.lang.String str35 = strConsumerRecord32.topic();
        long long36 = strConsumerRecord32.offset();
        java.io.Serializable serializable37 = strConsumerRecord32.value();
        long long38 = strConsumerRecord32.checksum();
        int int39 = strConsumerRecord32.serializedValueSize();
        long long40 = strConsumerRecord32.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long48 = strConsumerRecord47.timestamp();
        long long49 = strConsumerRecord47.offset();
        org.apache.kafka.common.header.Headers headers50 = strConsumerRecord47.headers();
        int int51 = strConsumerRecord47.serializedValueSize();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = NoTimestampType)", 97, (long) 0, (long) 1, timestampType22, (java.lang.Long) 0L, (int) (byte) 1, (int) (byte) 1, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType41, headers52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord67.timestampType();
        int int69 = strConsumerRecord67.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType70 = strConsumerRecord67.timestampType();
        java.lang.String str71 = strConsumerRecord67.toString();
        java.util.Optional<java.lang.Integer> intOptional72 = strConsumerRecord67.leaderEpoch();
        long long73 = strConsumerRecord67.offset();
        int int74 = strConsumerRecord67.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord67.timestampType();
        java.lang.String str76 = strConsumerRecord67.key();
        long long77 = strConsumerRecord67.checksum();
        org.apache.kafka.common.header.Headers headers78 = strConsumerRecord67.headers();
        org.apache.kafka.common.record.TimestampType timestampType79 = strConsumerRecord67.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str90 = strConsumerRecord89.topic();
        java.io.Serializable serializable91 = strConsumerRecord89.value();
        java.lang.String str92 = strConsumerRecord89.topic();
        java.util.Optional<java.lang.Integer> intOptional93 = strConsumerRecord89.leaderEpoch();
        int int94 = strConsumerRecord89.partition();
        long long95 = strConsumerRecord89.offset();
        java.lang.String str96 = strConsumerRecord89.toString();
        org.apache.kafka.common.record.TimestampType timestampType97 = strConsumerRecord89.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 32, (long) 100, (long) 1, timestampType79, (long) (byte) 1, (int) (byte) 1, (int) (short) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 52, null = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), value = 100)", (java.io.Serializable) timestampType97);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (int) 'a', (long) (-1), 0L, timestampType22, (long) (short) 10, 0, (int) '#', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), value = NoTimestampType)", (java.io.Serializable) (byte) 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (short) 10 + "'", serializable37, (short) 10);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str71, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 52L + "'", long73 == 52L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertEquals("'" + serializable91 + "' != '" + (short) 10 + "'", serializable91, (short) 10);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
        org.junit.Assert.assertNotNull(intOptional93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 52L + "'", long95 == 52L);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str96, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType97 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType97.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07263");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.partition();
        int int11 = strConsumerRecord5.partition();
        java.lang.Class<?> wildcardClass12 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test07264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07264");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        java.lang.String str13 = strConsumerRecord9.toString();
        long long14 = strConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long33 = strConsumerRecord32.timestamp();
        int int34 = strConsumerRecord32.partition();
        java.io.Serializable serializable35 = strConsumerRecord32.value();
        java.lang.Class<?> wildcardClass36 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (byte) 10, (long) 32, (java.lang.reflect.GenericDeclaration) wildcardClass36, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 97, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) (byte) 10);
        long long40 = strConsumerRecord39.offset();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord39.headers();
        java.util.Optional<java.lang.Integer> intOptional42 = strConsumerRecord39.leaderEpoch();
        java.lang.Class<?> wildcardClass43 = intOptional42.getClass();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord57.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord57.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord66.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord66.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType69 = strConsumerRecord66.timestampType();
        java.lang.String str70 = strConsumerRecord66.key();
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord66.timestampType();
        int int72 = strConsumerRecord66.partition();
        java.io.Serializable serializable73 = strConsumerRecord66.value();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", 52, 0L, (long) (short) 100, timestampType48, (java.lang.Long) 0L, (int) (byte) -1, (int) (short) 1, (java.io.Serializable) timestampType59, strConsumerRecord60, headers74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1), partition = 35, leaderEpoch = null, offset = 1, null = 10, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = null)", (-1), (long) (-1), (long) 10, timestampType15, (java.lang.Long) 97L, (int) '4', 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = )", (java.io.Serializable) wildcardClass43, headers74);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 10 + "'", serializable35, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 10 + "'", serializable73, (short) 10);
        org.junit.Assert.assertNotNull(headers74);
    }

    @Test
    public void test07265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07265");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        long long15 = strConsumerRecord9.checksum();
        int int16 = strConsumerRecord9.serializedKeySize();
        java.lang.Class<?> wildcardClass17 = strConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) ' ', (long) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass17);
        int int19 = strConsumerRecord18.serializedKeySize();
        org.apache.kafka.common.header.Headers headers20 = strConsumerRecord18.headers();
        java.util.Optional<java.lang.Integer> intOptional21 = strConsumerRecord18.leaderEpoch();
        int int22 = strConsumerRecord18.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test07266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07266");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType10);
        java.lang.String str12 = strConsumerRecord11.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord11.timestampType();
        java.lang.String str14 = strConsumerRecord11.key();
        long long15 = strConsumerRecord11.checksum();
        long long16 = strConsumerRecord11.checksum();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test07267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07267");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        long long12 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 10 + "'", serializable7, (short) 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
    }

    @Test
    public void test07268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07268");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long13 = strConsumerRecord12.timestamp();
        long long14 = strConsumerRecord12.checksum();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 1, (long) (byte) 1, timestampType16, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) ' ', 0L, (long) (short) 0, timestampType35, (long) (byte) -1, (int) '#', 100, "", (java.io.Serializable) 1.0d);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (byte) 100, (long) 97, (long) (byte) 1, timestampType16, (long) 32, (int) '4', (int) (short) 10, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) 100);
        java.lang.String str43 = strConsumerRecord42.toString();
        java.lang.String str44 = strConsumerRecord42.topic();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)" + "'", str43, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)" + "'", str44, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)");
    }

    @Test
    public void test07269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07269");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.topic();
        long long10 = strConsumerRecord5.checksum();
        java.lang.Class<?> wildcardClass11 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test07270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07270");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        java.lang.String str11 = strConsumerRecord9.topic();
        long long12 = strConsumerRecord9.checksum();
        long long13 = strConsumerRecord9.offset();
        int int14 = strConsumerRecord9.partition();
        long long15 = strConsumerRecord9.timestamp();
        int int16 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long35 = strConsumerRecord34.timestamp();
        int int36 = strConsumerRecord34.partition();
        java.io.Serializable serializable37 = strConsumerRecord34.value();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (byte) 0, (long) 100, "hi!", (java.io.Serializable) timestampType38);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (byte) 10, 32L, (long) (short) 100, timestampType38, 1L, 0, (int) (short) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )");
        long long46 = strConsumerRecord45.offset();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord45.timestampType();
        java.lang.String str48 = strConsumerRecord45.topic();
        java.lang.String str49 = strConsumerRecord45.key();
        java.lang.Class<?> wildcardClass50 = strConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long61 = strConsumerRecord60.timestamp();
        int int62 = strConsumerRecord60.partition();
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord60.timestampType();
        java.lang.String str64 = strConsumerRecord60.toString();
        long long65 = strConsumerRecord60.checksum();
        java.util.Optional<java.lang.Integer> intOptional66 = strConsumerRecord60.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional67 = strConsumerRecord60.leaderEpoch();
        java.lang.Class<?> wildcardClass68 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", 10, (long) '4', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", (java.io.Serializable) wildcardClass68);
        org.apache.kafka.common.record.TimestampType timestampType70 = strConsumerRecord69.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord69.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.record.TimestampType> genericDeclarationConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 35, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10))", (int) (byte) 0, 0L, (long) (byte) -1, timestampType17, 35L, (int) (byte) 0, (int) (byte) 0, (java.lang.reflect.GenericDeclaration) wildcardClass50, timestampType71);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (short) 10 + "'", serializable37, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 32L + "'", long46 == 32L);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)" + "'", str48, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)" + "'", str49, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str64, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07271");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedValueSize();
        int int11 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test07272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07272");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str10 = strConsumerRecord9.topic();
        java.lang.String str11 = strConsumerRecord9.topic();
        long long12 = strConsumerRecord9.offset();
        java.lang.String str13 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        java.lang.String str27 = strConsumerRecord24.toString();
        int int28 = strConsumerRecord24.partition();
        int int29 = strConsumerRecord24.partition();
        long long30 = strConsumerRecord24.offset();
        int int31 = strConsumerRecord24.serializedKeySize();
        java.lang.Class<?> wildcardClass32 = strConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long43 = strConsumerRecord42.timestamp();
        int int44 = strConsumerRecord42.partition();
        java.lang.String str45 = strConsumerRecord42.topic();
        long long46 = strConsumerRecord42.offset();
        java.io.Serializable serializable47 = strConsumerRecord42.value();
        java.lang.String str48 = strConsumerRecord42.topic();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long61 = strConsumerRecord60.timestamp();
        int int62 = strConsumerRecord60.partition();
        java.lang.String str63 = strConsumerRecord60.topic();
        long long64 = strConsumerRecord60.offset();
        java.io.Serializable serializable65 = strConsumerRecord60.value();
        long long66 = strConsumerRecord60.checksum();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord60.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '4', (-1L), (long) 0, timestampType49, (java.lang.Long) 10L, (int) (short) 10, 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) ' ', headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int75 = strConsumerRecord74.serializedValueSize();
        int int76 = strConsumerRecord74.partition();
        long long77 = strConsumerRecord74.offset();
        long long78 = strConsumerRecord74.offset();
        long long79 = strConsumerRecord74.checksum();
        long long80 = strConsumerRecord74.checksum();
        long long81 = strConsumerRecord74.timestamp();
        int int82 = strConsumerRecord74.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional83 = strConsumerRecord74.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", (int) (byte) 100, (long) '4', (long) 0, timestampType14, (java.lang.Long) 0L, 97, 32, "hi!", (java.io.Serializable) wildcardClass32, headers67, intOptional83);
        java.lang.Class<?> wildcardClass85 = timestampType14.getClass();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 52L + "'", long46 == 52L);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (short) 10 + "'", serializable47, (short) 10);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 10 + "'", serializable65, (short) 10);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 52L + "'", long78 == 52L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(intOptional83);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test07273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07273");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        int int26 = strConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord37.timestampType();
        int int39 = strConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord37.leaderEpoch();
        java.lang.String str41 = strConsumerRecord37.toString();
        long long42 = strConsumerRecord37.checksum();
        int int43 = strConsumerRecord37.partition();
        java.lang.Class<?> wildcardClass44 = strConsumerRecord37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord50.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord57.timestampType();
        int int59 = strConsumerRecord57.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord57.leaderEpoch();
        java.lang.String str61 = strConsumerRecord57.toString();
        java.util.Optional<java.lang.Integer> intOptional62 = strConsumerRecord57.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", 52, (long) '#', (long) (short) 1, timestampType27, (java.lang.Long) 0L, (int) (short) -1, 10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) wildcardClass44, headers51, intOptional62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '4', (long) ' ', (long) '4', timestampType10, (long) 52, (int) (short) 1, (int) (short) 10, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) '#');
        java.lang.String str65 = strConsumerRecord64.topic();
        java.lang.Class<?> wildcardClass66 = strConsumerRecord64.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str41, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test07274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07274");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        java.lang.String str35 = strConsumerRecord33.toString();
        java.lang.String str36 = strConsumerRecord33.key();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str35, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test07275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07275");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        long long12 = strConsumerRecord5.offset();
        java.lang.String str13 = strConsumerRecord5.key();
        int int14 = strConsumerRecord5.serializedValueSize();
        int int15 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        long long17 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test07276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07276");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test07277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07277");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        java.lang.String str10 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        long long12 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test07278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07278");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord13.leaderEpoch();
        java.lang.String str16 = strConsumerRecord13.key();
        long long17 = strConsumerRecord13.checksum();
        int int18 = strConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers19 = strConsumerRecord13.headers();
        long long20 = strConsumerRecord13.offset();
        java.lang.String str21 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord36.timestampType();
        java.lang.String str39 = strConsumerRecord36.toString();
        int int40 = strConsumerRecord36.partition();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType41);
        int int43 = strConsumerRecord42.partition();
        int int44 = strConsumerRecord42.partition();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 1, 0L, 1L, timestampType22, (long) (-1), (-1), 1, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (java.io.Serializable) timestampType45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int61 = strConsumerRecord60.serializedValueSize();
        int int62 = strConsumerRecord60.partition();
        java.lang.String str63 = strConsumerRecord60.topic();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord60.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (-1), (long) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) timestampType64);
        long long66 = strConsumerRecord65.offset();
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord65.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", 35, 0L, 52L, timestampType45, (long) (short) 0, 97, (int) (short) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)", (java.io.Serializable) timestampType67);
        java.lang.String str69 = strConsumerRecord68.key();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str39, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)" + "'", str69, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 35, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = NoTimestampType)");
    }

    @Test
    public void test07279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07279");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 0 + "'", serializable14, (short) 0);
    }

    @Test
    public void test07280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07280");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        long long15 = strConsumerRecord5.timestamp();
        long long16 = strConsumerRecord5.timestamp();
        int int17 = strConsumerRecord5.partition();
        long long18 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test07281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07281");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.timestamp();
        long long8 = strConsumerRecord5.checksum();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        long long11 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test07282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07282");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.checksum();
        long long18 = strConsumerRecord13.offset();
        long long19 = strConsumerRecord13.offset();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long43 = strConsumerRecord42.timestamp();
        int int44 = strConsumerRecord42.partition();
        java.io.Serializable serializable45 = strConsumerRecord42.value();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (byte) 0, (long) 100, "hi!", (java.io.Serializable) timestampType46);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (byte) 10, 32L, (long) (short) 100, timestampType46, 1L, 0, (int) (short) 1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long63 = strConsumerRecord62.timestamp();
        int int64 = strConsumerRecord62.partition();
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord62.timestampType();
        long long66 = strConsumerRecord62.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long77 = strConsumerRecord76.timestamp();
        int int78 = strConsumerRecord76.partition();
        java.lang.String str79 = strConsumerRecord76.topic();
        long long80 = strConsumerRecord76.offset();
        java.io.Serializable serializable81 = strConsumerRecord76.value();
        java.lang.String str82 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType83 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType94 = strConsumerRecord93.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType83, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType94);
        java.lang.Class<?> wildcardClass96 = strConsumerRecord95.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration> strConsumerRecordConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration>("", (int) '#', (long) ' ', (long) ' ', timestampType46, (long) 100, (int) (short) 0, 10, strConsumerRecord62, (java.lang.reflect.GenericDeclaration) wildcardClass96);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> strComparableConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (byte) 0, (long) 35, 1L, timestampType20, (long) 32, (-1), (int) '#', (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = NoTimestampType)", (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType46);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 35, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10))", 35, 1L, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (java.io.Serializable) (byte) 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (short) 10 + "'", serializable45, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 52L + "'", long80 == 52L);
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 10 + "'", serializable81, (short) 10);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType83 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType83.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test07283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07283");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 1, (long) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 35, null = -1, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), value = -1)", serializable4);
        int int6 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07284");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(headers15);
    }

    @Test
    public void test07285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07285");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str77 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord68, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78);
        java.lang.String str80 = strConsumerRecord68.topic();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType49, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType59, (java.lang.Object) wildcardClass81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType20, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType49);
        long long84 = strConsumerRecord83.timestamp();
        java.lang.String str85 = strConsumerRecord83.key();
        long long86 = strConsumerRecord83.checksum();
        long long87 = strConsumerRecord83.offset();
        org.apache.kafka.common.record.TimestampType timestampType88 = strConsumerRecord83.timestampType();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType88 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType88.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07286");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        int int23 = strConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType24);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", 35, (long) 'a', 100L, timestampType26, (long) '#', (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 10L);
        java.io.Serializable serializable33 = strConsumerRecord32.value();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord32.timestampType();
        java.io.Serializable serializable39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 1, (long) (short) 10, (long) (short) 0, timestampType34, (long) (short) 0, 100, (int) (short) 10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 35, null = -1, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), value = -1)", serializable39);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int52 = strConsumerRecord51.serializedValueSize();
        int int53 = strConsumerRecord51.partition();
        org.apache.kafka.common.header.Headers headers54 = strConsumerRecord51.headers();
        long long55 = strConsumerRecord51.checksum();
        org.apache.kafka.common.record.TimestampType timestampType56 = strConsumerRecord51.timestampType();
        int int57 = strConsumerRecord51.partition();
        int int58 = strConsumerRecord51.serializedValueSize();
        org.apache.kafka.common.header.Headers headers59 = strConsumerRecord51.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType66 = strConsumerRecord65.timestampType();
        int int67 = strConsumerRecord65.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord65.leaderEpoch();
        java.lang.String str69 = strConsumerRecord65.toString();
        int int70 = strConsumerRecord65.partition();
        java.util.Optional<java.lang.Integer> intOptional71 = strConsumerRecord65.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", (int) (short) 1, (long) 1, (long) 35, timestampType34, (java.lang.Long) 100L, (int) (byte) 10, 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 32, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable45, headers59, intOptional71);
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord72.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + 10L + "'", serializable33, 10L);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str69, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07287");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType12);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord13.headers();
        int int17 = strConsumerRecord13.partition();
        java.lang.String str18 = strConsumerRecord13.toString();
        java.lang.String str19 = strConsumerRecord13.key();
        int int20 = strConsumerRecord13.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)" + "'", str18, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str19, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test07288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07288");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        int int11 = strConsumerRecord5.serializedKeySize();
        long long12 = strConsumerRecord5.timestamp();
        long long13 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
    }

    @Test
    public void test07289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07289");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) ' ', (long) 97, "hi!", (java.io.Serializable) (short) 100);
        int int6 = strConsumerRecord5.serializedKeySize();
        long long7 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
    }

    @Test
    public void test07290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07290");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        long long12 = strConsumerRecord5.checksum();
        int int13 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        long long15 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test07291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07291");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        int int11 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07292");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 0, (long) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = null)");
        java.lang.Class<?> wildcardClass6 = strConsumerRecord5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test07293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07293");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        long long22 = strConsumerRecord17.timestamp();
        long long23 = strConsumerRecord17.offset();
        java.lang.String str24 = strConsumerRecord17.toString();
        long long25 = strConsumerRecord17.checksum();
        java.io.Serializable serializable26 = strConsumerRecord17.value();
        java.io.Serializable serializable27 = strConsumerRecord17.value();
        int int28 = strConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, (long) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)", (java.io.Serializable) timestampType29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long41 = strConsumerRecord40.timestamp();
        long long42 = strConsumerRecord40.checksum();
        java.util.Optional<java.lang.Integer> intOptional43 = strConsumerRecord40.leaderEpoch();
        long long44 = strConsumerRecord40.offset();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", 52, 1L, 52L, timestampType29, (long) '4', (int) '4', (int) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", (java.io.Serializable) timestampType45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) 0, (long) (short) -1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) '4');
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str24, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (short) 10 + "'", serializable26, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (short) 10 + "'", serializable27, (short) 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07294");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        java.lang.String str13 = strConsumerRecord9.toString();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (-1), (long) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.io.Serializable) timestampType15);
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord16.leaderEpoch();
        java.io.Serializable serializable18 = strConsumerRecord16.value();
        int int19 = strConsumerRecord16.partition();
        long long20 = strConsumerRecord16.offset();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + serializable18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test07295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07295");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedKeySize();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.lang.String str13 = strConsumerRecord5.toString();
        long long14 = strConsumerRecord5.checksum();
        long long15 = strConsumerRecord5.checksum();
        java.lang.String str16 = strConsumerRecord5.toString();
        int int17 = strConsumerRecord5.serializedValueSize();
        int int18 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test07296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07296");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.offset();
        long long12 = strConsumerRecord9.offset();
        java.lang.String str13 = strConsumerRecord9.key();
        int int14 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 52L, (long) (short) 1, timestampType15, 10L, (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable20);
        int int22 = strConsumerRecord21.serializedValueSize();
        java.io.Serializable serializable23 = strConsumerRecord21.value();
        java.lang.String str24 = strConsumerRecord21.key();
        java.util.Optional<java.lang.Integer> intOptional25 = strConsumerRecord21.leaderEpoch();
        long long26 = strConsumerRecord21.offset();
        org.apache.kafka.common.header.Headers headers27 = strConsumerRecord21.headers();
        int int28 = strConsumerRecord21.serializedValueSize();
        java.lang.String str29 = strConsumerRecord21.toString();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(serializable23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str24, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)" + "'", str29, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)");
    }

    @Test
    public void test07297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07297");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        long long15 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
    }

    @Test
    public void test07298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07298");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.offset();
        java.lang.String str10 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        int int12 = strConsumerRecord5.partition();
        long long13 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        java.lang.String str15 = strConsumerRecord5.key();
        int int16 = strConsumerRecord5.serializedValueSize();
        int int17 = strConsumerRecord5.serializedKeySize();
        int int18 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test07299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07299");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long19 = strConsumerRecord18.timestamp();
        int int20 = strConsumerRecord18.partition();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str41 = strConsumerRecord40.topic();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int63 = strConsumerRecord62.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional64 = strConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType42, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers56, intOptional64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int77 = strConsumerRecord76.serializedValueSize();
        int int78 = strConsumerRecord76.partition();
        org.apache.kafka.common.header.Headers headers79 = strConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType42, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 0, (long) '4', (long) 1, timestampType21, (java.lang.Long) 100L, (int) (byte) -1, (int) '#', "hi!", (java.io.Serializable) 10.0d, headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, (long) (byte) -1, (long) (-1), timestampType4, 52L, (int) (byte) -1, 0, "hi!", (java.io.Serializable) "hi!");
        org.apache.kafka.common.header.Headers headers83 = strConsumerRecord82.headers();
        java.lang.String str84 = strConsumerRecord82.key();
        long long85 = strConsumerRecord82.timestamp();
        java.util.Optional<java.lang.Integer> intOptional86 = strConsumerRecord82.leaderEpoch();
        long long87 = strConsumerRecord82.timestamp();
        long long88 = strConsumerRecord82.checksum();
        java.lang.String str89 = strConsumerRecord82.key();
        java.io.Serializable serializable90 = strConsumerRecord82.value();
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 52L + "'", long88 == 52L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertEquals("'" + serializable90 + "' != '" + "hi!" + "'", serializable90, "hi!");
    }

    @Test
    public void test07300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07300");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        int int17 = strConsumerRecord13.serializedValueSize();
        java.lang.String str18 = strConsumerRecord13.key();
        java.io.Serializable serializable19 = strConsumerRecord13.value();
        java.lang.String str20 = strConsumerRecord13.key();
        org.apache.kafka.common.header.Headers headers21 = strConsumerRecord13.headers();
        int int22 = strConsumerRecord13.serializedValueSize();
        long long23 = strConsumerRecord13.checksum();
        int int24 = strConsumerRecord13.partition();
        org.apache.kafka.common.header.Headers headers25 = strConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord40.timestampType();
        int int42 = strConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord40.timestampType();
        java.lang.String str44 = strConsumerRecord40.toString();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord40.leaderEpoch();
        long long46 = strConsumerRecord40.offset();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord57.timestampType();
        int int59 = strConsumerRecord57.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord57.timestampType();
        java.lang.String str61 = strConsumerRecord57.toString();
        java.util.Optional<java.lang.Integer> intOptional62 = strConsumerRecord57.leaderEpoch();
        long long63 = strConsumerRecord57.offset();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord57.timestampType();
        int int65 = strConsumerRecord57.partition();
        org.apache.kafka.common.header.Headers headers66 = strConsumerRecord57.headers();
        java.lang.Class<?> wildcardClass67 = strConsumerRecord57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)", 100, (long) '#', (long) ' ', timestampType47, (long) (byte) 0, (int) (short) 1, 32, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) wildcardClass67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) ' ', (long) (byte) 1, (long) 'a', timestampType26, 1L, 0, (int) (byte) 10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (java.io.Serializable) '#');
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = -1)", (int) (short) -1, 10L, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str44, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 52L + "'", long46 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test07301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07301");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        int int10 = strConsumerRecord8.partition();
        long long11 = strConsumerRecord8.offset();
        long long12 = strConsumerRecord8.offset();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord8.timestampType();
        java.lang.String str14 = strConsumerRecord8.toString();
        int int15 = strConsumerRecord8.serializedValueSize();
        java.io.Serializable serializable16 = strConsumerRecord8.value();
        java.io.Serializable serializable17 = strConsumerRecord8.value();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        int int26 = strConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord24.timestampType();
        java.lang.String str28 = strConsumerRecord24.toString();
        java.util.Optional<java.lang.Integer> intOptional29 = strConsumerRecord24.leaderEpoch();
        long long30 = strConsumerRecord24.offset();
        java.util.Optional<java.lang.Integer> intOptional31 = strConsumerRecord24.leaderEpoch();
        org.apache.kafka.common.header.Headers headers32 = strConsumerRecord24.headers();
        long long33 = strConsumerRecord24.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> timestampTypeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 97, 35L, timestampType18, strConsumerRecord24);
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord24.headers();
        int int36 = strConsumerRecord24.partition();
        int int37 = strConsumerRecord24.serializedKeySize();
        int int38 = strConsumerRecord24.serializedValueSize();
        int int39 = strConsumerRecord24.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test07302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07302");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int42 = strConsumerRecord41.serializedValueSize();
        int int43 = strConsumerRecord41.partition();
        long long44 = strConsumerRecord41.offset();
        java.lang.String str45 = strConsumerRecord41.key();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str57 = strConsumerRecord56.topic();
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int70 = strConsumerRecord69.serializedValueSize();
        int int71 = strConsumerRecord69.partition();
        org.apache.kafka.common.header.Headers headers72 = strConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int79 = strConsumerRecord78.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional80 = strConsumerRecord78.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType58, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers72, intOptional80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 97, (long) 1, (long) (short) 0, timestampType18, (java.lang.Long) 100L, (-1), 0, "hi!", (java.io.Serializable) timestampType46, headers72);
        int int83 = strConsumerRecord82.serializedKeySize();
        java.lang.String str84 = strConsumerRecord82.key();
        java.lang.String str85 = strConsumerRecord82.key();
        long long86 = strConsumerRecord82.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
    }

    @Test
    public void test07303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07303");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.toString();
        java.lang.String str11 = strConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        int int14 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test07304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07304");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        long long7 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.toString();
        int int11 = strConsumerRecord5.serializedValueSize();
        int int12 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07305");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        long long10 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.lang.String str15 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test07306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07306");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType10);
        java.lang.String str12 = strConsumerRecord11.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord11.timestampType();
        java.lang.String str14 = strConsumerRecord11.toString();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord11.headers();
        int int16 = strConsumerRecord11.serializedValueSize();
        java.lang.String str17 = strConsumerRecord11.topic();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str14, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07307");
        java.lang.Enum<org.apache.kafka.common.record.TimestampType> timestampTypeEnum4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> strComparableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) 'a', (-1L), (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 32, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value =  ), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", timestampTypeEnum4);
    }

    @Test
    public void test07308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07308");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        java.lang.String str14 = strConsumerRecord5.topic();
        long long15 = strConsumerRecord5.timestamp();
        long long16 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        java.lang.String str18 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test07309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07309");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        long long9 = strConsumerRecord5.checksum();
        java.lang.String str10 = strConsumerRecord5.toString();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07310");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.lang.String str15 = strConsumerRecord5.key();
        java.lang.String str16 = strConsumerRecord5.key();
        int int17 = strConsumerRecord5.serializedValueSize();
        int int18 = strConsumerRecord5.partition();
        long long19 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07311");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.checksum();
        java.lang.String str9 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test07312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07312");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) ' ', 52L, "", (java.io.Serializable) (short) -1);
        java.lang.String str40 = strConsumerRecord39.toString();
        long long41 = strConsumerRecord39.offset();
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord39.timestampType();
        java.lang.String str43 = strConsumerRecord39.key();
        long long44 = strConsumerRecord39.checksum();
        int int45 = strConsumerRecord39.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str40, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test07313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07313");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int23 = strConsumerRecord22.serializedValueSize();
        int int24 = strConsumerRecord22.partition();
        long long25 = strConsumerRecord22.offset();
        long long26 = strConsumerRecord22.offset();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord22.timestampType();
        java.lang.String str28 = strConsumerRecord22.toString();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord22.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        int int37 = strConsumerRecord35.partition();
        long long38 = strConsumerRecord35.offset();
        long long39 = strConsumerRecord35.offset();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord35.headers();
        long long41 = strConsumerRecord35.checksum();
        int int42 = strConsumerRecord35.serializedKeySize();
        int int43 = strConsumerRecord35.serializedValueSize();
        long long44 = strConsumerRecord35.offset();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 0, 35L, 100L, timestampType11, (java.lang.Long) 52L, 10, (int) (byte) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable16, headers29, intOptional45);
        java.util.Optional<java.lang.Integer> intOptional47 = strConsumerRecord46.leaderEpoch();
        int int48 = strConsumerRecord46.partition();
        int int49 = strConsumerRecord46.serializedKeySize();
        long long50 = strConsumerRecord46.offset();
        java.lang.String str51 = strConsumerRecord46.toString();
        java.lang.String str52 = strConsumerRecord46.toString();
        java.io.Serializable serializable53 = strConsumerRecord46.value();
        java.lang.Class<?> wildcardClass54 = strConsumerRecord46.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 35L + "'", long50 == 35L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)" + "'", str51, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)" + "'", str52, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)");
        org.junit.Assert.assertNull(serializable53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test07314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07314");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        int int10 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        long long12 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test07315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07315");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        java.lang.String str28 = strConsumerRecord16.topic();
        long long29 = strConsumerRecord16.offset();
        java.lang.String str30 = strConsumerRecord16.topic();
        java.lang.String str31 = strConsumerRecord16.topic();
        long long32 = strConsumerRecord16.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long44 = strConsumerRecord43.timestamp();
        long long45 = strConsumerRecord43.offset();
        org.apache.kafka.common.header.Headers headers46 = strConsumerRecord43.headers();
        long long47 = strConsumerRecord43.checksum();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord43.timestampType();
        int int49 = strConsumerRecord43.serializedKeySize();
        java.io.Serializable serializable50 = strConsumerRecord43.value();
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 1)", (int) (byte) 1, (long) (short) 100, (long) ' ', timestampType33, (long) (byte) 0, (int) (short) 0, (int) (byte) 10, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = NoTimestampType)", (java.io.Serializable) timestampType51);
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord62.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord62.timestampType();
        java.lang.String str65 = strConsumerRecord62.toString();
        int int66 = strConsumerRecord62.partition();
        java.lang.String str67 = strConsumerRecord62.key();
        int int68 = strConsumerRecord62.partition();
        long long69 = strConsumerRecord62.checksum();
        int int70 = strConsumerRecord62.serializedValueSize();
        java.lang.Class<?> wildcardClass71 = strConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration> strComparableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (int) (short) 100, 52L, (long) (byte) 10, timestampType51, (long) 35, (int) (byte) 1, (int) (short) 100, strComparable56, (java.lang.reflect.GenericDeclaration) wildcardClass71);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 10 + "'", serializable50, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str65, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test07316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07316");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        int int9 = strConsumerRecord5.serializedValueSize();
        int int10 = strConsumerRecord5.serializedKeySize();
        int int11 = strConsumerRecord5.serializedKeySize();
        int int12 = strConsumerRecord5.partition();
        java.lang.String str13 = strConsumerRecord5.key();
        long long14 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test07317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07317");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord22.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord22.timestampType();
        java.lang.String str25 = strConsumerRecord22.toString();
        int int26 = strConsumerRecord22.partition();
        java.lang.String str27 = strConsumerRecord22.key();
        java.lang.Class<?> wildcardClass28 = strConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 52, 52L, (long) 0, timestampType12, 100L, 100, (int) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) wildcardClass28);
        long long30 = strConsumerRecord29.offset();
        int int31 = strConsumerRecord29.serializedKeySize();
        int int32 = strConsumerRecord29.serializedKeySize();
        long long33 = strConsumerRecord29.offset();
        java.lang.String str34 = strConsumerRecord29.topic();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str25, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str34, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07318");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        int int15 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        java.lang.String str17 = strConsumerRecord5.toString();
        int int18 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable19 = strConsumerRecord5.value();
        java.io.Serializable serializable20 = strConsumerRecord5.value();
        long long21 = strConsumerRecord5.checksum();
        long long22 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 10 + "'", serializable20, (short) 10);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
    }

    @Test
    public void test07319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07319");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        java.lang.String str17 = strConsumerRecord5.topic();
        java.lang.String str18 = strConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers19 = strConsumerRecord5.headers();
        int int20 = strConsumerRecord5.serializedValueSize();
        java.lang.String str21 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers22 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headers22);
    }

    @Test
    public void test07320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07320");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.partition();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
    }

    @Test
    public void test07321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07321");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long18 = strConsumerRecord17.timestamp();
        int int19 = strConsumerRecord17.partition();
        java.lang.String str20 = strConsumerRecord17.topic();
        long long21 = strConsumerRecord17.offset();
        java.io.Serializable serializable22 = strConsumerRecord17.value();
        java.lang.String str23 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (short) 100, (long) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) timestampType24);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        int int37 = strConsumerRecord35.partition();
        long long38 = strConsumerRecord35.offset();
        long long39 = strConsumerRecord35.timestamp();
        int int40 = strConsumerRecord35.serializedKeySize();
        java.lang.String str41 = strConsumerRecord35.key();
        org.apache.kafka.common.header.Headers headers42 = strConsumerRecord35.headers();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord35.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (-1), 100L, (long) 10, timestampType24, (long) (short) 0, (int) '#', (int) ' ', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (java.io.Serializable) timestampType43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long54 = strConsumerRecord53.timestamp();
        long long55 = strConsumerRecord53.checksum();
        java.util.Optional<java.lang.Integer> intOptional56 = strConsumerRecord53.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord53.timestampType();
        java.lang.String str58 = strConsumerRecord53.topic();
        org.apache.kafka.common.header.Headers headers59 = strConsumerRecord53.headers();
        int int60 = strConsumerRecord53.serializedValueSize();
        int int61 = strConsumerRecord53.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType72 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType72);
        java.lang.String str74 = strConsumerRecord73.topic();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord73.timestampType();
        java.lang.String str76 = strConsumerRecord73.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 100)", (int) (byte) -1, (long) '#', (long) 0, timestampType24, 97L, (int) (short) 100, 10, (java.lang.Object) strConsumerRecord53, strConsumerRecord73);
        int int78 = strConsumerRecord53.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 10 + "'", serializable22, (short) 10);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str74, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test07322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07322");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedValueSize();
        java.lang.String str14 = strConsumerRecord5.toString();
        long long15 = strConsumerRecord5.offset();
        java.lang.String str16 = strConsumerRecord5.key();
        java.lang.String str17 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test07323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07323");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        java.lang.String str28 = strConsumerRecord16.topic();
        java.lang.String str29 = strConsumerRecord16.key();
        int int30 = strConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 1, (long) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100.0)", (java.io.Serializable) timestampType31);
        java.lang.Class<?> wildcardClass33 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", 52, (long) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass33);
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord34.timestampType();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07324");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers7 = strConsumerRecord5.headers();
        int int8 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.timestamp();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test07325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07325");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        long long12 = strConsumerRecord5.checksum();
        long long13 = strConsumerRecord5.offset();
        long long14 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        java.lang.String str16 = strConsumerRecord5.topic();
        long long17 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
    }

    @Test
    public void test07326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07326");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        long long13 = strConsumerRecord5.checksum();
        java.lang.String str14 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07327");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        long long56 = strConsumerRecord53.timestamp();
        long long57 = strConsumerRecord53.timestamp();
        int int58 = strConsumerRecord53.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
    }

    @Test
    public void test07328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07328");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long13 = strConsumerRecord12.timestamp();
        int int14 = strConsumerRecord12.partition();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord12.timestampType();
        int int16 = strConsumerRecord12.serializedKeySize();
        long long17 = strConsumerRecord12.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord12.timestampType();
        java.lang.Class<?> wildcardClass19 = timestampType18.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long26 = strConsumerRecord25.timestamp();
        int int27 = strConsumerRecord25.partition();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord25.timestampType();
        long long29 = strConsumerRecord25.checksum();
        java.io.Serializable serializable30 = strConsumerRecord25.value();
        java.lang.String str31 = strConsumerRecord25.toString();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.record.TimestampType> annotatedElementConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.record.TimestampType>("hi!", 35, 0L, (java.lang.reflect.AnnotatedElement) wildcardClass19, timestampType33);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (int) (short) 10, 0L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.io.Serializable) 0L);
        java.lang.String str36 = strConsumerRecord35.toString();
        int int37 = strConsumerRecord35.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (short) 10 + "'", serializable30, (short) 10);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100), value = 0)" + "'", str36, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100), value = 0)");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test07329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07329");
        java.io.Serializable serializable4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)", (int) (byte) 10, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", serializable4);
        java.lang.String str6 = strConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)" + "'", str6, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)");
    }

    @Test
    public void test07330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07330");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.io.Serializable serializable16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int23 = strConsumerRecord22.serializedValueSize();
        int int24 = strConsumerRecord22.partition();
        long long25 = strConsumerRecord22.offset();
        long long26 = strConsumerRecord22.offset();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord22.timestampType();
        java.lang.String str28 = strConsumerRecord22.toString();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord22.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        int int37 = strConsumerRecord35.partition();
        long long38 = strConsumerRecord35.offset();
        long long39 = strConsumerRecord35.offset();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord35.headers();
        long long41 = strConsumerRecord35.checksum();
        int int42 = strConsumerRecord35.serializedKeySize();
        int int43 = strConsumerRecord35.serializedValueSize();
        long long44 = strConsumerRecord35.offset();
        java.util.Optional<java.lang.Integer> intOptional45 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 0, 35L, 100L, timestampType11, (java.lang.Long) 52L, 10, (int) (byte) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable16, headers29, intOptional45);
        java.util.Optional<java.lang.Integer> intOptional47 = strConsumerRecord46.leaderEpoch();
        java.io.Serializable serializable48 = strConsumerRecord46.value();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNull(serializable48);
    }

    @Test
    public void test07331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07331");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.timestamp();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.checksum();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test07332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07332");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        int int15 = strConsumerRecord13.partition();
        long long16 = strConsumerRecord13.offset();
        long long17 = strConsumerRecord13.offset();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        java.io.Serializable serializable19 = strConsumerRecord13.value();
        java.lang.Class<?> wildcardClass20 = strConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) '4', (long) 'a', "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass20);
        int int22 = strConsumerRecord21.partition();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int34 = strConsumerRecord33.serializedValueSize();
        int int35 = strConsumerRecord33.partition();
        long long36 = strConsumerRecord33.offset();
        long long37 = strConsumerRecord33.offset();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord33.timestampType();
        java.lang.String str39 = strConsumerRecord33.toString();
        int int40 = strConsumerRecord33.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord33.leaderEpoch();
        java.lang.String str42 = strConsumerRecord33.toString();
        long long43 = strConsumerRecord33.checksum();
        long long44 = strConsumerRecord33.timestamp();
        long long45 = strConsumerRecord33.checksum();
        int int46 = strConsumerRecord33.partition();
        int int47 = strConsumerRecord33.serializedKeySize();
        int int48 = strConsumerRecord33.serializedKeySize();
        java.lang.Class<?> wildcardClass49 = strConsumerRecord33.getClass();
        org.apache.kafka.common.header.Headers headers50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int57 = strConsumerRecord56.serializedValueSize();
        int int58 = strConsumerRecord56.partition();
        long long59 = strConsumerRecord56.offset();
        long long60 = strConsumerRecord56.timestamp();
        int int61 = strConsumerRecord56.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional62 = strConsumerRecord56.leaderEpoch();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = 52, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = )", (int) (byte) 1, 35L, 0L, timestampType23, (java.lang.Long) 1L, 1, (int) ' ', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass49, headers50, intOptional62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str39, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str42, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(intOptional62);
    }

    @Test
    public void test07333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07333");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long26 = strConsumerRecord25.timestamp();
        int int27 = strConsumerRecord25.partition();
        java.lang.String str28 = strConsumerRecord25.topic();
        long long29 = strConsumerRecord25.offset();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int37 = strConsumerRecord36.serializedValueSize();
        int int38 = strConsumerRecord36.partition();
        org.apache.kafka.common.header.Headers headers39 = strConsumerRecord36.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str59 = strConsumerRecord58.topic();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int72 = strConsumerRecord71.serializedValueSize();
        int int73 = strConsumerRecord71.partition();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int81 = strConsumerRecord80.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional82 = strConsumerRecord80.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType60, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers74, intOptional82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers> annotatedElementConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers>("hi!", (int) (short) 1, 1L, 100L, timestampType16, (java.lang.Long) 1L, 100, (int) (byte) 10, (java.lang.reflect.AnnotatedElement) wildcardClass30, headers39, headers48, intOptional82);
        java.io.Serializable serializable89 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (short) -1, (long) '#', (long) (-1), timestampType16, 1L, 32, 97, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", serializable89);
        long long91 = strConsumerRecord90.offset();
        long long92 = strConsumerRecord90.checksum();
        long long93 = strConsumerRecord90.offset();
        org.apache.kafka.common.record.TimestampType timestampType94 = strConsumerRecord90.timestampType();
        long long95 = strConsumerRecord90.offset();
        org.apache.kafka.common.record.TimestampType timestampType96 = strConsumerRecord90.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 35L + "'", long91 == 35L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 35L + "'", long93 == 35L);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 35L + "'", long95 == 35L);
        org.junit.Assert.assertTrue("'" + timestampType96 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType96.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07334");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.toString();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord9.leaderEpoch();
        long long15 = strConsumerRecord9.offset();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord9.headers();
        java.lang.String str18 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int29 = strConsumerRecord28.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord28.leaderEpoch();
        java.lang.String str31 = strConsumerRecord28.key();
        long long32 = strConsumerRecord28.offset();
        java.lang.String str33 = strConsumerRecord28.toString();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord28.timestampType();
        java.lang.String str35 = strConsumerRecord28.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int42 = strConsumerRecord41.serializedValueSize();
        int int43 = strConsumerRecord41.partition();
        long long44 = strConsumerRecord41.offset();
        java.lang.String str45 = strConsumerRecord41.key();
        long long46 = strConsumerRecord41.checksum();
        long long47 = strConsumerRecord41.timestamp();
        java.lang.String str48 = strConsumerRecord41.toString();
        org.apache.kafka.common.header.Headers headers49 = strConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long56 = strConsumerRecord55.timestamp();
        long long57 = strConsumerRecord55.checksum();
        long long58 = strConsumerRecord55.timestamp();
        java.lang.String str59 = strConsumerRecord55.topic();
        long long60 = strConsumerRecord55.timestamp();
        java.io.Serializable serializable61 = strConsumerRecord55.value();
        org.apache.kafka.common.header.Headers headers62 = strConsumerRecord55.headers();
        long long63 = strConsumerRecord55.checksum();
        org.apache.kafka.common.header.Headers headers64 = strConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long71 = strConsumerRecord70.timestamp();
        long long72 = strConsumerRecord70.checksum();
        long long73 = strConsumerRecord70.timestamp();
        java.util.Optional<java.lang.Integer> intOptional74 = strConsumerRecord70.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strConsumerRecordConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 0, (long) (byte) 0, (long) (short) 10, timestampType19, (java.lang.Long) 35L, (int) (byte) 1, 0, strConsumerRecord28, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers49, headers64, intOptional74);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str33, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str35, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str48, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 10 + "'", serializable61, (short) 10);
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNotNull(intOptional74);
    }

    @Test
    public void test07335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07335");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord16.headers();
        org.apache.kafka.common.header.Headers headers18 = strConsumerRecord16.headers();
        int int19 = strConsumerRecord16.partition();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord16.leaderEpoch();
        java.io.Serializable serializable21 = strConsumerRecord16.value();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord32.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord32.timestampType();
        int int37 = strConsumerRecord32.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord51.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord51.timestampType();
        java.lang.String str54 = strConsumerRecord51.toString();
        int int55 = strConsumerRecord51.partition();
        java.lang.String str56 = strConsumerRecord51.key();
        java.lang.Class<?> wildcardClass57 = strConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (int) 'a', 35L, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) wildcardClass57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        int int70 = strConsumerRecord68.partition();
        long long71 = strConsumerRecord68.offset();
        long long72 = strConsumerRecord68.offset();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord68.timestampType();
        java.io.Serializable serializable74 = strConsumerRecord68.value();
        java.lang.Class<?> wildcardClass75 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) 'a', (long) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass75);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int83 = strConsumerRecord82.serializedValueSize();
        int int84 = strConsumerRecord82.partition();
        long long85 = strConsumerRecord82.offset();
        long long86 = strConsumerRecord82.offset();
        org.apache.kafka.common.record.TimestampType timestampType87 = strConsumerRecord82.timestampType();
        java.lang.String str88 = strConsumerRecord82.toString();
        org.apache.kafka.common.header.Headers headers89 = strConsumerRecord82.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.io.Serializable> typeConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (int) '#', (long) 0, (long) (byte) 0, timestampType38, (java.lang.Long) 0L, (int) (byte) -1, (int) (short) -1, (java.lang.reflect.Type) wildcardClass57, (java.io.Serializable) wildcardClass75, headers89);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.Type> objConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 32, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 52, (long) 52, (java.lang.Object) timestampType22, (java.lang.reflect.Type) wildcardClass75);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.io.Serializable> charSequenceConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 52, 0L, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = -1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10.0)", (java.io.Serializable) wildcardClass75);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", (int) (short) -1, (long) 32, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = -1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10.0)");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 0 + "'", serializable21, (short) 0);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str54, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 52L + "'", long72 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + (short) 10 + "'", serializable74, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 52L + "'", long85 == 52L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 52L + "'", long86 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType87 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType87.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str88, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers89);
    }

    @Test
    public void test07336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07336");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.Class<?> wildcardClass30 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType18, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str42 = strConsumerRecord41.topic();
        java.lang.Class<?> wildcardClass43 = strConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType18, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass43);
        java.io.Serializable serializable45 = strConsumerRecord44.value();
        java.lang.String str46 = strConsumerRecord44.topic();
        long long47 = strConsumerRecord44.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(serializable45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test07337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07337");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int18 = strConsumerRecord17.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord17.leaderEpoch();
        java.lang.String str20 = strConsumerRecord17.key();
        long long21 = strConsumerRecord17.offset();
        java.lang.String str22 = strConsumerRecord17.toString();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (int) (short) 10, (long) '#', (long) 97, timestampType23, (long) 32, (int) (short) -1, (int) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord39.headers();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord39.headers();
        int int42 = strConsumerRecord39.serializedKeySize();
        int int43 = strConsumerRecord39.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 97, (long) 10, timestampType23, (long) (short) 0, (int) '#', (int) ' ', "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int55 = strConsumerRecord54.serializedValueSize();
        int int56 = strConsumerRecord54.partition();
        long long57 = strConsumerRecord54.offset();
        java.lang.String str58 = strConsumerRecord54.key();
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord54.timestampType();
        java.lang.String str60 = strConsumerRecord54.toString();
        java.lang.String str61 = strConsumerRecord54.toString();
        int int62 = strConsumerRecord54.partition();
        java.io.Serializable serializable67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", 1, (long) (byte) 10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", serializable67);
        java.lang.Class<?> wildcardClass69 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.AnnotatedElement> objConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", 97, (long) (byte) 1, (long) (short) 1, timestampType44, (long) 0, 10, 0, (java.lang.Object) strConsumerRecord54, (java.lang.reflect.AnnotatedElement) wildcardClass69);
        long long71 = strConsumerRecord54.checksum();
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str22, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str60, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
    }

    @Test
    public void test07338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07338");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        java.lang.String str7 = strConsumerRecord5.topic();
        long long8 = strConsumerRecord5.checksum();
        long long9 = strConsumerRecord5.offset();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.timestamp();
        int int12 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07339");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        long long10 = strConsumerRecord5.timestamp();
        int int11 = strConsumerRecord5.serializedValueSize();
        int int12 = strConsumerRecord5.partition();
        long long13 = strConsumerRecord5.timestamp();
        long long14 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test07340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07340");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str48 = strConsumerRecord47.topic();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord39, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType49, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType66 = strConsumerRecord65.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType67 = strConsumerRecord65.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord65.timestampType();
        java.lang.Object obj69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("", 0, (long) (byte) 100, (long) (byte) -1, timestampType49, (long) (byte) 100, (int) (short) 10, (int) (short) -1, timestampType68, obj69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long77 = strConsumerRecord76.timestamp();
        long long78 = strConsumerRecord76.checksum();
        long long79 = strConsumerRecord76.timestamp();
        org.apache.kafka.common.header.Headers headers80 = strConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int87 = strConsumerRecord86.serializedValueSize();
        int int88 = strConsumerRecord86.partition();
        int int89 = strConsumerRecord86.partition();
        int int90 = strConsumerRecord86.partition();
        java.util.Optional<java.lang.Integer> intOptional91 = strConsumerRecord86.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 0, 10L, 52L, timestampType18, (java.lang.Long) 100L, (int) (short) 100, 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) "", headers80, intOptional91);
        java.lang.Class<?> wildcardClass93 = headers80.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (-1), (long) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 97, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) wildcardClass93);
        int int95 = strConsumerRecord94.partition();
        long long96 = strConsumerRecord94.checksum();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-1L) + "'", long96 == (-1L));
    }

    @Test
    public void test07341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07341");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.partition();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.offset();
        int int13 = strConsumerRecord5.partition();
        int int14 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test07342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07342");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long26 = strConsumerRecord25.timestamp();
        int int27 = strConsumerRecord25.partition();
        java.lang.String str28 = strConsumerRecord25.topic();
        java.lang.Class<?> wildcardClass29 = strConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str48 = strConsumerRecord47.topic();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord39, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType49);
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord39.headers();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (short) 100, (long) 'a', (long) ' ', timestampType16, (java.lang.Long) 0L, (int) (byte) 100, (-1), (java.lang.reflect.GenericDeclaration) wildcardClass29, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", headers52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 100, (long) (byte) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) (short) 100);
        int int55 = strConsumerRecord54.serializedValueSize();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord54.headers();
        java.lang.String str57 = strConsumerRecord54.key();
        java.io.Serializable serializable58 = strConsumerRecord54.value();
        long long59 = strConsumerRecord54.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)" + "'", str57, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        org.junit.Assert.assertEquals("'" + serializable58 + "' != '" + (short) 100 + "'", serializable58, (short) 100);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
    }

    @Test
    public void test07343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07343");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.partition();
        int int13 = strConsumerRecord5.serializedKeySize();
        long long14 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        long long17 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test07344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07344");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        int int10 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.lang.String str13 = strConsumerRecord5.key();
        java.lang.String str14 = strConsumerRecord5.topic();
        int int15 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test07345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07345");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        java.lang.String str8 = strConsumerRecord5.key();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        long long10 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        long long13 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test07346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07346");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        int int13 = strConsumerRecord9.serializedValueSize();
        java.lang.String str14 = strConsumerRecord9.key();
        java.io.Serializable serializable15 = strConsumerRecord9.value();
        java.lang.String str16 = strConsumerRecord9.key();
        java.lang.String str17 = strConsumerRecord9.toString();
        java.io.Serializable serializable18 = strConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int29 = strConsumerRecord28.serializedValueSize();
        long long30 = strConsumerRecord28.timestamp();
        org.apache.kafka.common.header.Headers headers31 = strConsumerRecord28.headers();
        int int32 = strConsumerRecord28.serializedValueSize();
        java.lang.String str33 = strConsumerRecord28.toString();
        java.lang.Class<?> wildcardClass34 = strConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long41 = strConsumerRecord40.timestamp();
        long long42 = strConsumerRecord40.offset();
        org.apache.kafka.common.header.Headers headers43 = strConsumerRecord40.headers();
        long long44 = strConsumerRecord40.checksum();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord40.timestampType();
        int int46 = strConsumerRecord40.serializedKeySize();
        java.io.Serializable serializable47 = strConsumerRecord40.value();
        int int48 = strConsumerRecord40.serializedValueSize();
        long long49 = strConsumerRecord40.offset();
        int int50 = strConsumerRecord40.partition();
        org.apache.kafka.common.header.Headers headers51 = strConsumerRecord40.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long58 = strConsumerRecord57.timestamp();
        int int59 = strConsumerRecord57.partition();
        java.io.Serializable serializable60 = strConsumerRecord57.value();
        org.apache.kafka.common.record.TimestampType timestampType61 = strConsumerRecord57.timestampType();
        long long62 = strConsumerRecord57.offset();
        long long63 = strConsumerRecord57.checksum();
        java.lang.String str64 = strConsumerRecord57.topic();
        org.apache.kafka.common.header.Headers headers65 = strConsumerRecord57.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long72 = strConsumerRecord71.timestamp();
        int int73 = strConsumerRecord71.partition();
        java.io.Serializable serializable74 = strConsumerRecord71.value();
        java.lang.String str75 = strConsumerRecord71.topic();
        java.io.Serializable serializable76 = strConsumerRecord71.value();
        java.util.Optional<java.lang.Integer> intOptional77 = strConsumerRecord71.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord71.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>> typeConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", 35, (long) (short) 100, (long) 52, timestampType19, (java.lang.Long) 32L, (int) 'a', 100, (java.lang.reflect.Type) wildcardClass34, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers51, headers65, intOptional78);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str33, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (short) 10 + "'", serializable47, (short) 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (short) 10 + "'", serializable60, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + (short) 10 + "'", serializable74, (short) 10);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertEquals("'" + serializable76 + "' != '" + (short) 10 + "'", serializable76, (short) 10);
        org.junit.Assert.assertNotNull(intOptional77);
        org.junit.Assert.assertNotNull(intOptional78);
    }

    @Test
    public void test07347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07347");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType12);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        long long16 = strConsumerRecord13.checksum();
        java.lang.String str17 = strConsumerRecord13.toString();
        java.lang.String str18 = strConsumerRecord13.topic();
        org.apache.kafka.common.header.Headers headers19 = strConsumerRecord13.headers();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), value = NoTimestampType)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(headers19);
    }

    @Test
    public void test07348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07348");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        int int19 = strConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", 1, 52L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType20);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", 35, (long) 'a', 100L, timestampType22, (long) '#', (int) '4', (int) (short) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 10L);
        java.lang.String str29 = strConsumerRecord28.topic();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", 1, 97L, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 100.0)", (java.io.Serializable) timestampType30);
        java.io.Serializable serializable32 = strConsumerRecord31.value();
        java.util.Optional<java.lang.Integer> intOptional33 = strConsumerRecord31.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)" + "'", str29, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)");
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional33);
    }

    @Test
    public void test07349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07349");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        int int10 = strConsumerRecord5.serializedValueSize();
        int int11 = strConsumerRecord5.serializedValueSize();
        java.lang.String str12 = strConsumerRecord5.key();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test07350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07350");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.key();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers15 = strConsumerRecord5.headers();
        java.lang.String str16 = strConsumerRecord5.key();
        int int17 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test07351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07351");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        long long11 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        int int16 = strConsumerRecord5.serializedValueSize();
        int int17 = strConsumerRecord5.serializedValueSize();
        long long18 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test07352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07352");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        long long15 = strConsumerRecord13.checksum();
        long long16 = strConsumerRecord13.timestamp();
        java.lang.String str17 = strConsumerRecord13.topic();
        long long18 = strConsumerRecord13.timestamp();
        java.io.Serializable serializable19 = strConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        java.util.Optional<java.lang.Integer> intOptional21 = strConsumerRecord13.leaderEpoch();
        java.lang.reflect.Type type22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.Type> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (int) (byte) 100, (long) (byte) 100, (long) '#', timestampType4, (long) (-1), (int) (byte) 10, (int) '4', (java.lang.Object) intOptional21, type22);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 10 + "'", serializable19, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional21);
    }

    @Test
    public void test07353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07353");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.toString();
        long long18 = strConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord13.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord13.leaderEpoch();
        java.lang.Class<?> wildcardClass21 = strConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", 10, (long) '4', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", (java.io.Serializable) wildcardClass21);
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord22.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord22.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord42.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord42.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord42.timestampType();
        java.lang.String str46 = strConsumerRecord42.key();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord57.timestampType();
        java.lang.Class<?> wildcardClass59 = strConsumerRecord57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType47, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str71 = strConsumerRecord70.topic();
        java.lang.Class<?> wildcardClass72 = strConsumerRecord70.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType47, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass72);
        java.io.Serializable serializable74 = strConsumerRecord73.value();
        long long75 = strConsumerRecord73.timestamp();
        java.lang.String str76 = strConsumerRecord73.key();
        org.apache.kafka.common.record.TimestampType timestampType77 = strConsumerRecord73.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), value = NoTimestampType)", 10, (long) 52, (long) 'a', timestampType24, 1L, (int) '#', (int) 'a', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = 35, serialized key size = 0, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 1)", (java.io.Serializable) timestampType77);
        long long79 = strConsumerRecord78.checksum();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(serializable74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType77 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType77.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
    }

    @Test
    public void test07354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07354");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.io.Serializable serializable9 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (byte) 100, (long) (short) 100, 100L, timestampType4, (-1L), 1, 10, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", serializable9);
        java.lang.Class<?> wildcardClass11 = strConsumerRecord10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test07355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07355");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedValueSize();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        java.lang.String str14 = strConsumerRecord5.key();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        long long16 = strConsumerRecord5.checksum();
        java.io.Serializable serializable17 = strConsumerRecord5.value();
        long long18 = strConsumerRecord5.offset();
        java.lang.String str19 = strConsumerRecord5.toString();
        java.lang.Class<?> wildcardClass20 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test07356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07356");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        java.io.Serializable serializable20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        long long29 = strConsumerRecord26.offset();
        long long30 = strConsumerRecord26.offset();
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord26.timestampType();
        java.lang.String str32 = strConsumerRecord26.toString();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        int int41 = strConsumerRecord39.partition();
        long long42 = strConsumerRecord39.offset();
        long long43 = strConsumerRecord39.offset();
        org.apache.kafka.common.header.Headers headers44 = strConsumerRecord39.headers();
        long long45 = strConsumerRecord39.checksum();
        int int46 = strConsumerRecord39.serializedKeySize();
        int int47 = strConsumerRecord39.serializedValueSize();
        long long48 = strConsumerRecord39.offset();
        java.util.Optional<java.lang.Integer> intOptional49 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 0, 35L, 100L, timestampType15, (java.lang.Long) 52L, 10, (int) (byte) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable20, headers33, intOptional49);
        java.util.Optional<java.lang.Integer> intOptional51 = strConsumerRecord50.leaderEpoch();
        int int52 = strConsumerRecord50.partition();
        int int53 = strConsumerRecord50.serializedKeySize();
        long long54 = strConsumerRecord50.offset();
        int int55 = strConsumerRecord50.serializedValueSize();
        int int56 = strConsumerRecord50.serializedKeySize();
        java.lang.Class<?> wildcardClass57 = strConsumerRecord50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (byte) 100, 35L, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (java.io.Serializable) wildcardClass57);
        java.lang.String str59 = strConsumerRecord58.key();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str32, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 35L + "'", long54 == 35L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)" + "'", str59, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)");
    }

    @Test
    public void test07357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07357");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test07358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07358");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        int int11 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test07359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07359");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        int int24 = strConsumerRecord8.serializedKeySize();
        java.lang.String str25 = strConsumerRecord8.topic();
        int int26 = strConsumerRecord8.serializedValueSize();
        java.lang.String str27 = strConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord8.timestampType();
        java.util.Optional<java.lang.Integer> intOptional29 = strConsumerRecord8.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord8.leaderEpoch();
        int int31 = strConsumerRecord8.partition();
        java.lang.String str32 = strConsumerRecord8.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str32, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07360");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (short) 100, (long) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) timestampType20);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord31.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord31.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord31.timestampType();
        java.lang.String str35 = strConsumerRecord31.key();
        java.util.Optional<java.lang.Integer> intOptional36 = strConsumerRecord31.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10)", (int) (byte) 0, (long) 1, (long) 0, timestampType20, 10L, (int) (short) 100, (int) (byte) 0, "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = -1)", (java.io.Serializable) timestampType37);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07361");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        int int57 = strConsumerRecord53.serializedValueSize();
        int int58 = strConsumerRecord53.serializedValueSize();
        long long59 = strConsumerRecord53.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord53.timestampType();
        int int61 = strConsumerRecord53.partition();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
    }

    @Test
    public void test07362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07362");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedValueSize();
        int int11 = strConsumerRecord5.serializedValueSize();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.lang.Class<?> wildcardClass13 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test07363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07363");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test07364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07364");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long18 = strConsumerRecord17.timestamp();
        int int19 = strConsumerRecord17.partition();
        java.lang.String str20 = strConsumerRecord17.topic();
        int int21 = strConsumerRecord17.serializedValueSize();
        int int22 = strConsumerRecord17.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long37 = strConsumerRecord36.timestamp();
        int int38 = strConsumerRecord36.partition();
        java.lang.String str39 = strConsumerRecord36.topic();
        int int40 = strConsumerRecord36.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int53 = strConsumerRecord52.serializedValueSize();
        long long54 = strConsumerRecord52.timestamp();
        org.apache.kafka.common.header.Headers headers55 = strConsumerRecord52.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType62 = strConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType64 = strConsumerRecord61.timestampType();
        java.lang.String str65 = strConsumerRecord61.key();
        long long66 = strConsumerRecord61.timestamp();
        long long67 = strConsumerRecord61.offset();
        java.lang.String str68 = strConsumerRecord61.toString();
        long long69 = strConsumerRecord61.checksum();
        java.io.Serializable serializable70 = strConsumerRecord61.value();
        int int71 = strConsumerRecord61.partition();
        java.util.Optional<java.lang.Integer> intOptional72 = strConsumerRecord61.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) (byte) 0, (long) '#', (long) ' ', timestampType41, (java.lang.Long) (-1L), (int) ' ', (int) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) 10, headers55, intOptional72);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int80 = strConsumerRecord79.serializedValueSize();
        int int81 = strConsumerRecord79.serializedValueSize();
        long long82 = strConsumerRecord79.offset();
        java.lang.String str83 = strConsumerRecord79.key();
        long long84 = strConsumerRecord79.timestamp();
        java.util.Optional<java.lang.Integer> intOptional85 = strConsumerRecord79.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.util.Optional<java.lang.Integer>> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 1, (long) 97, (long) ' ', timestampType23, (long) 97, (int) (byte) 10, (int) (short) 100, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers55, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> strConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (int) ' ', (long) '4', "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType23);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)", 32, (long) ' ', "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str68, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable70 + "' != '" + (short) 10 + "'", serializable70, (short) 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 52L + "'", long82 == 52L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertNotNull(intOptional85);
    }

    @Test
    public void test07365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07365");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        long long12 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.lang.String str14 = strConsumerRecord5.key();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test07366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07366");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        java.lang.String str12 = strConsumerRecord9.toString();
        int int13 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType35, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long51 = strConsumerRecord50.timestamp();
        int int52 = strConsumerRecord50.partition();
        java.io.Serializable serializable53 = strConsumerRecord50.value();
        java.lang.Class<?> wildcardClass54 = serializable53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long61 = strConsumerRecord60.timestamp();
        int int62 = strConsumerRecord60.partition();
        java.lang.String str63 = strConsumerRecord60.topic();
        long long64 = strConsumerRecord60.offset();
        java.lang.Class<?> wildcardClass65 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("hi!", (int) (short) 0, (long) (byte) 1, 10L, timestampType35, (long) (byte) 10, (int) 'a', (int) (short) -1, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.GenericDeclaration) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 0, 1L, timestampType14, (long) (short) -1, 0, (int) (short) -1, "hi!", (java.io.Serializable) timestampType35);
        long long68 = strConsumerRecord67.timestamp();
        long long69 = strConsumerRecord67.timestamp();
        java.io.Serializable serializable70 = strConsumerRecord67.value();
        int int71 = strConsumerRecord67.serializedKeySize();
        java.lang.String str72 = strConsumerRecord67.topic();
        java.lang.String str73 = strConsumerRecord67.topic();
        long long74 = strConsumerRecord67.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 10 + "'", serializable53, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertTrue("'" + serializable70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str72, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str73, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
    }

    @Test
    public void test07367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07367");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.timestamp();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        int int12 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test07368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07368");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        java.lang.String str13 = strConsumerRecord9.toString();
        long long14 = strConsumerRecord9.timestamp();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord9.headers();
        java.lang.String str17 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (short) 0, (long) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 1)", (java.io.Serializable) timestampType18);
        long long20 = strConsumerRecord19.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test07369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07369");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        int int18 = strConsumerRecord16.partition();
        long long19 = strConsumerRecord16.offset();
        long long20 = strConsumerRecord16.offset();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord16.timestampType();
        java.lang.String str22 = strConsumerRecord16.toString();
        int int23 = strConsumerRecord16.serializedValueSize();
        java.io.Serializable serializable24 = strConsumerRecord16.value();
        java.io.Serializable serializable25 = strConsumerRecord16.value();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord32.timestampType();
        int int34 = strConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        java.lang.String str36 = strConsumerRecord32.toString();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord32.leaderEpoch();
        long long38 = strConsumerRecord32.offset();
        java.util.Optional<java.lang.Integer> intOptional39 = strConsumerRecord32.leaderEpoch();
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord32.headers();
        long long41 = strConsumerRecord32.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> timestampTypeConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", 97, 35L, timestampType26, strConsumerRecord32);
        org.apache.kafka.common.header.Headers headers43 = strConsumerRecord32.headers();
        int int44 = strConsumerRecord32.partition();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int56 = strConsumerRecord55.serializedValueSize();
        int int57 = strConsumerRecord55.partition();
        long long58 = strConsumerRecord55.offset();
        long long59 = strConsumerRecord55.offset();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord55.timestampType();
        java.lang.String str61 = strConsumerRecord55.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = strConsumerRecord55.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 10, (long) 97, 35L, timestampType45, 0L, (int) 'a', 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.io.Serializable) timestampType62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType74 = strConsumerRecord73.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord73.timestampType();
        org.apache.kafka.common.header.Headers headers76 = strConsumerRecord73.headers();
        java.lang.String str77 = strConsumerRecord73.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord73.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)", 1, (long) (byte) 1, (long) (short) 1, timestampType45, (long) 52, (int) (short) 0, 97, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", (java.io.Serializable) timestampType78);
        java.lang.String str80 = strConsumerRecord79.key();
        java.lang.String str81 = strConsumerRecord79.topic();
        java.io.Serializable serializable82 = strConsumerRecord79.value();
        long long83 = strConsumerRecord79.checksum();
        org.apache.kafka.common.header.Headers headers84 = strConsumerRecord79.headers();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str22, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 10 + "'", serializable24, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 10 + "'", serializable25, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str36, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 52L + "'", long58 == 52L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)" + "'", str80, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)" + "'", str81, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null)");
        org.junit.Assert.assertTrue("'" + serializable82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 52L + "'", long83 == 52L);
        org.junit.Assert.assertNotNull(headers84);
    }

    @Test
    public void test07370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07370");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int18 = strConsumerRecord17.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord17.leaderEpoch();
        java.lang.String str20 = strConsumerRecord17.key();
        long long21 = strConsumerRecord17.offset();
        java.lang.String str22 = strConsumerRecord17.toString();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (int) (short) 10, (long) '#', (long) 97, timestampType23, (long) 32, (int) (short) -1, (int) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers40 = strConsumerRecord39.headers();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord39.headers();
        int int42 = strConsumerRecord39.serializedKeySize();
        int int43 = strConsumerRecord39.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 97, (long) 10, timestampType23, (long) (short) 0, (int) '#', (int) ' ', "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int55 = strConsumerRecord54.serializedValueSize();
        int int56 = strConsumerRecord54.partition();
        long long57 = strConsumerRecord54.offset();
        java.lang.String str58 = strConsumerRecord54.key();
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord54.timestampType();
        java.lang.String str60 = strConsumerRecord54.toString();
        java.lang.String str61 = strConsumerRecord54.toString();
        int int62 = strConsumerRecord54.partition();
        java.io.Serializable serializable67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", 1, (long) (byte) 10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", serializable67);
        java.lang.Class<?> wildcardClass69 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.AnnotatedElement> objConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", 97, (long) (byte) 1, (long) (short) 1, timestampType44, (long) 0, 10, 0, (java.lang.Object) strConsumerRecord54, (java.lang.reflect.AnnotatedElement) wildcardClass69);
        long long71 = strConsumerRecord54.timestamp();
        long long72 = strConsumerRecord54.checksum();
        int int73 = strConsumerRecord54.partition();
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str22, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str60, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
    }

    @Test
    public void test07371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07371");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.offset();
        long long14 = strConsumerRecord5.timestamp();
        int int15 = strConsumerRecord5.partition();
        int int16 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test07372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07372");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        java.lang.String str28 = strConsumerRecord16.topic();
        long long29 = strConsumerRecord16.offset();
        long long30 = strConsumerRecord16.offset();
        java.lang.String str31 = strConsumerRecord16.toString();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int44 = strConsumerRecord43.serializedValueSize();
        int int45 = strConsumerRecord43.partition();
        long long46 = strConsumerRecord43.offset();
        long long47 = strConsumerRecord43.offset();
        org.apache.kafka.common.header.Headers headers48 = strConsumerRecord43.headers();
        long long49 = strConsumerRecord43.checksum();
        int int50 = strConsumerRecord43.serializedKeySize();
        int int51 = strConsumerRecord43.serializedValueSize();
        long long52 = strConsumerRecord43.offset();
        java.util.Optional<java.lang.Integer> intOptional53 = strConsumerRecord43.leaderEpoch();
        int int54 = strConsumerRecord43.serializedKeySize();
        org.apache.kafka.common.header.Headers headers55 = strConsumerRecord43.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long62 = strConsumerRecord61.timestamp();
        int int63 = strConsumerRecord61.partition();
        java.lang.String str64 = strConsumerRecord61.topic();
        int int65 = strConsumerRecord61.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType66 = strConsumerRecord61.timestampType();
        java.lang.String str67 = strConsumerRecord61.topic();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord61.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.String> strComparableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.String>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, 97L, 10L, timestampType32, (java.lang.Long) (-1L), (int) (byte) 100, 52, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", headers55, intOptional68);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType80 = strConsumerRecord79.timestampType();
        long long81 = strConsumerRecord79.offset();
        org.apache.kafka.common.record.TimestampType timestampType82 = strConsumerRecord79.timestampType();
        java.lang.String str83 = strConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = strConsumerRecord79.headers();
        org.apache.kafka.common.header.Headers headers85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>> charSequenceConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 32, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 100, (long) 'a', (long) (short) 1, timestampType32, (java.lang.Long) 52L, (int) ' ', 35, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers84, headers85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 52L + "'", long46 == 52L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 52L + "'", long47 == 52L);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 52L + "'", long81 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(headers84);
    }

    @Test
    public void test07373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07373");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long31 = strConsumerRecord30.timestamp();
        int int32 = strConsumerRecord30.partition();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord59.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int67 = strConsumerRecord66.serializedValueSize();
        int int68 = strConsumerRecord66.partition();
        org.apache.kafka.common.header.Headers headers69 = strConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType48, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType60, headers69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 0, 52L, (long) '#', timestampType20, (java.lang.Long) 0L, (int) (short) 10, (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType33, headers69);
        org.apache.kafka.common.record.TimestampType timestampType72 = strConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = 1)", 1, 10L, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType72);
        org.apache.kafka.common.record.TimestampType timestampType74 = strConsumerRecord73.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.common.record.TimestampType)", (int) (short) 10, (long) (short) 100, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) timestampType74);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07374");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        int int13 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass15 = intOptional14.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test07375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07375");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        long long14 = strConsumerRecord9.timestamp();
        long long15 = strConsumerRecord9.offset();
        java.lang.String str16 = strConsumerRecord9.toString();
        long long17 = strConsumerRecord9.checksum();
        org.apache.kafka.common.header.Headers headers18 = strConsumerRecord9.headers();
        java.lang.String str19 = strConsumerRecord9.topic();
        long long20 = strConsumerRecord9.offset();
        long long21 = strConsumerRecord9.timestamp();
        java.lang.String str22 = strConsumerRecord9.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = 1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 100, (long) 35, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", strConsumerRecord9);
        long long24 = strConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord9.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07376");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.topic();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.partition();
        long long13 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test07377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07377");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        java.lang.String str57 = strConsumerRecord53.key();
        int int58 = strConsumerRecord53.serializedValueSize();
        java.lang.String str59 = strConsumerRecord53.topic();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str57, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str59, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07378");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        int int15 = strConsumerRecord13.partition();
        long long16 = strConsumerRecord13.offset();
        long long17 = strConsumerRecord13.offset();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        java.lang.String str19 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int32 = strConsumerRecord31.serializedValueSize();
        int int33 = strConsumerRecord31.partition();
        long long34 = strConsumerRecord31.offset();
        long long35 = strConsumerRecord31.offset();
        org.apache.kafka.common.header.Headers headers36 = strConsumerRecord31.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 0, (long) (byte) -1, 32L, timestampType20, (java.lang.Long) 97L, (int) 'a', (int) (short) 10, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) false, headers36);
        org.apache.kafka.common.header.Headers headers38 = strConsumerRecord37.headers();
        int int39 = strConsumerRecord37.partition();
        java.lang.String str40 = strConsumerRecord37.toString();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord37.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 100, (long) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100.0d);
        java.lang.String str61 = strConsumerRecord60.key();
        int int62 = strConsumerRecord60.serializedKeySize();
        java.lang.Class<?> wildcardClass63 = strConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (int) (byte) 1, (long) 52, (long) (-1), timestampType50, (long) (short) 10, (int) ' ', 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100.0)", (java.io.Serializable) wildcardClass63);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", (int) (short) 10, (long) 'a', (long) (-1), timestampType41, (long) '4', (int) (byte) -1, (int) (byte) 0, "ConsumerRecord(topic = hi!, partition = 32, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1.0)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100.0)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
        org.junit.Assert.assertNotNull(headers36);
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 32, serialized key size = 97, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = false)" + "'", str40, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = 32, serialized key size = 97, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = false)");
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test07379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07379");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord24.timestampType();
        java.lang.Class<?> wildcardClass26 = strConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType14, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass26);
        int int28 = strConsumerRecord27.partition();
        java.lang.String str29 = strConsumerRecord27.topic();
        java.lang.String str30 = strConsumerRecord27.key();
        int int31 = strConsumerRecord27.partition();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test07380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07380");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType10);
        java.lang.String str12 = strConsumerRecord11.topic();
        java.lang.String str13 = strConsumerRecord11.topic();
        int int14 = strConsumerRecord11.partition();
        java.lang.String str15 = strConsumerRecord11.key();
        long long16 = strConsumerRecord11.checksum();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord11.leaderEpoch();
        java.lang.String str18 = strConsumerRecord11.topic();
        java.lang.String str19 = strConsumerRecord11.toString();
        int int20 = strConsumerRecord11.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)" + "'", str19, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test07381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07381");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        java.lang.String str22 = strConsumerRecord8.topic();
        long long23 = strConsumerRecord8.checksum();
        java.lang.String str24 = strConsumerRecord8.key();
        int int25 = strConsumerRecord8.serializedValueSize();
        int int26 = strConsumerRecord8.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test07382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07382");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test07383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07383");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.key();
        java.lang.String str13 = strConsumerRecord5.toString();
        int int14 = strConsumerRecord5.partition();
        java.lang.Class<?> wildcardClass15 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test07384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07384");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord53.headers();
        int int58 = strConsumerRecord53.partition();
        java.util.Optional<java.lang.Integer> intOptional59 = strConsumerRecord53.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType60 = strConsumerRecord53.timestampType();
        java.io.Serializable serializable61 = strConsumerRecord53.value();
        int int62 = strConsumerRecord53.partition();
        long long63 = strConsumerRecord53.checksum();
        java.lang.String str64 = strConsumerRecord53.toString();
        java.util.Optional<java.lang.Integer> intOptional65 = strConsumerRecord53.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intOptional59);
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (-1.0d) + "'", serializable61, (-1.0d));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)" + "'", str64, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)");
        org.junit.Assert.assertNotNull(intOptional65);
    }

    @Test
    public void test07385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07385");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int20 = strConsumerRecord19.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional21 = strConsumerRecord19.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str28 = strConsumerRecord27.topic();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord19, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType29, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int47 = strConsumerRecord46.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional48 = strConsumerRecord46.leaderEpoch();
        java.lang.String str49 = strConsumerRecord46.topic();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int67 = strConsumerRecord66.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str75 = strConsumerRecord74.topic();
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord66, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType76);
        int int78 = strConsumerRecord66.serializedValueSize();
        java.lang.String str79 = strConsumerRecord66.key();
        java.lang.String str80 = strConsumerRecord66.key();
        java.util.Optional<java.lang.Integer> intOptional81 = strConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType29, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType50, headers57, intOptional81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long89 = strConsumerRecord88.timestamp();
        long long90 = strConsumerRecord88.timestamp();
        java.io.Serializable serializable91 = strConsumerRecord88.value();
        int int92 = strConsumerRecord88.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) 'a', (long) (-1), (java.io.Serializable) timestampType29, strConsumerRecord88);
        org.apache.kafka.common.header.Headers headers94 = strConsumerRecord88.headers();
        long long95 = strConsumerRecord88.timestamp();
        int int96 = strConsumerRecord88.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable91 + "' != '" + (short) 10 + "'", serializable91, (short) 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1L) + "'", long95 == (-1L));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test07386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07386");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str37 = strConsumerRecord36.topic();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType38, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers52, intOptional60);
        java.util.Optional<java.lang.Integer> intOptional62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (short) -1, (long) (-1), 0L, timestampType15, (java.lang.Long) (-1L), (int) '#', (int) (byte) 0, (java.io.Serializable) (byte) -1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers26, headers52, intOptional62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int75 = strConsumerRecord74.serializedValueSize();
        int int76 = strConsumerRecord74.partition();
        long long77 = strConsumerRecord74.offset();
        long long78 = strConsumerRecord74.offset();
        org.apache.kafka.common.header.Headers headers79 = strConsumerRecord74.headers();
        long long80 = strConsumerRecord74.checksum();
        long long81 = strConsumerRecord74.checksum();
        org.apache.kafka.common.header.Headers headers82 = strConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 0, (long) (short) 1, 100L, timestampType15, (java.lang.Long) 0L, 0, (int) (byte) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 1L, headers82);
        org.apache.kafka.common.record.TimestampType timestampType84 = strConsumerRecord83.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType85 = strConsumerRecord83.timestampType();
        java.io.Serializable serializable86 = strConsumerRecord83.value();
        java.lang.String str87 = strConsumerRecord83.toString();
        java.io.Serializable serializable88 = strConsumerRecord83.value();
        long long89 = strConsumerRecord83.timestamp();
        org.apache.kafka.common.header.Headers headers90 = strConsumerRecord83.headers();
        int int91 = strConsumerRecord83.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 52L + "'", long78 == 52L);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType85 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType85.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable86 + "' != '" + 1L + "'", serializable86, 1L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)" + "'", str87, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)");
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + 1L + "'", serializable88, 1L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 100L + "'", long89 == 100L);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test07387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07387");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.serializedValueSize();
        long long8 = strConsumerRecord5.offset();
        int int9 = strConsumerRecord5.partition();
        long long10 = strConsumerRecord5.offset();
        long long11 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
    }

    @Test
    public void test07388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07388");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str6 = strConsumerRecord5.topic();
        int int7 = strConsumerRecord5.serializedValueSize();
        int int8 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        java.lang.String str11 = strConsumerRecord5.key();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(headers14);
    }

    @Test
    public void test07389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07389");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        int int9 = strConsumerRecord5.partition();
        java.lang.String str10 = strConsumerRecord5.key();
        java.lang.String str11 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test07390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07390");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        java.lang.String str22 = strConsumerRecord8.topic();
        long long23 = strConsumerRecord8.checksum();
        java.lang.String str24 = strConsumerRecord8.key();
        java.io.Serializable serializable25 = strConsumerRecord8.value();
        int int26 = strConsumerRecord8.serializedValueSize();
        java.lang.Class<?> wildcardClass27 = strConsumerRecord8.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 10 + "'", serializable25, (short) 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test07391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07391");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str32 = strConsumerRecord31.topic();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int45 = strConsumerRecord44.serializedValueSize();
        int int46 = strConsumerRecord44.partition();
        org.apache.kafka.common.header.Headers headers47 = strConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional55 = strConsumerRecord53.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType33, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers47, intOptional55);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int68 = strConsumerRecord67.serializedValueSize();
        int int69 = strConsumerRecord67.partition();
        org.apache.kafka.common.header.Headers headers70 = strConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType33, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 0, (long) '4', (long) 1, timestampType12, (java.lang.Long) 100L, (int) (byte) -1, (int) '#', "hi!", (java.io.Serializable) 10.0d, headers70);
        int int73 = strConsumerRecord72.serializedKeySize();
        java.lang.String str74 = strConsumerRecord72.key();
        java.util.Optional<java.lang.Integer> intOptional75 = strConsumerRecord72.leaderEpoch();
        int int76 = strConsumerRecord72.serializedValueSize();
        org.apache.kafka.common.header.Headers headers77 = strConsumerRecord72.headers();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord72.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertNotNull(intOptional78);
    }

    @Test
    public void test07392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07392");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long18 = strConsumerRecord17.timestamp();
        int int19 = strConsumerRecord17.partition();
        java.lang.String str20 = strConsumerRecord17.topic();
        long long21 = strConsumerRecord17.offset();
        java.io.Serializable serializable22 = strConsumerRecord17.value();
        java.lang.String str23 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (int) (short) 100, (long) '4', "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) timestampType24);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        int int37 = strConsumerRecord35.partition();
        long long38 = strConsumerRecord35.offset();
        long long39 = strConsumerRecord35.timestamp();
        int int40 = strConsumerRecord35.serializedKeySize();
        java.lang.String str41 = strConsumerRecord35.key();
        org.apache.kafka.common.header.Headers headers42 = strConsumerRecord35.headers();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord35.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0)", (-1), 100L, (long) 10, timestampType24, (long) (short) 0, (int) '#', (int) ' ', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = -1, null = -1, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (java.io.Serializable) timestampType43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers55 = strConsumerRecord54.headers();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord54.headers();
        java.util.Optional<java.lang.Integer> intOptional57 = strConsumerRecord54.leaderEpoch();
        long long58 = strConsumerRecord54.offset();
        long long59 = strConsumerRecord54.checksum();
        long long60 = strConsumerRecord54.timestamp();
        java.lang.Class<?> wildcardClass61 = strConsumerRecord54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long68 = strConsumerRecord67.timestamp();
        long long69 = strConsumerRecord67.checksum();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord67.leaderEpoch();
        long long71 = strConsumerRecord67.offset();
        org.apache.kafka.common.record.TimestampType timestampType72 = strConsumerRecord67.timestampType();
        org.apache.kafka.common.header.Headers headers73 = strConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = null)", 35, (long) (byte) 0, (long) (byte) 0, timestampType24, (java.lang.Long) (-1L), 10, 0, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) wildcardClass61, headers73);
        int int75 = strConsumerRecord74.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 10 + "'", serializable22, (short) 10);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
    }

    @Test
    public void test07393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07393");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 100, (long) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100.0d);
        java.io.Serializable serializable6 = strConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0d + "'", serializable6, 100.0d);
    }

    @Test
    public void test07394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07394");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        int int11 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test07395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07395");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        java.lang.String str11 = strConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord5.timestampType();
        long long13 = strConsumerRecord5.offset();
        int int14 = strConsumerRecord5.serializedValueSize();
        long long15 = strConsumerRecord5.timestamp();
        long long16 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(headers17);
    }

    @Test
    public void test07396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07396");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 100, (long) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) 100.0d);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
    }

    @Test
    public void test07397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07397");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.offset();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.partition();
        long long14 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test07398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07398");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.serializedValueSize();
        java.lang.String str9 = strConsumerRecord5.topic();
        java.lang.String str10 = strConsumerRecord5.topic();
        int int11 = strConsumerRecord5.partition();
        long long12 = strConsumerRecord5.offset();
        java.lang.String str13 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07399");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        long long12 = strConsumerRecord9.offset();
        long long13 = strConsumerRecord9.timestamp();
        int int14 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        java.lang.String str16 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long27 = strConsumerRecord26.timestamp();
        int int28 = strConsumerRecord26.partition();
        java.io.Serializable serializable29 = strConsumerRecord26.value();
        java.lang.String str30 = strConsumerRecord26.topic();
        java.lang.String str31 = strConsumerRecord26.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int38 = strConsumerRecord37.serializedValueSize();
        long long39 = strConsumerRecord37.timestamp();
        java.lang.String str40 = strConsumerRecord37.topic();
        java.io.Serializable serializable41 = strConsumerRecord37.value();
        java.lang.String str42 = strConsumerRecord37.key();
        java.io.Serializable serializable43 = strConsumerRecord37.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, (long) 97, 35L, timestampType17, (long) 52, 0, (int) (short) 0, (java.lang.Object) strConsumerRecord26, (java.lang.Object) strConsumerRecord37);
        java.io.Serializable serializable45 = strConsumerRecord26.value();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (short) 10 + "'", serializable29, (short) 10);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 10 + "'", serializable41, (short) 10);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 10 + "'", serializable43, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (short) 10 + "'", serializable45, (short) 10);
    }

    @Test
    public void test07400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07400");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord25.headers();
        org.apache.kafka.common.header.Headers headers27 = strConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int37 = strConsumerRecord36.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional38 = strConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str45 = strConsumerRecord44.topic();
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord36, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType46);
        int int48 = strConsumerRecord36.serializedValueSize();
        java.lang.String str49 = strConsumerRecord36.key();
        java.lang.String str50 = strConsumerRecord36.key();
        java.util.Optional<java.lang.Integer> intOptional51 = strConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) ' ', (long) (byte) 100, timestampType14, (java.lang.Long) 0L, 0, (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", headers27, intOptional51);
        int int53 = strConsumerRecord52.serializedKeySize();
        int int54 = strConsumerRecord52.serializedKeySize();
        int int55 = strConsumerRecord52.serializedValueSize();
        java.lang.String str56 = strConsumerRecord52.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str56, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test07401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07401");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedValueSize();
        int int11 = strConsumerRecord5.serializedValueSize();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test07402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07402");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord18.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord34.timestampType();
        int int36 = strConsumerRecord34.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType37, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType20, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        long long45 = strConsumerRecord44.timestamp();
        java.lang.String str46 = strConsumerRecord44.toString();
        int int47 = strConsumerRecord44.partition();
        java.lang.String str48 = strConsumerRecord44.key();
        java.lang.Class<?> wildcardClass49 = strConsumerRecord44.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str56 = strConsumerRecord55.topic();
        org.apache.kafka.common.record.TimestampType timestampType57 = strConsumerRecord55.timestampType();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord55.leaderEpoch();
        long long59 = strConsumerRecord55.checksum();
        long long60 = strConsumerRecord55.offset();
        long long61 = strConsumerRecord55.offset();
        org.apache.kafka.common.header.Headers headers62 = strConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (-1), (long) (short) 100, (long) ' ', timestampType4, (java.lang.Long) 1L, (int) (short) 100, (int) (short) 10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100), value = 0)", (java.io.Serializable) wildcardClass49, headers62);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", str46, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertNotNull(headers62);
    }

    @Test
    public void test07403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07403");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        java.lang.String str21 = strConsumerRecord8.key();
        int int22 = strConsumerRecord8.serializedKeySize();
        int int23 = strConsumerRecord8.serializedValueSize();
        int int24 = strConsumerRecord8.partition();
        java.lang.String str25 = strConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord8.timestampType();
        int int28 = strConsumerRecord8.serializedKeySize();
        java.lang.String str29 = strConsumerRecord8.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str29, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07404");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord8.timestampType();
        java.lang.String str12 = strConsumerRecord8.key();
        long long13 = strConsumerRecord8.timestamp();
        long long14 = strConsumerRecord8.offset();
        java.lang.String str15 = strConsumerRecord8.toString();
        long long16 = strConsumerRecord8.checksum();
        org.apache.kafka.common.header.Headers headers17 = strConsumerRecord8.headers();
        java.lang.String str18 = strConsumerRecord8.topic();
        long long19 = strConsumerRecord8.offset();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord8.leaderEpoch();
        int int21 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>> strConsumerRecordConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", 0, (long) ' ', strConsumerRecord8, intOptional22);
        int int24 = strConsumerRecord8.serializedKeySize();
        java.io.Serializable serializable25 = strConsumerRecord8.value();
        java.io.Serializable serializable26 = strConsumerRecord8.value();
        long long27 = strConsumerRecord8.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord8.timestampType();
        java.lang.String str29 = strConsumerRecord8.topic();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord8.leaderEpoch();
        java.lang.String str31 = strConsumerRecord8.topic();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 10 + "'", serializable25, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (short) 10 + "'", serializable26, (short) 10);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
    }

    @Test
    public void test07405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07405");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        int int57 = strConsumerRecord53.partition();
        org.apache.kafka.common.record.TimestampType timestampType58 = strConsumerRecord53.timestampType();
        int int59 = strConsumerRecord53.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
    }

    @Test
    public void test07406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07406");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        long long13 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        long long15 = strConsumerRecord5.checksum();
        java.lang.Class<?> wildcardClass16 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test07407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07407");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.io.Serializable serializable6 = strConsumerRecord5.value();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass9 = intOptional8.getClass();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (short) 10 + "'", serializable6, (short) 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test07408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07408");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int21 = strConsumerRecord20.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional22 = strConsumerRecord20.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str29 = strConsumerRecord28.topic();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord20, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType30);
        int int32 = strConsumerRecord20.serializedValueSize();
        java.lang.String str33 = strConsumerRecord20.key();
        java.lang.String str34 = strConsumerRecord20.key();
        int int35 = strConsumerRecord20.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType51 = strConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord50.timestampType();
        java.lang.String str53 = strConsumerRecord50.toString();
        int int54 = strConsumerRecord50.partition();
        org.apache.kafka.common.record.TimestampType timestampType55 = strConsumerRecord50.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 10, (long) (byte) 0, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType55);
        int int57 = strConsumerRecord56.partition();
        java.lang.Class<?> wildcardClass58 = strConsumerRecord56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 10, (long) 1, 52L, timestampType36, (long) 1, 32, (int) 'a', "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52)", (java.io.Serializable) wildcardClass58);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType70 = strConsumerRecord69.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord69.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType72 = strConsumerRecord69.timestampType();
        java.lang.String str73 = strConsumerRecord69.key();
        long long74 = strConsumerRecord69.timestamp();
        long long75 = strConsumerRecord69.offset();
        java.lang.String str76 = strConsumerRecord69.toString();
        java.io.Serializable serializable77 = strConsumerRecord69.value();
        int int78 = strConsumerRecord69.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType79 = strConsumerRecord69.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long86 = strConsumerRecord85.timestamp();
        long long87 = strConsumerRecord85.checksum();
        long long88 = strConsumerRecord85.timestamp();
        java.lang.String str89 = strConsumerRecord85.topic();
        long long90 = strConsumerRecord85.timestamp();
        java.io.Serializable serializable91 = strConsumerRecord85.value();
        org.apache.kafka.common.header.Headers headers92 = strConsumerRecord85.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 1)", (int) (short) 0, (long) 1, 100L, timestampType36, (java.lang.Long) 1L, (int) '#', (int) '4', "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), value = NoTimestampType)", (java.io.Serializable) timestampType79, headers92);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.record.TimestampType> strComparableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 97, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = ), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 35, (-1L), (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10)", timestampType79);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str53, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str76, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable77 + "' != '" + (short) 10 + "'", serializable77, (short) 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable91 + "' != '" + (short) 10 + "'", serializable91, (short) 10);
        org.junit.Assert.assertNotNull(headers92);
    }

    @Test
    public void test07409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07409");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str37 = strConsumerRecord36.topic();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType38, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers52, intOptional60);
        java.util.Optional<java.lang.Integer> intOptional62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (short) -1, (long) (-1), 0L, timestampType15, (java.lang.Long) (-1L), (int) '#', (int) (byte) 0, (java.io.Serializable) (byte) -1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers26, headers52, intOptional62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int75 = strConsumerRecord74.serializedValueSize();
        int int76 = strConsumerRecord74.partition();
        long long77 = strConsumerRecord74.offset();
        long long78 = strConsumerRecord74.offset();
        org.apache.kafka.common.header.Headers headers79 = strConsumerRecord74.headers();
        long long80 = strConsumerRecord74.checksum();
        long long81 = strConsumerRecord74.checksum();
        org.apache.kafka.common.header.Headers headers82 = strConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 0, (long) (short) 1, 100L, timestampType15, (java.lang.Long) 0L, 0, (int) (byte) 1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) 1L, headers82);
        org.apache.kafka.common.record.TimestampType timestampType84 = strConsumerRecord83.timestampType();
        int int85 = strConsumerRecord83.serializedKeySize();
        int int86 = strConsumerRecord83.serializedKeySize();
        java.lang.Class<?> wildcardClass87 = strConsumerRecord83.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 52L + "'", long78 == 52L);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test07410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07410");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int14 = strConsumerRecord13.serializedValueSize();
        int int15 = strConsumerRecord13.partition();
        long long16 = strConsumerRecord13.offset();
        java.lang.String str17 = strConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100)", 0, (long) 52, (long) 35, timestampType18, (long) (byte) -1, (int) 'a', (int) (short) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)");
        int int25 = strConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord36.headers();
        java.io.Serializable serializable38 = strConsumerRecord36.value();
        java.lang.String str39 = strConsumerRecord36.key();
        java.lang.String str40 = strConsumerRecord36.toString();
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord36.timestampType();
        int int42 = strConsumerRecord36.partition();
        int int43 = strConsumerRecord36.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord36.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", 0, 1L, 0L, timestampType26, 0L, 100, (int) (byte) -1, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (java.io.Serializable) timestampType45);
        long long47 = strConsumerRecord46.checksum();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 0 + "'", serializable38, (short) 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str40, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test07411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07411");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        java.lang.String str24 = strConsumerRecord8.key();
        long long25 = strConsumerRecord8.checksum();
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord8.headers();
        java.io.Serializable serializable27 = strConsumerRecord8.value();
        long long28 = strConsumerRecord8.timestamp();
        long long29 = strConsumerRecord8.checksum();
        java.lang.String str30 = strConsumerRecord8.key();
        java.lang.String str31 = strConsumerRecord8.topic();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (short) 10 + "'", serializable27, (short) 10);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
    }

    @Test
    public void test07412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07412");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.serializedValueSize();
        int int13 = strConsumerRecord5.serializedKeySize();
        long long14 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test07413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07413");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        java.lang.String str7 = strConsumerRecord5.topic();
        long long8 = strConsumerRecord5.checksum();
        long long9 = strConsumerRecord5.offset();
        int int10 = strConsumerRecord5.partition();
        long long11 = strConsumerRecord5.timestamp();
        int int12 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        long long14 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test07414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07414");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedKeySize();
        int int13 = strConsumerRecord5.serializedValueSize();
        long long14 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        int int16 = strConsumerRecord5.serializedKeySize();
        int int17 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers18 = strConsumerRecord5.headers();
        java.lang.String str19 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07415");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        int int13 = strConsumerRecord5.serializedKeySize();
        long long14 = strConsumerRecord5.checksum();
        long long15 = strConsumerRecord5.offset();
        int int16 = strConsumerRecord5.serializedValueSize();
        int int17 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test07416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07416");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType63 = strConsumerRecord62.timestampType();
        int int64 = strConsumerRecord62.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType65 = strConsumerRecord62.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType65, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType48, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) '4', (long) (byte) 1, (long) '#', timestampType31, (long) (short) 100, 0, (int) ' ', "hi!", (java.io.Serializable) 1L);
        org.apache.kafka.common.record.TimestampType timestampType74 = strConsumerRecord73.timestampType();
        int int75 = strConsumerRecord73.partition();
        long long76 = strConsumerRecord73.timestamp();
        long long77 = strConsumerRecord73.timestamp();
        int int78 = strConsumerRecord73.serializedValueSize();
        int int79 = strConsumerRecord73.partition();
        java.io.Serializable serializable80 = strConsumerRecord73.value();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 35L + "'", long76 == 35L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 35L + "'", long77 == 35L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 32 + "'", int78 == 32);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + 1L + "'", serializable80, 1L);
    }

    @Test
    public void test07417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07417");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", 35, 32L, (long) (short) 10, timestampType11, (long) (short) 100, (int) '#', 0, "", (java.io.Serializable) true);
        int int18 = strConsumerRecord17.serializedValueSize();
        java.lang.String str19 = strConsumerRecord17.key();
        int int20 = strConsumerRecord17.partition();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    }

    @Test
    public void test07418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07418");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedKeySize();
        int int16 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord28.headers();
        org.apache.kafka.common.header.Headers headers30 = strConsumerRecord28.headers();
        int int31 = strConsumerRecord28.serializedKeySize();
        org.apache.kafka.common.header.Headers headers32 = strConsumerRecord28.headers();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord28.headers();
        long long34 = strConsumerRecord28.timestamp();
        int int35 = strConsumerRecord28.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 97, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 10, (long) (short) 100, (long) 32, timestampType18, (long) (byte) -1, 32, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) timestampType36);
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord37.timestampType();
        long long39 = strConsumerRecord37.checksum();
        org.apache.kafka.common.record.TimestampType timestampType40 = strConsumerRecord37.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, (long) 100, "", (java.io.Serializable) 1L);
        int int51 = strConsumerRecord50.partition();
        int int52 = strConsumerRecord50.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord50.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str60 = strConsumerRecord59.topic();
        org.apache.kafka.common.record.TimestampType timestampType61 = strConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers62 = strConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        int int70 = strConsumerRecord68.partition();
        org.apache.kafka.common.header.Headers headers71 = strConsumerRecord68.headers();
        java.util.Optional<java.lang.Integer> intOptional72 = strConsumerRecord68.leaderEpoch();
        java.lang.String str73 = strConsumerRecord68.key();
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord68.headers();
        org.apache.kafka.common.record.TimestampType timestampType75 = strConsumerRecord68.timestampType();
        long long76 = strConsumerRecord68.checksum();
        int int77 = strConsumerRecord68.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 35, null = -1, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), value = -1)", 32, (long) (short) 0, (long) 'a', timestampType40, (java.lang.Long) (-1L), (int) (byte) 100, (int) (byte) -1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = NoTimestampType)", (java.io.Serializable) timestampType53, headers62, intOptional78);
        org.apache.kafka.common.record.TimestampType timestampType80 = strConsumerRecord79.timestampType();
        int int81 = strConsumerRecord79.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test07419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07419");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.topic();
        int int14 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        int int16 = strConsumerRecord5.serializedValueSize();
        int int17 = strConsumerRecord5.partition();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test07420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07420");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        java.lang.String str9 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.partition();
        long long12 = strConsumerRecord5.checksum();
        int int13 = strConsumerRecord5.partition();
        java.lang.Class<?> wildcardClass14 = strConsumerRecord5.getClass();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test07421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07421");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        int int14 = strConsumerRecord5.serializedKeySize();
        int int15 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        int int17 = strConsumerRecord5.serializedKeySize();
        java.lang.String str18 = strConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord5.leaderEpoch();
        long long20 = strConsumerRecord5.offset();
        int int21 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test07422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07422");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        int int10 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.topic();
        int int13 = strConsumerRecord5.partition();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        int int16 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test07423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07423");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str18 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int31 = strConsumerRecord30.serializedValueSize();
        int int32 = strConsumerRecord30.partition();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType19, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers33, intOptional41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType19, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers56);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        int int70 = strConsumerRecord68.partition();
        long long71 = strConsumerRecord68.offset();
        long long72 = strConsumerRecord68.offset();
        org.apache.kafka.common.header.Headers headers73 = strConsumerRecord68.headers();
        long long74 = strConsumerRecord68.checksum();
        long long75 = strConsumerRecord68.checksum();
        org.apache.kafka.common.header.Headers headers76 = strConsumerRecord68.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", (int) (short) 10, 100L, (long) 32, timestampType19, (java.lang.Long) (-1L), (int) (byte) -1, 32, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) "hi!", headers76);
        java.lang.String str78 = strConsumerRecord77.toString();
        long long79 = strConsumerRecord77.checksum();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 52L + "'", long72 == 52L);
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)" + "'", str78, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
    }

    @Test
    public void test07424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07424");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        long long9 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test07425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07425");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedKeySize();
        int int16 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord28.headers();
        org.apache.kafka.common.header.Headers headers30 = strConsumerRecord28.headers();
        int int31 = strConsumerRecord28.serializedKeySize();
        org.apache.kafka.common.header.Headers headers32 = strConsumerRecord28.headers();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord28.headers();
        long long34 = strConsumerRecord28.timestamp();
        int int35 = strConsumerRecord28.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 97, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) 10, (long) (short) 100, (long) 32, timestampType18, (long) (byte) -1, 32, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) timestampType36);
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord37.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int53 = strConsumerRecord52.serializedValueSize();
        int int54 = strConsumerRecord52.partition();
        org.apache.kafka.common.header.Headers headers55 = strConsumerRecord52.headers();
        java.util.Optional<java.lang.Integer> intOptional56 = strConsumerRecord52.leaderEpoch();
        java.lang.String str57 = strConsumerRecord52.key();
        java.lang.Class<?> wildcardClass58 = strConsumerRecord52.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )", 97, 1L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) wildcardClass58);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers66 = strConsumerRecord65.headers();
        org.apache.kafka.common.header.Headers headers67 = strConsumerRecord65.headers();
        int int68 = strConsumerRecord65.partition();
        java.util.Optional<java.lang.Integer> intOptional69 = strConsumerRecord65.leaderEpoch();
        org.apache.kafka.common.header.Headers headers70 = strConsumerRecord65.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = -1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 10.0)", (int) 'a', 0L, (-1L), timestampType38, (java.lang.Long) 32L, 32, (int) (short) 0, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", headers70);
        org.apache.kafka.common.header.Headers headers72 = strConsumerRecord71.headers();
        org.apache.kafka.common.header.Headers headers73 = strConsumerRecord71.headers();
        java.lang.Class<?> wildcardClass74 = headers73.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test07426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07426");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        int int16 = strConsumerRecord5.partition();
        java.io.Serializable serializable17 = strConsumerRecord5.value();
        int int18 = strConsumerRecord5.serializedValueSize();
        long long19 = strConsumerRecord5.timestamp();
        int int20 = strConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test07427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07427");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.offset();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07428");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.offset();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord5.timestampType();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        java.lang.String str14 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test07429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07429");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        int int10 = strConsumerRecord5.partition();
        int int11 = strConsumerRecord5.partition();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.serializedKeySize();
        long long15 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test07430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07430");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        java.lang.String str24 = strConsumerRecord8.key();
        long long25 = strConsumerRecord8.checksum();
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord8.headers();
        java.util.Optional<java.lang.Integer> intOptional27 = strConsumerRecord8.leaderEpoch();
        long long28 = strConsumerRecord8.offset();
        java.lang.String str29 = strConsumerRecord8.topic();
        int int30 = strConsumerRecord8.serializedKeySize();
        long long31 = strConsumerRecord8.checksum();
        org.apache.kafka.common.header.Headers headers32 = strConsumerRecord8.headers();
        java.lang.Class<?> wildcardClass33 = strConsumerRecord8.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertNotNull(intOptional27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test07431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07431");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test07432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07432");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        int int12 = strConsumerRecord9.serializedValueSize();
        java.lang.String str13 = strConsumerRecord9.topic();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord9.leaderEpoch();
        long long15 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        java.util.Optional<java.lang.Integer> intOptional30 = strConsumerRecord26.leaderEpoch();
        java.lang.String str31 = strConsumerRecord26.key();
        java.io.Serializable serializable32 = strConsumerRecord26.value();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        int int41 = strConsumerRecord39.partition();
        java.lang.String str42 = strConsumerRecord39.topic();
        long long43 = strConsumerRecord39.checksum();
        long long44 = strConsumerRecord39.offset();
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord39.headers();
        org.apache.kafka.common.header.Headers headers46 = strConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = ), value = 10)", (int) (short) 1, (long) 0, (long) (short) -1, timestampType16, (java.lang.Long) 1L, 1, (int) (short) 100, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (java.io.Serializable) timestampType33, headers46);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 10 + "'", serializable32, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(headers46);
    }

    @Test
    public void test07433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07433");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        java.lang.String str7 = strConsumerRecord5.toString();
        java.lang.String str8 = strConsumerRecord5.toString();
        long long9 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str7, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test07434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07434");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType16, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) (short) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) "");
        java.lang.String str24 = strConsumerRecord23.key();
        java.util.Optional<java.lang.Integer> intOptional25 = strConsumerRecord23.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord23.timestampType();
        int int27 = strConsumerRecord23.partition();
        int int28 = strConsumerRecord23.serializedKeySize();
        int int29 = strConsumerRecord23.serializedKeySize();
        java.io.Serializable serializable30 = strConsumerRecord23.value();
        java.lang.String str31 = strConsumerRecord23.key();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str24, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + "" + "'", serializable30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str31, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test07435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07435");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long19 = strConsumerRecord18.timestamp();
        int int20 = strConsumerRecord18.partition();
        org.apache.kafka.common.record.TimestampType timestampType21 = strConsumerRecord18.timestampType();
        long long22 = strConsumerRecord18.checksum();
        java.lang.String str23 = strConsumerRecord18.toString();
        long long24 = strConsumerRecord18.offset();
        int int25 = strConsumerRecord18.serializedKeySize();
        int int26 = strConsumerRecord18.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord18.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int38 = strConsumerRecord37.serializedValueSize();
        int int39 = strConsumerRecord37.partition();
        long long40 = strConsumerRecord37.offset();
        long long41 = strConsumerRecord37.timestamp();
        int int42 = strConsumerRecord37.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord37.timestampType();
        java.lang.String str44 = strConsumerRecord37.key();
        org.apache.kafka.common.record.TimestampType timestampType45 = strConsumerRecord37.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord51.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = strConsumerRecord51.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType54 = strConsumerRecord51.timestampType();
        java.lang.String str55 = strConsumerRecord51.key();
        long long56 = strConsumerRecord51.timestamp();
        long long57 = strConsumerRecord51.offset();
        java.lang.String str58 = strConsumerRecord51.toString();
        java.io.Serializable serializable59 = strConsumerRecord51.value();
        long long60 = strConsumerRecord51.offset();
        java.io.Serializable serializable61 = strConsumerRecord51.value();
        int int62 = strConsumerRecord51.serializedValueSize();
        org.apache.kafka.common.header.Headers headers63 = strConsumerRecord51.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType), partition = 0, leaderEpoch = null, offset = 35, NoTimestampType = 100, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (int) (byte) 100, (long) (-1), (long) 32, timestampType27, (java.lang.Long) 35L, (int) 'a', 35, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = 32, serialized key size = 32, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", (java.io.Serializable) timestampType45, headers63);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.record.TimestampType> strComparableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 35, null = -1, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), value = -1)", (int) 'a', (long) (short) 10, (long) (short) 0, timestampType4, (long) (byte) 100, (int) (byte) 10, 1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)", timestampType27);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str58, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 10 + "'", serializable59, (short) 10);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 10 + "'", serializable61, (short) 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(headers63);
    }

    @Test
    public void test07436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07436");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord12.timestampType();
        int int14 = strConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) ' ', 0L, (long) (short) 0, timestampType15, (long) (byte) -1, (int) '#', 100, "", (java.io.Serializable) 1.0d);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        int int23 = strConsumerRecord21.partition();
        java.lang.Class<?> wildcardClass24 = strConsumerRecord21.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long31 = strConsumerRecord30.timestamp();
        long long32 = strConsumerRecord30.timestamp();
        long long33 = strConsumerRecord30.checksum();
        int int34 = strConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord30.timestampType();
        java.lang.String str36 = strConsumerRecord30.toString();
        long long37 = strConsumerRecord30.offset();
        java.util.Optional<java.lang.Integer> intOptional38 = strConsumerRecord30.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>> objConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 10, NoTimestampType = 32, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 1, 52L, (java.lang.Object) wildcardClass24, intOptional38);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str36, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertNotNull(intOptional38);
    }

    @Test
    public void test07437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07437");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str18 = strConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int31 = strConsumerRecord30.serializedValueSize();
        int int32 = strConsumerRecord30.partition();
        org.apache.kafka.common.header.Headers headers33 = strConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int40 = strConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional41 = strConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType19, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers33, intOptional41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int54 = strConsumerRecord53.serializedValueSize();
        int int55 = strConsumerRecord53.partition();
        org.apache.kafka.common.header.Headers headers56 = strConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType19, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers56);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) (byte) 10, (long) (short) 1, timestampType19, (long) '#', (int) (short) 10, 10, "hi!", (java.io.Serializable) ' ');
        java.io.Serializable serializable64 = strConsumerRecord63.value();
        java.io.Serializable serializable65 = strConsumerRecord63.value();
        java.lang.String str66 = strConsumerRecord63.toString();
        java.io.Serializable serializable67 = strConsumerRecord63.value();
        int int68 = strConsumerRecord63.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + ' ' + "'", serializable64, ' ');
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + ' ' + "'", serializable65, ' ');
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )" + "'", str66, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )");
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + ' ' + "'", serializable67, ' ');
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
    }

    @Test
    public void test07438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07438");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        int int10 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.offset();
        long long14 = strConsumerRecord5.checksum();
        long long15 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test07439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07439");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord53.headers();
        int int58 = strConsumerRecord53.partition();
        java.util.Optional<java.lang.Integer> intOptional59 = strConsumerRecord53.leaderEpoch();
        int int60 = strConsumerRecord53.partition();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intOptional59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
    }

    @Test
    public void test07440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07440");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        java.io.Serializable serializable9 = strConsumerRecord5.value();
        int int10 = strConsumerRecord5.serializedValueSize();
        int int11 = strConsumerRecord5.serializedKeySize();
        java.lang.String str12 = strConsumerRecord5.key();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 10 + "'", serializable9, (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
    }

    @Test
    public void test07441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07441");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int13 = strConsumerRecord12.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = strConsumerRecord12.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str21 = strConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22);
        java.lang.String str24 = strConsumerRecord12.topic();
        long long25 = strConsumerRecord12.offset();
        long long26 = strConsumerRecord12.offset();
        java.lang.String str27 = strConsumerRecord12.toString();
        int int28 = strConsumerRecord12.serializedKeySize();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord12.headers();
        int int30 = strConsumerRecord12.serializedKeySize();
        long long31 = strConsumerRecord12.checksum();
        java.lang.String str32 = strConsumerRecord12.key();
        long long33 = strConsumerRecord12.offset();
        org.apache.kafka.common.record.TimestampType timestampType34 = strConsumerRecord12.timestampType();
        java.lang.Class<?> wildcardClass35 = timestampType34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (short) 10, (long) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", (java.io.Serializable) wildcardClass35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test07442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07442");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        long long12 = strConsumerRecord5.timestamp();
        long long13 = strConsumerRecord5.offset();
        java.lang.String str14 = strConsumerRecord5.toString();
        java.lang.String str15 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test07443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07443");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord9.headers();
        int int12 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord9.headers();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord9.headers();
        long long15 = strConsumerRecord9.timestamp();
        int int16 = strConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType28 = strConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord27.timestampType();
        java.lang.String str31 = strConsumerRecord27.key();
        org.apache.kafka.common.record.TimestampType timestampType32 = strConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int39 = strConsumerRecord38.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional40 = strConsumerRecord38.leaderEpoch();
        java.lang.String str41 = strConsumerRecord38.key();
        long long42 = strConsumerRecord38.offset();
        java.lang.String str43 = strConsumerRecord38.toString();
        org.apache.kafka.common.record.TimestampType timestampType44 = strConsumerRecord38.timestampType();
        java.lang.String str45 = strConsumerRecord38.toString();
        java.util.Optional<java.lang.Integer> intOptional46 = strConsumerRecord38.leaderEpoch();
        org.apache.kafka.common.header.Headers headers47 = strConsumerRecord38.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 52, serialized key size = 35, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) 'a', 1L, (long) 'a', timestampType17, (java.lang.Long) 32L, (int) (short) 100, 10, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType32, headers47);
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord48.timestampType();
        java.util.Optional<java.lang.Integer> intOptional50 = strConsumerRecord48.leaderEpoch();
        long long51 = strConsumerRecord48.offset();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str43, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str45, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
    }

    @Test
    public void test07444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07444");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers6 = strConsumerRecord5.headers();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.lang.String str8 = strConsumerRecord5.key();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.toString();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (short) 0 + "'", serializable7, (short) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
    }

    @Test
    public void test07445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07445");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.serializedKeySize();
        long long9 = strConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test07446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07446");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        java.lang.String str9 = strConsumerRecord5.key();
        java.lang.String str10 = strConsumerRecord5.toString();
        long long11 = strConsumerRecord5.timestamp();
        int int12 = strConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertNotNull(headers14);
    }

    @Test
    public void test07447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07447");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.lang.String str55 = strConsumerRecord53.topic();
        long long56 = strConsumerRecord53.offset();
        int int57 = strConsumerRecord53.serializedValueSize();
        int int58 = strConsumerRecord53.partition();
        java.lang.String str59 = strConsumerRecord53.key();
        int int60 = strConsumerRecord53.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str55, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str59, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test07448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07448");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType59 = strConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int69 = strConsumerRecord68.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional70 = strConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str77 = strConsumerRecord76.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = strConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord68, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType78);
        java.lang.String str80 = strConsumerRecord68.topic();
        java.lang.Class<?> wildcardClass81 = strConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("hi!", (int) (short) 100, 1L, 100L, timestampType49, (long) (short) -1, (int) (byte) -1, (int) (byte) -1, timestampType59, (java.lang.Object) wildcardClass81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 1, (long) (-1), 100L, timestampType20, (long) 1, (int) (byte) 1, 0, "", (java.io.Serializable) timestampType49);
        long long84 = strConsumerRecord83.timestamp();
        java.lang.String str85 = strConsumerRecord83.key();
        int int86 = strConsumerRecord83.partition();
        org.apache.kafka.common.record.TimestampType timestampType87 = strConsumerRecord83.timestampType();
        java.lang.String str88 = strConsumerRecord83.topic();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + timestampType87 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType87.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
    }

    @Test
    public void test07449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07449");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        long long11 = strConsumerRecord5.checksum();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        long long16 = strConsumerRecord5.checksum();
        java.io.Serializable serializable17 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 10 + "'", serializable17, (short) 10);
    }

    @Test
    public void test07450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07450");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int17 = strConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = strConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str25 = strConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord16, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType26);
        java.lang.String str28 = strConsumerRecord16.topic();
        long long29 = strConsumerRecord16.offset();
        long long30 = strConsumerRecord16.offset();
        java.lang.String str31 = strConsumerRecord16.toString();
        int int32 = strConsumerRecord16.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long39 = strConsumerRecord38.timestamp();
        int int40 = strConsumerRecord38.partition();
        java.io.Serializable serializable41 = strConsumerRecord38.value();
        java.lang.Class<?> wildcardClass42 = serializable41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long49 = strConsumerRecord48.timestamp();
        long long50 = strConsumerRecord48.checksum();
        java.util.Optional<java.lang.Integer> intOptional51 = strConsumerRecord48.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord48.timestampType();
        java.lang.String str53 = strConsumerRecord48.topic();
        long long54 = strConsumerRecord48.checksum();
        long long55 = strConsumerRecord48.timestamp();
        java.lang.String str56 = strConsumerRecord48.toString();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord48.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers64 = strConsumerRecord63.headers();
        java.io.Serializable serializable65 = strConsumerRecord63.value();
        java.lang.String str66 = strConsumerRecord63.key();
        java.lang.String str67 = strConsumerRecord63.key();
        int int68 = strConsumerRecord63.partition();
        java.util.Optional<java.lang.Integer> intOptional69 = strConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration> strConsumerRecordConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (short) -1, (long) (byte) 100, timestampType4, (java.lang.Long) (-1L), 100, (-1), strConsumerRecord16, (java.lang.reflect.GenericDeclaration) wildcardClass42, headers57, intOptional69);
        int int71 = strConsumerRecord16.serializedValueSize();
        long long72 = strConsumerRecord16.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord16.timestampType();
        java.lang.String str74 = strConsumerRecord16.toString();
        java.io.Serializable serializable75 = strConsumerRecord16.value();
        long long76 = strConsumerRecord16.offset();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 10 + "'", serializable41, (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str56, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 0 + "'", serializable65, (short) 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str74, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 10 + "'", serializable75, (short) 10);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 52L + "'", long76 == 52L);
    }

    @Test
    public void test07451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07451");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        int int16 = strConsumerRecord5.serializedValueSize();
        long long17 = strConsumerRecord5.offset();
        java.lang.String str18 = strConsumerRecord5.toString();
        java.lang.String str19 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test07452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07452");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType22 = strConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = strConsumerRecord21.timestampType();
        java.lang.String str25 = strConsumerRecord21.key();
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType37 = strConsumerRecord36.timestampType();
        java.lang.Class<?> wildcardClass38 = strConsumerRecord36.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (short) 100, (long) (-1), (long) '4', timestampType26, (long) '4', (int) '#', 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass38);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str50 = strConsumerRecord49.topic();
        java.lang.Class<?> wildcardClass51 = strConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) -1, 100L, (long) 0, timestampType26, (long) (short) 1, (int) '#', 0, "hi!", (java.io.Serializable) wildcardClass51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long63 = strConsumerRecord62.timestamp();
        int int64 = strConsumerRecord62.partition();
        java.lang.String str65 = strConsumerRecord62.topic();
        long long66 = strConsumerRecord62.offset();
        java.lang.Class<?> wildcardClass67 = strConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers74 = strConsumerRecord73.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long81 = strConsumerRecord80.timestamp();
        long long82 = strConsumerRecord80.checksum();
        long long83 = strConsumerRecord80.timestamp();
        java.util.Optional<java.lang.Integer> intOptional84 = strConsumerRecord80.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (short) 1, (long) (byte) 100, (long) 100, timestampType26, (java.lang.Long) 100L, (int) 'a', (int) (short) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) wildcardClass67, headers74, intOptional84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) (byte) 1, (long) (byte) 1, "", (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        long long87 = strConsumerRecord86.timestamp();
        java.util.Optional<java.lang.Integer> intOptional88 = strConsumerRecord86.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType89 = strConsumerRecord86.timestampType();
        org.apache.kafka.common.header.Headers headers90 = strConsumerRecord86.headers();
        long long91 = strConsumerRecord86.offset();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertNotNull(intOptional84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNotNull(intOptional88);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1L + "'", long91 == 1L);
    }

    @Test
    public void test07453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07453");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.timestamp();
        java.lang.String str13 = strConsumerRecord5.key();
        long long14 = strConsumerRecord5.checksum();
        java.lang.String str15 = strConsumerRecord5.topic();
        int int16 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test07454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07454");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord9.leaderEpoch();
        java.lang.String str12 = strConsumerRecord9.topic();
        int int13 = strConsumerRecord9.serializedValueSize();
        int int14 = strConsumerRecord9.partition();
        long long15 = strConsumerRecord9.checksum();
        java.lang.String str16 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int35 = strConsumerRecord34.serializedValueSize();
        int int36 = strConsumerRecord34.partition();
        org.apache.kafka.common.header.Headers headers37 = strConsumerRecord34.headers();
        java.util.Optional<java.lang.Integer> intOptional38 = strConsumerRecord34.leaderEpoch();
        java.lang.String str39 = strConsumerRecord34.key();
        java.lang.String str40 = strConsumerRecord34.topic();
        long long41 = strConsumerRecord34.timestamp();
        java.lang.String str42 = strConsumerRecord34.toString();
        org.apache.kafka.common.record.TimestampType timestampType43 = strConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), value = 10)", 100, (long) 10, (long) 10, timestampType43, (long) (short) 1, (int) (short) 0, (int) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = ), value = 10)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int59 = strConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional60 = strConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str67 = strConsumerRecord66.topic();
        org.apache.kafka.common.record.TimestampType timestampType68 = strConsumerRecord66.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord58, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType68);
        int int70 = strConsumerRecord58.serializedValueSize();
        java.io.Serializable serializable71 = strConsumerRecord58.value();
        org.apache.kafka.common.record.TimestampType timestampType72 = strConsumerRecord58.timestampType();
        java.lang.Class<?> wildcardClass73 = strConsumerRecord58.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.reflect.GenericDeclaration> timestampTypeEnumConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = null)", (int) (short) 100, (long) 52, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType43, (java.lang.reflect.GenericDeclaration) wildcardClass73);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 10, 35L, (-1L), timestampType17, (long) (short) 10, (int) (byte) 1, (int) (byte) 1, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 100, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 1)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = null)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str42, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertEquals("'" + serializable71 + "' != '" + (short) 10 + "'", serializable71, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test07455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07455");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        long long9 = strConsumerRecord5.timestamp();
        long long10 = strConsumerRecord5.offset();
        java.lang.String str11 = strConsumerRecord5.key();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07456");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0), partition = 32, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (-1), (long) (short) 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)", (java.io.Serializable) true);
        java.io.Serializable serializable6 = strConsumerRecord5.value();
        java.io.Serializable serializable7 = strConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers9 = strConsumerRecord5.headers();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + true + "'", serializable6, true);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + true + "'", serializable7, true);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertNotNull(headers9);
    }

    @Test
    public void test07457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07457");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        java.lang.String str8 = strConsumerRecord5.toString();
        int int9 = strConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        int int11 = strConsumerRecord5.serializedValueSize();
        long long12 = strConsumerRecord5.timestamp();
        long long13 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        long long16 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
    }

    @Test
    public void test07458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07458");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        long long8 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.timestamp();
        int int13 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test07459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07459");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        int int14 = strConsumerRecord5.serializedValueSize();
        long long15 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
    }

    @Test
    public void test07460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07460");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = strConsumerRecord5.timestampType();
        java.lang.String str10 = strConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        java.lang.String str13 = strConsumerRecord5.toString();
        long long14 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test07461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07461");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord13.headers();
        int int15 = strConsumerRecord13.partition();
        org.apache.kafka.common.header.Headers headers16 = strConsumerRecord13.headers();
        java.lang.String str17 = strConsumerRecord13.key();
        long long18 = strConsumerRecord13.offset();
        java.lang.Class<?> wildcardClass19 = strConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", 0, (long) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", (java.io.Serializable) wildcardClass19);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.Type> strComparableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.Type>("", 32, (long) (byte) 0, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 0), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = 10)", (java.lang.reflect.Type) wildcardClass19);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test07462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07462");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers12 = strConsumerRecord5.headers();
        long long13 = strConsumerRecord5.timestamp();
        long long14 = strConsumerRecord5.offset();
        int int15 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional17 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test07463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07463");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        int int8 = strConsumerRecord5.partition();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord5.leaderEpoch();
        java.lang.String str11 = strConsumerRecord5.toString();
        int int12 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test07464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07464");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord17.timestampType();
        java.lang.String str21 = strConsumerRecord17.key();
        long long22 = strConsumerRecord17.timestamp();
        long long23 = strConsumerRecord17.offset();
        java.lang.String str24 = strConsumerRecord17.toString();
        long long25 = strConsumerRecord17.checksum();
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord17.headers();
        java.lang.String str27 = strConsumerRecord17.topic();
        long long28 = strConsumerRecord17.offset();
        java.util.Optional<java.lang.Integer> intOptional29 = strConsumerRecord17.leaderEpoch();
        int int30 = strConsumerRecord17.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>> strConsumerRecordConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0)", 0, (long) ' ', strConsumerRecord17, intOptional31);
        int int33 = strConsumerRecord17.serializedKeySize();
        long long34 = strConsumerRecord17.timestamp();
        java.lang.Class<?> wildcardClass35 = strConsumerRecord17.getClass();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType55 = strConsumerRecord54.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType56 = strConsumerRecord54.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType71 = strConsumerRecord70.timestampType();
        int int72 = strConsumerRecord70.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType73 = strConsumerRecord70.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType73, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", 100, (long) 0, 1L, timestampType56, (long) (short) 1, (int) (byte) 1, (int) (short) 1, "hi!", (java.io.Serializable) '#');
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long87 = strConsumerRecord86.timestamp();
        long long88 = strConsumerRecord86.checksum();
        long long89 = strConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers90 = strConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 100, 52L, 1L, timestampType40, (java.lang.Long) 35L, (int) (short) 1, 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)", (java.io.Serializable) 100, headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = NoTimestampType)", 35, 0L, (long) (short) 0, timestampType4, (java.lang.Long) (-1L), (int) (byte) 100, (int) ' ', "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) wildcardClass35, headers90);
        java.lang.Class<?> wildcardClass93 = headers90.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str24, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test07465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07465");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.serializedValueSize();
        long long8 = strConsumerRecord5.offset();
        int int9 = strConsumerRecord5.partition();
        java.lang.String str10 = strConsumerRecord5.key();
        long long11 = strConsumerRecord5.checksum();
        java.io.Serializable serializable12 = strConsumerRecord5.value();
        java.lang.String str13 = strConsumerRecord5.key();
        java.lang.String str14 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 10 + "'", serializable12, (short) 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test07466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07466");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType)", (int) (byte) 1, (long) (-1), "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) timestampType16);
        java.io.Serializable serializable18 = strConsumerRecord17.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = hi!)", 32, 0L, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 97, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", serializable18);
        long long20 = strConsumerRecord19.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test07467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07467");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        int int15 = strConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("", 100, (long) '#', (long) (byte) 0, timestampType16, (long) (short) 10, 0, (int) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.lang.Comparable<java.lang.String>) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) (short) 10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) "");
        java.lang.String str24 = strConsumerRecord23.key();
        long long25 = strConsumerRecord23.timestamp();
        int int26 = strConsumerRecord23.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)" + "'", str24, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test07468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07468");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord9.headers();
        java.io.Serializable serializable11 = strConsumerRecord9.value();
        java.lang.String str12 = strConsumerRecord9.key();
        int int13 = strConsumerRecord9.serializedValueSize();
        java.lang.String str14 = strConsumerRecord9.key();
        long long15 = strConsumerRecord9.checksum();
        int int16 = strConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType17 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long33 = strConsumerRecord32.timestamp();
        int int34 = strConsumerRecord32.partition();
        org.apache.kafka.common.record.TimestampType timestampType35 = strConsumerRecord32.timestampType();
        java.lang.String str36 = strConsumerRecord32.toString();
        long long37 = strConsumerRecord32.checksum();
        java.util.Optional<java.lang.Integer> intOptional38 = strConsumerRecord32.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional39 = strConsumerRecord32.leaderEpoch();
        java.lang.Class<?> wildcardClass40 = strConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", 10, (long) '4', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", (java.io.Serializable) wildcardClass40);
        org.apache.kafka.common.record.TimestampType timestampType42 = strConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 35, leaderEpoch = null, offset = 35, null = 10, serialized key size = 100, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = NoTimestampType)", (int) (byte) 10, (long) 35, 0L, timestampType18, (long) 32, 0, 10, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = null), partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 52, serialized key size = 97, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType42);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 0 + "'", serializable11, (short) 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str36, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07469");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = strConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = strConsumerRecord5.leaderEpoch();
        java.lang.String str10 = strConsumerRecord5.key();
        long long11 = strConsumerRecord5.timestamp();
        java.lang.String str12 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test07470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07470");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        int int10 = strConsumerRecord8.partition();
        long long11 = strConsumerRecord8.offset();
        long long12 = strConsumerRecord8.offset();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord8.headers();
        long long14 = strConsumerRecord8.checksum();
        java.lang.String str15 = strConsumerRecord8.key();
        int int16 = strConsumerRecord8.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Comparable<java.lang.String>> strConsumerRecordConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1), partition = 0, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = )", (int) '4', (-1L), strConsumerRecord8, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = null)");
        long long19 = strConsumerRecord8.offset();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
    }

    @Test
    public void test07471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07471");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int10 = strConsumerRecord9.serializedValueSize();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (-1), (long) 100, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) timestampType13);
        java.lang.String str15 = strConsumerRecord14.key();
        int int16 = strConsumerRecord14.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)" + "'", str15, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test07472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07472");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int20 = strConsumerRecord19.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional21 = strConsumerRecord19.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str28 = strConsumerRecord27.topic();
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord19, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType29, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int47 = strConsumerRecord46.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional48 = strConsumerRecord46.leaderEpoch();
        java.lang.String str49 = strConsumerRecord46.topic();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 1, (long) (short) 1, "hi!", (java.io.Serializable) (short) 0);
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int67 = strConsumerRecord66.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional68 = strConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str75 = strConsumerRecord74.topic();
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord66, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType76);
        int int78 = strConsumerRecord66.serializedValueSize();
        java.lang.String str79 = strConsumerRecord66.key();
        java.lang.String str80 = strConsumerRecord66.key();
        java.util.Optional<java.lang.Integer> intOptional81 = strConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", 10, (long) (byte) 1, (long) (short) 1, timestampType29, (java.lang.Long) 0L, (int) '#', 100, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (java.io.Serializable) timestampType50, headers57, intOptional81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long89 = strConsumerRecord88.timestamp();
        long long90 = strConsumerRecord88.timestamp();
        java.io.Serializable serializable91 = strConsumerRecord88.value();
        int int92 = strConsumerRecord88.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = NoTimestampType)", (int) 'a', (long) (-1), (java.io.Serializable) timestampType29, strConsumerRecord88);
        org.apache.kafka.common.record.TimestampType timestampType94 = strConsumerRecord88.timestampType();
        java.lang.String str95 = strConsumerRecord88.topic();
        java.lang.String str96 = strConsumerRecord88.toString();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable91 + "' != '" + (short) 10 + "'", serializable91, (short) 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hi!" + "'", str95, "hi!");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str96, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07473");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int21 = strConsumerRecord20.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional22 = strConsumerRecord20.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str29 = strConsumerRecord28.topic();
        org.apache.kafka.common.record.TimestampType timestampType30 = strConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord20, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) -1, 100L, (long) 10, timestampType30, 0L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) 0.0f);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = strConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord46.timestampType();
        java.lang.Object obj50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("", 0, (long) (byte) 100, (long) (byte) -1, timestampType30, (long) (byte) 100, (int) (short) 10, (int) (short) -1, timestampType49, obj50);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (short) 10, (-1L), 10L, timestampType49, 35L, 100, 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = class org.apache.kafka.clients.consumer.ConsumerRecord), value = null)", (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        java.io.Serializable serializable58 = strConsumerRecord57.value();
        long long59 = strConsumerRecord57.offset();
        long long60 = strConsumerRecord57.timestamp();
        long long61 = strConsumerRecord57.offset();
        org.apache.kafka.common.header.Headers headers62 = strConsumerRecord57.headers();
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable58 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)" + "'", serializable58, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #)");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNotNull(headers62);
    }

    @Test
    public void test07474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07474");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        java.lang.String str20 = strConsumerRecord8.topic();
        long long21 = strConsumerRecord8.offset();
        long long22 = strConsumerRecord8.offset();
        java.lang.String str23 = strConsumerRecord8.toString();
        java.lang.String str24 = strConsumerRecord8.key();
        long long25 = strConsumerRecord8.checksum();
        org.apache.kafka.common.header.Headers headers26 = strConsumerRecord8.headers();
        java.util.Optional<java.lang.Integer> intOptional27 = strConsumerRecord8.leaderEpoch();
        long long28 = strConsumerRecord8.offset();
        java.lang.String str29 = strConsumerRecord8.topic();
        int int30 = strConsumerRecord8.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional31 = strConsumerRecord8.leaderEpoch();
        java.io.Serializable serializable32 = strConsumerRecord8.value();
        java.lang.String str33 = strConsumerRecord8.key();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertNotNull(intOptional27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 10 + "'", serializable32, (short) 10);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test07475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07475");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int9 = strConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = strConsumerRecord8.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str17 = strConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = strConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> objConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("hi!", (int) '#', (long) (short) -1, (java.lang.Object) strConsumerRecord8, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18);
        int int20 = strConsumerRecord8.serializedValueSize();
        java.lang.String str21 = strConsumerRecord8.key();
        int int22 = strConsumerRecord8.serializedKeySize();
        long long23 = strConsumerRecord8.offset();
        int int24 = strConsumerRecord8.partition();
        org.apache.kafka.common.record.TimestampType timestampType25 = strConsumerRecord8.timestampType();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07476");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        long long9 = strConsumerRecord5.offset();
        java.io.Serializable serializable10 = strConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        int int12 = strConsumerRecord5.serializedKeySize();
        long long13 = strConsumerRecord5.checksum();
        int int14 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 10 + "'", serializable10, (short) 10);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07477");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        int int9 = strConsumerRecord5.serializedValueSize();
        java.lang.String str10 = strConsumerRecord5.key();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        java.lang.String str12 = strConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        int int14 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = strConsumerRecord5.leaderEpoch();
        int int16 = strConsumerRecord5.serializedKeySize();
        int int17 = strConsumerRecord5.partition();
        java.lang.Class<?> wildcardClass18 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test07478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07478");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        long long10 = strConsumerRecord5.checksum();
        long long11 = strConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test07479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07479");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.io.Serializable serializable11 = strConsumerRecord5.value();
        int int12 = strConsumerRecord5.serializedValueSize();
        long long13 = strConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 10 + "'", serializable11, (short) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
    }

    @Test
    public void test07480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07480");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        java.io.Serializable serializable13 = strConsumerRecord5.value();
        int int14 = strConsumerRecord5.serializedKeySize();
        int int15 = strConsumerRecord5.serializedValueSize();
        int int16 = strConsumerRecord5.partition();
        java.lang.String str17 = strConsumerRecord5.topic();
        java.lang.String str18 = strConsumerRecord5.key();
        long long19 = strConsumerRecord5.offset();
        java.lang.Class<?> wildcardClass20 = strConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 10 + "'", serializable13, (short) 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test07481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07481");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        java.lang.String str16 = strConsumerRecord13.topic();
        long long17 = strConsumerRecord13.offset();
        java.io.Serializable serializable18 = strConsumerRecord13.value();
        java.lang.String str19 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType20, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) (byte) 100, (long) 0, "", (java.io.Serializable) (byte) -1);
        java.lang.String str34 = strConsumerRecord33.toString();
        int int35 = strConsumerRecord33.serializedValueSize();
        java.io.Serializable serializable36 = strConsumerRecord33.value();
        java.lang.String str37 = strConsumerRecord33.topic();
        java.lang.String str38 = strConsumerRecord33.toString();
        long long39 = strConsumerRecord33.timestamp();
        long long40 = strConsumerRecord33.checksum();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str34, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (byte) -1 + "'", serializable36, (byte) -1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)" + "'", str38, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = -1)");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    }

    @Test
    public void test07482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07482");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.lang.String str8 = strConsumerRecord5.topic();
        int int9 = strConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.topic();
        long long12 = strConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional13 = strConsumerRecord5.leaderEpoch();
        long long14 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
    }

    @Test
    public void test07483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07483");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long14 = strConsumerRecord13.timestamp();
        int int15 = strConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord13.timestampType();
        java.lang.String str17 = strConsumerRecord13.toString();
        long long18 = strConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional19 = strConsumerRecord13.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional20 = strConsumerRecord13.leaderEpoch();
        java.lang.Class<?> wildcardClass21 = strConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 52, NoTimestampType = 0, serialized key size = -1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = 1.0), value = NoTimestampType)", 10, (long) '4', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 52), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = 100)", (java.io.Serializable) wildcardClass21);
        org.apache.kafka.common.record.TimestampType timestampType23 = strConsumerRecord22.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  ), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = 0, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 100, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = NoTimestampType), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (int) (byte) -1, (long) 32, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = 52, serialized key size = 35, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 100), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", (java.io.Serializable) timestampType23);
        int int25 = strConsumerRecord24.partition();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test07484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07484");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = strConsumerRecord5.leaderEpoch();
        java.lang.String str8 = strConsumerRecord5.key();
        long long9 = strConsumerRecord5.checksum();
        int int10 = strConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers11 = strConsumerRecord5.headers();
        long long12 = strConsumerRecord5.offset();
        java.lang.String str13 = strConsumerRecord5.key();
        int int14 = strConsumerRecord5.serializedKeySize();
        java.lang.String str15 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test07485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07485");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType7 = strConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType8 = strConsumerRecord5.timestampType();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        long long11 = strConsumerRecord5.offset();
        java.lang.String str12 = strConsumerRecord5.toString();
        long long13 = strConsumerRecord5.checksum();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        java.io.Serializable serializable15 = strConsumerRecord5.value();
        int int16 = strConsumerRecord5.serializedKeySize();
        long long17 = strConsumerRecord5.timestamp();
        java.io.Serializable serializable18 = strConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 10 + "'", serializable15, (short) 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 10 + "'", serializable18, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test07486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07486");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        int int11 = strConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        java.lang.String str13 = strConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        int int15 = strConsumerRecord9.partition();
        int int16 = strConsumerRecord9.partition();
        int int17 = strConsumerRecord9.partition();
        java.lang.String str18 = strConsumerRecord9.toString();
        java.lang.String str19 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        int int32 = strConsumerRecord30.serializedKeySize();
        int int33 = strConsumerRecord30.partition();
        java.io.Serializable serializable34 = strConsumerRecord30.value();
        int int35 = strConsumerRecord30.serializedKeySize();
        java.io.Serializable serializable36 = strConsumerRecord30.value();
        java.lang.String str37 = strConsumerRecord30.topic();
        org.apache.kafka.common.header.Headers headers38 = strConsumerRecord30.headers();
        java.lang.Class<?> wildcardClass39 = strConsumerRecord30.getClass();
        org.apache.kafka.common.header.Headers headers40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = #), value = 100.0)", 100, 52L, (long) (short) 0, timestampType20, (java.lang.Long) 35L, (int) (byte) 100, (int) (short) 1, "", (java.io.Serializable) wildcardClass39, headers40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 10 + "'", serializable34, (short) 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 10 + "'", serializable36, (short) 10);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test07487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07487");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        int int7 = strConsumerRecord5.partition();
        java.io.Serializable serializable8 = strConsumerRecord5.value();
        java.lang.String str9 = strConsumerRecord5.topic();
        long long10 = strConsumerRecord5.timestamp();
        java.lang.String str11 = strConsumerRecord5.key();
        java.lang.String str12 = strConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 10 + "'", serializable8, (short) 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test07488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07488");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord5.timestampType();
        java.lang.String str11 = strConsumerRecord5.key();
        long long12 = strConsumerRecord5.checksum();
        java.lang.String str13 = strConsumerRecord5.topic();
        java.io.Serializable serializable14 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
    }

    @Test
    public void test07489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07489");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType14);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int33 = strConsumerRecord32.serializedValueSize();
        int int34 = strConsumerRecord32.partition();
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord32.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType14, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType26, headers35);
        int int37 = strConsumerRecord36.serializedValueSize();
        long long38 = strConsumerRecord36.timestamp();
        java.io.Serializable serializable39 = strConsumerRecord36.value();
        java.lang.String str40 = strConsumerRecord36.topic();
        org.apache.kafka.common.header.Headers headers41 = strConsumerRecord36.headers();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + serializable39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str40, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers41);
    }

    @Test
    public void test07490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07490");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long6 = strConsumerRecord5.timestamp();
        long long7 = strConsumerRecord5.checksum();
        int int8 = strConsumerRecord5.serializedKeySize();
        int int9 = strConsumerRecord5.serializedValueSize();
        long long10 = strConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test07491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07491");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        long long11 = strConsumerRecord9.offset();
        java.lang.String str12 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long23 = strConsumerRecord22.timestamp();
        int int24 = strConsumerRecord22.partition();
        java.lang.String str25 = strConsumerRecord22.topic();
        long long26 = strConsumerRecord22.offset();
        java.io.Serializable serializable27 = strConsumerRecord22.value();
        java.lang.String str28 = strConsumerRecord22.topic();
        java.io.Serializable serializable29 = strConsumerRecord22.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType41 = strConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType41);
        java.lang.String str43 = strConsumerRecord42.topic();
        java.lang.String str44 = strConsumerRecord42.topic();
        org.apache.kafka.common.header.Headers headers45 = strConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.String> strConsumerRecordConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>, java.lang.String>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = )", (int) (short) -1, 32L, 52L, timestampType13, (java.lang.Long) (-1L), (int) (byte) 10, (int) (short) 100, strConsumerRecord22, "hi!", headers45);
        int int47 = strConsumerRecord22.serializedKeySize();
        java.io.Serializable serializable48 = strConsumerRecord22.value();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (short) 10 + "'", serializable27, (short) 10);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (short) 10 + "'", serializable29, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str43, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str44, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + (short) 10 + "'", serializable48, (short) 10);
    }

    @Test
    public void test07492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07492");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) (byte) 10, 0L, "hi!", (java.io.Serializable) timestampType14);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType26 = strConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int33 = strConsumerRecord32.serializedValueSize();
        int int34 = strConsumerRecord32.partition();
        org.apache.kafka.common.header.Headers headers35 = strConsumerRecord32.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (int) ' ', 0L, (long) (byte) 10, timestampType14, (java.lang.Long) 0L, 10, (-1), "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = 0, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10), value = -1.0)", (java.io.Serializable) timestampType26, headers35);
        java.lang.String str37 = strConsumerRecord36.topic();
        int int38 = strConsumerRecord36.partition();
        long long39 = strConsumerRecord36.checksum();
        int int40 = strConsumerRecord36.serializedValueSize();
        int int41 = strConsumerRecord36.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str37, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 32 + "'", int41 == 32);
    }

    @Test
    public void test07493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07493");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        long long11 = strConsumerRecord9.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = strConsumerRecord9.leaderEpoch();
        long long13 = strConsumerRecord9.offset();
        long long14 = strConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long30 = strConsumerRecord29.timestamp();
        int int31 = strConsumerRecord29.partition();
        java.lang.String str32 = strConsumerRecord29.topic();
        long long33 = strConsumerRecord29.offset();
        java.io.Serializable serializable34 = strConsumerRecord29.value();
        java.lang.String str35 = strConsumerRecord29.topic();
        org.apache.kafka.common.record.TimestampType timestampType36 = strConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType36, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType47);
        org.apache.kafka.common.record.TimestampType timestampType49 = strConsumerRecord48.timestampType();
        java.util.Optional<java.lang.Integer> intOptional50 = strConsumerRecord48.leaderEpoch();
        int int51 = strConsumerRecord48.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType52 = strConsumerRecord48.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long59 = strConsumerRecord58.timestamp();
        int int60 = strConsumerRecord58.partition();
        org.apache.kafka.common.record.TimestampType timestampType61 = strConsumerRecord58.timestampType();
        java.lang.String str62 = strConsumerRecord58.toString();
        long long63 = strConsumerRecord58.offset();
        org.apache.kafka.common.header.Headers headers64 = strConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int71 = strConsumerRecord70.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional72 = strConsumerRecord70.leaderEpoch();
        java.lang.String str73 = strConsumerRecord70.key();
        long long74 = strConsumerRecord70.offset();
        java.lang.String str75 = strConsumerRecord70.toString();
        org.apache.kafka.common.record.TimestampType timestampType76 = strConsumerRecord70.timestampType();
        java.lang.String str77 = strConsumerRecord70.toString();
        java.util.Optional<java.lang.Integer> intOptional78 = strConsumerRecord70.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0)", (int) (short) -1, (long) 97, 32L, timestampType15, (java.lang.Long) 32L, (int) (short) 100, (-1), "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 10, NoTimestampType = 1, serialized key size = 10, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value =  )", (java.io.Serializable) timestampType52, headers64, intOptional78);
        org.apache.kafka.common.header.Headers headers80 = strConsumerRecord79.headers();
        int int81 = strConsumerRecord79.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 10 + "'", serializable34, (short) 10);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str62, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 52L + "'", long74 == 52L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str75, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str77, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
    }

    @Test
    public void test07494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07494");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        long long10 = strConsumerRecord9.timestamp();
        int int11 = strConsumerRecord9.partition();
        java.lang.String str12 = strConsumerRecord9.topic();
        long long13 = strConsumerRecord9.offset();
        java.io.Serializable serializable14 = strConsumerRecord9.value();
        java.lang.String str15 = strConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType27 = strConsumerRecord26.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 0, (long) '4', (long) (byte) -1, timestampType16, (long) 10, (int) (short) 0, 0, "hi!", (java.io.Serializable) timestampType27);
        org.apache.kafka.common.record.TimestampType timestampType29 = strConsumerRecord28.timestampType();
        java.lang.String str30 = strConsumerRecord28.topic();
        int int31 = strConsumerRecord28.serializedValueSize();
        long long32 = strConsumerRecord28.offset();
        int int33 = strConsumerRecord28.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 10 + "'", serializable14, (short) 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test07495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07495");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        java.lang.String str14 = strConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = strConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int27 = strConsumerRecord26.serializedValueSize();
        int int28 = strConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers29 = strConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int36 = strConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = strConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("", (int) '#', (long) 0, 0L, timestampType15, (java.lang.Long) 1L, (int) (short) -1, (int) (short) 100, "hi!", (java.io.Serializable) 1.0f, headers29, intOptional37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int50 = strConsumerRecord49.serializedValueSize();
        int int51 = strConsumerRecord49.partition();
        org.apache.kafka.common.header.Headers headers52 = strConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", 10, (long) (short) 1, (long) 0, timestampType15, (java.lang.Long) 52L, (int) (byte) 100, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)", (java.io.Serializable) (-1.0d), headers52);
        long long54 = strConsumerRecord53.offset();
        java.io.Serializable serializable55 = strConsumerRecord53.value();
        java.io.Serializable serializable56 = strConsumerRecord53.value();
        java.util.Optional<java.lang.Integer> intOptional57 = strConsumerRecord53.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional58 = strConsumerRecord53.leaderEpoch();
        long long59 = strConsumerRecord53.timestamp();
        long long60 = strConsumerRecord53.checksum();
        java.lang.String str61 = strConsumerRecord53.topic();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (-1.0d) + "'", serializable55, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
    }

    @Test
    public void test07496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07496");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        int int10 = strConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        java.lang.String str12 = strConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test07497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07497");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType6 = strConsumerRecord5.timestampType();
        int int7 = strConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = strConsumerRecord5.leaderEpoch();
        java.lang.String str9 = strConsumerRecord5.toString();
        long long10 = strConsumerRecord5.checksum();
        int int11 = strConsumerRecord5.partition();
        long long12 = strConsumerRecord5.offset();
        java.lang.String str13 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord5.timestampType();
        java.lang.String str15 = strConsumerRecord5.key();
        int int16 = strConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test07498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07498");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType10 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType12 = strConsumerRecord9.timestampType();
        java.lang.String str13 = strConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = strConsumerRecord9.timestampType();
        int int15 = strConsumerRecord9.partition();
        int int16 = strConsumerRecord9.serializedValueSize();
        long long17 = strConsumerRecord9.timestamp();
        long long18 = strConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = strConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = strConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType31 = strConsumerRecord30.timestampType();
        int int32 = strConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType33 = strConsumerRecord30.timestampType();
        java.lang.String str34 = strConsumerRecord30.toString();
        java.util.Optional<java.lang.Integer> intOptional35 = strConsumerRecord30.leaderEpoch();
        long long36 = strConsumerRecord30.offset();
        int int37 = strConsumerRecord30.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType38 = strConsumerRecord30.timestampType();
        java.lang.Class<?> wildcardClass39 = strConsumerRecord30.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        org.apache.kafka.common.record.TimestampType timestampType46 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = strConsumerRecord45.timestampType();
        java.lang.String str48 = strConsumerRecord45.toString();
        int int49 = strConsumerRecord45.partition();
        org.apache.kafka.common.record.TimestampType timestampType50 = strConsumerRecord45.timestampType();
        int int51 = strConsumerRecord45.serializedValueSize();
        long long52 = strConsumerRecord45.checksum();
        org.apache.kafka.common.header.Headers headers53 = strConsumerRecord45.headers();
        long long54 = strConsumerRecord45.timestamp();
        java.lang.String str55 = strConsumerRecord45.key();
        org.apache.kafka.common.record.TimestampType timestampType56 = strConsumerRecord45.timestampType();
        org.apache.kafka.common.header.Headers headers57 = strConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = 35, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = class org.apache.kafka.clients.consumer.ConsumerRecord), partition = 100, leaderEpoch = null, offset = 10, NoTimestampType = 32, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 0), value = class org.apache.kafka.clients.consumer.ConsumerRecord)", 0, 35L, (long) (byte) -1, timestampType20, (java.lang.Long) 0L, 0, (int) (byte) 1, "ConsumerRecord(topic = hi!, partition = 32, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = 100)", (java.io.Serializable) wildcardClass39, headers57);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str34, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)" + "'", str48, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = 10)");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers57);
    }

    @Test
    public void test07499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07499");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.partition();
        long long8 = strConsumerRecord5.offset();
        long long9 = strConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers10 = strConsumerRecord5.headers();
        long long11 = strConsumerRecord5.checksum();
        long long12 = strConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers13 = strConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers14 = strConsumerRecord5.headers();
        long long15 = strConsumerRecord5.checksum();
        java.io.Serializable serializable16 = strConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 10 + "'", serializable16, (short) 10);
    }

    @Test
    public void test07500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07500");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("hi!", (int) (byte) 100, (long) '4', "", (java.io.Serializable) (short) 10);
        int int6 = strConsumerRecord5.serializedValueSize();
        int int7 = strConsumerRecord5.serializedValueSize();
        long long8 = strConsumerRecord5.offset();
        java.lang.String str9 = strConsumerRecord5.key();
        long long10 = strConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional11 = strConsumerRecord5.leaderEpoch();
        java.lang.String str12 = strConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = strConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }
}

