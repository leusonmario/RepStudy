/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 31 19:06:01 GMT 2021
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentVector;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.record.TimestampType;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTupleBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilderWildcardTopics;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      assertNotNull(persistentHashMap0);
      assertEquals(0, persistentHashMap0.count());
      
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsNamedTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsNamedTopics>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsNamedTopics>(persistentHashMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Map<String, Object> map0 = null;
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<String, Object> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<String, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, Object>(map0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      String string0 = "pred";
      Object object0 = hashMap0.put(string0, string0);
      assertNull(object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      KafkaSpoutTuplesBuilder<Object, Integer> kafkaSpoutTuplesBuilder0 = null;
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>(hashMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String[] stringArray0 = new String[7];
      String string0 = ", keyDeserializer=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "1 Jo)5?M#!DD1Pg= ";
      stringArray0[2] = string2;
      String string3 = "+/*6y";
      stringArray0[4] = string3;
      String string4 = "\"@Tft[(&04\"";
      stringArray0[5] = string4;
      String string5 = "2?6i!VJIx7/";
      stringArray0[6] = string5;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      Pattern pattern0 = Pattern.compile(stringArray0[1]);
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, stringArray0[1], pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      long long0 = 354L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      
      int int0 = Integer.MAX_VALUE;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertEquals(2, persistentHashMap0.count());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(7, fields0.size());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertEquals(2, persistentHashMap0.count());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(7, fields0.size());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder1.build();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      
      String[] stringArray0 = new String[7];
      String string0 = "ylJ1h5fsif|-";
      stringArray0[1] = string0;
      String string1 = "1 Jo)5?M#!DD1Pg= ";
      stringArray0[2] = string1;
      String string2 = "clojure.lang.Compiler$TheVarExpr$Parser";
      stringArray0[3] = string2;
      String string3 = "+/*y";
      stringArray0[4] = string3;
      String string4 = "h";
      stringArray0[5] = string4;
      String string5 = "2?6i!VJIx7/";
      stringArray0[6] = string5;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      Pattern pattern0 = Pattern.compile(string4);
      assertNotNull(pattern0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertEquals("h", pattern0.pattern());
      assertEquals("h", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string2, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(7, fields0.size());
      assertEquals("h", pattern0.pattern());
      assertEquals("h", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(7, fields0.size());
      assertEquals("h", pattern0.pattern());
      assertEquals("h", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(7, stringArray0.length);
      
      long long0 = 357L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(357000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(357L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      
      int int0 = Integer.MAX_VALUE;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      assertEquals(357000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(357L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(7, fields0.size());
      assertEquals("h", pattern0.pattern());
      assertEquals("h", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(2, persistentHashMap0.count());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertEquals(357000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(357L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(int0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertEquals(7, fields0.size());
      assertEquals("h", pattern0.pattern());
      assertEquals("h", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(2, persistentHashMap0.count());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertEquals(357000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(357L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder0.build();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      long long0 = (-6L);
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String[] stringArray0 = new String[7];
      String string0 = ", keyDeserializer=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "1 Jo)5?M#!DD1Pg= ";
      stringArray0[3] = string2;
      String string3 = "+/*6y";
      stringArray0[4] = string3;
      String string4 = "\"@Tft[(&04\"";
      stringArray0[5] = string4;
      String string5 = "2?6i!VJIx7/";
      stringArray0[6] = string5;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      String string6 = "vector?";
      Pattern pattern0 = Pattern.compile(string6);
      assertNotNull(pattern0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string1, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(7, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(7, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals((-6000L), kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals((-6L), kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(7, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertEquals(2, persistentHashMap0.count());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValueDeserializer(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertEquals(7, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertEquals(2, persistentHashMap0.count());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTuplesBuilder<Integer, Integer> kafkaSpoutTuplesBuilder0 = null;
      int int0 = 612;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals((-6000L), kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals((-6L), kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder2 = null;
      try {
        kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<Integer, Integer>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilder0, kafkaSpoutRetryExponentialBackoff0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify at last one tuple builder per topic declared in KafkaSpoutStreams
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      long long0 = 1L;
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String[] stringArray0 = new String[7];
      String string0 = ", keyDeserializer=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "1 Jo)5?M#!DD1Pg= ";
      stringArray0[2] = string2;
      String string3 = "+/*6y";
      stringArray0[4] = string3;
      String string4 = "\"@ft(&04\"";
      stringArray0[5] = string4;
      String string5 = "2?6i!VJIx7/";
      stringArray0[6] = string5;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      Pattern pattern0 = Pattern.compile(stringArray0[0]);
      assertNotNull(pattern0);
      assertEquals(", keyDeserializer=", pattern0.pattern());
      assertEquals(", keyDeserializer=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string1, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(7, fields0.size());
      assertEquals(", keyDeserializer=", pattern0.pattern());
      assertEquals(", keyDeserializer=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(7, fields0.size());
      assertEquals(", keyDeserializer=", pattern0.pattern());
      assertEquals(", keyDeserializer=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(long0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(1L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(1000000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(7, fields0.size());
      assertEquals(", keyDeserializer=", pattern0.pattern());
      assertEquals(", keyDeserializer=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertEquals(2, persistentHashMap0.count());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertEquals(7, fields0.size());
      assertEquals(", keyDeserializer=", pattern0.pattern());
      assertEquals(", keyDeserializer=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertEquals(2, persistentHashMap0.count());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKeyDeserializer(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(7, fields0.size());
      assertEquals(", keyDeserializer=", pattern0.pattern());
      assertEquals(", keyDeserializer=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertEquals(2, persistentHashMap0.count());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertEquals(7, fields0.size());
      assertEquals(", keyDeserializer=", pattern0.pattern());
      assertEquals(", keyDeserializer=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("", kafkaSpoutStream0.getStreamId());
      assertEquals(2, persistentHashMap0.count());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<PersistentVector, PersistentVector> kafkaSpoutTupleBuilder1 = (KafkaSpoutTupleBuilder<PersistentVector, PersistentVector>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<PersistentVector, PersistentVector> kafkaSpoutTuplesBuilderWildcardTopics1 = new KafkaSpoutTuplesBuilderWildcardTopics<PersistentVector, PersistentVector>(kafkaSpoutTupleBuilder1);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics1);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = null;
      KafkaSpoutConfig.Builder<PersistentVector, PersistentVector> kafkaSpoutConfig_Builder4 = null;
      try {
        kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<PersistentVector, PersistentVector>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics1, kafkaSpoutRetryService0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify at implementation of retry service
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = null;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>(hashMap0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryService0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: {}
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object0));
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object7));
      
      objectArray0[8] = object8;
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.createWithCheck(objectArray0);
      assertNotNull(persistentArrayMap0);
      assertEquals(4, persistentArrayMap0.capacity());
      assertEquals(4, persistentArrayMap0.count());
      assertEquals(9, objectArray0.length);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = object3;
      objectArray1[1] = object8;
      objectArray1[2] = object1;
      objectArray1[3] = (Object) persistentArrayMap0;
      objectArray1[4] = object1;
      PersistentArrayMap persistentArrayMap1 = new PersistentArrayMap(persistentArrayMap0, objectArray1);
      assertNotNull(persistentArrayMap1);
      assertEquals(4, persistentArrayMap0.capacity());
      assertEquals(4, persistentArrayMap0.count());
      assertEquals(2, persistentArrayMap1.capacity());
      assertEquals(2, persistentArrayMap1.count());
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertEquals(9, objectArray0.length);
      assertEquals(5, objectArray1.length);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Integer>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Integer>(persistentArrayMap1, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      Map<String, Object> map0 = null;
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutTupleBuilder<String, Object> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<String, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, Object>(map0, kafkaSpoutStreams0, kafkaSpoutTuplesBuilderWildcardTopics0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck(objectArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(3, persistentHashMap0.count());
      assertEquals(6, objectArray0.length);
      
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(1, fields0.size());
      assertEquals(1, stringArray0.length);
      
      int int0 = (-2371);
      Pattern pattern0 = Pattern.compile(stringArray0[0], int0);
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertEquals(1, stringArray0.length);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(1, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(1, stringArray0.length);
      
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(3, persistentHashMap0.count());
      assertEquals(6, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      List<String> list0 = fields0.toList();
      assertNotNull(list0);
      assertTrue(list0.contains(string0));
      assertEquals(1, fields0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, stringArray0.length);
      
      Matcher matcher0 = pattern0.matcher(string0);
      assertNotNull(matcher0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertEquals(0, matcher0.groupCount());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals("java.util.regex.Matcher[pattern= region=0,0 lastmatch=]", matcher0.toString());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals(1, stringArray0.length);
      
      long long0 = 2L;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(3, persistentHashMap0.count());
      assertEquals(6, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      String string1 = kafkaSpoutStream0.toString();
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      
      SerializableDeserializer<KafkaSpoutStreamsNamedTopics> serializableDeserializer0 = (SerializableDeserializer<KafkaSpoutStreamsNamedTopics>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(3, persistentHashMap0.count());
      assertEquals(6, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      Pattern pattern1 = kafkaSpoutStream0.getTopicWildcardPattern();
      assertNotNull(pattern1);
      assertSame(pattern1, pattern0);
      assertSame(pattern0, pattern1);
      assertEquals("", pattern1.toString());
      assertEquals((-2371), pattern1.flags());
      assertEquals("", pattern1.pattern());
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(1, stringArray0.length);
      
      SerializableDeserializer<KafkaSpoutStreamsNamedTopics> serializableDeserializer1 = (SerializableDeserializer<KafkaSpoutStreamsNamedTopics>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder1.setKeyDeserializer(serializableDeserializer1);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(pattern0, pattern1);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(3, persistentHashMap0.count());
      assertEquals(6, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTupleBuilder1 = (KafkaSpoutTupleBuilder<Integer, KafkaSpoutStreamsWildcardTopics>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(kafkaSpoutTupleBuilder1).buildTuple(nullable(org.apache.kafka.clients.consumer.ConsumerRecord.class));
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTuplesBuilderWildcardTopics1 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutTupleBuilder1);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics1);
      
      String string2 = "pPW^;D_VW>*";
      long long1 = 952L;
      TimestampType timestampType0 = TimestampType.LOG_APPEND_TIME;
      long long2 = 2015L;
      int int1 = 1;
      Integer integer0 = new Integer(int0);
      assertEquals((-2371), (int)integer0);
      assertNotNull(integer0);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      ConsumerRecord<Integer, KafkaSpoutStreamsWildcardTopics> consumerRecord0 = new ConsumerRecord<Integer, KafkaSpoutStreamsWildcardTopics>(string2, int0, long0, long1, timestampType0, long2, int1, int1, integer0, kafkaSpoutStreamsWildcardTopics0);
      assertNotNull(consumerRecord0);
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(1, consumerRecord0.serializedKeySize());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals("pPW^;D_VW>*", consumerRecord0.topic());
      assertEquals((-2371), consumerRecord0.partition());
      assertEquals(952L, consumerRecord0.timestamp());
      assertEquals(2L, consumerRecord0.offset());
      assertEquals(1, consumerRecord0.serializedValueSize());
      assertEquals(2015L, consumerRecord0.checksum());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(int1 == int0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int0 == int1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(1, stringArray0.length);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      List<Object> list1 = kafkaSpoutTuplesBuilderWildcardTopics1.buildTuple(consumerRecord0);
      assertNotNull(list1);
      assertSame(pattern0, pattern1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(list1.contains(object5));
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(1, consumerRecord0.serializedKeySize());
      assertEquals(TimestampType.LOG_APPEND_TIME, consumerRecord0.timestampType());
      assertEquals("pPW^;D_VW>*", consumerRecord0.topic());
      assertEquals((-2371), consumerRecord0.partition());
      assertEquals(952L, consumerRecord0.timestamp());
      assertEquals(2L, consumerRecord0.offset());
      assertEquals(1, consumerRecord0.serializedValueSize());
      assertEquals(2015L, consumerRecord0.checksum());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(int1 == int0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int0 == int1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(1, stringArray0.length);
      assertEquals((-1L), ConsumerRecord.NO_TIMESTAMP);
      assertEquals((-1), ConsumerRecord.NULL_CHECKSUM);
      assertEquals((-1), ConsumerRecord.NULL_SIZE);
      
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics1);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(1, fields0.size());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-2371), pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("default", kafkaSpoutStream0.getStreamId());
      assertEquals(3, persistentHashMap0.count());
      assertFalse(int0 == int1);
      assertEquals(6, objectArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      
      PersistentHashMap persistentHashMap1 = persistentHashMap0.withMeta(persistentArrayMap0);
      assertNotNull(persistentHashMap1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(2, persistentHashMap1.count());
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String[] stringArray0 = new String[7];
      String string0 = ", keyDeserializer=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "1 Jo)5?M#!DD1Pg= ";
      stringArray0[2] = string2;
      String string3 = "clojure.lang.Compiler$TheVarExpr$Parser";
      stringArray0[3] = string3;
      String string4 = "+/*6y";
      stringArray0[4] = string4;
      String string5 = "\"@Tft[(&04\"";
      stringArray0[5] = string5;
      String string6 = "2?6i!VJIx7/";
      stringArray0[6] = string6;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      String string7 = "vector?";
      Pattern pattern0 = Pattern.compile(string7);
      assertNotNull(pattern0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string3, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      long long1 = 354L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long1);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertFalse(long1 == long0);
      
      int int0 = Integer.MAX_VALUE;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertFalse(long1 == long0);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(int0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      long long2 = 1L;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(long2);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertFalse(long2 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      
      PersistentHashMap persistentHashMap1 = persistentHashMap0.withMeta(persistentArrayMap0);
      assertNotNull(persistentHashMap1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String[] stringArray0 = new String[7];
      String string0 = ", keyDeserializer=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "1 Jo)5?M#!DD1Pg= ";
      stringArray0[2] = string2;
      String string3 = "clojure.lang.Compiler$TheVarExpr$Parser";
      stringArray0[3] = string3;
      String string4 = "+/*6y";
      stringArray0[4] = string4;
      String string5 = "\"@Tft[(&04\"";
      stringArray0[5] = string5;
      String string6 = "2?6i!VJIx7/";
      stringArray0[6] = string6;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      String string7 = "etr";
      Pattern pattern0 = Pattern.compile(string7);
      assertNotNull(pattern0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string3, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      long long1 = 354L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long1);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertFalse(long1 == long0);
      
      int int0 = Integer.MAX_VALUE;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertFalse(long1 == long0);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(int0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      String string8 = kafkaSpoutStreamsWildcardTopics0.toString();
      assertNotNull(string8);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string8);
      assertNotSame(string3, string7);
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertEquals(7, stringArray0.length);
      
      long long2 = 1L;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(long2);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string8);
      assertNotSame(string3, string7);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertFalse(long2 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTupleBuilder1 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTuplesBuilderWildcardTopics1 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Object>(kafkaSpoutTupleBuilder1);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics1);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics1, kafkaSpoutRetryExponentialBackoff0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      long long3 = (-89L);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setOffsetCommitPeriodMs(long3);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string8);
      assertNotSame(string3, string7);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder4.build();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      long long0 = 1L;
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      
      PersistentHashMap persistentHashMap1 = persistentHashMap0.withMeta(persistentArrayMap0);
      assertNotNull(persistentHashMap1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String[] stringArray0 = new String[7];
      String string0 = ", keyDeserializer=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "1 Jo)5?M#!DD1Pg= ";
      String string3 = "clojure.lang.Compiler$TheVarExpr$Parser";
      stringArray0[3] = string3;
      String string4 = "+/*6y";
      stringArray0[4] = string4;
      String string5 = "\"@Tft[(&04\"";
      stringArray0[5] = string5;
      String string6 = "2?6i!VJIx7/";
      stringArray0[6] = string6;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      String string7 = "vector?";
      Pattern pattern0 = Pattern.compile(string7);
      assertNotNull(pattern0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string3, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      long long1 = 354L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long1);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertFalse(long1 == long0);
      
      int int0 = Integer.MAX_VALUE;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertFalse(long1 == long0);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0, kafkaSpoutRetryExponentialBackoff0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(int0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string7);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      long long2 = 1L;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(long2);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string7);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(354000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(354L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertFalse(long2 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTupleBuilder1 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTuplesBuilderWildcardTopics1 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutTupleBuilder1);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics1);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics1);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setPollTimeoutMs(long2);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string7);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(long2 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setValueDeserializer(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string7);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(long2 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      SerializableDeserializer<Integer> serializableDeserializer1 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setValueDeserializer(serializableDeserializer1);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string7);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.pattern());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(long2 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      
      PersistentHashMap persistentHashMap1 = persistentHashMap0.withMeta(persistentArrayMap0);
      assertNotNull(persistentHashMap1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String[] stringArray0 = new String[7];
      String string0 = ", keyDeserializer=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "1 Jo)5?M#!DD1Pg= ";
      stringArray0[2] = string2;
      String string3 = "clojure.lang.Compiler$TheVarExpr$Parser";
      String string4 = "+/*6y";
      stringArray0[4] = string4;
      String string5 = "\"@ft(&04\"";
      stringArray0[5] = string5;
      String string6 = "2?6i!VJIx7/";
      stringArray0[6] = string6;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      String string7 = "etr";
      Pattern pattern0 = Pattern.compile(string7);
      assertNotNull(pattern0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertEquals("etr", pattern0.pattern());
      assertEquals("etr", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string3, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.pattern());
      assertEquals("etr", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.pattern());
      assertEquals("etr", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      long long1 = 354L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(long0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(1L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(1000000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertFalse(long0 == long1);
      
      int int0 = Integer.MAX_VALUE;
      String string8 = kafkaSpoutStreamsWildcardTopics0.toString();
      assertNotNull(string8);
      assertNotSame(string7, string8);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string6);
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.pattern());
      assertEquals("etr", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals(7, stringArray0.length);
      
      long long2 = 1L;
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutTupleBuilder1 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals("etr", pattern0.pattern());
      assertEquals("etr", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string7, string8);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals("etr", pattern0.pattern());
      assertEquals("etr", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(long0 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKeyDeserializer(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string7, string8);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.pattern());
      assertEquals("etr", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(long0 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string7, string8);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.pattern());
      assertEquals("etr", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(long0 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      long long0 = 1L;
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      
      PersistentHashMap persistentHashMap1 = persistentHashMap0.withMeta(persistentArrayMap0);
      assertNotNull(persistentHashMap1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String[] stringArray0 = new String[7];
      String string0 = ", keyDeserializer=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "1 Jo)5?M#!DD1Pg= ";
      String string3 = "clojure.lang.Compiler$TheVarExpr$Parser";
      stringArray0[3] = string3;
      String string4 = "+/*6y";
      stringArray0[4] = string4;
      String string5 = "\"@Tft[(&04\"";
      stringArray0[5] = string5;
      String string6 = "2?6i!VJIx7/";
      stringArray0[6] = string6;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      String string7 = "vector?";
      Pattern pattern0 = Pattern.compile(string7);
      assertNotNull(pattern0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertEquals("vector?", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.toString());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string3, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(1L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(1000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals("vector?", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string7);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals("vector?", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      long long1 = (-2472L);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(long1);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string7);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals("vector?", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(long1 == long0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder1.setValueDeserializer(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string7);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(long0 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      SerializableDeserializer<Integer> serializableDeserializer1 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setValueDeserializer(serializableDeserializer1);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string7);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("vector?", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("vector?", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(long0 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray1 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray1);
      assertNotSame(kafkaSpoutConfig_FirstPollOffsetStrategyArray1, kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertFalse(kafkaSpoutConfig_FirstPollOffsetStrategyArray1.equals((Object)kafkaSpoutConfig_FirstPollOffsetStrategyArray0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray1.length);
      
      KafkaSpoutTuplesBuilder<Integer, Integer> kafkaSpoutTuplesBuilder0 = null;
      int int0 = 612;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(1L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(1000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertFalse(long0 == long1);
      
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder5 = null;
      try {
        kafkaSpoutConfig_Builder5 = new KafkaSpoutConfig.Builder<Integer, Integer>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilder0, kafkaSpoutRetryExponentialBackoff0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify at last one tuple builder per topic declared in KafkaSpoutStreams
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck((Object[]) kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertNotNull(persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      
      PersistentHashMap persistentHashMap1 = persistentHashMap0.withMeta(persistentArrayMap0);
      assertNotNull(persistentHashMap1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String[] stringArray0 = new String[7];
      String string0 = ", keyDeserializer=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "1 Jo)5?M#!DD1Pg= ";
      stringArray0[2] = string2;
      String string3 = "clojure.lang.Compiler$TheVarExpr$Parser";
      String string4 = "+/*6y";
      stringArray0[4] = string4;
      String string5 = "\"@ft(&04\"";
      stringArray0[5] = string5;
      String string6 = "2?6i!VJIx7/";
      stringArray0[6] = string6;
      Fields fields0 = new Fields(stringArray0);
      assertNotNull(fields0);
      assertEquals(7, fields0.size());
      assertEquals(7, stringArray0.length);
      
      String string7 = "etr";
      Pattern pattern0 = Pattern.compile(string7);
      assertNotNull(pattern0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string3, pattern0);
      assertNotNull(kafkaSpoutStream0);
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<Integer, Object> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Integer, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      long long1 = 334L;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(long0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(1000000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(1L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(TimeUnit.MILLISECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertFalse(long0 == long1);
      
      int int0 = Integer.MAX_VALUE;
      String string8 = kafkaSpoutStreamsWildcardTopics0.toString();
      assertNotNull(string8);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string3, string8);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertEquals(7, stringArray0.length);
      
      long long2 = 1L;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(persistentHashMap1, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string8);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string7);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(7, fields0.size());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(long0 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKeyDeserializer(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string8);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string7);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(long0 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(persistentHashMap0, persistentHashMap1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertNotSame(persistentHashMap1, persistentHashMap0);
      assertNotSame(string3, string8);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string7);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(2, persistentHashMap1.count());
      assertEquals(7, fields0.size());
      assertEquals("etr", pattern0.toString());
      assertEquals("etr", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("clojure.lang.Compiler$TheVarExpr$Parser", kafkaSpoutStream0.getStreamId());
      assertFalse(long0 == long1);
      assertTrue(persistentHashMap0.equals((Object)persistentHashMap1));
      assertTrue(persistentHashMap1.equals((Object)persistentHashMap0));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutTupleBuilder<PersistentVector, PersistentVector> kafkaSpoutTupleBuilder1 = (KafkaSpoutTupleBuilder<PersistentVector, PersistentVector>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<PersistentVector, PersistentVector> kafkaSpoutTuplesBuilderWildcardTopics1 = new KafkaSpoutTuplesBuilderWildcardTopics<PersistentVector, PersistentVector>(kafkaSpoutTupleBuilder1);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics1);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = null;
      KafkaSpoutConfig.Builder<PersistentVector, PersistentVector> kafkaSpoutConfig_Builder4 = null;
      try {
        kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<PersistentVector, PersistentVector>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics1, kafkaSpoutRetryService0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify at implementation of retry service
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }
}
