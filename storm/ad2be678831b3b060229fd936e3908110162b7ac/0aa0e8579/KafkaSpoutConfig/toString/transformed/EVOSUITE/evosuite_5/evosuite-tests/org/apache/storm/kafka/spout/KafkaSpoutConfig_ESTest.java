/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 31 21:08:42 GMT 2021
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.IPersistentMap;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentTreeMap;
import clojure.lang.PersistentVector;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.IntegerDeserializer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.KafkaSpoutStream;
import org.apache.storm.kafka.spout.KafkaSpoutStreams;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsNamedTopics;
import org.apache.storm.kafka.spout.KafkaSpoutStreamsWildcardTopics;
import org.apache.storm.kafka.spout.KafkaSpoutTupleBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilder;
import org.apache.storm.kafka.spout.KafkaSpoutTuplesBuilderWildcardTopics;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap0.count());
      assertNotNull(persistentArrayMap0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>(persistentArrayMap0, kafkaSpoutStreams0, kafkaSpoutConfig0.tuplesBuilder);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig0);
      
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      assertEquals(0L, long0);
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Map<String, Object> map0 = kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(hashMap0);
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(map0);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>(map0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      String string0 = kafkaSpoutConfig0.toString();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=0, offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=null, topics=null, topicWildcardPattern=null}", string0);
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      KafkaSpoutConfig<Integer, PersistentVector> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, PersistentVector>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getKeyDeserializer();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(deserializer0);
      
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, Object>();
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      KafkaSpoutTuplesBuilder<String, Object> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig1.getTuplesBuilder();
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(kafkaSpoutTuplesBuilder0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      KafkaSpoutConfig.Builder<PersistentVector, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<PersistentVector, Object>();
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<PersistentVector, Object> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<PersistentVector, Object>();
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<PersistentVector, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig<PersistentVector, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<PersistentVector, Object>();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      long long0 = kafkaSpoutConfig0.getPollTimeoutMs();
      assertEquals(0L, long0);
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(pattern0);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder3);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setMaxUncommittedOffsets(kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(10000000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder4.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder4.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder4.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder4);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder5 = null;
      try {
        kafkaSpoutConfig_Builder5 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig_Builder2.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig_Builder2.tuplesBuilder);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(10000000L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValueDeserializer(kafkaSpoutConfig_Builder1.keyDeserializer);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(10000000L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(10000000L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      assertEquals(0, int0);
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = null;
      try {
        kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig_Builder2.kafkaSpoutStreams, kafkaSpoutConfig_Builder1.tuplesBuilder, kafkaSpoutConfig_Builder0.retryService);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig0);
      
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNull(list0);
      
      kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, String>();
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      Map<String, Object> map0 = kafkaSpoutConfig1.getKafkaProps();
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(map0);
      
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig2 = new KafkaSpoutConfig<Integer, Object>();
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig2);
      
      Deserializer<Object> deserializer0 = kafkaSpoutConfig2.getValueDeserializer();
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(deserializer0);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig2.getRetryService();
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(kafkaSpoutRetryService0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, Object>();
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_Builder0.firstPollOffsetStrategy);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKeyDeserializer(kafkaSpoutConfig_Builder1.valueDeserializer);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getConsumerGroupId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      KafkaSpoutConfig.Builder<Locale.FilteringMode, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Locale.FilteringMode, Integer>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      KafkaSpoutConfig<Locale.FilteringMode, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Locale.FilteringMode, Integer>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = "enable.auto.commit";
      Object object0 = hashMap0.put(string0, kafkaSpoutConfig0);
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNull(object0);
      
      Map<String, Object> map0 = kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(hashMap0);
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNotNull(map0);
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig1.getKafkaSpoutStreams();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(kafkaSpoutStreams0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(objectArray0);
      assertEquals(1, persistentHashMap0.count());
      assertEquals(2, objectArray0.length);
      assertNotNull(persistentHashMap0);
      
      PersistentVector persistentVector0 = PersistentVector.EMPTY;
      assertEquals(0, persistentVector0.count());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      
      Fields fields0 = new Fields(persistentVector0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(fields0);
      
      String string0 = "P";
      Pattern pattern0 = Pattern.compile(string0, persistentVector0.shift);
      assertEquals(0, persistentVector0.count());
      assertEquals("P", pattern0.pattern());
      assertEquals(5, pattern0.flags());
      assertEquals("P", pattern0.toString());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(pattern0);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string0, pattern0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals("P", pattern0.pattern());
      assertEquals(5, pattern0.flags());
      assertEquals("P", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("P", kafkaSpoutStream0.getStreamId());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutStream0);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals("P", pattern0.pattern());
      assertEquals(5, pattern0.flags());
      assertEquals("P", pattern0.toString());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("P", kafkaSpoutStream0.getStreamId());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      
      KafkaSpoutConfig.Builder<Integer, Locale.FilteringMode> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Locale.FilteringMode>();
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder1 = null;
      try {
        kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<Object, String>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutConfig_Builder0.tuplesBuilder);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify at last one tuple builder per topic declared in KafkaSpoutStreams
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(objectArray0);
      assertEquals(1, persistentHashMap0.count());
      assertEquals(2, objectArray0.length);
      assertNotNull(persistentHashMap0);
      
      PersistentVector persistentVector0 = PersistentVector.EMPTY;
      assertEquals(0, persistentVector0.count());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      
      Fields fields0 = new Fields(persistentVector0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(fields0);
      
      String string0 = "D";
      Pattern pattern0 = Pattern.compile(string0);
      assertEquals(0, pattern0.flags());
      assertEquals("D", pattern0.pattern());
      assertEquals("D", pattern0.toString());
      assertNotNull(pattern0);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string0, pattern0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("D", pattern0.pattern());
      assertEquals("D", pattern0.toString());
      assertEquals("D", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutStream0);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("D", pattern0.pattern());
      assertEquals("D", pattern0.toString());
      assertEquals("D", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      
      KafkaSpoutTupleBuilder<Object, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertEquals(1, persistentHashMap0.count());
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("D", pattern0.pattern());
      assertEquals("D", pattern0.toString());
      assertEquals("D", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(2, objectArray0.length);
      assertEquals(5, persistentVector0.shift);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = null;
      KafkaSpoutConfig.Builder<PersistentVector, Object> kafkaSpoutConfig_Builder1 = null;
      try {
        kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<PersistentVector, Object>(kafkaSpoutConfig_Builder0.kafkaProps, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutConfig_Builder0.tuplesBuilder, kafkaSpoutRetryService0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify at implementation of retry service
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNull(list0);
      
      String string0 = "enable.auto.commit";
      Object object0 = hashMap0.put(string0, string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) hashMap0;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, kafkaSpoutConfig0.kafkaProps.size());
      assertFalse(kafkaSpoutConfig0.kafkaProps.isEmpty());
      
      boolean boolean0 = kafkaSpoutConfig0.isConsumerAutoCommitMode();
      assertFalse(boolean0);
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNull(kafkaSpoutStreams0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertNotNull(kafkaSpoutConfig0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = "enable.auto.commit";
      Object object0 = hashMap0.put(string0, string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) hashMap0;
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(kafkaSpoutConfig0.kafkaProps.isEmpty());
      assertEquals(1, kafkaSpoutConfig0.kafkaProps.size());
      
      boolean boolean0 = kafkaSpoutConfig0.isConsumerAutoCommitMode();
      assertFalse(boolean0);
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertNotNull(kafkaSpoutConfig0);
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertNotNull(persistentArrayMap0);
      
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) persistentArrayMap0;
      assertTrue(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertTrue(kafkaSpoutConfig0.kafkaProps.isEmpty());
      assertEquals(0, kafkaSpoutConfig0.kafkaProps.size());
      
      boolean boolean0 = kafkaSpoutConfig0.isConsumerAutoCommitMode();
      assertTrue(boolean0);
      assertTrue(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(pattern0);
      
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>(kafkaSpoutConfig0.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, String>();
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      long long0 = 0L;
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      String string0 = "G1[i%r\"tjfR";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.G1[i%r\"tjfR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, Object>();
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      int int0 = 0;
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(int0);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      long long0 = 200L;
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(long0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(0, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder1.keyDeserializer);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(0, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder3);
      
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>(kafkaSpoutConfig_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, Object>();
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.EARLIEST;
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      long long0 = (-2782L);
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(long0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals((-2782L), kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals((-2782L), kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals((-2782L), kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder1.valueDeserializer);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals((-2782L), kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals((-2782L), kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals((-2782L), kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals((-2782L), kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder3);
      
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>(kafkaSpoutConfig_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      KafkaSpoutConfig.Builder<PersistentVector, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<PersistentVector, Integer>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = null;
      try {
        kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<Integer, Object>(kafkaSpoutConfig_Builder0.kafkaProps, kafkaSpoutConfig_Builder0.kafkaSpoutStreams, kafkaSpoutConfig_Builder0.tuplesBuilder, kafkaSpoutConfig_Builder0.retryService);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, Object>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig1);
      
      long long0 = kafkaSpoutConfig1.getPollTimeoutMs();
      assertEquals(0L, long0);
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertNotNull(persistentArrayMap0);
      
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig0);
      
      boolean boolean0 = persistentArrayMap0.containsValue(kafkaSpoutConfig0);
      assertFalse(boolean0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig0.getKafkaSpoutStreams();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNull(kafkaSpoutStreams0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>(persistentArrayMap0, kafkaSpoutStreams0, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Map<String, Object> map0 = kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(hashMap0);
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(map0);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>(map0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      KafkaSpoutConfig.Builder<PersistentVector, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<PersistentVector, KafkaSpoutStreamsNamedTopics>();
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<PersistentVector> serializableDeserializer0 = (SerializableDeserializer<PersistentVector>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<PersistentVector, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      int int0 = (-161);
      KafkaSpoutConfig.Builder<PersistentVector, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setMaxUncommittedOffsets(int0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals((-161), kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals((-161), kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals((-161), kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.Builder<PersistentVector, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals((-161), kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals((-161), kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals((-161), kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals((-161), kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder3);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertNotNull(kafkaSpoutConfig0);
      
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertNull(list0);
      
      KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.isConsumerAutoCommitMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      kafkaSpoutConfig0.firstPollOffsetStrategy = kafkaSpoutConfig_FirstPollOffsetStrategy0;
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      String string0 = kafkaSpoutConfig0.toString();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=0, offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=LATEST, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=null, topics=null, topicWildcardPattern=null}", string0);
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(string0);
      
      int int0 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      assertEquals(0, int0);
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      KafkaSpoutConfig<PersistentVector, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<PersistentVector, Integer>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig0);
      
      Deserializer<PersistentVector> deserializer0 = kafkaSpoutConfig0.getKeyDeserializer();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNull(deserializer0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.EARLIEST;
      kafkaSpoutConfig0.firstPollOffsetStrategy = kafkaSpoutConfig_FirstPollOffsetStrategy0;
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig1);
      
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS;
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      String string0 = kafkaSpoutConfig1.toString();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=0, offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=null, topics=null, topicWildcardPattern=null}", string0);
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertNotNull(string0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object>();
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(kafkaSpoutConfig1.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(10000000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object> kafkaSpoutConfig2 = null;
      try {
        kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Object>(kafkaSpoutConfig_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, String>();
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      long long0 = 0L;
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKeyDeserializer(kafkaSpoutConfig_Builder0.keyDeserializer);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder3);
      
      int int0 = 425;
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setMaxUncommittedOffsets(int0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertEquals(0L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(425, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(425, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(425, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(425, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder4.offsetCommitPeriodMs);
      assertEquals(425, kafkaSpoutConfig_Builder4.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder4.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder4);
      
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setValueDeserializer(kafkaSpoutConfig_Builder2.valueDeserializer);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertEquals(0L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(425, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(425, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(425, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(425, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder4.offsetCommitPeriodMs);
      assertEquals(425, kafkaSpoutConfig_Builder4.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig_Builder4.pollTimeoutMs);
      assertEquals(425, kafkaSpoutConfig_Builder5.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder5.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig_Builder5.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder5);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<String, Object>();
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      kafkaSpoutConfig_Builder0.kafkaProps = kafkaSpoutConfig_Builder1.kafkaProps;
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setPollTimeoutMs(kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(10000000L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      long long0 = 377L;
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      assertNotNull(stringDeserializer0);
      
      long long1 = 0L;
      kafkaSpoutConfig0.offsetCommitPeriodMs = long1;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      kafkaSpoutConfig0.valueDeserializer = (Deserializer<String>) stringDeserializer0;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = long0;
      kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(377L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, String>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(377L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig1);
      
      Pattern pattern0 = kafkaSpoutConfig1.getTopicWildcardPattern();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(377L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertNull(pattern0);
      
      Deserializer<Object> deserializer0 = kafkaSpoutConfig1.getKeyDeserializer();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(377L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertNull(deserializer0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValueDeserializer(serializableDeserializer0);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKeyDeserializer(kafkaSpoutConfig_Builder0.valueDeserializer);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig0);
      
      kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      
      KafkaSpoutConfig<String, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, String>();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig1);
      
      long long0 = 200L;
      kafkaSpoutConfig1.keyDeserializer = kafkaSpoutConfig0.valueDeserializer;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      
      KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS = long0;
      String string0 = KafkaSpoutConfig.Consumer.GROUP_ID;
      assertEquals("group.id", string0);
      assertNotNull(string0);
      
      long long1 = kafkaSpoutConfig1.getOffsetsCommitPeriodMs();
      assertEquals(0L, long1);
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertFalse(long1 == long0);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = null;
      int int0 = 753;
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig1.kafkaProps, kafkaSpoutConfig1.kafkaSpoutStreams, kafkaSpoutConfig1.tuplesBuilder, kafkaSpoutRetryExponentialBackoff0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig0.getRetryService();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(kafkaSpoutRetryService0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      long long0 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      assertEquals(0L, long0);
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      Map<String, Object> map0 = kafkaSpoutConfig1.getKafkaProps();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(map0);
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(map0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig1.tuplesBuilder);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig<String, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, String>();
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.setDefaultsAndGetKafkaProps(kafkaSpoutConfig0.kafkaProps);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getConsumerGroupId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      KafkaSpoutConfig<PersistentVector, PersistentVector> kafkaSpoutConfig0 = new KafkaSpoutConfig<PersistentVector, PersistentVector>();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig0);
      
      int int0 = 4;
      KafkaSpoutTupleBuilder<PersistentVector, PersistentVector> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<PersistentVector, PersistentVector>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<PersistentVector, PersistentVector> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<PersistentVector, PersistentVector>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      kafkaSpoutConfig0.tuplesBuilder = (KafkaSpoutTuplesBuilder<PersistentVector, PersistentVector>) kafkaSpoutTuplesBuilderWildcardTopics0;
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      
      kafkaSpoutConfig0.maxUncommittedOffsets = int0;
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(4, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getConsumerGroupId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig0);
      
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer0 = (Deserializer<KafkaSpoutStreamsWildcardTopics>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      kafkaSpoutConfig0.valueDeserializer = deserializer0;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      int int0 = 44;
      KafkaSpoutConfig.DEFAULT_MAX_RETRIES = int0;
      int int1 = 0;
      KafkaSpoutConfig.DEFAULT_MAX_RETRIES = int1;
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer1 = kafkaSpoutConfig0.getKeyDeserializer();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNull(deserializer1);
      
      KafkaSpoutConfig.Builder<PersistentVector, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<PersistentVector, Integer>();
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<PersistentVector, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig0.firstPollOffsetStrategy);
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<PersistentVector, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKeyDeserializer(kafkaSpoutConfig_Builder0.keyDeserializer);
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<Object, PersistentVector> kafkaSpoutConfig_Builder3 = null;
      KafkaSpoutConfig<Object, PersistentVector> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, PersistentVector>(kafkaSpoutConfig_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(deserializer0);
      
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Integer>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      
      KafkaSpoutConfig<String, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Integer>();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutTupleBuilder<String, Integer> kafkaSpoutTupleBuilder0 = null;
      KafkaSpoutTuplesBuilderWildcardTopics<String, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, Integer>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      kafkaSpoutConfig0.tuplesBuilder = (KafkaSpoutTuplesBuilder<String, Integer>) kafkaSpoutTuplesBuilderWildcardTopics0;
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      long long0 = (-1113L);
      kafkaSpoutConfig0.pollTimeoutMs = long0;
      assertEquals((-1113L), kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      assertEquals((-1113L), kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      assertEquals((-1113L), kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals((-1113L), kafkaSpoutConfig0.pollTimeoutMs);
      assertNull(deserializer0);
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsWildcardTopics>();
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig1);
      
      long long1 = 270L;
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = long1;
      // Undeclared exception!
      try { 
        kafkaSpoutConfig1.isConsumerAutoCommitMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutTuplesBuilder<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig0.getTuplesBuilder();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNull(kafkaSpoutTuplesBuilder0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      long long0 = 3206L;
      kafkaSpoutConfig0.pollTimeoutMs = long0;
      assertEquals(3206L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      
      long long1 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      assertEquals(0L, long1);
      assertEquals(3206L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(long1 == long0);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(3206L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Object>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig1);
      
      long long2 = kafkaSpoutConfig1.getOffsetsCommitPeriodMs();
      assertEquals(0L, long2);
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<KafkaSpoutStreamsNamedTopics> serializableDeserializer0 = (SerializableDeserializer<KafkaSpoutStreamsNamedTopics>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      int int0 = (-1257);
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxUncommittedOffsets(int0);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals((-1257), kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals((-1257), kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals((-1257), kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals((-1257), kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig2 = null;
      try {
        kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutConfig_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, String>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig0);
      
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer0 = (Deserializer<KafkaSpoutStreamsWildcardTopics>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutStreams kafkaSpoutStreams0 = null;
      kafkaSpoutConfig0.kafkaSpoutStreams = kafkaSpoutStreams0;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNull(list0);
      
      kafkaSpoutConfig0.kafkaSpoutStreams = kafkaSpoutStreams0;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      
      kafkaSpoutConfig0.keyDeserializer = deserializer0;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNull(pattern0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(2, persistentArrayMap0.count());
      assertEquals(2, persistentArrayMap0.capacity());
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(persistentArrayMap0);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentArrayMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      KafkaSpoutConfig<PersistentVector, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<PersistentVector, KafkaSpoutStreamsWildcardTopics>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) kafkaSpoutConfig0;
      Deserializer<KafkaSpoutStreamsWildcardTopics> deserializer0 = (Deserializer<KafkaSpoutStreamsWildcardTopics>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(deserializer0).toString();
      kafkaSpoutConfig0.valueDeserializer = deserializer0;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      
      objectArray0[1] = (Object) kafkaSpoutConfig0;
      objectArray0[2] = (Object) kafkaSpoutConfig0;
      objectArray0[3] = (Object) kafkaSpoutConfig0;
      objectArray0[4] = (Object) kafkaSpoutConfig0;
      objectArray0[5] = (Object) kafkaSpoutConfig0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      KafkaSpoutConfig<Integer, PersistentVector> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, PersistentVector>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      String string0 = kafkaSpoutConfig1.toString();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=0, offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=null, topics=null, topicWildcardPattern=null}", string0);
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(string0);
      
      objectArray0[6] = object0;
      // Undeclared exception!
      try { 
        PersistentArrayMap.createWithCheck(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key: KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=0, offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=null, topics=null, topicWildcardPattern=null}
         //
         verifyException("clojure.lang.PersistentArrayMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      KafkaSpoutConfig<PersistentVector, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<PersistentVector, String>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig0);
      
      Pattern pattern0 = kafkaSpoutConfig0.getTopicWildcardPattern();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNull(pattern0);
      
      kafkaSpoutConfig0.pollTimeoutMs = kafkaSpoutConfig0.DEFAULT_OFFSET_COMMIT_PERIOD_MS;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      
      String string0 = kafkaSpoutConfig0.toString();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=30000, offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=null, topics=null, topicWildcardPattern=null}", string0);
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(string0);
      
      KafkaSpoutConfig<String, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, String>();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig1);
      
      List<String> list0 = kafkaSpoutConfig1.getSubscribedTopics();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertNull(list0);
      
      Deserializer<String> deserializer0 = kafkaSpoutConfig1.getValueDeserializer();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertNull(deserializer0);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig2 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig2);
      
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, PersistentVector> kafkaSpoutConfig3 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, PersistentVector>();
      assertEquals(0L, kafkaSpoutConfig3.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig3.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig3.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig3.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig3.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig3.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig3.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertNotNull(kafkaSpoutConfig3);
      
      kafkaSpoutConfig3.getFirstPollOffsetStrategy();
      assertEquals(0L, kafkaSpoutConfig3.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig3.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig3.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig3.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig3.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig3.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig3.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      
      Pattern pattern1 = kafkaSpoutConfig2.getTopicWildcardPattern();
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(pattern1);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder1 = null;
      try {
        kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<String, Object>(kafkaSpoutConfig1.kafkaProps, kafkaSpoutConfig_Builder0.kafkaSpoutStreams, kafkaSpoutConfig1.tuplesBuilder, kafkaSpoutConfig2.retryService);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, Integer>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>();
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serializableDeserializer0).toString();
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      long long0 = (-695L);
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(long0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals((-695L), kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals((-695L), kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals((-695L), kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      SerializableDeserializer<Integer> serializableDeserializer1 = kafkaSpoutConfig_Builder2.keyDeserializer;
      assertSame(serializableDeserializer1, serializableDeserializer0);
      assertNotNull(serializableDeserializer1);
      
      kafkaSpoutConfig0.valueDeserializer = (Deserializer<Integer>) serializableDeserializer1;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(deserializer0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Integer>();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig<Object, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, Object>();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig1);
      
      long long0 = 1L;
      kafkaSpoutConfig1.offsetCommitPeriodMs = long0;
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(1L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      
      long long1 = kafkaSpoutConfig1.getPollTimeoutMs();
      assertEquals(0L, long1);
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(1L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertFalse(long1 == long0);
      assertEquals(1L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      KafkaSpoutConfig.Builder<PersistentVector, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<PersistentVector, Object>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<PersistentVector, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(10000000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(10000000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<PersistentVector, Object> kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<PersistentVector, Object>();
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig<PersistentVector, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<PersistentVector, Object>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig0);
      
      kafkaSpoutConfig0.pollTimeoutMs = (long) kafkaSpoutConfig_Builder0.maxUncommittedOffsets;
      assertEquals(10000000L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      
      long long0 = kafkaSpoutConfig0.getPollTimeoutMs();
      assertEquals(10000000L, long0);
      assertEquals(10000000L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      
      KafkaSpoutConfig<Integer, PersistentVector> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, PersistentVector>();
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      KafkaSpoutTuplesBuilder<Integer, PersistentVector> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig1.getTuplesBuilder();
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(kafkaSpoutTuplesBuilder0);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder3 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder3);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setFirstPollOffsetStrategy(kafkaSpoutConfig_Builder0.firstPollOffsetStrategy);
      assertEquals(10000000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertEquals(10000000, kafkaSpoutConfig_Builder4.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder4.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder4.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder4);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder3.setMaxUncommittedOffsets(kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertEquals(10000000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder5.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder5.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder5.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder5);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder6 = null;
      try {
        kafkaSpoutConfig_Builder6 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig_Builder1.kafkaProps, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig_Builder1.tuplesBuilder);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      KafkaSpoutConfig<Locale.FilteringMode, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Locale.FilteringMode, String>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig0);
      
      Deserializer<Locale.FilteringMode> deserializer0 = (Deserializer<Locale.FilteringMode>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      kafkaSpoutConfig0.keyDeserializer = deserializer0;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      int int0 = (-718);
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = int0;
      KafkaSpoutConfig<PersistentVector, Object> kafkaSpoutConfig1 = new KafkaSpoutConfig<PersistentVector, Object>();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals((-718), KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig1);
      
      Map<String, Object> map0 = kafkaSpoutConfig1.getKafkaProps();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals((-718), KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertNull(map0);
      
      kafkaSpoutConfig0.kafkaProps = map0;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      
      Deserializer<Locale.FilteringMode> deserializer1 = (Deserializer<Locale.FilteringMode>) mock(Deserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(deserializer1).toString();
      kafkaSpoutConfig1.offsetCommitPeriodMs = kafkaSpoutConfig0.DEFAULT_OFFSET_COMMIT_PERIOD_MS;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(30000L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = (long) kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      kafkaSpoutConfig0.keyDeserializer = deserializer1;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      Deserializer<Locale.FilteringMode> deserializer2 = kafkaSpoutConfig0.getKeyDeserializer();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(deserializer2.equals((Object)deserializer0));
      assertSame(deserializer2, deserializer1);
      assertNotSame(deserializer2, deserializer0);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals((-718L), KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals((-718), KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertNotNull(deserializer2);
      
      KafkaSpoutConfig<Integer, Locale.FilteringMode> kafkaSpoutConfig2 = new KafkaSpoutConfig<Integer, Locale.FilteringMode>();
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals((-718), KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals((-718L), KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig2);
      
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = kafkaSpoutConfig0.maxUncommittedOffsets;
      // Undeclared exception!
      try { 
        kafkaSpoutConfig2.getConsumerGroupId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig0);
      
      int int0 = 1;
      kafkaSpoutConfig0.maxUncommittedOffsets = int0;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(1, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      int int1 = kafkaSpoutConfig0.getMaxUncommittedOffsets();
      assertEquals(1, int1);
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(1, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertTrue(int1 == int0);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(1, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, KafkaSpoutStreamsNamedTopics>(kafkaSpoutConfig_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      KafkaSpoutConfig<Locale.FilteringMode, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<Locale.FilteringMode, Integer>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      KafkaSpoutTupleBuilder<Locale.FilteringMode, Integer> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Locale.FilteringMode, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<Locale.FilteringMode, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Locale.FilteringMode, Integer>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      kafkaSpoutConfig0.tuplesBuilder = (KafkaSpoutTuplesBuilder<Locale.FilteringMode, Integer>) kafkaSpoutTuplesBuilderWildcardTopics0;
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      
      String string0 = "7\\MbEW\"";
      Object object0 = hashMap0.put(string0, kafkaSpoutConfig0.tuplesBuilder);
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNull(object0);
      
      String string1 = "enable.auto.commit";
      Object object1 = hashMap0.put(string1, kafkaSpoutConfig0);
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNull(object1);
      
      Map<String, Object> map0 = kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(hashMap0);
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(map0);
      
      KafkaSpoutConfig.DEFAULT_MAX_RETRIES = kafkaSpoutConfig0.maxUncommittedOffsets;
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = kafkaSpoutConfig0.pollTimeoutMs;
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig0.getRetryService();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNull(kafkaSpoutRetryService0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(hashMap0, kafkaSpoutConfig0.kafkaSpoutStreams, kafkaSpoutConfig0.tuplesBuilder, kafkaSpoutConfig0.retryService);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify stream associated with each topic. Multiple topics can emit to the same stream
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      long long0 = 0L;
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertEquals(0L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>();
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setValueDeserializer(kafkaSpoutConfig_Builder1.keyDeserializer);
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertEquals(0L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder3.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder3.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder3.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder3);
      
      int int0 = 57;
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      int int1 = (-1722);
      kafkaSpoutConfig1.maxUncommittedOffsets = int1;
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals((-1722), kafkaSpoutConfig1.getMaxUncommittedOffsets());
      
      int int2 = kafkaSpoutConfig1.getMaxUncommittedOffsets();
      assertEquals((-1722), int2);
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals((-1722), kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals((-1722), kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      
      KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<Object, KafkaSpoutStreamsNamedTopics>();
      assertEquals(200L, kafkaSpoutConfig_Builder4.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder4.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder4.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder4);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig_Builder4.kafkaSpoutStreams;
      assertNull(kafkaSpoutStreams0);
      
      PersistentTreeMap persistentTreeMap0 = PersistentTreeMap.EMPTY;
      assertEquals(0, persistentTreeMap0.count());
      assertEquals(0, persistentTreeMap0.capacity());
      assertEquals(0, persistentTreeMap0.depth());
      assertEquals(0, persistentTreeMap0._count);
      assertNotNull(persistentTreeMap0);
      
      KafkaSpoutConfig<Integer, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<Integer, String>();
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig2);
      
      long long1 = kafkaSpoutConfig2.getOffsetsCommitPeriodMs();
      assertEquals(0L, long1);
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertTrue(long1 == long0);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      long long0 = (-338L);
      KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS = long0;
      long long1 = 1L;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>();
      assertEquals((-338L), kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<Integer> serializableDeserializer0 = null;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      assertEquals(0, persistentHashMap0.count());
      assertNotNull(persistentHashMap0);
      
      kafkaSpoutConfig_Builder0.kafkaProps = (Map<String, Object>) persistentHashMap0;
      assertEquals(0, persistentHashMap0.count());
      assertEquals(0, kafkaSpoutConfig_Builder0.kafkaProps.size());
      assertTrue(kafkaSpoutConfig_Builder0.kafkaProps.isEmpty());
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      assertEquals((-338L), kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals((-338L), kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, Object>(kafkaSpoutConfig_Builder1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig0);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      assertEquals(0, persistentHashMap0.count());
      assertNotNull(persistentHashMap0);
      
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) persistentHashMap0;
      assertTrue(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, persistentHashMap0.count());
      assertEquals(0, kafkaSpoutConfig0.kafkaProps.size());
      assertTrue(kafkaSpoutConfig0.kafkaProps.isEmpty());
      
      kafkaSpoutConfig0.tuplesBuilder = kafkaSpoutConfig0.tuplesBuilder;
      assertTrue(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutTuplesBuilder<Object, KafkaSpoutStreamsWildcardTopics> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig0.getTuplesBuilder();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(kafkaSpoutTuplesBuilder0);
      
      KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig1);
      
      kafkaSpoutConfig1.kafkaProps = kafkaSpoutConfig0.kafkaProps;
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      
      kafkaSpoutConfig1.offsetCommitPeriodMs = kafkaSpoutConfig0.DEFAULT_POLL_TIMEOUT_MS;
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(200L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      
      long long0 = kafkaSpoutConfig1.getOffsetsCommitPeriodMs();
      assertEquals(200L, long0);
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(200L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      
      int int0 = (-4518);
      KafkaSpoutConfig.DEFAULT_MAX_RETRIES = int0;
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig2 = new KafkaSpoutConfig<Object, Integer>();
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals((-4518), KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig2);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig2.setDefaultsAndGetKafkaProps(kafkaSpoutConfig1.kafkaProps);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      KafkaSpoutConfig.Builder<Locale.FilteringMode, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Locale.FilteringMode, Integer>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      kafkaSpoutConfig_Builder0.kafkaProps = (Map<String, Object>) hashMap0;
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, kafkaSpoutConfig_Builder0.kafkaProps.size());
      assertTrue(kafkaSpoutConfig_Builder0.kafkaProps.isEmpty());
      
      KafkaSpoutConfig<Locale.FilteringMode, Integer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(list0);
      
      KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Object, KafkaSpoutStreamsNamedTopics>();
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      Deserializer<Object> deserializer0 = kafkaSpoutConfig1.getKeyDeserializer();
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(deserializer0);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Locale.FilteringMode> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, Locale.FilteringMode>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Locale.FilteringMode> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsWildcardTopics, Locale.FilteringMode>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Locale.FilteringMode> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsWildcardTopics, Locale.FilteringMode>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      kafkaSpoutConfig0.tuplesBuilder = (KafkaSpoutTuplesBuilder<KafkaSpoutStreamsWildcardTopics, Locale.FilteringMode>) kafkaSpoutTuplesBuilderWildcardTopics0;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      KafkaSpoutTuplesBuilder<KafkaSpoutStreamsWildcardTopics, Locale.FilteringMode> kafkaSpoutTuplesBuilder0 = kafkaSpoutConfig0.getTuplesBuilder();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutTuplesBuilder0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(hashMap0);
      
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) hashMap0;
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertTrue(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(kafkaSpoutConfig0.kafkaProps.isEmpty());
      assertEquals(0, kafkaSpoutConfig0.kafkaProps.size());
      
      String string0 = kafkaSpoutConfig0.getConsumerGroupId();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertTrue(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      long long0 = 0L;
      String string0 = "Fvq\\8(QO.Q4";
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long1 = 2147483669L;
      long long2 = 0L;
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig0);
      
      int int0 = 3458;
      long long3 = (-2568L);
      kafkaSpoutConfig0.offsetCommitPeriodMs = long3;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals((-2568L), kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      String string1 = "";
      KafkaSpoutStreamsNamedTopics kafkaSpoutStreamsNamedTopics0 = mock(KafkaSpoutStreamsNamedTopics.class, new ViolatedAssumptionAnswer());
      long long4 = kafkaSpoutConfig0.getOffsetsCommitPeriodMs();
      assertEquals((-2568L), long4);
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals((-2568L), kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertTrue(long4 == long3);
      assertFalse(long4 == long1);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals((-2568L), kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>();
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig1);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig1.getRetryService();
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNull(kafkaSpoutRetryService0);
      
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig2 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsNamedTopics>();
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig2);
      
      kafkaSpoutConfig2.getFirstPollOffsetStrategy();
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsWildcardTopics, KafkaSpoutStreamsWildcardTopics>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) kafkaSpoutConfig0;
      objectArray0[1] = (Object) kafkaSpoutConfig0;
      objectArray0[2] = (Object) kafkaSpoutConfig0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) kafkaSpoutConfig0;
      objectArray0[5] = (Object) kafkaSpoutConfig0;
      objectArray0[6] = (Object) kafkaSpoutConfig0;
      long long0 = 0L;
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = long0;
      objectArray0[7] = (Object) kafkaSpoutConfig0;
      objectArray0[8] = (Object) kafkaSpoutConfig0;
      PersistentArrayMap persistentArrayMap0 = new PersistentArrayMap(objectArray0);
      assertEquals(4, persistentArrayMap0.count());
      assertEquals(4, persistentArrayMap0.capacity());
      assertEquals(9, objectArray0.length);
      assertNotNull(persistentArrayMap0);
      
      Spliterator spliterator0 = persistentArrayMap0.spliterator();
      assertEquals(4, persistentArrayMap0.count());
      assertEquals(4, persistentArrayMap0.capacity());
      assertEquals(9, objectArray0.length);
      assertNotNull(spliterator0);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.setDefaultsAndGetKafkaProps(persistentArrayMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("clojure.lang.PersistentArrayMap$Iter", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(objectArray0);
      assertEquals(1, persistentHashMap0.count());
      assertEquals(2, objectArray0.length);
      assertNotNull(persistentHashMap0);
      
      PersistentVector persistentVector0 = PersistentVector.EMPTY;
      assertEquals(0, persistentVector0.count());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      
      Fields fields0 = new Fields(persistentVector0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(fields0);
      
      String string0 = "P";
      Pattern pattern0 = Pattern.compile(string0);
      assertEquals(0, pattern0.flags());
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertNotNull(pattern0);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string0, pattern0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("P", kafkaSpoutStream0.getStreamId());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutStream0);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("P", kafkaSpoutStream0.getStreamId());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      
      KafkaSpoutTupleBuilder<Object, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      Matcher matcher0 = pattern0.matcher(string0);
      assertEquals(0, pattern0.flags());
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertEquals(0, matcher0.groupCount());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals("java.util.regex.Matcher[pattern=P region=0,1 lastmatch=]", matcher0.toString());
      assertTrue(matcher0.hasAnchoringBounds());
      assertNotNull(matcher0);
      
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertEquals(1, persistentHashMap0.count());
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(0, pattern0.flags());
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals("P", kafkaSpoutStream0.getStreamId());
      assertEquals(2, objectArray0.length);
      assertEquals(5, persistentVector0.shift);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<String, Object>();
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<String, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setOffsetCommitPeriodMs(persistentVector0.shift);
      assertEquals(0, persistentVector0.count());
      assertEquals(5L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(5L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>(kafkaSpoutConfig_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      KafkaSpoutConfig<String, Object> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, Object>();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST;
      kafkaSpoutConfig0.firstPollOffsetStrategy = kafkaSpoutConfig_FirstPollOffsetStrategy0;
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      List<String> list0 = kafkaSpoutConfig0.getSubscribedTopics();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNull(list0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy1 = kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST, kafkaSpoutConfig_FirstPollOffsetStrategy1);
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_LATEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertSame(kafkaSpoutConfig_FirstPollOffsetStrategy1, kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      
      KafkaSpoutConfig<PersistentVector, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<PersistentVector, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig1);
      
      KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS = kafkaSpoutConfig1.DEFAULT_MAX_RETRIES;
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<Object, String>();
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig2);
      
      Map<String, Object> map0 = kafkaSpoutConfig2.getKafkaProps();
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(map0);
      
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig3 = new KafkaSpoutConfig<Integer, Object>();
      assertEquals(0L, kafkaSpoutConfig3.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig3.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig3.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig3.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig3.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig3.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig3.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig3);
      
      Deserializer<Object> deserializer0 = kafkaSpoutConfig3.getValueDeserializer();
      assertEquals(0L, kafkaSpoutConfig3.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig3.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig3.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig3.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig3.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig3.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig3.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(deserializer0);
      
      KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig4 = new KafkaSpoutConfig<String, KafkaSpoutStreamsWildcardTopics>();
      assertNull(kafkaSpoutConfig4.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig4.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig4.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig4.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig4.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig4.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig4.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig4);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig4.isConsumerAutoCommitMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.create(objectArray0);
      assertEquals(1, persistentHashMap0.count());
      assertEquals(2, objectArray0.length);
      assertNotNull(persistentHashMap0);
      
      PersistentVector persistentVector0 = PersistentVector.EMPTY;
      assertEquals(0, persistentVector0.count());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      
      Fields fields0 = new Fields(persistentVector0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(fields0);
      
      String string0 = "P";
      Pattern pattern0 = Pattern.compile(string0);
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string0, pattern0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("P", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutStream0);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("P", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      
      String string1 = kafkaSpoutStream0.toString();
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("P", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(5, persistentVector0.shift);
      assertNotNull(string1);
      
      KafkaSpoutTupleBuilder<Object, Object> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<Object, Object>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      Matcher matcher0 = pattern0.matcher(string0);
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals("java.util.regex.Matcher[pattern=P region=0,1 lastmatch=]", matcher0.toString());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals(0, matcher0.groupCount());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotNull(matcher0);
      
      KafkaSpoutTuplesBuilderWildcardTopics<Object, Object> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<Object, Object>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<Object, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Object>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertEquals(1, persistentHashMap0.count());
      assertEquals(0, persistentVector0.count());
      assertEquals(0, fields0.size());
      assertEquals("P", pattern0.toString());
      assertEquals("P", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("P", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertFalse(string0.equals((Object)string1));
      assertEquals(2, objectArray0.length);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(5, persistentVector0.shift);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<Integer, Locale.FilteringMode> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<Integer, Locale.FilteringMode>();
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      int int0 = 4610;
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      
      KafkaSpoutConfig.Builder<Object, String> kafkaSpoutConfig_Builder2 = null;
      try {
        kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<Object, String>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutConfig_Builder1.tuplesBuilder);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify at last one tuple builder per topic declared in KafkaSpoutStreams
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      PersistentHashMap persistentHashMap0 = PersistentHashMap.createWithCheck(objectArray0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(4, objectArray0.length);
      assertNotNull(persistentHashMap0);
      
      String[] stringArray0 = new String[0];
      Fields fields0 = new Fields(stringArray0);
      assertEquals(0, fields0.size());
      assertEquals(0, stringArray0.length);
      assertNotNull(fields0);
      
      String string0 = "V@Mo|:l{qGc0";
      int int0 = (-2);
      Pattern pattern0 = Pattern.compile(string0, int0);
      assertEquals("V@Mo|:l{qGc0", pattern0.toString());
      assertEquals("V@Mo|:l{qGc0", pattern0.pattern());
      assertEquals((-2), pattern0.flags());
      assertNotNull(pattern0);
      
      KafkaSpoutStream kafkaSpoutStream0 = new KafkaSpoutStream(fields0, string0, pattern0);
      assertEquals(0, fields0.size());
      assertEquals("V@Mo|:l{qGc0", pattern0.toString());
      assertEquals("V@Mo|:l{qGc0", pattern0.pattern());
      assertEquals((-2), pattern0.flags());
      assertEquals("V@Mo|:l{qGc0", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(0, stringArray0.length);
      assertNotNull(kafkaSpoutStream0);
      
      KafkaSpoutStreamsWildcardTopics kafkaSpoutStreamsWildcardTopics0 = new KafkaSpoutStreamsWildcardTopics(kafkaSpoutStream0);
      assertEquals(0, fields0.size());
      assertEquals("V@Mo|:l{qGc0", pattern0.toString());
      assertEquals("V@Mo|:l{qGc0", pattern0.pattern());
      assertEquals((-2), pattern0.flags());
      assertEquals("V@Mo|:l{qGc0", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(0, stringArray0.length);
      assertNotNull(kafkaSpoutStreamsWildcardTopics0);
      
      KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<KafkaSpoutStreamsNamedTopics, Integer>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutTuplesBuilderWildcardTopics0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, fields0.size());
      assertEquals("V@Mo|:l{qGc0", pattern0.toString());
      assertEquals("V@Mo|:l{qGc0", pattern0.pattern());
      assertEquals((-2), pattern0.flags());
      assertEquals("V@Mo|:l{qGc0", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(4, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<PersistentVector, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<PersistentVector, KafkaSpoutStreamsNamedTopics>(persistentHashMap0, kafkaSpoutStreamsWildcardTopics0, kafkaSpoutConfig_Builder0.tuplesBuilder, kafkaSpoutConfig_Builder0.retryService);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, fields0.size());
      assertEquals("V@Mo|:l{qGc0", pattern0.toString());
      assertEquals("V@Mo|:l{qGc0", pattern0.pattern());
      assertEquals((-2), pattern0.flags());
      assertEquals("V@Mo|:l{qGc0", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(4, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      SerializableDeserializer<KafkaSpoutStreamsNamedTopics> serializableDeserializer0 = kafkaSpoutConfig_Builder1.valueDeserializer;
      assertEquals(4, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNull(serializableDeserializer0);
      
      KafkaSpoutConfig.Builder<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setKeyDeserializer(serializableDeserializer0);
      assertEquals(2, persistentHashMap0.count());
      assertEquals(0, fields0.size());
      assertEquals("V@Mo|:l{qGc0", pattern0.toString());
      assertEquals("V@Mo|:l{qGc0", pattern0.pattern());
      assertEquals((-2), pattern0.flags());
      assertEquals("V@Mo|:l{qGc0", kafkaSpoutStream0.getStreamId());
      assertNull(kafkaSpoutStream0.getTopic());
      assertEquals(4, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder1.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder1.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder1.maxUncommittedOffsets);
      assertEquals(10000000, kafkaSpoutConfig_Builder2.maxUncommittedOffsets);
      assertEquals(200L, kafkaSpoutConfig_Builder2.pollTimeoutMs);
      assertEquals(30000L, kafkaSpoutConfig_Builder2.offsetCommitPeriodMs);
      assertNotNull(kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig0 = null;
      try {
        kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>(kafkaSpoutConfig_Builder2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("clojure.lang.APersistentMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig0);
      
      long long0 = 200L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = new KafkaSpoutRetryExponentialBackoff.TimeInterval(long0, timeUnit0);
      assertEquals(TimeUnit.MINUTES, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(12000000000000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(200L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(TimeUnit.MINUTES, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(12000000000000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(200L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      
      String string0 = kafkaSpoutConfig0.toString();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=0, offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=null, topics=null, topicWildcardPattern=null}", string0);
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(string0);
      
      kafkaSpoutConfig0.retryService = (KafkaSpoutRetryService) kafkaSpoutRetryExponentialBackoff0;
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(TimeUnit.MINUTES, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(12000000000000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(200L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      
      long long1 = (-823L);
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval1 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(long1);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval1.timeUnit());
      assertEquals((-823L), kafkaSpoutRetryExponentialBackoff_TimeInterval1.length());
      assertEquals((-823000L), kafkaSpoutRetryExponentialBackoff_TimeInterval1.lengthNanos());
      assertFalse(long1 == long0);
      assertFalse(kafkaSpoutRetryExponentialBackoff_TimeInterval1.equals((Object)kafkaSpoutRetryExponentialBackoff_TimeInterval0));
      assertNotSame(kafkaSpoutRetryExponentialBackoff_TimeInterval1, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval1);
      
      String string1 = kafkaSpoutConfig0.toString();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=0, offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=KafkaSpoutRetryExponentialBackoff{delay=TimeInterval{length=200, timeUnit=MINUTES}, ratio=TimeInterval{length=200, timeUnit=MINUTES}, maxRetries=10000000, maxRetryDelay=TimeInterval{length=200, timeUnit=MINUTES}}, topics=null, topicWildcardPattern=null}", string1);
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(string1);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig0.getRetryService();
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertSame(kafkaSpoutRetryService0, kafkaSpoutRetryExponentialBackoff0);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertNotNull(kafkaSpoutRetryService0);
      
      KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, KafkaSpoutStreamsNamedTopics>();
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      String string2 = kafkaSpoutConfig1.toString();
      assertEquals("KafkaSpoutConfig{kafkaProps=null, keyDeserializer=null, valueDeserializer=null, pollTimeoutMs=0, offsetCommitPeriodMs=0, maxUncommittedOffsets=0, firstPollOffsetStrategy=null, kafkaSpoutStreams=null, tuplesBuilder=null, retryService=null, topics=null, topicWildcardPattern=null}", string2);
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(string2);
      
      KafkaSpoutConfig<String, String> kafkaSpoutConfig2 = new KafkaSpoutConfig<String, String>();
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertNotNull(kafkaSpoutConfig2);
      
      kafkaSpoutConfig2.tuplesBuilder = kafkaSpoutConfig1.tuplesBuilder;
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig2.isConsumerAutoCommitMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer> kafkaSpoutConfig0 = new KafkaSpoutConfig<KafkaSpoutStreamsNamedTopics, Integer>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig0);
      
      long long0 = (-102L);
      kafkaSpoutConfig0.pollTimeoutMs = long0;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals((-102L), kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      long long1 = 176L;
      IntegerDeserializer integerDeserializer0 = new IntegerDeserializer();
      assertNotNull(integerDeserializer0);
      
      kafkaSpoutConfig0.valueDeserializer = (Deserializer<Integer>) integerDeserializer0;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals((-102L), kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS = long1;
      long long2 = kafkaSpoutConfig0.getPollTimeoutMs();
      assertEquals((-102L), long2);
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals((-102L), kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(176L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals((-102L), kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      
      KafkaSpoutConfig<String, PersistentVector> kafkaSpoutConfig1 = new KafkaSpoutConfig<String, PersistentVector>();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(176L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig1);
      
      KafkaSpoutStreams kafkaSpoutStreams0 = kafkaSpoutConfig1.getKafkaSpoutStreams();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(176L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(kafkaSpoutStreams0);
      
      KafkaSpoutStreams kafkaSpoutStreams1 = kafkaSpoutConfig1.getKafkaSpoutStreams();
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(176L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(kafkaSpoutStreams1);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      
      KafkaSpoutConfig<Object, Integer> kafkaSpoutConfig2 = new KafkaSpoutConfig<Object, Integer>();
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(176L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertNotNull(kafkaSpoutConfig2);
      
      KafkaSpoutStreams kafkaSpoutStreams2 = kafkaSpoutConfig2.getKafkaSpoutStreams();
      assertEquals(0L, kafkaSpoutConfig2.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig2.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig2.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig2.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig2.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(176L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig2.maxUncommittedOffsets);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig2.pollTimeoutMs);
      assertNull(kafkaSpoutStreams2);
      
      KafkaSpoutTupleBuilder<String, String> kafkaSpoutTupleBuilder0 = (KafkaSpoutTupleBuilder<String, String>) mock(KafkaSpoutTupleBuilder.class, new ViolatedAssumptionAnswer());
      KafkaSpoutTuplesBuilderWildcardTopics<String, String> kafkaSpoutTuplesBuilderWildcardTopics0 = new KafkaSpoutTuplesBuilderWildcardTopics<String, String>(kafkaSpoutTupleBuilder0);
      assertNotNull(kafkaSpoutTuplesBuilderWildcardTopics0);
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(kafkaSpoutConfig1.kafkaProps, kafkaSpoutStreams2, kafkaSpoutTuplesBuilderWildcardTopics0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Properties defining consumer connection to Kafka broker are required: null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig0);
      
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      assertNotNull(stringDeserializer0);
      
      kafkaSpoutConfig0.keyDeserializer = (Deserializer<String>) stringDeserializer0;
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) hashMap0;
      assertTrue(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, kafkaSpoutConfig0.kafkaProps.size());
      assertTrue(kafkaSpoutConfig0.kafkaProps.isEmpty());
      
      boolean boolean0 = kafkaSpoutConfig0.isConsumerAutoCommitMode();
      assertTrue(boolean0);
      assertTrue(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      assertNotNull(stringDeserializer0);
      
      kafkaSpoutConfig0.keyDeserializer = (Deserializer<String>) stringDeserializer0;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = "enable.auto.commit";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) string0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) hashMap0;
      objectArray0[4] = (Object) hashMap0;
      objectArray0[5] = (Object) hashMap0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[6] = object2;
      objectArray0[7] = (Object) string0;
      PersistentVector persistentVector0 = PersistentVector.create(objectArray0);
      assertEquals(8, persistentVector0.count());
      assertEquals(8, objectArray0.length);
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      
      Object object3 = hashMap0.put(string0, persistentVector0);
      assertEquals(8, persistentVector0.count());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(8, objectArray0.length);
      assertEquals(5, persistentVector0.shift);
      assertNull(object3);
      
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) hashMap0;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertFalse(kafkaSpoutConfig0.kafkaProps.isEmpty());
      assertEquals(1, kafkaSpoutConfig0.kafkaProps.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.isConsumerAutoCommitMode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // clojure.lang.PersistentVector cannot be cast to java.lang.String
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      KafkaSpoutConfig<String, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<String, String>();
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertNotNull(kafkaSpoutConfig0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = "enable.auto.commit";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = objectArray0[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = (Object) hashMap0;
      int int0 = 393216;
      kafkaSpoutConfig0.maxUncommittedOffsets = int0;
      assertEquals(393216, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      
      objectArray0[5] = (Object) hashMap0;
      objectArray0[7] = (Object) string0;
      PersistentVector persistentVector0 = PersistentVector.create(objectArray0);
      assertEquals(8, persistentVector0.count());
      assertEquals(8, objectArray0.length);
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      
      Object object1 = hashMap0.put(string0, persistentVector0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(8, persistentVector0.count());
      assertEquals(8, objectArray0.length);
      assertEquals(5, persistentVector0.shift);
      assertNull(object1);
      
      PersistentVector persistentVector1 = (PersistentVector)hashMap0.put(string0, objectArray0[0]);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(8, persistentVector1.count());
      assertSame(persistentVector1, persistentVector0);
      assertEquals(8, objectArray0.length);
      assertEquals(5, persistentVector1.shift);
      assertNotNull(persistentVector1);
      
      kafkaSpoutConfig0.kafkaProps = (Map<String, Object>) hashMap0;
      assertEquals(393216, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(kafkaSpoutConfig0.kafkaProps.isEmpty());
      assertEquals(1, kafkaSpoutConfig0.kafkaProps.size());
      
      boolean boolean0 = kafkaSpoutConfig0.isConsumerAutoCommitMode();
      assertFalse(boolean0);
      assertEquals(393216, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(393216, kafkaSpoutConfig0.maxUncommittedOffsets);
      
      KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, KafkaSpoutStreamsWildcardTopics>();
      assertEquals(30000L, kafkaSpoutConfig_Builder0.offsetCommitPeriodMs);
      assertEquals(200L, kafkaSpoutConfig_Builder0.pollTimeoutMs);
      assertEquals(10000000, kafkaSpoutConfig_Builder0.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics> kafkaSpoutConfig1 = null;
      try {
        kafkaSpoutConfig1 = new KafkaSpoutConfig<Integer, KafkaSpoutStreamsWildcardTopics>(kafkaSpoutConfig_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      long long0 = (-2834L);
      System.setCurrentTimeMillis(long0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig<Locale.FilteringMode, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<Locale.FilteringMode, String>();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig1);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      kafkaSpoutConfig1.kafkaProps = (Map<String, Object>) hashMap0;
      assertNull(kafkaSpoutConfig1.getConsumerGroupId());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertTrue(kafkaSpoutConfig1.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, kafkaSpoutConfig1.kafkaProps.size());
      assertTrue(kafkaSpoutConfig1.kafkaProps.isEmpty());
      
      String string0 = "nOJXN{";
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object0 = hashMap0.compute(string0, biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object0);
      
      kafkaSpoutConfig1.maxUncommittedOffsets = kafkaSpoutConfig0.maxUncommittedOffsets;
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertNull(kafkaSpoutConfig1.getConsumerGroupId());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertTrue(kafkaSpoutConfig1.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      
      Map<String, Object> map0 = kafkaSpoutConfig1.getKafkaProps();
      assertNull(kafkaSpoutConfig1.getConsumerGroupId());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertTrue(kafkaSpoutConfig1.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(map0);
      
      String string1 = "clojure.lang.Murmur3";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.clojure.lang.Murmur3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      long long0 = (-2834L);
      System.setCurrentTimeMillis(long0);
      KafkaSpoutConfig<Object, String> kafkaSpoutConfig0 = new KafkaSpoutConfig<Object, String>();
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig0.pollTimeoutMs);
      assertEquals(0, kafkaSpoutConfig0.maxUncommittedOffsets);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0L, kafkaSpoutConfig0.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      
      KafkaSpoutConfig<Locale.FilteringMode, String> kafkaSpoutConfig1 = new KafkaSpoutConfig<Locale.FilteringMode, String>();
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertNotNull(kafkaSpoutConfig1);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      kafkaSpoutConfig1.kafkaProps = (Map<String, Object>) hashMap0;
      assertTrue(kafkaSpoutConfig1.isConsumerAutoCommitMode());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(kafkaSpoutConfig1.kafkaProps.isEmpty());
      assertEquals(0, kafkaSpoutConfig1.kafkaProps.size());
      
      String string0 = "nOJXN{";
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(biFunction0).apply(anyString() , any());
      Object object0 = hashMap0.compute(string0, biFunction0);
      assertEquals("nOJXN{", object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertSame(string0, object0);
      assertSame(object0, string0);
      assertNotNull(object0);
      
      kafkaSpoutConfig1.maxUncommittedOffsets = kafkaSpoutConfig0.maxUncommittedOffsets;
      assertNull(kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(0L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(0L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertTrue(kafkaSpoutConfig1.isConsumerAutoCommitMode());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      
      Map<String, Object> map0 = kafkaSpoutConfig1.getKafkaProps();
      assertTrue(kafkaSpoutConfig1.isConsumerAutoCommitMode());
      assertEquals(0, kafkaSpoutConfig1.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig1.getConsumerGroupId());
      assertEquals(0L, kafkaSpoutConfig1.getPollTimeoutMs());
      assertEquals(0L, kafkaSpoutConfig1.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig1.getFirstPollOffsetStrategy());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(0L, kafkaSpoutConfig1.pollTimeoutMs);
      assertEquals(0L, kafkaSpoutConfig1.offsetCommitPeriodMs);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(0, kafkaSpoutConfig1.maxUncommittedOffsets);
      assertNotNull(map0);
      
      String string1 = "clojure.lang.Murmur3";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.clojure.lang.Murmur3
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
