/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 31 19:12:14 GMT 2021
 */

package org.apache.storm.kafka.spout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import clojure.lang.APersistentVector;
import clojure.lang.ArraySeq;
import clojure.lang.EnumerationSeq;
import clojure.lang.ISeq;
import clojure.lang.MapEntry;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentTreeMap;
import clojure.lang.PersistentVector;
import clojure.lang.StringSeq;
import com.codahale.metrics.MetricRegistry;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.Delayed;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.serialization.ByteArrayDeserializer;
import org.apache.kafka.common.serialization.ByteBufferDeserializer;
import org.apache.kafka.common.serialization.BytesDeserializer;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.DoubleDeserializer;
import org.apache.kafka.common.serialization.IntegerDeserializer;
import org.apache.kafka.common.serialization.LongDeserializer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.storm.generated.Nimbus;
import org.apache.storm.kafka.spout.ByTopicRecordTranslator;
import org.apache.storm.kafka.spout.DefaultRecordTranslator;
import org.apache.storm.kafka.spout.Func;
import org.apache.storm.kafka.spout.KafkaSpoutConfig;
import org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff;
import org.apache.storm.kafka.spout.KafkaSpoutRetryService;
import org.apache.storm.kafka.spout.ManualPartitionNamedSubscription;
import org.apache.storm.kafka.spout.ManualPartitionPatternSubscription;
import org.apache.storm.kafka.spout.ManualPartitioner;
import org.apache.storm.kafka.spout.NamedSubscription;
import org.apache.storm.kafka.spout.PatternSubscription;
import org.apache.storm.kafka.spout.RecordTranslator;
import org.apache.storm.kafka.spout.RoundRobinManualPartitioner;
import org.apache.storm.kafka.spout.SerializableDeserializer;
import org.apache.storm.kafka.spout.SimpleRecordTranslator;
import org.apache.storm.kafka.spout.Subscription;
import org.apache.storm.metric.api.ReducedMetric;
import org.apache.storm.tuple.Fields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSpoutConfig_ESTest extends KafkaSpoutConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "clojure.core$loop$fn__4970";
      Class<Deserializer> class0 = Deserializer.class;
      LongDeserializer longDeserializer0 = new LongDeserializer();
      assertNotNull(longDeserializer0);
      
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      assertNotNull(roundRobinManualPartitioner0);
      
      SerializableDeserializer<ByteArrayDeserializer> serializableDeserializer0 = null;
      String string1 = "2-]^7l(-M;";
      SerializableDeserializer<Delayed> serializableDeserializer1 = (SerializableDeserializer<Delayed>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String string2 = "security.protocol";
      int int0 = 10000000;
      Pattern pattern0 = Pattern.compile(string2);
      assertNotNull(pattern0);
      assertEquals("security.protocol", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("security.protocol", pattern0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "gl>Om+JV";
      SerializableDeserializer<ByteArrayDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteArrayDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<Integer> serializableDeserializer1 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      int int0 = 10000000;
      Pattern pattern0 = Pattern.compile(string0, int0);
      assertNotNull(pattern0);
      assertEquals("gl>Om+JV", pattern0.pattern());
      assertEquals("gl>Om+JV", pattern0.toString());
      assertEquals(10000000, pattern0.flags());
      
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteArrayDeserializer, Integer>(string0, serializableDeserializer0, serializableDeserializer1, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals("gl>Om+JV", pattern0.pattern());
      assertEquals("gl>Om+JV", pattern0.toString());
      assertEquals(10000000, pattern0.flags());
      
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPartitionRefreshPeriodMs(int0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals("gl>Om+JV", pattern0.pattern());
      assertEquals("gl>Om+JV", pattern0.toString());
      assertEquals(10000000, pattern0.flags());
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals("gl>Om+JV", pattern0.pattern());
      assertEquals("gl>Om+JV", pattern0.toString());
      assertEquals(10000000, pattern0.flags());
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setMaxRetries(int0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals("gl>Om+JV", pattern0.pattern());
      assertEquals("gl>Om+JV", pattern0.toString());
      assertEquals(10000000, pattern0.flags());
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      assertNotNull(persistentHashMap0);
      assertEquals(0, persistentHashMap0.count());
      
      long long0 = 0L;
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "clojure.pprint$getf";
      Class<IntegerDeserializer> class0 = IntegerDeserializer.class;
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      assertNotNull(roundRobinManualPartitioner0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string1 = "k'OnK\\+V)";
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      ManualPartitionNamedSubscription manualPartitionNamedSubscription0 = new ManualPartitionNamedSubscription(roundRobinManualPartitioner0, stringArray0);
      assertNotNull(manualPartitionNamedSubscription0);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Integer>(string0, class0, class0, manualPartitionNamedSubscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = "org.apache.storm.kafka.spout.KafkaSpoutConfig";
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(serializableDeserializer0).toString();
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setBootstrapServers(stringArray0[1]);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "m\"";
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setSSLKeystore(stringArray0[0], string3);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string4 = "ServiceUnavailableRetryStrategy";
      String string5 = "%mg&9[+K`|";
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setSSLTruststore(string4, string5);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder4.build();
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      Class<Deserializer> class1 = Deserializer.class;
      KafkaSpoutConfig.Builder<Object, DoubleDeserializer> kafkaSpoutConfig_Builder5 = new KafkaSpoutConfig.Builder<Object, DoubleDeserializer>(stringArray0[1], class1, class1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Object, DoubleDeserializer> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setRetry(kafkaSpoutConfig0.DEFAULT_RETRY_SERVICE);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      KafkaSpoutConfig.Builder<Object, DoubleDeserializer> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setOffsetCommitPeriodMs(kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig_Builder7);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder6);
      
      KafkaSpoutConfig.Builder<Object, DoubleDeserializer> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setGroupId(string3);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig_Builder8);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
      
      Func<ConsumerRecord<Object, DoubleDeserializer>, List<Object>> func0 = (Func<ConsumerRecord<Object, DoubleDeserializer>, List<Object>>) mock(Func.class, new ViolatedAssumptionAnswer());
      Fields fields0 = null;
      try {
        fields0 = new Fields(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate field 'clojure.pprint$getf'
         //
         verifyException("org.apache.storm.tuple.Fields", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "QT2w `pf:'/\"_Zr&#G";
      int int0 = (-553);
      Pattern pattern0 = Pattern.compile(string0, int0);
      assertNotNull(pattern0);
      assertEquals((-553), pattern0.flags());
      assertEquals("QT2w `pf:'/\"_Zr&#G", pattern0.pattern());
      assertEquals("QT2w `pf:'/\"_Zr&#G", pattern0.toString());
      
      String string1 = "";
      Class<Deserializer> class0 = Deserializer.class;
      String string2 = "VRIES_rz]";
      Class<Deserializer> class1 = Deserializer.class;
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      String string3 = null;
      String[] stringArray0 = new String[7];
      stringArray0[3] = string0;
      String string4 = "#e<>CN%S_80UOd";
      stringArray0[1] = string4;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string2;
      stringArray0[6] = string0;
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(string3, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = " ~Wu3Cqx8";
      Class<Deserializer> class0 = Deserializer.class;
      Class<StringDeserializer> class1 = StringDeserializer.class;
      Subscription subscription0 = null;
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String>(string0, class0, class1, subscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig<Nimbus.debug_args._Fields, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      
      String string1 = "";
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setSecurityProtocol(string1);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Pattern pattern0 = null;
      String string2 = "u";
      String[] stringArray0 = new String[1];
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder2 = KafkaSpoutConfig.builder(string2, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder3 = KafkaSpoutConfig.builder(string2, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder4 = KafkaSpoutConfig.builder(string0, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      
      Deserializer<String> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertNotNull(deserializer0);
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not instantiate key deserializer interface org.apache.kafka.common.serialization.Deserializer
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = " ~Wu3Cqx8";
      Class<Deserializer> class0 = Deserializer.class;
      Class<StringDeserializer> class1 = StringDeserializer.class;
      Subscription subscription0 = null;
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String>(string0, class0, class1, subscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig<Nimbus.debug_args._Fields, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      
      Deserializer<String> deserializer0 = kafkaSpoutConfig0.getValueDeserializer();
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(deserializer0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not instantiate key deserializer interface org.apache.kafka.common.serialization.Deserializer
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Class<Deserializer> class0 = Deserializer.class;
      long long0 = (-24L);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "";
      Pattern pattern0 = Pattern.compile(string0);
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      String string1 = "x_]W:Thq`.*{ O";
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertNotNull(predicate0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(string0, pattern0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "|eF&cpl_Y|F@";
      Class<IntegerDeserializer> class0 = IntegerDeserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Object>(string0, class0, class1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(6, stringArray0.length);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(6, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValue((Class<? extends Deserializer<Object>>) class1);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(6, stringArray0.length);
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      int int0 = 87;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setMaxUncommittedOffsets(int0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(6, stringArray0.length);
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      
      String string1 = "\\F,'\\?&!<[M.";
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setSSLKeystore(string1, stringArray0[4], stringArray0[2]);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(6, stringArray0.length);
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(string1.equals((Object)string0));
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string1, string0);
      
      Class<Deserializer> class2 = Deserializer.class;
      KafkaSpoutConfig.Builder<Integer, IntegerDeserializer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setValue((Class<? extends Deserializer<IntegerDeserializer>>) class2);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(6, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertSame(class1, class2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string1, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(class2, class1);
      
      String string2 = "9gL]yHo.";
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<StringDeserializer> serializableDeserializer1 = (SerializableDeserializer<StringDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Object, StringDeserializer> kafkaSpoutConfig_Builder6 = new KafkaSpoutConfig.Builder<Object, StringDeserializer>(string2, serializableDeserializer0, serializableDeserializer1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "Yq8([g)xBjB";
      String string4 = "xGTMV9(3Z:4x1jwc2";
      KafkaSpoutConfig.Builder<Object, StringDeserializer> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setSSLTruststore(string3, string4);
      assertNotNull(kafkaSpoutConfig_Builder7);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      
      int int1 = (-1);
      KafkaSpoutConfig.Builder<Object, StringDeserializer> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setMaxPollRecords(int1);
      assertNotNull(kafkaSpoutConfig_Builder8);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(int1 == int0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "KafkaSpoutConfig{kafkaProps=";
      Class<Deserializer> class0 = Deserializer.class;
      Vector<String> vector0 = new Vector<String>();
      assertFalse(vector0.contains(string0));
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, String>(string0, class0, class0, vector0);
      assertFalse(vector0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      String string1 = "LATEST";
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setGroupId(string1);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      SerializableDeserializer<BytesDeserializer> serializableDeserializer0 = (SerializableDeserializer<BytesDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKey(serializableDeserializer0);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      int int0 = 994;
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setMaxPartitionFectchBytes(int0);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      assertNotNull(persistentHashMap0);
      assertEquals(0, persistentHashMap0.count());
      
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setProp((Map<String, Object>) persistentHashMap0);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, persistentHashMap0.count());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(int0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(994000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(994L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(994000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(994L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      
      Set<TopicPartition> set0 = kafkaSpoutRetryExponentialBackoff0.retriableTopicPartitions();
      assertNotNull(set0);
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(994000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(994L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setRetry(kafkaSpoutRetryExponentialBackoff0);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, persistentHashMap0.count());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertEquals(994000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(994L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String string2 = "0`{81#;0ZHAT}%1:d-";
      SerializableDeserializer<Integer> serializableDeserializer2 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(serializableDeserializer2).toString();
      SerializableDeserializer<ByteArrayDeserializer> serializableDeserializer3 = (SerializableDeserializer<ByteArrayDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[2] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string2;
      stringArray0[6] = string0;
      stringArray0[7] = stringArray0[5];
      stringArray0[8] = string1;
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder6 = new KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer>(string2, serializableDeserializer2, serializableDeserializer3, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "clojure.pprint$get_line";
      String string4 = "&F'*3&JK1;.~";
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setSSLKeystore(string3, string4, string2);
      assertNotNull(kafkaSpoutConfig_Builder7);
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setPollTimeoutMs(int0);
      assertNotNull(kafkaSpoutConfig_Builder8);
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder9 = kafkaSpoutConfig_Builder8.setValue((Class<? extends Deserializer<ByteArrayDeserializer>>) class0);
      assertNotNull(kafkaSpoutConfig_Builder9);
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder9);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder9);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder10 = kafkaSpoutConfig_Builder9.setPartitionRefreshPeriodMs(int0);
      assertNotNull(kafkaSpoutConfig_Builder10);
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(kafkaSpoutConfig_Builder7.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder7));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder9);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder9);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder10);
      assertSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder9);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      KafkaSpoutConfig<Integer, ByteArrayDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder10.build();
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(994L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(994L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(kafkaSpoutConfig_Builder7.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(kafkaSpoutConfig_Builder7.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder7));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder9);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder9);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder10);
      assertSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder9);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      long long0 = kafkaSpoutConfig0.getPollTimeoutMs();
      assertEquals(994L, long0);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(994L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(994L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(kafkaSpoutConfig_Builder7.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(kafkaSpoutConfig_Builder7.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder7));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder7));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder9);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder9);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder10);
      assertSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder9);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string1 = "/Q*/O";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      String[] stringArray0 = new String[11];
      stringArray0[0] = string1;
      stringArray0[3] = string0;
      stringArray0[2] = string1;
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer>(string1, class0, class1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "enable.auto.commit";
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setProp(string2, (Object) string2);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      KafkaSpoutConfig<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean1 = true;
      boolean boolean2 = false;
      long long0 = kafkaSpoutConfig0.getPartitionRefreshPeriodMs();
      assertEquals(2000L, long0);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(map0);
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      RecordTranslator<BytesDeserializer, ByteBufferDeserializer> recordTranslator0 = kafkaSpoutConfig0.getTranslator();
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(recordTranslator0);
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "7 i\"=(2Re6t";
      List<String> list0 = RecordTranslator.DEFAULT_STREAM;
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = KafkaSpoutConfig.builder(string0, (Collection<String>) list0);
      assertFalse(list0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string1 = "enable.auto.commit";
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<Integer> serializableDeserializer1 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      stringArray0[0] = string1;
      String string2 = "";
      stringArray0[1] = string2;
      String string3 = "";
      stringArray0[2] = string3;
      String string4 = "enable.auto.commit";
      stringArray0[3] = string4;
      String string5 = "/J2";
      stringArray0[4] = string5;
      String string6 = "";
      stringArray0[5] = string6;
      stringArray0[6] = string0;
      stringArray0[7] = string1;
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer>(string1, serializableDeserializer0, serializableDeserializer1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      String string7 = "2H# #H+1";
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setSSLKeystore(string7, stringArray0[1]);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      
      long long0 = 398L;
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setPollTimeoutMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = (KafkaSpoutRetryExponentialBackoff)KafkaSpoutConfig.DEFAULT_RETRY_SERVICE;
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setRetry(kafkaSpoutRetryExponentialBackoff0);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      
      int int0 = (-2320);
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setMaxPollRecords(int0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      
      Func<ConsumerRecord<ByteBufferDeserializer, Integer>, List<Object>> func0 = (Func<ConsumerRecord<ByteBufferDeserializer, Integer>, List<Object>>) mock(Func.class, new ViolatedAssumptionAnswer());
      Fields fields0 = new Fields(list0);
      assertFalse(list0.contains(string7));
      assertNotNull(fields0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, fields0.size());
      
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setRecordTranslator(func0, fields0);
      assertFalse(list0.contains(string7));
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, fields0.size());
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder4);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setProp(properties0);
      assertFalse(list0.contains(string7));
      assertNotNull(kafkaSpoutConfig_Builder7);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, fields0.size());
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder7);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "EN+OrOz";
      SerializableDeserializer<StringDeserializer> serializableDeserializer0 = (SerializableDeserializer<StringDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[1];
      ArraySeq arraySeq0 = ArraySeq.create(objectArray0);
      assertNotNull(arraySeq0);
      assertEquals(0, arraySeq0.index());
      assertEquals(1, arraySeq0.count());
      assertFalse(arraySeq0.isEmpty());
      assertEquals(1, objectArray0.length);
      
      PersistentHashSet persistentHashSet0 = PersistentHashSet.create((ISeq) arraySeq0);
      assertNotNull(persistentHashSet0);
      assertEquals(0, arraySeq0.index());
      assertEquals(1, arraySeq0.count());
      assertFalse(arraySeq0.isEmpty());
      assertEquals(1, objectArray0.length);
      
      KafkaSpoutConfig.Builder<StringDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<StringDeserializer, ByteBufferDeserializer>(string0, serializableDeserializer0, serializableDeserializer1, persistentHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentSet", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      String string0 = "org.apache.storm.kafka.spout.KafkaSpoutConfig";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      assertFalse(priorityBlockingQueue0.contains(string0));
      assertNotNull(priorityBlockingQueue0);
      
      KafkaSpoutConfig.Builder<LongDeserializer, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<LongDeserializer, Integer>(string0, class0, class1, priorityBlockingQueue0);
      assertFalse(priorityBlockingQueue0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      String string1 = "clj_time.core$fn__1179";
      boolean boolean1 = priorityBlockingQueue0.add(string1);
      assertTrue(boolean1);
      assertFalse(priorityBlockingQueue0.contains(string0));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string1, string0);
      
      long long0 = 0L;
      String string2 = "/n#";
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      assertFalse(boolean2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      KafkaSpoutConfig.Builder<LongDeserializer, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertFalse(priorityBlockingQueue0.contains(string2));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      KafkaSpoutConfig.Builder<LongDeserializer, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setSSLTruststore(string0, string0);
      assertFalse(priorityBlockingQueue0.contains(string2));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      boolean boolean3 = priorityBlockingQueue0.add(string1);
      assertTrue(boolean3);
      assertFalse(priorityBlockingQueue0.contains(string2));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      DoubleDeserializer doubleDeserializer0 = new DoubleDeserializer();
      assertNotNull(doubleDeserializer0);
      
      Object object0 = properties0.put(doubleDeserializer0, priorityBlockingQueue0);
      assertFalse(priorityBlockingQueue0.contains(string2));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertNull(object0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      
      KafkaSpoutConfig.Builder<LongDeserializer, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setProp(properties0);
      assertFalse(priorityBlockingQueue0.contains(string2));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      String string3 = "ln$h'TO";
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      assertNotNull(roundRobinManualPartitioner0);
      
      ManualPartitionNamedSubscription manualPartitionNamedSubscription0 = new ManualPartitionNamedSubscription(roundRobinManualPartitioner0, priorityBlockingQueue0);
      assertFalse(priorityBlockingQueue0.contains(string3));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertNotNull(manualPartitionNamedSubscription0);
      
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder4 = new KafkaSpoutConfig.Builder<Integer, Object>(string3, class1, class1, manualPartitionNamedSubscription0);
      assertFalse(priorityBlockingQueue0.contains(string3));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = 1988;
      KafkaSpoutConfig.Builder<Integer, Object> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setMaxRetries(int0);
      assertFalse(priorityBlockingQueue0.contains(string3));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(class1, class0);
      
      KafkaSpoutConfig<Integer, Object> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder5.build();
      assertFalse(priorityBlockingQueue0.contains(string3));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(1988, kafkaSpoutConfig0.getMaxTupleRetries());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(class1, class0);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = kafkaSpoutConfig0.getRetryService();
      assertFalse(priorityBlockingQueue0.contains(string3));
      assertTrue(priorityBlockingQueue0.contains(string1));
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutRetryService0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(1988, kafkaSpoutConfig0.getMaxTupleRetries());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(class1, class0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ArraySeq arraySeq0 = ArraySeq.create();
      assertNull(arraySeq0);
      
      int int0 = 5057;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "6~Pr3E";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      Subscription subscription0 = null;
      KafkaSpoutConfig.Builder<DoubleDeserializer, DoubleDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<DoubleDeserializer, DoubleDeserializer>(string0, class0, class1, subscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      KafkaSpoutConfig.Builder<DoubleDeserializer, DoubleDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setSSLKeystore(string0, string0, string0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      KafkaSpoutConfig<DoubleDeserializer, DoubleDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      Subscription subscription1 = kafkaSpoutConfig0.getSubscription();
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNull(subscription1);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      String string1 = "2D]\"wp r_M";
      Class<Deserializer> class2 = Deserializer.class;
      String string2 = "l6";
      Pattern pattern0 = Pattern.compile(string2, kafkaSpoutConfig0.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(pattern0);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, pattern0.flags());
      assertEquals("l6", pattern0.toString());
      assertEquals("l6", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(class0, class2);
      assertSame(class0, class1);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<InputStream, ReducedMetric>(string1, class2, class2, pattern0);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, pattern0.flags());
      assertEquals("l6", pattern0.toString());
      assertEquals("l6", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = (-64);
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setMaxPollRecords(int0);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, pattern0.flags());
      assertEquals("l6", pattern0.toString());
      assertEquals("l6", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(class0, class2);
      assertSame(class0, class1);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class2, class1);
      assertSame(class2, class0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setKey((Class<? extends Deserializer<InputStream>>) class2);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, pattern0.flags());
      assertEquals("l6", pattern0.toString());
      assertEquals("l6", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(class0, class2);
      assertSame(class0, class1);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class2, class1);
      assertSame(class2, class0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder2.setFetchMinBytes(int0);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, pattern0.flags());
      assertEquals("l6", pattern0.toString());
      assertEquals("l6", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder4));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(class0, class2);
      assertSame(class0, class1);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class2, class1);
      assertSame(class2, class0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getKeyDeserializer();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not instantiate key deserializer interface org.apache.kafka.common.serialization.Deserializer
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "ssl.keystore.password";
      SerializableDeserializer<PersistentVector> serializableDeserializer0 = (SerializableDeserializer<PersistentVector>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<LongDeserializer> serializableDeserializer1 = (SerializableDeserializer<LongDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      int int0 = 5612;
      Pattern pattern0 = Pattern.compile(string0, int0);
      assertNotNull(pattern0);
      assertEquals("ssl.keystore.password", pattern0.pattern());
      assertEquals(5612, pattern0.flags());
      assertEquals("ssl.keystore.password", pattern0.toString());
      
      PatternSubscription patternSubscription0 = new PatternSubscription(pattern0);
      assertNotNull(patternSubscription0);
      assertEquals("ssl.keystore.password", pattern0.pattern());
      assertEquals(5612, pattern0.flags());
      assertEquals("ssl.keystore.password", pattern0.toString());
      assertEquals("ssl.keystore.password", patternSubscription0.getTopicsString());
      
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer>(string0, serializableDeserializer0, serializableDeserializer1, patternSubscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals("ssl.keystore.password", pattern0.pattern());
      assertEquals(5612, pattern0.flags());
      assertEquals("ssl.keystore.password", pattern0.toString());
      assertEquals("ssl.keystore.password", patternSubscription0.getTopicsString());
      
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(int0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals("ssl.keystore.password", pattern0.pattern());
      assertEquals(5612, pattern0.flags());
      assertEquals("ssl.keystore.password", pattern0.toString());
      assertEquals("ssl.keystore.password", patternSubscription0.getTopicsString());
      
      Func<ConsumerRecord<PersistentVector, LongDeserializer>, List<Object>> func0 = (Func<ConsumerRecord<PersistentVector, LongDeserializer>, List<Object>>) mock(Func.class, new ViolatedAssumptionAnswer());
      Fields fields0 = null;
      ByTopicRecordTranslator<PersistentVector, LongDeserializer> byTopicRecordTranslator0 = new ByTopicRecordTranslator<PersistentVector, LongDeserializer>(func0, fields0);
      assertNotNull(byTopicRecordTranslator0);
      
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setRecordTranslator((RecordTranslator<PersistentVector, LongDeserializer>) byTopicRecordTranslator0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals("ssl.keystore.password", pattern0.pattern());
      assertEquals(5612, pattern0.flags());
      assertEquals("ssl.keystore.password", pattern0.toString());
      assertEquals("ssl.keystore.password", patternSubscription0.getTopicsString());
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      int int1 = 6776;
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setMaxUncommittedOffsets(int1);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals("ssl.keystore.password", pattern0.pattern());
      assertEquals(5612, pattern0.flags());
      assertEquals("ssl.keystore.password", pattern0.toString());
      assertEquals("ssl.keystore.password", patternSubscription0.getTopicsString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setProp(string0, (Object) byTopicRecordTranslator0);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals("ssl.keystore.password", pattern0.pattern());
      assertEquals(5612, pattern0.flags());
      assertEquals("ssl.keystore.password", pattern0.toString());
      assertEquals("ssl.keystore.password", patternSubscription0.getTopicsString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      
      KafkaSpoutRetryService kafkaSpoutRetryService0 = null;
      Func<ConsumerRecord<PersistentVector, LongDeserializer>, List<Object>> func1 = null;
      String string1 = "key-str__2800__auto__";
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder0.setRecordTranslator(func1, fields0, string1);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals("ssl.keystore.password", pattern0.pattern());
      assertEquals(5612, pattern0.flags());
      assertEquals("ssl.keystore.password", pattern0.toString());
      assertEquals("ssl.keystore.password", patternSubscription0.getTopicsString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder4.setRetry(kafkaSpoutRetryService0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // retryService cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "<$]IG=:TS_";
      int int0 = 21;
      Pattern pattern0 = Pattern.compile(string0, int0);
      assertNotNull(pattern0);
      assertEquals("<$]IG=:TS_", pattern0.pattern());
      assertEquals(21, pattern0.flags());
      assertEquals("<$]IG=:TS_", pattern0.toString());
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = KafkaSpoutConfig.builder(string0, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals("<$]IG=:TS_", pattern0.pattern());
      assertEquals(21, pattern0.flags());
      assertEquals("<$]IG=:TS_", pattern0.toString());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "iterate-main-sublists";
      Class<Deserializer> class0 = Deserializer.class;
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      assertNotNull(roundRobinManualPartitioner0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      ManualPartitionNamedSubscription manualPartitionNamedSubscription0 = new ManualPartitionNamedSubscription(roundRobinManualPartitioner0, stringArray0);
      assertNotNull(manualPartitionNamedSubscription0);
      assertEquals(5, stringArray0.length);
      
      KafkaSpoutConfig.Builder<StringDeserializer, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<StringDeserializer, String>(string0, class0, class0, manualPartitionNamedSubscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(5, stringArray0.length);
      
      Class<Deserializer> class1 = Deserializer.class;
      KafkaSpoutConfig.Builder<Integer, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setKey((Class<? extends Deserializer<Integer>>) class1);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(5, stringArray0.length);
      assertSame(class0, class1);
      assertSame(class1, class0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = " ~Wu3Cqx8";
      Class<Deserializer> class0 = Deserializer.class;
      Class<StringDeserializer> class1 = StringDeserializer.class;
      Subscription subscription0 = null;
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String>(string0, class0, class1, subscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      long long0 = 0L;
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder2);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "@B%um!GRF";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      KafkaSpoutConfig.Builder<PersistentVector, ByteArrayDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<PersistentVector, ByteArrayDeserializer>(string0, class0, class1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(9, stringArray0.length);
      
      long long0 = (-1197L);
      KafkaSpoutConfig.Builder<PersistentVector, ByteArrayDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setPollTimeoutMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(9, stringArray0.length);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      int int0 = (-852);
      KafkaSpoutConfig.Builder<PersistentVector, ByteArrayDeserializer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setMaxPollRecords(int0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(9, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      
      String string1 = "h 3iN&";
      KafkaSpoutConfig.Builder<PersistentVector, ByteArrayDeserializer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setBootstrapServers(string1);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(9, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(class0, class1);
      assertNotSame(string1, string0);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      
      String string2 = "Gensym literal not in syntax-quote";
      KafkaSpoutConfig.Builder<PersistentVector, ByteArrayDeserializer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setSecurityProtocol(string2);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(9, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(class0, class1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      
      KafkaSpoutConfig.Builder<PersistentVector, ByteArrayDeserializer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setFetchMinBytes(int0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(9, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(class0, class1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      
      KafkaSpoutConfig.Builder<PersistentVector, ByteArrayDeserializer> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setMaxUncommittedOffsets(int0);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertEquals(9, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder2);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = ">%H";
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<PersistentVector> serializableDeserializer1 = (SerializableDeserializer<PersistentVector>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = null;
      KafkaSpoutConfig.Builder<Object, PersistentVector> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, PersistentVector>(string0, serializableDeserializer0, serializableDeserializer1, subscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      int int0 = (-780);
      KafkaSpoutConfig.Builder<Object, PersistentVector> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxRetries(int0);
      assertNotNull(kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "Q'~";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      int int0 = 2767;
      Pattern pattern0 = Pattern.compile(string0, int0);
      assertNotNull(pattern0);
      assertEquals("Q'~", pattern0.toString());
      assertEquals(2767, pattern0.flags());
      assertEquals("Q'~", pattern0.pattern());
      
      KafkaSpoutConfig.Builder<DoubleDeserializer, StringDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<DoubleDeserializer, StringDeserializer>(string0, class0, class1, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals("Q'~", pattern0.toString());
      assertEquals(2767, pattern0.flags());
      assertEquals("Q'~", pattern0.pattern());
      
      KafkaSpoutConfig.Builder<DoubleDeserializer, StringDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue((Class<? extends Deserializer<StringDeserializer>>) class1);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals("Q'~", pattern0.toString());
      assertEquals(2767, pattern0.flags());
      assertEquals("Q'~", pattern0.pattern());
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      KafkaSpoutConfig.Builder<DoubleDeserializer, StringDeserializer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setProp(properties0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals("Q'~", pattern0.toString());
      assertEquals(2767, pattern0.flags());
      assertEquals("Q'~", pattern0.pattern());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      String string1 = "zookeeper.server.realm";
      KafkaSpoutConfig.Builder<DoubleDeserializer, StringDeserializer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setBootstrapServers(string1);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals("Q'~", pattern0.toString());
      assertEquals(2767, pattern0.flags());
      assertEquals("Q'~", pattern0.pattern());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(string1, string0);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      
      String string2 = null;
      KafkaSpoutConfig.Builder<DoubleDeserializer, StringDeserializer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setSecurityProtocol(string2);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals("Q'~", pattern0.toString());
      assertEquals(2767, pattern0.flags());
      assertEquals("Q'~", pattern0.pattern());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(string1, string0);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      String string3 = "";
      KafkaSpoutConfig.Builder<DoubleDeserializer, StringDeserializer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setProp(string3, (Object) kafkaSpoutConfig_Builder0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals("Q'~", pattern0.toString());
      assertEquals(2767, pattern0.flags());
      assertEquals("Q'~", pattern0.pattern());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "B7";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      assertNotNull(roundRobinManualPartitioner0);
      
      String string1 = "html5";
      int int0 = 315;
      Pattern pattern0 = Pattern.compile(string1, int0);
      assertNotNull(pattern0);
      assertEquals("html5", pattern0.toString());
      assertEquals(379, pattern0.flags());
      assertEquals("html5", pattern0.pattern());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      ManualPartitionPatternSubscription manualPartitionPatternSubscription0 = new ManualPartitionPatternSubscription(roundRobinManualPartitioner0, pattern0);
      assertNotNull(manualPartitionPatternSubscription0);
      assertEquals("html5", pattern0.toString());
      assertEquals(379, pattern0.flags());
      assertEquals("html5", pattern0.pattern());
      assertEquals("html5", manualPartitionPatternSubscription0.getTopicsString());
      assertFalse(string1.equals((Object)string0));
      
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Delayed> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteArrayDeserializer, Delayed>(string0, class0, class1, manualPartitionPatternSubscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals("html5", pattern0.toString());
      assertEquals(379, pattern0.flags());
      assertEquals("html5", pattern0.pattern());
      assertEquals("html5", manualPartitionPatternSubscription0.getTopicsString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Func<ConsumerRecord<ByteArrayDeserializer, Delayed>, List<Object>> func0 = null;
      Fields fields0 = DefaultRecordTranslator.FIELDS;
      assertNotNull(fields0);
      assertEquals(5, fields0.size());
      
      String string2 = "FK)0>BVS";
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Delayed> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setRecordTranslator(func0, fields0, string2);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals("html5", pattern0.toString());
      assertEquals(379, pattern0.flags());
      assertEquals("html5", pattern0.pattern());
      assertEquals("html5", manualPartitionPatternSubscription0.getTopicsString());
      assertEquals(5, fields0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "";
      ByTopicRecordTranslator<ByteArrayDeserializer, Delayed> byTopicRecordTranslator0 = new ByTopicRecordTranslator<ByteArrayDeserializer, Delayed>(func0, fields0, string3);
      assertNotNull(byTopicRecordTranslator0);
      assertEquals(5, fields0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Delayed> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setRecordTranslator((RecordTranslator<ByteArrayDeserializer, Delayed>) byTopicRecordTranslator0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals("html5", pattern0.toString());
      assertEquals(379, pattern0.flags());
      assertEquals("html5", pattern0.pattern());
      assertEquals("html5", manualPartitionPatternSubscription0.getTopicsString());
      assertEquals(5, fields0.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Delayed> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setProp(string1, (Object) kafkaSpoutConfig_Builder1);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals("html5", pattern0.toString());
      assertEquals(379, pattern0.flags());
      assertEquals("html5", pattern0.pattern());
      assertEquals("html5", manualPartitionPatternSubscription0.getTopicsString());
      assertEquals(5, fields0.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.EARLIEST;
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Delayed> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals("html5", pattern0.toString());
      assertEquals(379, pattern0.flags());
      assertEquals("html5", pattern0.pattern());
      assertEquals("html5", manualPartitionPatternSubscription0.getTopicsString());
      assertEquals(5, fields0.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      
      Class<Deserializer> class2 = Deserializer.class;
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Delayed> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setKey((Class<? extends Deserializer<ByteArrayDeserializer>>) class2);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals("html5", pattern0.toString());
      assertEquals(379, pattern0.flags());
      assertEquals("html5", pattern0.pattern());
      assertEquals("html5", manualPartitionPatternSubscription0.getTopicsString());
      assertEquals(5, fields0.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder4));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      
      Class<Deserializer> class3 = Deserializer.class;
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, Delayed> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setValue((Class<? extends Deserializer<Delayed>>) class3);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertEquals("html5", pattern0.toString());
      assertEquals(379, pattern0.flags());
      assertEquals("html5", pattern0.pattern());
      assertEquals("html5", manualPartitionPatternSubscription0.getTopicsString());
      assertEquals(5, fields0.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder6.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder6.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder6.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder6.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder6.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(class0, class3);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertSame(class1, class3);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder6);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(class2, class0);
      assertSame(class2, class3);
      assertSame(class2, class1);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder6);
      assertSame(class3, class0);
      assertSame(class3, class1);
      assertSame(class3, class2);
      assertNotSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder";
      SerializableDeserializer<Deserializer<Object>> serializableDeserializer0 = (SerializableDeserializer<Deserializer<Object>>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<Deserializer<LongDeserializer>> serializableDeserializer1 = (SerializableDeserializer<Deserializer<LongDeserializer>>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      KafkaSpoutConfig.Builder<Deserializer<Object>, Deserializer<LongDeserializer>> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Deserializer<Object>, Deserializer<LongDeserializer>>(string0, serializableDeserializer0, serializableDeserializer1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(2, stringArray0.length);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        kafkaSpoutConfig_Builder0.setProp(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "java.lang.Boolean";
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<ByteArrayDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteArrayDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      Pattern pattern0 = Pattern.compile(string1);
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Stream<String> stream0 = pattern0.splitAsStream(string0);
      assertNotNull(stream0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "j9x&_1o/m";
      Pattern pattern1 = Pattern.compile(string2);
      assertNotNull(pattern1);
      assertEquals("j9x&_1o/m", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertEquals("j9x&_1o/m", pattern1.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(pattern1, pattern0);
      
      String[] stringArray0 = pattern0.split((CharSequence) string2);
      assertNotNull(stringArray0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(pattern0, pattern1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      boolean boolean0 = Pattern.matches(string1, string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      KafkaSpoutConfig.Builder<Object, ByteArrayDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, ByteArrayDeserializer>(string0, serializableDeserializer0, serializableDeserializer1, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(pattern0.equals((Object)pattern1));
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "ssl.truststore.location";
      Class<Deserializer> class0 = Deserializer.class;
      Class<StringDeserializer> class1 = StringDeserializer.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      NamedSubscription namedSubscription0 = new NamedSubscription(stringArray0);
      assertNotNull(namedSubscription0);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, String>(string0, class0, class1, namedSubscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setSSLKeystore(stringArray0[5], stringArray0[6], stringArray0[2]);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(7, stringArray0.length);
      
      String string1 = null;
      BytesDeserializer bytesDeserializer0 = new BytesDeserializer();
      assertNotNull(bytesDeserializer0);
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setProp(string1, (Object) bytesDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(7, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      
      long long0 = 0L;
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setOffsetCommitPeriodMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(7, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setSecurityProtocol(stringArray0[1]);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(7, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "*K{2[ pT";
      Class<Deserializer> class0 = Deserializer.class;
      String[] stringArray0 = new String[6];
      String string1 = "";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      String string2 = "max.partition.fetch.bytes";
      stringArray0[3] = string2;
      String string3 = "";
      stringArray0[4] = string3;
      stringArray0[5] = string0;
      KafkaSpoutConfig.Builder<BytesDeserializer, Nimbus.debug_args._Fields> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, Nimbus.debug_args._Fields>(string0, class0, class0, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(6, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      KafkaSpoutConfig.Builder<BytesDeserializer, Nimbus.debug_args._Fields> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setSSLTruststore(stringArray0[5], stringArray0[0]);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(6, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      String string4 = "#>F,J'}q";
      String string5 = "a4Fx7!w~]~85?$";
      KafkaSpoutConfig.Builder<BytesDeserializer, Nimbus.debug_args._Fields> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setSSLTruststore(string4, string5);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(6, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "Cannot get field 'custom_object' because union is currently set to ";
      Class<Deserializer> class0 = Deserializer.class;
      Pattern pattern0 = null;
      KafkaSpoutConfig.Builder<Integer, StringDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, StringDeserializer>(string0, class0, class0, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      Func<ConsumerRecord<Integer, StringDeserializer>, List<Object>> func0 = (Func<ConsumerRecord<Integer, StringDeserializer>, List<Object>>) mock(Func.class, new ViolatedAssumptionAnswer());
      Enumeration<ByteArrayDeserializer> enumeration0 = (Enumeration<ByteArrayDeserializer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      EnumerationSeq enumerationSeq0 = EnumerationSeq.create(enumeration0);
      assertNull(enumerationSeq0);
      
      PersistentVector persistentVector0 = PersistentVector.create((ISeq) enumerationSeq0);
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      assertEquals(0, persistentVector0.count());
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      
      PersistentArrayMap persistentArrayMap1 = new PersistentArrayMap(persistentArrayMap0, persistentVector0.tail);
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentArrayMap1);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      
      PersistentVector persistentVector1 = persistentVector0.withMeta(persistentArrayMap1);
      assertEquals(5, persistentVector0.shift);
      assertEquals(5, persistentVector1.shift);
      assertNotNull(persistentVector1);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentVector1.count());
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(persistentVector1.equals((Object)persistentVector0));
      assertNotSame(persistentVector0, persistentVector1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      assertNotSame(persistentArrayMap1, persistentArrayMap0);
      assertNotSame(persistentVector1, persistentVector0);
      
      Fields fields0 = new Fields(persistentVector1);
      assertEquals(5, persistentVector0.shift);
      assertEquals(5, persistentVector1.shift);
      assertNotNull(fields0);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentVector1.count());
      assertEquals(0, fields0.size());
      assertFalse(persistentVector0.equals((Object)persistentVector1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(persistentVector1.equals((Object)persistentVector0));
      
      KafkaSpoutConfig.Builder<Integer, StringDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setRecordTranslator(func0, fields0);
      assertEquals(5, persistentVector0.shift);
      assertEquals(5, persistentVector1.shift);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(0, persistentVector0.count());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertEquals(0, persistentArrayMap1.capacity());
      assertEquals(0, persistentArrayMap1.count());
      assertEquals(0, persistentVector1.count());
      assertEquals(0, fields0.size());
      assertFalse(persistentVector0.equals((Object)persistentVector1));
      assertTrue(persistentArrayMap0.equals((Object)persistentArrayMap1));
      assertTrue(persistentArrayMap1.equals((Object)persistentArrayMap0));
      assertFalse(persistentVector1.equals((Object)persistentVector0));
      assertNotSame(persistentVector0, persistentVector1);
      assertNotSame(persistentArrayMap0, persistentArrayMap1);
      assertNotSame(persistentArrayMap1, persistentArrayMap0);
      assertNotSame(persistentVector1, persistentVector0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      Class<Deserializer> class0 = Deserializer.class;
      Pattern pattern0 = null;
      KafkaSpoutConfig.Builder<LongDeserializer, BytesDeserializer> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<LongDeserializer, BytesDeserializer>(string0, class0, class0, pattern0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      KafkaSpoutConfig.FirstPollOffsetStrategy[] kafkaSpoutConfig_FirstPollOffsetStrategyArray0 = KafkaSpoutConfig.FirstPollOffsetStrategy.values();
      assertNotNull(kafkaSpoutConfig_FirstPollOffsetStrategyArray0);
      assertEquals(4, kafkaSpoutConfig_FirstPollOffsetStrategyArray0.length);
      
      String string0 = "not-implicit-map?";
      Class<Deserializer> class0 = Deserializer.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer>(string0, class0, class0, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(1, stringArray0.length);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST;
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(1, stringArray0.length);
      
      int int0 = 33;
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setFetchMinBytes(int0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(1, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setPollTimeoutMs(int0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(1, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      
      SerializableDeserializer<PersistentVector> serializableDeserializer0 = (SerializableDeserializer<PersistentVector>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setKey(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(1, stringArray0.length);
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      String string1 = "YROQ=];zPEp;N)";
      KafkaSpoutConfig.Builder<PersistentVector, LongDeserializer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setGroupId(string1);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(1, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "'3-0T*M{$\"V)p+G`8>>";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      String string1 = "";
      Pattern pattern0 = Pattern.compile(string1);
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer>(string0, class0, class1, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "p}$8I}O";
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setSSLKeystore(string0, string2);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setValue(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      String string3 = "(u";
      Object object0 = new Object();
      assertNotNull(object0);
      
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setProp(string3, object0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      
      Class<Deserializer> class2 = Deserializer.class;
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setKey((Class<? extends Deserializer<Nimbus.debug_args._Fields>>) class2);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertSame(class1, class0);
      assertSame(class1, class2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      
      int int0 = 0;
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setMaxUncommittedOffsets(int0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertSame(class1, class0);
      assertSame(class1, class2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder5.build();
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(0, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertSame(class1, class0);
      assertSame(class1, class2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "4D8BV,=W_K~}icn";
      SerializableDeserializer<Object> serializableDeserializer0 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<Deserializer<String>> serializableDeserializer1 = (SerializableDeserializer<Deserializer<String>>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      KafkaSpoutConfig.Builder<Object, Deserializer<String>> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Object, Deserializer<String>>(string0, serializableDeserializer0, serializableDeserializer1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(1, stringArray0.length);
      
      String string1 = "";
      String string2 = ".P3_1Ic.$,._";
      Class<Deserializer> class0 = Deserializer.class;
      KafkaSpoutConfig.Builder<Object, Delayed> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue((Class<? extends Deserializer<Delayed>>) class0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(1, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string3 = " pn\\p+)=`Ia`@[";
      int int0 = 0;
      KafkaSpoutConfig.Builder<Object, Deserializer<String>> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder0.setMaxPollRecords(int0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(1, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      
      KafkaSpoutConfig.Builder<Object, Deserializer<String>> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder0.setSSLKeystore(string2, string3, stringArray0[0]);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(1, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<Object, Deserializer<String>> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder0.setGroupId(string1);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(1, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      int int1 = 0;
      KafkaSpoutConfig.Builder<Object, Deserializer<String>> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder0.setMaxRetries(int1);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(1, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      
      String string4 = "byteCast";
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.FirstPollOffsetStrategy.valueOf(string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.storm.kafka.spout.KafkaSpoutConfig.FirstPollOffsetStrategy.byteCast
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "~2neE1";
      Class<IntegerDeserializer> class0 = IntegerDeserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      KafkaSpoutConfig.Builder<Integer, StringDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, StringDeserializer>(string0, class0, class1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(2, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, StringDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue((Class<? extends Deserializer<StringDeserializer>>) class1);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(2, stringArray0.length);
      
      int int0 = 759;
      KafkaSpoutConfig.Builder<Integer, StringDeserializer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setMaxPollRecords(int0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(2, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = KafkaSpoutConfig.FirstPollOffsetStrategy.LATEST;
      KafkaSpoutConfig.Builder<Integer, StringDeserializer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setFirstPollOffsetStrategy(kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(2, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      
      long long0 = (-3595L);
      KafkaSpoutConfig.Builder<Integer, StringDeserializer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setOffsetCommitPeriodMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(2, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = (KafkaSpoutRetryExponentialBackoff)KafkaSpoutConfig.UNIT_TEST_RETRY_SERVICE;
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      
      KafkaSpoutConfig.Builder<Integer, StringDeserializer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setRetry(kafkaSpoutRetryExponentialBackoff0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(2, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      
      int int1 = 1227;
      KafkaSpoutConfig.Builder<Integer, StringDeserializer> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setFetchMinBytes(int1);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertEquals(2, stringArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder5);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "%1$tFT%1$tT.%1$tL%1$tz";
      Class<Deserializer> class0 = Deserializer.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<String, Integer>(string0, class0, class0, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(4, stringArray0.length);
      
      long long0 = 2060L;
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setOffsetCommitPeriodMs(long0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(4, stringArray0.length);
      
      int int0 = 0;
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setMaxPartitionFectchBytes(int0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(4, stringArray0.length);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      int int1 = (-2581);
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setMaxRetries(int1);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(4, stringArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setProp(string0, (Object) stringArray0[3]);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(4, stringArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<String, Integer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setPartitionRefreshPeriodMs(int0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(4, stringArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      
      Class<Deserializer> class1 = Deserializer.class;
      ManualPartitioner manualPartitioner0 = null;
      String string1 = "P5e%p,q2-";
      Pattern pattern0 = Pattern.compile(string1, int1);
      assertNotNull(pattern0);
      assertEquals((-2581), pattern0.flags());
      assertEquals("P5e%p,q2-", pattern0.pattern());
      assertEquals("P5e%p,q2-", pattern0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string1, string0);
      
      ManualPartitionPatternSubscription manualPartitionPatternSubscription0 = new ManualPartitionPatternSubscription(manualPartitioner0, pattern0);
      assertNotNull(manualPartitionPatternSubscription0);
      assertEquals((-2581), pattern0.flags());
      assertEquals("P5e%p,q2-", pattern0.pattern());
      assertEquals("P5e%p,q2-", pattern0.toString());
      assertEquals("P5e%p,q2-", manualPartitionPatternSubscription0.getTopicsString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder6 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer>(string0, class0, class1, manualPartitionPatternSubscription0);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertEquals((-2581), pattern0.flags());
      assertEquals("P5e%p,q2-", pattern0.pattern());
      assertEquals("P5e%p,q2-", pattern0.toString());
      assertEquals("P5e%p,q2-", manualPartitionPatternSubscription0.getTopicsString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      
      Class<IntegerDeserializer> class2 = IntegerDeserializer.class;
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setValue((Class<? extends Deserializer<Integer>>) class2);
      assertNotNull(kafkaSpoutConfig_Builder7);
      assertEquals((-2581), pattern0.flags());
      assertEquals("P5e%p,q2-", pattern0.pattern());
      assertEquals("P5e%p,q2-", pattern0.toString());
      assertEquals("P5e%p,q2-", manualPartitionPatternSubscription0.getTopicsString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertSame(class1, class0);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertNotSame(string1, string0);
      
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = (KafkaSpoutRetryExponentialBackoff)KafkaSpoutConfig.DEFAULT_RETRY_SERVICE;
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, Integer> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setRetry(kafkaSpoutRetryExponentialBackoff0);
      assertNotNull(kafkaSpoutConfig_Builder8);
      assertEquals((-2581), pattern0.flags());
      assertEquals("P5e%p,q2-", pattern0.pattern());
      assertEquals("P5e%p,q2-", pattern0.toString());
      assertEquals("P5e%p,q2-", manualPartitionPatternSubscription0.getTopicsString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertSame(class1, class0);
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertNotSame(string1, string0);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
      
      String string2 = null;
      Class<IntegerDeserializer> class3 = IntegerDeserializer.class;
      KafkaSpoutConfig.Builder<Object, Integer> kafkaSpoutConfig_Builder9 = null;
      try {
        kafkaSpoutConfig_Builder9 = new KafkaSpoutConfig.Builder<Object, Integer>(string2, class0, class3, manualPartitionPatternSubscription0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      Pattern pattern0 = Pattern.compile(string0);
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(string0, pattern0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "I<@_";
      SerializableDeserializer<StringDeserializer> serializableDeserializer0 = (SerializableDeserializer<StringDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<String> serializableDeserializer1 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      MapEntry mapEntry0 = new MapEntry(serializableDeserializer1, serializableDeserializer0);
      assertNotNull(mapEntry0);
      assertEquals(2, mapEntry0.count());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = new Stack<String>();
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      KafkaSpoutConfig.Builder<StringDeserializer, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<StringDeserializer, String>(string0, serializableDeserializer0, serializableDeserializer1, list0);
      assertFalse(list0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      SerializableDeserializer<StringDeserializer> serializableDeserializer2 = (SerializableDeserializer<StringDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<StringDeserializer, StringDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue(serializableDeserializer2);
      assertFalse(list0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "every?";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = KafkaSpoutConfig.builder(string0, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      ISeq iSeq0 = null;
      PersistentHashSet persistentHashSet0 = PersistentHashSet.createWithCheck(iSeq0);
      assertNotNull(persistentHashSet0);
      
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(string0, (Collection<String>) persistentHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentSet", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "wfjt6?9If8<A:%GM{f";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      String string1 = locale0.getScript();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = KafkaSpoutConfig.builder(string0, (Collection<String>) set0);
      assertFalse(set0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "&";
      SerializableDeserializer<DoubleDeserializer> serializableDeserializer0 = (SerializableDeserializer<DoubleDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer1 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = null;
      KafkaSpoutConfig.Builder<DoubleDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<DoubleDeserializer, ByteBufferDeserializer>(string0, serializableDeserializer0, serializableDeserializer1, subscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      String string1 = "Invalid class name: ";
      Class<Deserializer> class0 = Deserializer.class;
      Pattern pattern0 = Pattern.compile(string1);
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("Invalid class name: ", pattern0.pattern());
      assertEquals("Invalid class name: ", pattern0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, String> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<ByteBufferDeserializer, String>(string1, class0, class0, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(0, pattern0.flags());
      assertEquals("Invalid class name: ", pattern0.pattern());
      assertEquals("Invalid class name: ", pattern0.toString());
      assertFalse(string1.equals((Object)string0));
      
      PersistentArrayMap persistentArrayMap0 = PersistentArrayMap.EMPTY;
      assertNotNull(persistentArrayMap0);
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setProp((Map<String, Object>) persistentArrayMap0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(0, pattern0.flags());
      assertEquals("Invalid class name: ", pattern0.pattern());
      assertEquals("Invalid class name: ", pattern0.toString());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      SerializableDeserializer<String> serializableDeserializer2 = (SerializableDeserializer<String>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<ByteBufferDeserializer, String> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setValue(serializableDeserializer2);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(0, pattern0.flags());
      assertEquals("Invalid class name: ", pattern0.pattern());
      assertEquals("Invalid class name: ", pattern0.toString());
      assertEquals(0, persistentArrayMap0.count());
      assertEquals(0, persistentArrayMap0.capacity());
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder2));
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "rY$";
      MetricRegistry metricRegistry0 = new MetricRegistry();
      assertNotNull(metricRegistry0);
      
      SortedSet<String> sortedSet0 = metricRegistry0.getNames();
      assertFalse(sortedSet0.contains(string0));
      assertNotNull(sortedSet0);
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(sortedSet0);
      assertFalse(sortedSet0.contains(string0));
      assertFalse(priorityQueue0.contains(string0));
      assertNotNull(priorityQueue0);
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder0 = KafkaSpoutConfig.builder(string0, (Collection<String>) priorityQueue0);
      assertFalse(sortedSet0.contains(string0));
      assertFalse(priorityQueue0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      int int0 = Integer.MAX_VALUE;
      Pattern pattern0 = Pattern.compile(string1, int0);
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(Integer.MAX_VALUE, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder1 = new KafkaSpoutConfig.Builder<Integer, Integer>(string0, serializableDeserializer0, serializableDeserializer0, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals("", pattern0.toString());
      assertEquals(Integer.MAX_VALUE, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setMaxUncommittedOffsets(int0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals("", pattern0.toString());
      assertEquals(Integer.MAX_VALUE, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Class<IntegerDeserializer> class0 = IntegerDeserializer.class;
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setKey((Class<? extends Deserializer<Integer>>) class0);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals("", pattern0.toString());
      assertEquals(Integer.MAX_VALUE, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder2));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      
      String string2 = "";
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setProp(string2, (Object) sortedSet0);
      assertFalse(sortedSet0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertEquals("", pattern0.toString());
      assertEquals(Integer.MAX_VALUE, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      LongDeserializer longDeserializer0 = new LongDeserializer();
      assertNotNull(longDeserializer0);
      
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setProp(string2, (Object) longDeserializer0);
      assertFalse(sortedSet0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertEquals("", pattern0.toString());
      assertEquals(Integer.MAX_VALUE, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      
      Class<Deserializer> class1 = Deserializer.class;
      Class<Deserializer> class2 = Deserializer.class;
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      assertNotNull(roundRobinManualPartitioner0);
      
      String[] stringArray0 = null;
      ManualPartitionNamedSubscription manualPartitionNamedSubscription0 = null;
      try {
        manualPartitionNamedSubscription0 = new ManualPartitionNamedSubscription(roundRobinManualPartitioner0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "allow-comments";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) class0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) class1;
      objectArray0[4] = (Object) class1;
      objectArray0[5] = (Object) class1;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) string0;
      PersistentVector persistentVector0 = PersistentVector.create(objectArray0);
      assertEquals(5, persistentVector0.shift);
      assertNotNull(persistentVector0);
      assertEquals(8, persistentVector0.count());
      assertEquals(8, objectArray0.length);
      
      KafkaSpoutConfig.Builder<ByteArrayDeserializer, PersistentVector> kafkaSpoutConfig_Builder0 = null;
      try {
        kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ByteArrayDeserializer, PersistentVector>(string0, class0, class1, persistentVector0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class clojure.lang.RT
         //
         verifyException("clojure.lang.APersistentVector", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(string0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "KafkaSpoutConfig{kafkaProps=";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      Vector<String> vector0 = new Vector<String>();
      assertFalse(vector0.contains(string0));
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, String>(string0, class0, class1, vector0);
      assertFalse(vector0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string1 = "LATEST";
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setGroupId(string1);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      
      SerializableDeserializer<BytesDeserializer> serializableDeserializer0 = (SerializableDeserializer<BytesDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setKey(serializableDeserializer0);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      
      int int0 = 994;
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setMaxPartitionFectchBytes(int0);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      
      PersistentHashMap persistentHashMap0 = PersistentHashMap.EMPTY;
      assertNotNull(persistentHashMap0);
      assertEquals(0, persistentHashMap0.count());
      
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setProp((Map<String, Object>) persistentHashMap0);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, persistentHashMap0.count());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      
      KafkaSpoutRetryExponentialBackoff.TimeInterval kafkaSpoutRetryExponentialBackoff_TimeInterval0 = KafkaSpoutRetryExponentialBackoff.TimeInterval.microSeconds(int0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertEquals(994L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(994000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      
      KafkaSpoutRetryExponentialBackoff kafkaSpoutRetryExponentialBackoff0 = new KafkaSpoutRetryExponentialBackoff(kafkaSpoutRetryExponentialBackoff_TimeInterval0, kafkaSpoutRetryExponentialBackoff_TimeInterval0, int0, kafkaSpoutRetryExponentialBackoff_TimeInterval0);
      assertNotNull(kafkaSpoutRetryExponentialBackoff0);
      assertEquals(994L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(994000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      
      KafkaSpoutConfig.Builder<BytesDeserializer, String> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setRetry(kafkaSpoutRetryExponentialBackoff0);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, persistentHashMap0.count());
      assertEquals(994L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(994000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      
      SerializableDeserializer<Object> serializableDeserializer1 = (SerializableDeserializer<Object>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<BytesDeserializer, Object> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setValue(serializableDeserializer1);
      assertFalse(vector0.contains(string1));
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, persistentHashMap0.count());
      assertEquals(994L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.length());
      assertEquals(994000L, kafkaSpoutRetryExponentialBackoff_TimeInterval0.lengthNanos());
      assertEquals(TimeUnit.MICROSECONDS, kafkaSpoutRetryExponentialBackoff_TimeInterval0.timeUnit());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder2));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder1.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder2.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder1));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder1));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder2);
      
      String string2 = "0`{81#;0ZHAT}%1:d-";
      SerializableDeserializer<Integer> serializableDeserializer2 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serializableDeserializer2).toString();
      SerializableDeserializer<ByteArrayDeserializer> serializableDeserializer3 = (SerializableDeserializer<ByteArrayDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string2;
      stringArray0[6] = string0;
      stringArray0[7] = string2;
      stringArray0[8] = string1;
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder7 = new KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer>(string2, serializableDeserializer2, serializableDeserializer3, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder7);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "clojure.pprint$get_line";
      String string4 = "&F'*3&JK1;.~";
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setSSLKeystore(string3, string4, string2);
      assertNotNull(kafkaSpoutConfig_Builder8);
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder9 = kafkaSpoutConfig_Builder8.setPollTimeoutMs(int0);
      assertNotNull(kafkaSpoutConfig_Builder9);
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder9);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder8);
      
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder10 = kafkaSpoutConfig_Builder9.setValue((Class<? extends Deserializer<ByteArrayDeserializer>>) class0);
      assertNotNull(kafkaSpoutConfig_Builder10);
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder8));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(class0, class1);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder10);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder9);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder10);
      assertSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder9);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder8);
      
      KafkaSpoutConfig.Builder<Integer, ByteArrayDeserializer> kafkaSpoutConfig_Builder11 = kafkaSpoutConfig_Builder10.setPartitionRefreshPeriodMs(int0);
      assertNotNull(kafkaSpoutConfig_Builder11);
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder11.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder11.equals((Object)kafkaSpoutConfig_Builder9));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(class0, class1);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder11);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder9);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder11);
      assertSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder11);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder9);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder11, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder11, kafkaSpoutConfig_Builder9);
      assertSame(kafkaSpoutConfig_Builder11, kafkaSpoutConfig_Builder10);
      
      KafkaSpoutConfig<Integer, ByteArrayDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder11.build();
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(994L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(994L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder11));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder11));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder11.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder11.equals((Object)kafkaSpoutConfig_Builder9));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(class0, class1);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder11);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder9);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder11);
      assertSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder11);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder9);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder11, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder11, kafkaSpoutConfig_Builder9);
      assertSame(kafkaSpoutConfig_Builder11, kafkaSpoutConfig_Builder10);
      
      long long0 = kafkaSpoutConfig0.getPollTimeoutMs();
      assertEquals(994L, long0);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(994L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(994L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder11));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder10));
      assertFalse(kafkaSpoutConfig_Builder9.equals((Object)kafkaSpoutConfig_Builder11));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(kafkaSpoutConfig_Builder10.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder11.equals((Object)kafkaSpoutConfig_Builder8));
      assertFalse(kafkaSpoutConfig_Builder11.equals((Object)kafkaSpoutConfig_Builder9));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(class0, class1);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder11);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder9);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder10);
      assertNotSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder11);
      assertSame(kafkaSpoutConfig_Builder9, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder11);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder9);
      assertNotSame(kafkaSpoutConfig_Builder10, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder11, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder11, kafkaSpoutConfig_Builder9);
      assertSame(kafkaSpoutConfig_Builder11, kafkaSpoutConfig_Builder10);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = ", value=";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(string0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = "";
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(string0, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        KafkaSpoutConfig.builder(string0, (Collection<String>) treeSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bootstrap servers cannot be null
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "/Q*/O";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer>(string1, class0, class1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setProp(string2, (Object) string2);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      KafkaSpoutConfig<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      long long0 = kafkaSpoutConfig0.getPartitionRefreshPeriodMs();
      assertEquals(2000L, long0);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(map0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "clojure.pprint$getf";
      Class<IntegerDeserializer> class0 = IntegerDeserializer.class;
      RoundRobinManualPartitioner roundRobinManualPartitioner0 = new RoundRobinManualPartitioner();
      assertNotNull(roundRobinManualPartitioner0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string1 = "k'OnK\\+V)";
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      ManualPartitionNamedSubscription manualPartitionNamedSubscription0 = new ManualPartitionNamedSubscription(roundRobinManualPartitioner0, stringArray0);
      assertNotNull(manualPartitionNamedSubscription0);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Integer, Integer>(string0, class0, class0, manualPartitionNamedSubscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      
      SerializableDeserializer<Integer> serializableDeserializer0 = (SerializableDeserializer<Integer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[3]).when(serializableDeserializer0).toString();
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder2 = kafkaSpoutConfig_Builder1.setBootstrapServers(stringArray0[1]);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertNotSame(string0, string1);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      
      String string2 = "m\"";
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setSSLKeystore(stringArray0[0], string2);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      
      String string3 = "ServiceUnavailableRetryStrategy";
      String string4 = "%mg&9[+K`|";
      KafkaSpoutConfig.Builder<Integer, Integer> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setSSLTruststore(string3, string4);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig<Integer, Integer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder4.build();
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig0);
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      
      Class<Deserializer> class1 = Deserializer.class;
      KafkaSpoutConfig.Builder<Object, DoubleDeserializer> kafkaSpoutConfig_Builder5 = new KafkaSpoutConfig.Builder<Object, DoubleDeserializer>(stringArray0[1], class1, class1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertEquals(7, stringArray0.length);
      
      KafkaSpoutConfig.Builder<Object, DoubleDeserializer> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setRetry(kafkaSpoutConfig0.DEFAULT_RETRY_SERVICE);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<Object, DoubleDeserializer> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setOffsetCommitPeriodMs(kafkaSpoutConfig0.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig_Builder7);
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder6);
      
      Deserializer<Integer> deserializer0 = kafkaSpoutConfig0.getKeyDeserializer();
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(deserializer0);
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      
      KafkaSpoutConfig.Builder<Object, DoubleDeserializer> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setGroupId(string2);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig_Builder8);
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder1, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder2, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder1);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder2);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder6);
      
      Func<ConsumerRecord<Object, DoubleDeserializer>, List<Object>> func0 = (Func<ConsumerRecord<Object, DoubleDeserializer>, List<Object>>) mock(Func.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<String, String> kafkaSpoutConfig_Builder9 = KafkaSpoutConfig.builder(string0, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder9);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      
      Fields fields0 = null;
      try {
        fields0 = new Fields(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate field 'clojure.pprint$getf'
         //
         verifyException("org.apache.storm.tuple.Fields", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = " ~Wu3Cqx8";
      Class<Deserializer> class0 = Deserializer.class;
      Class<StringDeserializer> class1 = StringDeserializer.class;
      Subscription subscription0 = null;
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String>(string0, class0, class1, subscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig<Nimbus.debug_args._Fields, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not instantiate key deserializer interface org.apache.kafka.common.serialization.Deserializer
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = " ~Wu3Cqx8";
      Class<Deserializer> class0 = Deserializer.class;
      Class<StringDeserializer> class1 = StringDeserializer.class;
      Subscription subscription0 = null;
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, String>(string0, class0, class1, subscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      SerializableDeserializer<ByteBufferDeserializer> serializableDeserializer0 = (SerializableDeserializer<ByteBufferDeserializer>) mock(SerializableDeserializer.class, new ViolatedAssumptionAnswer());
      KafkaSpoutConfig.Builder<Nimbus.debug_args._Fields, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setValue(serializableDeserializer0);
      assertNotNull(kafkaSpoutConfig_Builder1);
      
      KafkaSpoutConfig<Nimbus.debug_args._Fields, String> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder0.build();
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getKeyDeserializer();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not instantiate key deserializer interface org.apache.kafka.common.serialization.Deserializer
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "/Q*/O";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer>(string1, class0, class1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setProp(string2, (Object) string2);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      KafkaSpoutConfig<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      // Undeclared exception!
      try { 
        kafkaSpoutConfig0.getValueDeserializer();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not instantiate value deserializer interface org.apache.kafka.common.serialization.Deserializer
         //
         verifyException("org.apache.storm.kafka.spout.KafkaSpoutConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "6~Pr3E";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      Subscription subscription0 = null;
      KafkaSpoutConfig.Builder<DoubleDeserializer, DoubleDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<DoubleDeserializer, DoubleDeserializer>(string0, class0, class1, subscription0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      
      String string1 = "";
      KafkaSpoutConfig.Builder<DoubleDeserializer, DoubleDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setSSLKeystore(string0, string1, string1);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      
      KafkaSpoutConfig<DoubleDeserializer, DoubleDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      
      Subscription subscription1 = kafkaSpoutConfig0.getSubscription();
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertNull(subscription1);
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string1, string0);
      
      String string2 = "2D]\"wp r_M";
      Class<Deserializer> class2 = Deserializer.class;
      Class<Deserializer> class3 = Deserializer.class;
      String string3 = "l6";
      int int0 = (-1);
      Pattern pattern0 = Pattern.compile(string3, int0);
      assertNotNull(pattern0);
      assertEquals((-1), pattern0.flags());
      assertEquals("l6", pattern0.pattern());
      assertEquals("l6", pattern0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder2 = new KafkaSpoutConfig.Builder<InputStream, ReducedMetric>(string2, class2, class3, pattern0);
      assertNotNull(kafkaSpoutConfig_Builder2);
      assertEquals((-1), pattern0.flags());
      assertEquals("l6", pattern0.pattern());
      assertEquals("l6", pattern0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = (-64);
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder3 = kafkaSpoutConfig_Builder2.setMaxPollRecords(int1);
      assertNotNull(kafkaSpoutConfig_Builder3);
      assertEquals((-1), pattern0.flags());
      assertEquals("l6", pattern0.pattern());
      assertEquals("l6", pattern0.toString());
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(class2, class1);
      assertSame(class2, class3);
      assertSame(class2, class0);
      assertSame(class3, class1);
      assertSame(class3, class0);
      assertSame(class3, class2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      Class<Deserializer> class4 = Deserializer.class;
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder4 = kafkaSpoutConfig_Builder3.setKey((Class<? extends Deserializer<InputStream>>) class4);
      assertNotNull(kafkaSpoutConfig_Builder4);
      assertEquals((-1), pattern0.flags());
      assertEquals("l6", pattern0.pattern());
      assertEquals("l6", pattern0.toString());
      assertFalse(int1 == int0);
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertSame(class4, class3);
      assertSame(class4, class2);
      assertSame(class4, class0);
      assertSame(class4, class1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(class2, class1);
      assertSame(class2, class4);
      assertSame(class2, class3);
      assertSame(class2, class0);
      assertSame(class3, class4);
      assertSame(class3, class1);
      assertSame(class3, class0);
      assertSame(class3, class2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder5 = kafkaSpoutConfig_Builder4.setProp(properties0);
      assertNotNull(kafkaSpoutConfig_Builder5);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), pattern0.flags());
      assertEquals("l6", pattern0.pattern());
      assertEquals("l6", pattern0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder3));
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(class4, class3);
      assertSame(class4, class2);
      assertSame(class4, class0);
      assertSame(class4, class1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(class2, class1);
      assertSame(class2, class4);
      assertSame(class2, class3);
      assertSame(class2, class0);
      assertSame(class3, class4);
      assertSame(class3, class1);
      assertSame(class3, class0);
      assertSame(class3, class2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      int int2 = (-20);
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder6 = kafkaSpoutConfig_Builder5.setFetchMinBytes(int2);
      assertNotNull(kafkaSpoutConfig_Builder6);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), pattern0.flags());
      assertEquals("l6", pattern0.pattern());
      assertEquals("l6", pattern0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(kafkaSpoutConfig_Builder6.equals((Object)kafkaSpoutConfig_Builder3));
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder6);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(class4, class3);
      assertSame(class4, class2);
      assertSame(class4, class0);
      assertSame(class4, class1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder6);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(class2, class1);
      assertSame(class2, class4);
      assertSame(class2, class3);
      assertSame(class2, class0);
      assertSame(class3, class4);
      assertSame(class3, class1);
      assertSame(class3, class0);
      assertSame(class3, class2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      String string4 = ", partition = ";
      String string5 = "clojure.data$loading__5340__auto____9454";
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder7 = kafkaSpoutConfig_Builder6.setSSLKeystore(string3, string4, string5);
      assertNotNull(kafkaSpoutConfig_Builder7);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), pattern0.flags());
      assertEquals("l6", pattern0.pattern());
      assertEquals("l6", pattern0.toString());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder6));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(kafkaSpoutConfig_Builder6.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder7.equals((Object)kafkaSpoutConfig_Builder3));
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(class2, class1);
      assertSame(class2, class4);
      assertSame(class2, class3);
      assertSame(class2, class0);
      assertSame(class3, class4);
      assertSame(class3, class1);
      assertSame(class3, class0);
      assertSame(class3, class2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder7);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder6);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertSame(class4, class3);
      assertSame(class4, class2);
      assertSame(class4, class0);
      assertSame(class4, class1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder6);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder7);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder5);
      
      KafkaSpoutConfig.Builder<InputStream, ReducedMetric> kafkaSpoutConfig_Builder8 = kafkaSpoutConfig_Builder7.setProp(properties0);
      assertNotNull(kafkaSpoutConfig_Builder8);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), pattern0.flags());
      assertEquals("l6", pattern0.pattern());
      assertEquals("l6", pattern0.toString());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder7));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder4));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder6));
      assertFalse(kafkaSpoutConfig_Builder3.equals((Object)kafkaSpoutConfig_Builder5));
      assertFalse(kafkaSpoutConfig_Builder4.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder5.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(kafkaSpoutConfig_Builder6.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(kafkaSpoutConfig_Builder7.equals((Object)kafkaSpoutConfig_Builder3));
      assertFalse(kafkaSpoutConfig_Builder8.equals((Object)kafkaSpoutConfig_Builder3));
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(class2, class1);
      assertSame(class2, class4);
      assertSame(class2, class3);
      assertSame(class2, class0);
      assertSame(class3, class4);
      assertSame(class3, class1);
      assertSame(class3, class0);
      assertSame(class3, class2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder7);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder6);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder5);
      assertNotSame(kafkaSpoutConfig_Builder3, kafkaSpoutConfig_Builder8);
      assertSame(class4, class3);
      assertSame(class4, class2);
      assertSame(class4, class0);
      assertSame(class4, class1);
      assertNotSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder4, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder7);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder8);
      assertNotSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder5, kafkaSpoutConfig_Builder4);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder6, kafkaSpoutConfig_Builder7);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder8);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder7, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder4);
      assertNotSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder3);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder6);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder5);
      assertSame(kafkaSpoutConfig_Builder8, kafkaSpoutConfig_Builder7);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "/Q*/O";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      String string2 = "";
      String string3 = "enable.auto.commit";
      Class<Deserializer> class2 = Deserializer.class;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      KafkaSpoutConfig.Builder<ObjectInputStream, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<ObjectInputStream, ByteBufferDeserializer>(string3, class2, class0, linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = (-1148);
      KafkaSpoutConfig.Builder<ObjectInputStream, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setMaxRetries(int0);
      assertFalse(linkedList0.contains(string0));
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(class2, class1);
      assertSame(class2, class0);
      
      KafkaSpoutConfig<ObjectInputStream, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      assertFalse(linkedList0.contains(string0));
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals((-1148), kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(class2, class1);
      assertSame(class2, class0);
      
      KafkaSpoutConfig.FirstPollOffsetStrategy kafkaSpoutConfig_FirstPollOffsetStrategy0 = kafkaSpoutConfig0.getFirstPollOffsetStrategy();
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig_FirstPollOffsetStrategy0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals((-1148), kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(class2, class1);
      assertSame(class2, class0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "/Q*/O";
      Class<Deserializer> class0 = Deserializer.class;
      Class<Deserializer> class1 = Deserializer.class;
      String[] stringArray0 = new String[11];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder0 = new KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer>(string1, class0, class1, stringArray0);
      assertNotNull(kafkaSpoutConfig_Builder0);
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "enable.auto.commit";
      KafkaSpoutConfig.Builder<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig_Builder1 = kafkaSpoutConfig_Builder0.setProp(string2, (Object) string2);
      assertNotNull(kafkaSpoutConfig_Builder1);
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      KafkaSpoutConfig<BytesDeserializer, ByteBufferDeserializer> kafkaSpoutConfig0 = kafkaSpoutConfig_Builder1.build();
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertNotNull(kafkaSpoutConfig0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean2, boolean3);
      assertFalse(boolean4);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      long long0 = kafkaSpoutConfig0.getPartitionRefreshPeriodMs();
      assertEquals(2000L, long0);
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      Map<String, Object> map0 = kafkaSpoutConfig0.getKafkaProps();
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertNotNull(map0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      RecordTranslator<BytesDeserializer, ByteBufferDeserializer> recordTranslator0 = kafkaSpoutConfig0.getTranslator();
      assertEquals(10000000, KafkaSpoutConfig.DEFAULT_MAX_UNCOMMITTED_OFFSETS);
      assertEquals(200L, KafkaSpoutConfig.DEFAULT_POLL_TIMEOUT_MS);
      assertEquals(Integer.MAX_VALUE, KafkaSpoutConfig.DEFAULT_MAX_RETRIES);
      assertEquals(30000L, KafkaSpoutConfig.DEFAULT_OFFSET_COMMIT_PERIOD_MS);
      assertEquals(2000L, KafkaSpoutConfig.DEFAULT_PARTITION_REFRESH_PERIOD_MS);
      assertNotNull(recordTranslator0);
      assertEquals(10000000, kafkaSpoutConfig0.getMaxUncommittedOffsets());
      assertFalse(kafkaSpoutConfig0.isConsumerAutoCommitMode());
      assertEquals(Integer.MAX_VALUE, kafkaSpoutConfig0.getMaxTupleRetries());
      assertEquals(200L, kafkaSpoutConfig0.getPollTimeoutMs());
      assertEquals(KafkaSpoutConfig.FirstPollOffsetStrategy.UNCOMMITTED_EARLIEST, kafkaSpoutConfig0.getFirstPollOffsetStrategy());
      assertEquals(30000L, kafkaSpoutConfig0.getOffsetsCommitPeriodMs());
      assertEquals(2000L, kafkaSpoutConfig0.getPartitionRefreshPeriodMs());
      assertNull(kafkaSpoutConfig0.getConsumerGroupId());
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }
}
