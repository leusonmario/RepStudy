/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 02:11:26 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.security.auth.login.AppConfigurationEntry;
import javax.security.auth.login.LoginException;
import me.prettyprint.cassandra.connection.client.HSaslThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.thrift.transport.TFastFramedTransport;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HSaslThriftClient_ESTest extends HSaslThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      String[] stringArray0 = hSaslThriftClient_KerberosUserConfiguration0.getrecognizedOptions();
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getoptions();
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(hashMap0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "Opening kerberos transport...";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Opening kerberos transport...", cassandraHost0.getHost());
      assertEquals("Opening kerberos transport...(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Opening kerberos transport...(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Opening kerberos transport...:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Opening kerberos transport...", cassandraHost0.getHost());
      assertEquals("Opening kerberos transport...(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Opening kerberos transport...(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Opening kerberos transport...:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Opening kerberos transport...", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hSaslThriftClient0);
      
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      hSaslThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Opening kerberos transport...", cassandraHost0.getHost());
      assertEquals("Opening kerberos transport...(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Opening kerberos transport...(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Opening kerberos transport...:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Opening kerberos transport...", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getDEFAULT_KERBEROS_OPTIONS();
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      hSaslThriftClient_KerberosUserConfiguration0.setoptions(hashMap0);
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = hSaslThriftClient0.getservicePrincipalName();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Opening kerberos transport...", cassandraHost0.getHost());
      assertEquals("Opening kerberos transport...(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Opening kerberos transport...(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Opening kerberos transport...:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Opening kerberos transport...", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(string1);
      assertEquals("Opening kerberos transport...", string1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "N_>nc X9gN\"8(k96>t";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("N_>nc X9gN\"8(k96>t:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("N_>nc X9gN\"8(k96>t", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("N_>nc X9gN\"8(k96>t:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("N_>nc X9gN\"8(k96>t", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("N_>nc X9gN\"8(k96>t", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hSaslThriftClient0);
      
      Logger logger0 = hSaslThriftClient0.getlog();
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("N_>nc X9gN\"8(k96>t:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("N_>nc X9gN\"8(k96>t", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("N_>nc X9gN\"8(k96>t", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(logger0);
      
      hSaslThriftClient0.setlog(logger0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("N_>nc X9gN\"8(k96>t:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("N_>nc X9gN\"8(k96>t", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("N_>nc X9gN\"8(k96>t", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hSaslThriftClient0.setservicePrincipalName(string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N_>nc X9gN\"8(k96>t(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("N_>nc X9gN\"8(k96>t:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("N_>nc X9gN\"8(k96>t", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("N_>nc X9gN\"8(k96>t", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "gO{GWX</AM";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals("gO{GWX</AM(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals("gO{GWX</AM", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("gO{GWX</AM:9160", cassandraHost0.getUrl());
          assertEquals("gO{GWX</AM(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNotNull(cassandraHost0);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertEquals("gO{GWX</AM(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals("gO{GWX</AM", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("gO{GWX</AM:9160", cassandraHost0.getUrl());
          assertEquals("gO{GWX</AM(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("gO{GWX</AM", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNotNull(hSaslThriftClient0);
          
          TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hSaslThriftClient0.getparams();
          assertEquals("gO{GWX</AM(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals("gO{GWX</AM", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("gO{GWX</AM:9160", cassandraHost0.getUrl());
          assertEquals("gO{GWX</AM(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("gO{GWX</AM", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNull(tSSLTransportFactory_TSSLTransportParameters0);
          
          Map<String, String> map0 = hSaslThriftClient0.getSASL_PROPS();
          assertEquals("gO{GWX</AM(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals("gO{GWX</AM", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("gO{GWX</AM:9160", cassandraHost0.getUrl());
          assertEquals("gO{GWX</AM(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("gO{GWX</AM", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNotNull(map0);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = " <uv./4}HbM}|{O!S?";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(" <uv./4}HbM}|{O!S?", cassandraHost0.getHost());
      assertEquals(" <uv./4}HbM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(" <uv./4}HbM}|{O!S?", cassandraHost0.getHost());
      assertEquals(" <uv./4}HbM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}HbM}|{O!S?", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hSaslThriftClient0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)106;
      ByteArrayEntity byteArrayEntity0 = new ByteArrayEntity(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2L, byteArrayEntity0.getContentLength());
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayEntity0);
      
      InputStream inputStream0 = byteArrayEntity0.getContent();
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2L, byteArrayEntity0.getContentLength());
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(2, inputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(inputStream0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(hSaslThriftClient0.servicePrincipalName, cassandraHost0.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(mockFileOutputStream0);
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(inputStream0, mockFileOutputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(" <uv./4}HbM}|{O!S?", cassandraHost0.getHost());
      assertEquals(" <uv./4}HbM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}HbM}|{O!S?", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(2L, byteArrayEntity0.getContentLength());
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(2, inputStream0.available());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(2, byteArray0.length);
      assertNotNull(tIOStreamTransport0);
      
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(tIOStreamTransport0, byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(" <uv./4}HbM}|{O!S?", cassandraHost0.getHost());
      assertEquals(" <uv./4}HbM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}HbM}|{O!S?", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(2L, byteArrayEntity0.getContentLength());
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(2, inputStream0.available());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertEquals(2, byteArray0.length);
      assertNotNull(tFastFramedTransport0);
      
      hSaslThriftClient0.transport = (TTransport) tFastFramedTransport0;
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" <uv./4}HbM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(" <uv./4}HbM}|{O!S?", cassandraHost0.getHost());
      assertEquals(" <uv./4}HbM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}HbM}|{O!S?", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(2L, byteArrayEntity0.getContentLength());
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(2, inputStream0.available());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hSaslThriftClient0.transport.getBufferPosition());
      assertEquals(0, hSaslThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open SASL connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals(":9160", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("", cassandraHost0.getHost());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertNotNull(cassandraHost0);
          
          cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_LIFO);
          assertEquals(":9160", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("", cassandraHost0.getHost());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertEquals(":9160", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("", cassandraHost0.getHost());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertNotNull(hSaslThriftClient0);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      
      hSaslThriftClient0.setservicePrincipalName(string0);
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "version";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("version:9160", cassandraHost0.getUrl());
          assertEquals("version(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("version(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("version", cassandraHost0.getHost());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNotNull(cassandraHost0);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("version:9160", cassandraHost0.getUrl());
          assertEquals("version(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("version(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("version", cassandraHost0.getHost());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("version", hSaslThriftClient0.getservicePrincipalName());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNotNull(hSaslThriftClient0);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "c,NFAVB_A|y['\"Xu";
      int int0 = 112;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("c,NFAVB_A|y['\"Xu:112", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("c,NFAVB_A|y['\"Xu", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("c,NFAVB_A|y['\"Xu(200.42.42.0):112", cassandraHost0.toString());
      assertEquals("c,NFAVB_A|y['\"Xu(200.42.42.0):112", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(112, cassandraHost0.getPort());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      String string1 = "U8Y";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("c,NFAVB_A|y['\"Xu:112", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("c,NFAVB_A|y['\"Xu", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("c,NFAVB_A|y['\"Xu(200.42.42.0):112", cassandraHost0.toString());
      assertEquals("c,NFAVB_A|y['\"Xu(200.42.42.0):112", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(112, cassandraHost0.getPort());
      assertEquals("U8Y", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getDEFAULT_KERBEROS_OPTIONS();
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      hSaslThriftClient_KerberosUserConfiguration0.setoptions(hashMap0);
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string0 = "w\\7#c0i";
      AppConfigurationEntry[] appConfigurationEntryArray0 = hSaslThriftClient_KerberosUserConfiguration0.getAppConfigurationEntry(string0);
      assertEquals(1, appConfigurationEntryArray0.length);
      assertNotNull(appConfigurationEntryArray0);
      
      String string1 = "Fwz(OkZoq-b~hj";
      CassandraHost cassandraHost0 = new CassandraHost(string1);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Fwz(OkZoq-b~hj(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Fwz(OkZoq-b~hj(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Fwz(OkZoq-b~hj", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Fwz(OkZoq-b~hj:9160", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(cassandraHost0);
      
      String string2 = "";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string2, hSaslThriftClient_KerberosUserConfiguration0.recognizedOptions, cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Fwz(OkZoq-b~hj(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Fwz(OkZoq-b~hj(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Fwz(OkZoq-b~hj", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Fwz(OkZoq-b~hj:9160", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string2, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Fwz(OkZoq-b~hj(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Fwz(OkZoq-b~hj(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Fwz(OkZoq-b~hj", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Fwz(OkZoq-b~hj:9160", cassandraHost0.getUrl());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "VY";
      int int0 = 100000;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("VY(200.42.42.0):100000", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("VY", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("VY(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("VY:100000", cassandraHost0.getUrl());
      assertEquals(100000, cassandraHost0.getPort());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("VY(200.42.42.0):100000", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("VY", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("VY(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("VY:100000", cassandraHost0.getUrl());
      assertEquals(100000, cassandraHost0.getPort());
      assertEquals("VY", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hSaslThriftClient0);
      
      hSaslThriftClient0.setservicePrincipalName(string0);
      assertEquals("VY(200.42.42.0):100000", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("VY", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("VY(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("VY:100000", cassandraHost0.getUrl());
      assertEquals(100000, cassandraHost0.getPort());
      assertEquals("VY", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      hSaslThriftClient_KerberosUserConfiguration0.setoptions(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = " <uv./4}/bM}|{O!S?";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" <uv./4}/bM}|{O!S?", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" <uv./4}/bM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      int int0 = 76;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(76, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" <uv./4}/bM}|{O!S?", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" <uv./4}/bM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(76, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" <uv./4}/bM}|{O!S?", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" <uv./4}/bM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(" <uv./4}/bM}|{O!S?", hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hSaslThriftClient0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      byte byte1 = (byte)80;
      byteArray0[1] = byte1;
      byte byte2 = (byte)6;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-74);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      ByteArrayEntity byteArrayEntity0 = new ByteArrayEntity(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)80, (byte)6, (byte) (-74), (byte)0}, byteArray0);
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(5L, byteArrayEntity0.getContentLength());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayEntity0);
      
      InputStream inputStream0 = byteArrayEntity0.getContent();
      assertArrayEquals(new byte[] {(byte)3, (byte)80, (byte)6, (byte) (-74), (byte)0}, byteArray0);
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(5L, byteArrayEntity0.getContentLength());
      assertEquals(5, inputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(inputStream0);
      
      String string1 = "org.apache.cassandra.thrift.AuthenticationRequest";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, cassandraHost0.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFileOutputStream0);
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(inputStream0, mockFileOutputStream0);
      assertArrayEquals(new byte[] {(byte)3, (byte)80, (byte)6, (byte) (-74), (byte)0}, byteArray0);
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(5L, byteArrayEntity0.getContentLength());
      assertEquals(5, inputStream0.available());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(76, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" <uv./4}/bM}|{O!S?", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" <uv./4}/bM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/0588608e7a2bdf974c985ff546207104f672bf6c/evosuite_5/ <uv./4}/bM}|{O!S?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/0588608e7a2bdf974c985ff546207104f672bf6c/evosuite_5/ <uv./4}/bM}|{O!S?/org.apache.cassandra.thrift.AuthenticationRequest", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.cassandra.thrift.AuthenticationRequest", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(5, byteArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(tIOStreamTransport0);
      
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(tIOStreamTransport0, byte1);
      assertArrayEquals(new byte[] {(byte)3, (byte)80, (byte)6, (byte) (-74), (byte)0}, byteArray0);
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(5L, byteArrayEntity0.getContentLength());
      assertEquals(5, inputStream0.available());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(76, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" <uv./4}/bM}|{O!S?", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" <uv./4}/bM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/0588608e7a2bdf974c985ff546207104f672bf6c/evosuite_5/ <uv./4}/bM}|{O!S?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/0588608e7a2bdf974c985ff546207104f672bf6c/evosuite_5/ <uv./4}/bM}|{O!S?/org.apache.cassandra.thrift.AuthenticationRequest", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.cassandra.thrift.AuthenticationRequest", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertEquals(5, byteArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte4);
      assertNotNull(tFastFramedTransport0);
      
      hSaslThriftClient0.transport = (TTransport) tFastFramedTransport0;
      assertFalse(byteArrayEntity0.isStreaming());
      assertTrue(byteArrayEntity0.isRepeatable());
      assertFalse(byteArrayEntity0.isChunked());
      assertEquals(5L, byteArrayEntity0.getContentLength());
      assertEquals(5, inputStream0.available());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(76, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" <uv./4}/bM}|{O!S?", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" <uv./4}/bM}|{O!S?:9160", cassandraHost0.getUrl());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(" <uv./4}/bM}|{O!S?(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/0588608e7a2bdf974c985ff546207104f672bf6c/evosuite_5/ <uv./4}/bM}|{O!S?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/0588608e7a2bdf974c985ff546207104f672bf6c/evosuite_5/ <uv./4}/bM}|{O!S?/org.apache.cassandra.thrift.AuthenticationRequest", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.cassandra.thrift.AuthenticationRequest", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(" <uv./4}/bM}|{O!S?", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, hSaslThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hSaslThriftClient0.transport.getBufferPosition());
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open SASL connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "location";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("location", cassandraHost0.getHost());
      assertEquals("location(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("location:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("location(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("location", cassandraHost0.getHost());
      assertEquals("location(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("location:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("location(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("location", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hSaslThriftClient0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hSaslThriftClient0.getparams();
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("location", cassandraHost0.getHost());
      assertEquals("location(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("location:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("location(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("location", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "X;,d%<!CZ";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("X;,d%<!CZ(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("X;,d%<!CZ", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("X;,d%<!CZ:9160", cassandraHost0.getUrl());
      assertEquals("X;,d%<!CZ(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      String string1 = null;
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("X;,d%<!CZ(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("X;,d%<!CZ", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("X;,d%<!CZ:9160", cassandraHost0.getUrl());
      assertEquals("X;,d%<!CZ(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNull(hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hSaslThriftClient0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hSaslThriftClient0.getparams();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("X;,d%<!CZ(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("X;,d%<!CZ", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("X;,d%<!CZ:9160", cassandraHost0.getUrl());
      assertEquals("X;,d%<!CZ(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNull(hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      hSaslThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("X;,d%<!CZ(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("X;,d%<!CZ", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("X;,d%<!CZ:9160", cassandraHost0.getUrl());
      assertEquals("X;,d%<!CZ(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNull(hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "7<+b(m0Hjxwup";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("7<+b(m0Hjxwup", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string0, hSaslThriftClient0.servicePrincipalName);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("7<+b(m0Hjxwup", hSaslThriftClient0.getservicePrincipalName());
      
      hSaslThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("7<+b(m0Hjxwup", hSaslThriftClient0.getservicePrincipalName());
      
      HSaslThriftClient.log = hSaslThriftClient0.log;
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("7<+b(m0Hjxwup", hSaslThriftClient0.getservicePrincipalName());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters1 = hSaslThriftClient0.getparams();
      assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertSame(tSSLTransportFactory_TSSLTransportParameters1, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("7<+b(m0Hjxwup", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters1);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters2 = hSaslThriftClient0.getparams();
      assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
      assertSame(tSSLTransportFactory_TSSLTransportParameters2, tSSLTransportFactory_TSSLTransportParameters1);
      assertSame(tSSLTransportFactory_TSSLTransportParameters2, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("7<+b(m0Hjxwup", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters2);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "org.apache.cassandra.thrift.IndexClause$1";
      int int0 = 65535;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1:65535", cassandraHost0.getUrl());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.getName());
      assertEquals(65535, cassandraHost0.getPort());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      String string1 = "ZTV/j$,n";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1:65535", cassandraHost0.getUrl());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.getName());
      assertEquals(65535, cassandraHost0.getPort());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("ZTV/j$,n", hSaslThriftClient0.getservicePrincipalName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hSaslThriftClient0);
      
      hSaslThriftClient0.startToUse();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1:65535", cassandraHost0.getUrl());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.getName());
      assertEquals(65535, cassandraHost0.getPort());
      assertEquals(0L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("ZTV/j$,n", hSaslThriftClient0.getservicePrincipalName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Map<String, String> map0 = hSaslThriftClient0.getSASL_PROPS();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1:65535", cassandraHost0.getUrl());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.getName());
      assertEquals(65535, cassandraHost0.getPort());
      assertEquals(0L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("ZTV/j$,n", hSaslThriftClient0.getservicePrincipalName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(map0);
      
      String string2 = hSaslThriftClient0.getservicePrincipalName();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1:65535", cassandraHost0.getUrl());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.getName());
      assertEquals(65535, cassandraHost0.getPort());
      assertEquals(0L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("ZTV/j$,n", hSaslThriftClient0.getservicePrincipalName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ZTV/j$,n", string2);
      
      Map<String, String> map1 = hSaslThriftClient0.getSASL_PROPS();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(map1, map0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1:65535", cassandraHost0.getUrl());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("org.apache.cassandra.thrift.IndexClause$1(200.42.42.0):65535", cassandraHost0.getName());
      assertEquals(65535, cassandraHost0.getPort());
      assertEquals(0L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("ZTV/j$,n", hSaslThriftClient0.getservicePrincipalName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(map1);
      
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getDEFAULT_KERBEROS_OPTIONS();
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
      assertNotNull(hashMap0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = null;
      String[] stringArray0 = new String[0];
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertNull(hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(0, stringArray0.length);
      assertNotNull(hSaslThriftClient0);
      
      ch.qos.logback.classic.Logger logger0 = (ch.qos.logback.classic.Logger)HSaslThriftClient.log;
      assertNotNull(logger0);
      
      hSaslThriftClient0.setlog(logger0);
      assertNull(hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "N";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("N(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("N:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("N", cassandraHost0.getHost());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("N(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("N:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("N", cassandraHost0.getHost());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("N", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hSaslThriftClient0);
      
      Logger logger0 = hSaslThriftClient0.getlog();
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("N(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("N:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("N", cassandraHost0.getHost());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("N", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(logger0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      String[] stringArray0 = hSaslThriftClient_KerberosUserConfiguration0.getrecognizedOptions();
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = hSaslThriftClient_KerberosUserConfiguration0.getrecognizedOptions();
      assertSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = hSaslThriftClient_KerberosUserConfiguration0.getrecognizedOptions();
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(7, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getDEFAULT_KERBEROS_OPTIONS();
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = "c=k4d;~ERc4}";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c=k4d;~ERc4}:9160", cassandraHost0.getUrl());
      assertEquals("c=k4d;~ERc4}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c=k4d;~ERc4}", cassandraHost0.getHost());
      assertEquals("c=k4d;~ERc4}(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      String string1 = "{I";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, hSaslThriftClient_KerberosUserConfiguration0.recognizedOptions);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c=k4d;~ERc4}:9160", cassandraHost0.getUrl());
      assertEquals("c=k4d;~ERc4}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c=k4d;~ERc4}", cassandraHost0.getHost());
      assertEquals("c=k4d;~ERc4}(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c=k4d;~ERc4}", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hSaslThriftClient0);
      
      Logger logger0 = null;
      hSaslThriftClient0.setlog(logger0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c=k4d;~ERc4}:9160", cassandraHost0.getUrl());
      assertEquals("c=k4d;~ERc4}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c=k4d;~ERc4}", cassandraHost0.getHost());
      assertEquals("c=k4d;~ERc4}(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c=k4d;~ERc4}", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "describe_splits";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("describe_splits:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("describe_splits", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("describe_splits(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("describe_splits(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      String string1 = ">SiF?5DwEV";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("describe_splits:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("describe_splits", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("describe_splits(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("describe_splits(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(">SiF?5DwEV", hSaslThriftClient0.getservicePrincipalName());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hSaslThriftClient0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = hSaslThriftClient0.servicePrincipalName;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = hSaslThriftClient0.servicePrincipalName;
      stringArray0[4] = string1;
      stringArray0[5] = hSaslThriftClient0.servicePrincipalName;
      stringArray0[6] = hSaslThriftClient0.servicePrincipalName;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      hSaslThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("describe_splits:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("describe_splits", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("describe_splits(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("describe_splits(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(">SiF?5DwEV", hSaslThriftClient0.getservicePrincipalName());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNotNull(cassandraHost0);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNotNull(hSaslThriftClient0);
          
          int int0 = 17;
          cassandraHost0.setCassandraThriftSocketTimeout(int0);
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals(17, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          
          hSaslThriftClient0.clearAuthentication();
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals(17, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          
          String string1 = hSaslThriftClient0.getservicePrincipalName();
          assertSame(string0, string1);
          assertSame(string1, string0);
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals(17, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNotNull(string1);
          assertEquals("", string1);
          
          hSaslThriftClient0.setservicePrincipalName(string0);
          assertSame(string0, string1);
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals(17, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "Q'!4 7{";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("Q'!4 7{(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Q'!4 7{(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("Q'!4 7{:0", cassandraHost0.getUrl());
      assertEquals("Q'!4 7{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      String string1 = "";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1);
      assertEquals("Q'!4 7{(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Q'!4 7{(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("Q'!4 7{:0", cassandraHost0.getUrl());
      assertEquals("Q'!4 7{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hSaslThriftClient0);
      
      Logger logger0 = hSaslThriftClient0.getlog();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Q'!4 7{(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Q'!4 7{(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("Q'!4 7{:0", cassandraHost0.getUrl());
      assertEquals("Q'!4 7{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(logger0);
      
      Logger logger1 = hSaslThriftClient0.getlog();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(logger1, logger0);
      assertEquals("Q'!4 7{(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Q'!4 7{(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("Q'!4 7{:0", cassandraHost0.getUrl());
      assertEquals("Q'!4 7{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(logger1);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertNotNull(cassandraHost0);
          
          int int0 = 0;
          cassandraHost0.setCassandraThriftSocketTimeout(int0);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          
          int int1 = 1050;
          cassandraHost0.setMaxActive(int1);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(1050, cassandraHost0.getMaxActive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertFalse(int1 == int0);
          
          String string1 = "";
          TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
          assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, tSSLTransportFactory_TSSLTransportParameters0);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(1050, cassandraHost0.getMaxActive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertNotNull(hSaslThriftClient0);
          
          TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters1 = new TSSLTransportFactory.TSSLTransportParameters();
          assertFalse(tSSLTransportFactory_TSSLTransportParameters1.equals((Object)tSSLTransportFactory_TSSLTransportParameters0));
          assertNotNull(tSSLTransportFactory_TSSLTransportParameters1);
          
          hSaslThriftClient0.params = tSSLTransportFactory_TSSLTransportParameters1;
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(1050, cassandraHost0.getMaxActive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          
          hSaslThriftClient0.clearAuthentication();
          assertSame(string0, string1);
          assertSame(string1, string0);
          assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(1050, cassandraHost0.getMaxActive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
          
          tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(hSaslThriftClient0.servicePrincipalName, string0);
          assertSame(string0, string1);
          assertSame(string1, string0);
          assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(1050, cassandraHost0.getMaxActive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
          
          hSaslThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
          assertSame(string0, string1);
          assertSame(string1, string0);
          assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(1050, cassandraHost0.getMaxActive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
          
          TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters2 = hSaslThriftClient0.getparams();
          assertSame(string0, string1);
          assertSame(string1, string0);
          assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
          assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
          assertSame(tSSLTransportFactory_TSSLTransportParameters2, tSSLTransportFactory_TSSLTransportParameters0);
          assertNotSame(tSSLTransportFactory_TSSLTransportParameters2, tSSLTransportFactory_TSSLTransportParameters1);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(1050, cassandraHost0.getMaxActive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
          assertFalse(tSSLTransportFactory_TSSLTransportParameters2.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
          assertNotNull(tSSLTransportFactory_TSSLTransportParameters2);
          
          String string2 = "";
          String string3 = "";
          String string4 = "";
          tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string2, string3, string0, string4);
          assertSame(string3, string0);
          assertSame(string3, string2);
          assertSame(string3, string4);
          assertSame(string3, string1);
          assertSame(string0, string1);
          assertSame(string0, string3);
          assertSame(string0, string2);
          assertSame(string0, string4);
          assertSame(string4, string3);
          assertSame(string4, string1);
          assertSame(string4, string0);
          assertSame(string4, string2);
          assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
          assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
          assertSame(string2, string3);
          assertSame(string2, string4);
          assertSame(string2, string0);
          assertSame(string2, string1);
          assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
          
          String string5 = "O=|,*l";
          hSaslThriftClient0.setservicePrincipalName(string5);
          assertSame(string0, string1);
          assertSame(string0, string3);
          assertNotSame(string0, string5);
          assertSame(string0, string2);
          assertSame(string0, string4);
          assertNotSame(string5, string1);
          assertNotSame(string5, string4);
          assertNotSame(string5, string2);
          assertNotSame(string5, string0);
          assertNotSame(string5, string3);
          assertSame(string1, string2);
          assertNotSame(string1, string5);
          assertSame(string1, string0);
          assertSame(string1, string4);
          assertSame(string1, string3);
          assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
          assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(1050, cassandraHost0.getMaxActive());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
          assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
          assertEquals(":9160", cassandraHost0.getUrl());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("O=|,*l", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertFalse(string0.equals((Object)string5));
          assertFalse(string5.equals((Object)string1));
          assertFalse(string5.equals((Object)string4));
          assertFalse(string5.equals((Object)string2));
          assertFalse(string5.equals((Object)string0));
          assertFalse(string5.equals((Object)string3));
          assertFalse(string1.equals((Object)string5));
          assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
          
          byte[] byteArray0 = new byte[8];
          byte byte0 = (byte)71;
          byteArray0[0] = byte0;
          byte byte1 = (byte)85;
          byteArray0[1] = byte1;
          byte byte2 = (byte)0;
          byteArray0[2] = byte2;
          byte byte3 = (byte)0;
          byteArray0[3] = byte3;
          byte byte4 = (byte) (-98);
          byteArray0[4] = byte4;
          byte byte5 = (byte)0;
          byteArray0[5] = byte5;
          byte byte6 = (byte)3;
          byteArray0[6] = byte6;
          byte byte7 = (byte) (-50);
          byteArray0[7] = byte7;
          TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0);
          assertArrayEquals(new byte[] {(byte)71, (byte)85, (byte)0, (byte)0, (byte) (-98), (byte)0, (byte)3, (byte) (-50)}, byteArray0);
          assertTrue(tMemoryInputTransport0.isOpen());
          assertEquals(8, tMemoryInputTransport0.getBytesRemainingInBuffer());
          assertEquals(0, tMemoryInputTransport0.getBufferPosition());
          assertEquals(8, byteArray0.length);
          assertNotNull(tMemoryInputTransport0);
          
          String string6 = "GX{B)/plx=;:[{W";
          try { 
            HSaslThriftClient.openKerberosTransport(tMemoryInputTransport0, string6);
            fail("Expecting exception: LoginException");
          
          } catch(LoginException e) {
             //
             // Security Exception
             //
             verifyException("javax.security.auth.login.LoginContext", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getoptions();
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(hashMap0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "debug";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals("debug", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("debug:9160", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("debug(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("debug(200.42.42.0):9160", cassandraHost0.toString());
          assertTrue(cassandraHost0.getLifo());
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertNotNull(cassandraHost0);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertEquals("debug", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("debug:9160", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("debug(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("debug(200.42.42.0):9160", cassandraHost0.toString());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("debug", hSaslThriftClient0.getservicePrincipalName());
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertNotNull(hSaslThriftClient0);
          
          boolean boolean0 = true;
          cassandraHost0.setUseSocketKeepalive(boolean0);
          assertEquals("debug", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals("debug:9160", cassandraHost0.getUrl());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("debug(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("debug(200.42.42.0):9160", cassandraHost0.toString());
          assertTrue(cassandraHost0.getLifo());
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "";
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0, boolean0);
      assertEquals(0, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(0, stringArray0.length);
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "Kerberos login failed: ";
          int int0 = 125;
          CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertNotNull(cassandraHost0);
          
          int int1 = 2;
          int int2 = Integer.MAX_VALUE;
          cassandraHost0.setMaxActive(int2);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          assertFalse(int2 == int1);
          assertFalse(int2 == int0);
          
          cassandraHost0.setCassandraThriftSocketTimeout(int1);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          assertFalse(int1 == int0);
          assertFalse(int1 == int2);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("Kerberos login failed: ", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          assertNotNull(hSaslThriftClient0);
          
          HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
          assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
          
          HashMap<String, String> hashMap0 = new HashMap<String, String>();
          assertTrue(hashMap0.isEmpty());
          assertEquals(0, hashMap0.size());
          assertNotNull(hashMap0);
          
          String string1 = "!;i5H";
          String string2 = hashMap0.put(string1, hSaslThriftClient0.servicePrincipalName);
          assertNotSame(string0, string1);
          assertNotSame(string1, string0);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("Kerberos login failed: ", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertFalse(hashMap0.isEmpty());
          assertEquals(1, hashMap0.size());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(string0.equals((Object)string1));
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          assertFalse(string1.equals((Object)string0));
          assertNull(string2);
          
          hSaslThriftClient_KerberosUserConfiguration0.setoptions(hashMap0);
          assertFalse(hashMap0.isEmpty());
          assertEquals(1, hashMap0.size());
          
          String string3 = hSaslThriftClient0.getservicePrincipalName();
          assertSame(string0, string3);
          assertNotSame(string0, string1);
          assertNotSame(string3, string1);
          assertSame(string3, string0);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("Kerberos login failed: ", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(string0.equals((Object)string1));
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          assertFalse(string3.equals((Object)string1));
          assertNotNull(string3);
          assertEquals("Kerberos login failed: ", string3);
          
          TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
          hSaslThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
          assertSame(string0, string3);
          assertNotSame(string0, string1);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("Kerberos login failed: ", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(string0.equals((Object)string1));
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          
          String string4 = hSaslThriftClient0.getservicePrincipalName();
          assertNotSame(string4, string1);
          assertSame(string4, string3);
          assertSame(string4, string0);
          assertSame(string0, string3);
          assertSame(string0, string4);
          assertNotSame(string0, string1);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("Kerberos login failed: ", hSaslThriftClient0.getservicePrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(string4.equals((Object)string1));
          assertFalse(string0.equals((Object)string1));
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          assertNotNull(string4);
          assertEquals("Kerberos login failed: ", string4);
          
          String string5 = null;
          hSaslThriftClient0.setservicePrincipalName(string5);
          assertSame(string0, string3);
          assertSame(string0, string4);
          assertNotSame(string0, string1);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertNull(hSaslThriftClient0.getservicePrincipalName());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(string0.equals((Object)string1));
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          
          ch.qos.logback.classic.Logger logger0 = (ch.qos.logback.classic.Logger)HSaslThriftClient.log;
          assertNotNull(logger0);
          
          hSaslThriftClient0.setlog(logger0);
          assertSame(string0, string3);
          assertSame(string0, string4);
          assertNotSame(string0, string1);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertNull(hSaslThriftClient0.getservicePrincipalName());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(string0.equals((Object)string1));
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          
          Logger logger1 = hSaslThriftClient0.getlog();
          assertSame(string0, string3);
          assertSame(string0, string4);
          assertNotSame(string0, string1);
          assertSame(logger1, logger0);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertNull(hSaslThriftClient0.getservicePrincipalName());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(string0.equals((Object)string1));
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          assertNotNull(logger1);
          
          String string6 = hSaslThriftClient0.getservicePrincipalName();
          assertSame(string0, string3);
          assertSame(string0, string4);
          assertNotSame(string0, string1);
          assertEquals("Kerberos login failed", cassandraHost0.getHost());
          assertEquals(2, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(125, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.getName());
          assertEquals("Kerberos login failed(200.42.42.0):125", cassandraHost0.toString());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxActive());
          assertEquals("Kerberos login failed:125", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertNull(hSaslThriftClient0.getservicePrincipalName());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertFalse(string0.equals((Object)string1));
          assertFalse(int0 == int1);
          assertFalse(int0 == int2);
          assertNull(string6);
          
          String[] stringArray0 = hSaslThriftClient_KerberosUserConfiguration0.getrecognizedOptions();
          assertEquals(7, stringArray0.length);
          assertNotNull(stringArray0);
          
          String[] stringArray1 = hSaslThriftClient_KerberosUserConfiguration0.getrecognizedOptions();
          assertSame(stringArray1, stringArray0);
          assertEquals(7, stringArray1.length);
          assertNotNull(stringArray1);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      String string0 = "Zpcv+!g4i(X*=C%[ X_";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("Zpcv+!g4i(X*=C%[ X_:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Zpcv+!g4i(X*=C%[ X_", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, hSaslThriftClient_KerberosUserConfiguration0.recognizedOptions, cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("Zpcv+!g4i(X*=C%[ X_:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Zpcv+!g4i(X*=C%[ X_", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("Zpcv+!g4i(X*=C%[ X_:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Zpcv+!g4i(X*=C%[ X_", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Zpcv+!g4i(X*=C%[ X_", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hSaslThriftClient0);
      
      Logger logger0 = null;
      HSaslThriftClient.log = logger0;
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string0, string0);
      assertEquals("Zpcv+!g4i(X*=C%[ X_:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Zpcv+!g4i(X*=C%[ X_", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      Logger logger1 = hSaslThriftClient0.getlog();
      assertEquals("Zpcv+!g4i(X*=C%[ X_:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Zpcv+!g4i(X*=C%[ X_", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Zpcv+!g4i(X*=C%[ X_", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNull(logger1);
      
      Map<String, String> map0 = hSaslThriftClient0.getSASL_PROPS();
      assertEquals("Zpcv+!g4i(X*=C%[ X_:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Zpcv+!g4i(X*=C%[ X_", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Zpcv+!g4i(X*=C%[ X_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Zpcv+!g4i(X*=C%[ X_", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      long long0 = (-128L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(long0);
      long long1 = (-1855L);
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(cassandraHost0);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      String string1 = "";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1855L), hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(hSaslThriftClient0);
      
      Map<String, String> map0 = hSaslThriftClient0.getSASL_PROPS();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1855L), hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(map0);
      
      Logger logger0 = null;
      boolean boolean1 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean1);
      assertSame(string0, string1);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = false;
      cassandraHost0.setUseSocketKeepalive(boolean2);
      assertSame(string0, string1);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertFalse(boolean2 == boolean0);
      
      hSaslThriftClient0.setlog(logger0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1855L), hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      long long2 = 956L;
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      System.setCurrentTimeMillis(cassandraHost0.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(string0, string1);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      Map<String, String> map1 = hSaslThriftClient0.getSASL_PROPS();
      assertSame(map1, map0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1L), hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(map1);
      
      TTransport tTransport0 = hSaslThriftClient0.transport;
      assertNull(tTransport0);
      
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(tTransport0, cassandraHost0.DEFAULT_MAX_ACTIVE, cassandraHost0.DEFAULT_PORT);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1L), hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertNotNull(tFastFramedTransport0);
      
      // Undeclared exception!
      try { 
        HSaslThriftClient.openKerberosTransport(tFastFramedTransport0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }
}
