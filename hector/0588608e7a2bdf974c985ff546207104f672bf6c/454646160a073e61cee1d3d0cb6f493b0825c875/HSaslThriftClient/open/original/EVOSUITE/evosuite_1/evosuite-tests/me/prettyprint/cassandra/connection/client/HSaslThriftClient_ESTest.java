/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 01:04:48 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.login.AppConfigurationEntry;
import javax.security.auth.login.Configuration;
import javax.security.auth.login.LoginException;
import me.prettyprint.cassandra.connection.client.HSaslThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingSocket;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TSaslServerTransport;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HSaslThriftClient_ESTest extends HSaslThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "D*jSqR";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("D*jSqR:9160", cassandraHost0.getUrl());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("D*jSqR(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("D*jSqR(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("D*jSqR", cassandraHost0.getHost());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertNotNull(cassandraHost0);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("D*jSqR:9160", cassandraHost0.getUrl());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("D*jSqR(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("D*jSqR(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("D*jSqR", cassandraHost0.getHost());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertNotNull(hSaslThriftClient0);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "qx2Rm";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals("qx2Rm(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("qx2Rm(200.42.42.0):9160", cassandraHost0.getName());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals("qx2Rm", cassandraHost0.getHost());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("qx2Rm:9160", cassandraHost0.getUrl());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertNotNull(cassandraHost0);
          
          cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_LIFO);
          assertEquals("qx2Rm(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("qx2Rm(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals("qx2Rm", cassandraHost0.getHost());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("qx2Rm:9160", cassandraHost0.getUrl());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertEquals("qx2Rm(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("qx2Rm(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals("qx2Rm", cassandraHost0.getHost());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("qx2Rm:9160", cassandraHost0.getUrl());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertNotNull(hSaslThriftClient0);
          
          HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
          assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "me.prettyprint.cassandra.connection.client.HSaslThriftClient$1";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1", cassandraHost0.getHost());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1", cassandraHost0.getHost());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hSaslThriftClient0);
      
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1", cassandraHost0.getHost());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(tMemoryBuffer0);
      
      hSaslThriftClient0.transport = (TTransport) tMemoryBuffer0;
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1", cassandraHost0.getHost());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("me.prettyprint.cassandra.connection.client.HSaslThriftClient$1(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals((-1), hSaslThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hSaslThriftClient0.transport.getBufferPosition());
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open SASL connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hSaslThriftClient0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "e>O$UP'Ll4";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "9$9#n3zD?";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
          assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
          
          String string0 = "";
          int int0 = 0;
          CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":0", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("", cassandraHost0.getHost());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals("(127.0.0.1):0", cassandraHost0.toString());
          assertEquals("(127.0.0.1):0", cassandraHost0.getName());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertNotNull(cassandraHost0);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(":0", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("", cassandraHost0.getHost());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals("(127.0.0.1):0", cassandraHost0.toString());
          assertEquals("(127.0.0.1):0", cassandraHost0.getName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertNotNull(hSaslThriftClient0);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      int int0 = 821;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):821", cassandraHost0.getName());
      assertEquals(821, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):821", cassandraHost0.toString());
      assertEquals(":821", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):821", cassandraHost0.getName());
      assertEquals(821, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):821", cassandraHost0.toString());
      assertEquals(":821", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "";
          int int0 = 0;
          CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
          assertEquals("(127.0.0.1):0", cassandraHost0.toString());
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals("(127.0.0.1):0", cassandraHost0.getName());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(":0", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("", cassandraHost0.getHost());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertNotNull(cassandraHost0);
          
          boolean boolean0 = false;
          int int1 = 0;
          cassandraHost0.setMaxActive(int1);
          assertEquals("(127.0.0.1):0", cassandraHost0.toString());
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals("(127.0.0.1):0", cassandraHost0.getName());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(":0", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("", cassandraHost0.getHost());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0, cassandraHost0.getMaxActive());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          
          cassandraHost0.setUseThriftFramedTransport(boolean0);
          assertEquals("(127.0.0.1):0", cassandraHost0.toString());
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals("(127.0.0.1):0", cassandraHost0.getName());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(":0", cassandraHost0.getUrl());
          assertEquals("", cassandraHost0.getHost());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0, cassandraHost0.getMaxActive());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          
          cassandraHost0.setMaxActive(int0);
          assertEquals("(127.0.0.1):0", cassandraHost0.toString());
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals("(127.0.0.1):0", cassandraHost0.getName());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(":0", cassandraHost0.getUrl());
          assertEquals("", cassandraHost0.getHost());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0, cassandraHost0.getMaxActive());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          
          String string1 = "tjr`XEM@";
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1);
          assertEquals("(127.0.0.1):0", cassandraHost0.toString());
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals("(127.0.0.1):0", cassandraHost0.getName());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(":0", cassandraHost0.getUrl());
          assertEquals("", cassandraHost0.getHost());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0, cassandraHost0.getMaxActive());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertFalse(string0.equals((Object)string1));
          assertFalse(string1.equals((Object)string0));
          assertNotNull(hSaslThriftClient0);
          
          HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
          assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
          
          Configuration.Parameters configuration_Parameters0 = hSaslThriftClient_KerberosUserConfiguration0.getParameters();
          assertNull(configuration_Parameters0);
          
          String string2 = hSaslThriftClient0.toString();
          assertEquals("(127.0.0.1):0", cassandraHost0.toString());
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals("(127.0.0.1):0", cassandraHost0.getName());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertFalse(cassandraHost0.getUseThriftFramedTransport());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(":0", cassandraHost0.getUrl());
          assertEquals("", cassandraHost0.getHost());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0, cassandraHost0.getMaxActive());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertFalse(string0.equals((Object)string1));
          assertFalse(string1.equals((Object)string0));
          assertFalse(string2.equals((Object)string0));
          assertFalse(string2.equals((Object)string1));
          assertNotNull(string2);
          assertEquals("CassandraClient<:0-10>", string2);
          assertNotSame(string0, string1);
          assertNotSame(string0, string2);
          assertNotSame(string1, string2);
          assertNotSame(string1, string0);
          assertNotSame(string2, string0);
          assertNotSame(string2, string1);
          
          hSaslThriftClient_KerberosUserConfiguration0.refresh();
          AppConfigurationEntry[] appConfigurationEntryArray0 = hSaslThriftClient_KerberosUserConfiguration0.getAppConfigurationEntry(string0);
          assertEquals(1, appConfigurationEntryArray0.length);
          assertFalse(string0.equals((Object)string1));
          assertFalse(string0.equals((Object)string2));
          assertNotNull(appConfigurationEntryArray0);
          assertNotSame(string0, string1);
          assertNotSame(string0, string2);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TTransport tTransport0 = null;
          String string0 = "org.apache.thrift.protocol.TMap";
          try { 
            HSaslThriftClient.openKerberosTransport(tTransport0, string0);
            fail("Expecting exception: LoginException");
          
          } catch(LoginException e) {
             //
             // Security Exception
             //
             verifyException("javax.security.auth.login.LoginContext", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "I)\"nYgY";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "Client";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertTrue(cassandraHost0.getLifo());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("Client:9160", cassandraHost0.getUrl());
          assertEquals("Client", cassandraHost0.getHost());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.toString());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertNotNull(cassandraHost0);
          
          boolean boolean0 = true;
          cassandraHost0.setUseThriftFramedTransport(boolean0);
          assertTrue(cassandraHost0.getLifo());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("Client:9160", cassandraHost0.getUrl());
          assertEquals("Client", cassandraHost0.getHost());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.toString());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          
          cassandraHost0.setUseThriftFramedTransport(boolean0);
          assertTrue(cassandraHost0.getLifo());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("Client:9160", cassandraHost0.getUrl());
          assertEquals("Client", cassandraHost0.getHost());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.toString());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          
          cassandraHost0.setUseSocketKeepalive(boolean0);
          assertTrue(cassandraHost0.getLifo());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("Client:9160", cassandraHost0.getUrl());
          assertEquals("Client", cassandraHost0.getHost());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          
          cassandraHost0.setUseSocketKeepalive(boolean0);
          assertTrue(cassandraHost0.getLifo());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("Client:9160", cassandraHost0.getUrl());
          assertEquals("Client", cassandraHost0.getHost());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0);
          assertTrue(cassandraHost0.getLifo());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("Client:9160", cassandraHost0.getUrl());
          assertEquals("Client", cassandraHost0.getHost());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("Client(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertNotNull(hSaslThriftClient0);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      String string0 = "T 3X>\\`*tf_\\m9";
      AppConfigurationEntry[] appConfigurationEntryArray0 = hSaslThriftClient_KerberosUserConfiguration0.getAppConfigurationEntry(string0);
      assertEquals(1, appConfigurationEntryArray0.length);
      assertNotNull(appConfigurationEntryArray0);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("T 3X>\\`*tf_\\m9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("T 3X>\\`*tf_\\m9:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("T 3X>\\`*tf_\\m9", cassandraHost0.getHost());
      assertEquals("T 3X>\\`*tf_\\m9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      String string1 = null;
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1);
      assertEquals("T 3X>\\`*tf_\\m9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("T 3X>\\`*tf_\\m9:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("T 3X>\\`*tf_\\m9", cassandraHost0.getHost());
      assertEquals("T 3X>\\`*tf_\\m9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hSaslThriftClient0);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertNotNull(tMemoryInputTransport0);
      
      hSaslThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals("T 3X>\\`*tf_\\m9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("T 3X>\\`*tf_\\m9:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("T 3X>\\`*tf_\\m9", cassandraHost0.getHost());
      assertEquals("T 3X>\\`*tf_\\m9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, hSaslThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hSaslThriftClient0.transport.getBufferPosition());
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open SASL connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }
}
