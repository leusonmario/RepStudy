/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 01:11:06 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.security.auth.login.AppConfigurationEntry;
import javax.security.auth.login.LoginException;
import me.prettyprint.cassandra.connection.client.HSaslThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.thrift.transport.AutoExpandingBufferWriteTransport;
import org.apache.thrift.transport.TFileTransport;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TStandardFile;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HSaslThriftClient_ESTest extends HSaslThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "Uj?LPJ(";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Uj?LPJ(", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Uj?LPJ((200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Uj?LPJ((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Uj?LPJ(:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(cassandraHost0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Uj?LPJ(", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Uj?LPJ((200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Uj?LPJ((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Uj?LPJ(:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Kerberos context couldn't be established with client: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "Warning - null logger in constructor; possible log~j misconfiguration.";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.:9160", cassandraHost0.getUrl());
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals(9160, cassandraHost0.getPort());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          assertNotNull(cassandraHost0);
          
          cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.:9160", cassandraHost0.getUrl());
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          
          String string1 = null;
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string1);
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.:9160", cassandraHost0.getUrl());
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.", cassandraHost0.getHost());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("Warning - null logger in constructor; possible log~j misconfiguration.(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          assertNotNull(hSaslThriftClient0);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "l";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("l:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("l(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("l", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("l(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("l:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("l(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("l", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("l(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hSaslThriftClient0);
      
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("l:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("l(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("l", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("l(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tMemoryBuffer0);
      
      hSaslThriftClient0.transport = (TTransport) tMemoryBuffer0;
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("l:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("l(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("l", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("l(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(0, hSaslThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hSaslThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open SASL connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "dx/x0";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("dx/x0(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("dx/x0:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("dx/x0(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("dx/x0", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("dx/x0(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("dx/x0:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("dx/x0(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("dx/x0", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hSaslThriftClient0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration(string0);
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      String string1 = "AuthorizationException";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string1, int0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("AuthorizationException", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("AuthorizationException:0", cassandraHost0.getUrl());
      assertFalse(string1.equals((Object)string0));
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      int int1 = (-1817);
      cassandraHost0.setMaxFrameSize(int1);
      assertNotSame(string1, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("AuthorizationException", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1817), cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("AuthorizationException:0", cassandraHost0.getUrl());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string2 = "Y|^";
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("AuthorizationException", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1817), cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("AuthorizationException:0", cassandraHost0.getUrl());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean0 = false;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("AuthorizationException", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1817), cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("AuthorizationException:0", cassandraHost0.getUrl());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean1 = true;
      cassandraHost0.setLifo(boolean1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("AuthorizationException", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1817), cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("AuthorizationException:0", cassandraHost0.getUrl());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string3 = null;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      String string4 = "6!J6";
      String string5 = "Creating a new SASL thrift connection to {}";
      String string6 = null;
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string2, string4, string2, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string3, string4, string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string2, string3, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("AuthorizationException", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1817), cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("AuthorizationException:0", cassandraHost0.getUrl());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hSaslThriftClient0);
      
      int int2 = 42;
      AutoExpandingBufferWriteTransport autoExpandingBufferWriteTransport0 = new AutoExpandingBufferWriteTransport(int2, cassandraHost0.DEFAULT_PORT);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("AuthorizationException", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1817), cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("AuthorizationException(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("AuthorizationException:0", cassandraHost0.getUrl());
      assertEquals(0, autoExpandingBufferWriteTransport0.getBufferPosition());
      assertTrue(autoExpandingBufferWriteTransport0.isOpen());
      assertEquals(0, autoExpandingBufferWriteTransport0.getPos());
      assertEquals((-1), autoExpandingBufferWriteTransport0.getBytesRemainingInBuffer());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(autoExpandingBufferWriteTransport0);
      
      try { 
        HSaslThriftClient.openKerberosTransport(autoExpandingBufferWriteTransport0, string2, string1);
        fail("Expecting exception: LoginException");
      
      } catch(LoginException e) {
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "ppPuT/ o'P+!of**";
      int int0 = (-1313);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ppPuT/ o'P+!of**(200.42.42.0):-1313", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1313), cassandraHost0.getPort());
      assertEquals("ppPuT/ o'P+!of**", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ppPuT/ o'P+!of**(200.42.42.0):-1313", cassandraHost0.toString());
      assertEquals("ppPuT/ o'P+!of**:-1313", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      String string1 = "";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ppPuT/ o'P+!of**(200.42.42.0):-1313", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1313), cassandraHost0.getPort());
      assertEquals("ppPuT/ o'P+!of**", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ppPuT/ o'P+!of**(200.42.42.0):-1313", cassandraHost0.toString());
      assertEquals("ppPuT/ o'P+!of**:-1313", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hSaslThriftClient0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "l";
          int int0 = 0;
          CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("l", cassandraHost0.getHost());
          assertEquals("l:0", cassandraHost0.getUrl());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("l(200.42.42.0):0", cassandraHost0.toString());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("l(200.42.42.0):0", cassandraHost0.getName());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertNotNull(cassandraHost0);
          
          String string1 = null;
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string1);
          assertEquals(0, cassandraHost0.getPort());
          assertEquals("l", cassandraHost0.getHost());
          assertEquals("l:0", cassandraHost0.getUrl());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("l(200.42.42.0):0", cassandraHost0.toString());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("l(200.42.42.0):0", cassandraHost0.getName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertNotNull(hSaslThriftClient0);
          
          // Undeclared exception!
          try { 
            hSaslThriftClient0.open();
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Kerberos context couldn't be established with client: 
             //
             verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration(string0);
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      int int0 = 3621;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(":3621", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(3621, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):3621", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):3621", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(":3621", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(3621, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):3621", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):3621", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(2, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "T8mt-y\"V";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("T8mt-y\"V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("T8mt-y\"V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("T8mt-y\"V", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("T8mt-y\"V:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      String string1 = "{?L=mbmKWh$";
      String[] stringArray0 = new String[0];
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string1, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("T8mt-y\"V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("T8mt-y\"V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("T8mt-y\"V", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("T8mt-y\"V:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "gzXg0a}m%o$b";
      String string1 = "";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string1, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hSaslThriftClient0);
      
      String string2 = "prepare_cql_query";
      int int0 = 0;
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "insert_args";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("insert_args", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("insert_args:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      boolean boolean0 = false;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("insert_args", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("insert_args:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      String string1 = "'1E5]Tyo@|^v yO^CZ";
      boolean boolean1 = true;
      int int0 = 0;
      cassandraHost0.setMaxActive(int0);
      assertNotSame(string0, string1);
      assertEquals("insert_args", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("insert_args:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(string0.equals((Object)string1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertNotSame(string0, string1);
      assertEquals("insert_args", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("insert_args:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      int int1 = 0;
      cassandraHost0.setMaxFrameSize(int1);
      assertNotSame(string0, string1);
      assertEquals("insert_args", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getMaxFrameSize());
      assertEquals("insert_args:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(string0.equals((Object)string1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      String string2 = "";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string2);
      assertEquals("insert_args", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getMaxFrameSize());
      assertEquals("insert_args:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("insert_args(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Kerberos context couldn't be established with client: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = null;
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration(string0);
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      AppConfigurationEntry[] appConfigurationEntryArray0 = hSaslThriftClient_KerberosUserConfiguration0.getAppConfigurationEntry(string0);
      assertEquals(1, appConfigurationEntryArray0.length);
      assertNotNull(appConfigurationEntryArray0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "l";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("l(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("l", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("l:0", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("l(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      String string1 = null;
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string1);
      assertEquals("l(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("l", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("l:0", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("l(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hSaslThriftClient0);
      
      int int1 = 216;
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(int1);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      assertFalse(int1 == int0);
      assertNotNull(tMemoryBuffer0);
      
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertEquals("l(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("l", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("l:0", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("l(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(int0 == int1);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(boolean0);
      
      hSaslThriftClient0.transport = (TTransport) tMemoryBuffer0;
      assertEquals("l(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("l", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("l:0", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("l(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals(0, hSaslThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hSaslThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open SASL connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }
}
