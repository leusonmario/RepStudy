/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 02:16:38 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.security.auth.login.AppConfigurationEntry;
import javax.security.auth.login.Configuration;
import javax.security.auth.login.LoginException;
import me.prettyprint.cassandra.connection.client.HSaslThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.cassandra.thrift.Cassandra;
import org.apache.thrift.transport.AutoExpandingBufferReadTransport;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingSocket;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.helpers.NOPLogger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HSaslThriftClient_ESTest extends HSaslThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Kerberos context couldn't be established with client: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "n";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("n", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("n", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("n", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("n", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Logger logger0 = hSaslThriftClient0.getlog();
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("n", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("n", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("n", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(logger0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hSaslThriftClient0.setlog(logger0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("n", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("n", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("n", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hSaslThriftClient0.setservicePrincipalName(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("n(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("n", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("n", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("n", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      hSaslThriftClient_KerberosUserConfiguration0.setoptions(hSaslThriftClient_KerberosUserConfiguration0.options);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getoptions();
      assertNull(hashMap0);
      
      String string0 = "prniaK";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("prniaK(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("prniaK:9160", cassandraHost0.getUrl());
      assertEquals("prniaK", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("prniaK(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("prniaK(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("prniaK:9160", cassandraHost0.getUrl());
      assertEquals("prniaK", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("prniaK(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("prniaK", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("prniaK", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "w:aped entity must Jot be ll";
      int int0 = (-475);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("w", cassandraHost0.getHost());
      assertEquals("w:-475", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-475), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("w", cassandraHost0.getHost());
      assertEquals("w:-475", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-475), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      String string1 = null;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hSaslThriftClient0.getparams();
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("w", cassandraHost0.getHost());
      assertEquals("w:-475", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-475), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      String string2 = hSaslThriftClient0.getservicePrincipalName();
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("w", cassandraHost0.getHost());
      assertEquals("w:-475", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-475), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("w:aped entity must Jot be ll", string2);
      assertNotNull(string2);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(string0, string2);
      assertSame(string2, string0);
      
      hSaslThriftClient0.setparams(hSaslThriftClient0.params);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("w", cassandraHost0.getHost());
      assertEquals("w:-475", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-475), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(string0, string2);
      
      String string3 = hSaslThriftClient0.getclientPrincipalName();
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("w(200.42.42.0):-475", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("w", cassandraHost0.getHost());
      assertEquals("w:-475", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-475), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("w:aped entity must Jot be ll", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("w:aped entity must Jot be ll", string3);
      assertNotNull(string3);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(string0, string3);
      assertSame(string0, string2);
      assertSame(string3, string2);
      assertSame(string3, string0);
      
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration(string1);
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getDEFAULT_KERBEROS_OPTIONS();
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Kerberos context couldn't be established with client: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "~XnEQ3.o8?35N18_";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("~XnEQ3.o8?35N18_:9160", cassandraHost0.getUrl());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("~XnEQ3.o8?35N18_", cassandraHost0.getHost());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("~XnEQ3.o8?35N18_:9160", cassandraHost0.getUrl());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("~XnEQ3.o8?35N18_", cassandraHost0.getHost());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("~XnEQ3.o8?35N18_", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("~XnEQ3.o8?35N18_", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertNotNull(tMemoryInputTransport0);
      
      hSaslThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("~XnEQ3.o8?35N18_:9160", cassandraHost0.getUrl());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("~XnEQ3.o8?35N18_", cassandraHost0.getHost());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("~XnEQ3.o8?35N18_", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("~XnEQ3.o8?35N18_", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, hSaslThriftClient0.transport.getBufferPosition());
      assertEquals(0, hSaslThriftClient0.transport.getBytesRemainingInBuffer());
      
      Map<String, String> map0 = hSaslThriftClient0.getSASL_PROPS();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("~XnEQ3.o8?35N18_:9160", cassandraHost0.getUrl());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("~XnEQ3.o8?35N18_", cassandraHost0.getHost());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("~XnEQ3.o8?35N18_", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("~XnEQ3.o8?35N18_", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(map0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hSaslThriftClient0.setclientPrincipalName(hSaslThriftClient0.clientPrincipalName);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("~XnEQ3.o8?35N18_:9160", cassandraHost0.getUrl());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("~XnEQ3.o8?35N18_", cassandraHost0.getHost());
      assertEquals("~XnEQ3.o8?35N18_(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("~XnEQ3.o8?35N18_", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("~XnEQ3.o8?35N18_", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open SASL connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "org.apache.http.protocol.HttpDateGenerator";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("org.apache.http.protocol.HttpDateGenerator", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("org.apache.http.protocol.HttpDateGenerator", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "@";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("@", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("@(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("@(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("@:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals("@", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("@(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("@(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("@:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("@", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("@", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Kerberos context couldn't be established with client: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      int int0 = (-161);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":-161", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-161), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-161", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):-161", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String string1 = "Not Found";
      String string2 = "";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":-161", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-161), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-161", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):-161", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("Not Found", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":-161", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-161), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-161", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):-161", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Kerberos context couldn't be established with client: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      int int0 = 105;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):105", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(105, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):105", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":105", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):105", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(105, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):105", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":105", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hSaslThriftClient0.getparams();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):105", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(105, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):105", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":105", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "START_TOKEN";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("START_TOKEN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("START_TOKEN", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("START_TOKEN(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("START_TOKEN:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = null;
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("START_TOKEN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("START_TOKEN", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("START_TOKEN(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("START_TOKEN:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("START_TOKEN", hSaslThriftClient0.getservicePrincipalName());
      assertNull(hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Map<String, String> map0 = hSaslThriftClient0.getSASL_PROPS();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("START_TOKEN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("START_TOKEN", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("START_TOKEN(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("START_TOKEN:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("START_TOKEN", hSaslThriftClient0.getservicePrincipalName());
      assertNull(hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(map0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          int int0 = (-378);
          CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):-378", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(":-378", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertEquals((-378), cassandraHost0.getPort());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("(127.0.0.1):-378", cassandraHost0.toString());
          assertNotNull(cassandraHost0);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          
          String string1 = "EabC\"OYf-Vi@Wn<>*";
          HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string0);
          assertFalse(string0.equals((Object)string1));
          assertFalse(string1.equals((Object)string0));
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):-378", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(":-378", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertEquals((-378), cassandraHost0.getPort());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("(127.0.0.1):-378", cassandraHost0.toString());
          assertEquals("", hSaslThriftClient0.getclientPrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("EabC\"OYf-Vi@Wn<>*", hSaslThriftClient0.getservicePrincipalName());
          assertNotNull(hSaslThriftClient0);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          
          hSaslThriftClient0.setservicePrincipalName(string0);
          assertFalse(string0.equals((Object)string1));
          assertFalse(string1.equals((Object)string0));
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("", cassandraHost0.getHost());
          assertEquals("(127.0.0.1):-378", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(":-378", cassandraHost0.getUrl());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertEquals((-378), cassandraHost0.getPort());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("127.0.0.1", cassandraHost0.getIp());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("(127.0.0.1):-378", cassandraHost0.toString());
          assertEquals("", hSaslThriftClient0.getclientPrincipalName());
          assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
          assertEquals("", hSaslThriftClient0.getservicePrincipalName());
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          assertNotSame(string0, string1);
          assertNotSame(string1, string0);
          
          String string2 = "";
          HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration(string2);
          assertFalse(string2.equals((Object)string1));
          assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
          
          String string3 = "][+?|4yR!H";
          Configuration.Parameters configuration_Parameters0 = hSaslThriftClient_KerberosUserConfiguration0.getParameters();
          assertFalse(string2.equals((Object)string3));
          assertFalse(string2.equals((Object)string1));
          assertNull(configuration_Parameters0);
          assertNotSame(string2, string3);
          assertSame(string2, string0);
          assertNotSame(string2, string1);
          
          // Undeclared exception!
          try { 
            Configuration.getInstance(string3, configuration_Parameters0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"javax.security.auth.AuthPermission\" \"createLoginConfiguration.][+?|4yR!H\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // javax.security.auth.login.Configuration.checkPermission(Configuration.java:198)
             // javax.security.auth.login.Configuration.getInstance(Configuration.java:347)
             // sun.reflect.GeneratedMethodAccessor115.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      String string0 = "LnmCHb\\VBq\\fph";
      // Undeclared exception!
      try { 
        hSaslThriftClient_KerberosUserConfiguration0.getAppConfigurationEntry(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.security.auth.login.AppConfigurationEntry", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = "SchemaDisagreementException";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string1, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("SchemaDisagreementException", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("SchemaDisagreementException", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "Username may not be null";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Username may not be null(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Username may not be null", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Username may not be null(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Username may not be null:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      String string1 = "Multi-Status";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Username may not be null(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Username may not be null", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Username may not be null(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Username may not be null:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Multi-Status", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("Multi-Status", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      ch.qos.logback.classic.Logger logger0 = (ch.qos.logback.classic.Logger)HSaslThriftClient.log;
      assertNotNull(logger0);
      
      hSaslThriftClient0.setlog(logger0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Username may not be null(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Username may not be null", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Username may not be null(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Username may not be null:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Multi-Status", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("Multi-Status", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "R)l63>[s{;jD\"m%wVi";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("R)l63>[s{;jD\"m%wVi(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("R)l63>[s{;jD\"m%wVi(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("R)l63>[s{;jD\"m%wVi", cassandraHost0.getHost());
      assertEquals("R)l63>[s{;jD\"m%wVi:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("R)l63>[s{;jD\"m%wVi(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("R)l63>[s{;jD\"m%wVi(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("R)l63>[s{;jD\"m%wVi", cassandraHost0.getHost());
      assertEquals("R)l63>[s{;jD\"m%wVi:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("R)l63>[s{;jD\"m%wVi", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("R)l63>[s{;jD\"m%wVi", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      hSaslThriftClient0.setclientPrincipalName(string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("R)l63>[s{;jD\"m%wVi(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("R)l63>[s{;jD\"m%wVi(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("R)l63>[s{;jD\"m%wVi", cassandraHost0.getHost());
      assertEquals("R)l63>[s{;jD\"m%wVi:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("R)l63>[s{;jD\"m%wVi", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("R)l63>[s{;jD\"m%wVi", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration(string0);
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getoptions();
      assertFalse(hashMap0.isEmpty());
      assertEquals(5, hashMap0.size());
      assertNotNull(hashMap0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = null;
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration(string0);
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.options;
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
      assertNotNull(hashMap0);
      
      hSaslThriftClient_KerberosUserConfiguration0.setoptions(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "qo!";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("qo!(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("qo!", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("qo!(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("qo!:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("qo!(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("qo!", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("qo!(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("qo!:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("qo!", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("qo!", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      String string1 = hSaslThriftClient0.getclientPrincipalName();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("qo!(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("qo!", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("qo!(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("qo!:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("qo!", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("qo!", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("qo!", string1);
      assertNotNull(string1);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "GXZfm0%w";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hSaslThriftClient0.clientPrincipalName = string0;
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getservicePrincipalName());
      
      String string1 = "%9X0";
      String string2 = "!YM%kSYX.I{2hg";
      hSaslThriftClient0.servicePrincipalName = string2;
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("!YM%kSYX.I{2hg", hSaslThriftClient0.getservicePrincipalName());
      
      hSaslThriftClient0.keyspaceName = string1;
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("!YM%kSYX.I{2hg", hSaslThriftClient0.getservicePrincipalName());
      
      int int0 = (-2685);
      cassandraHost0.setMaxActive(int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-2685), cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      hSaslThriftClient0.keyspaceName = string0;
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-2685), cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("!YM%kSYX.I{2hg", hSaslThriftClient0.getservicePrincipalName());
      
      String string3 = ">2d!yiV.ug0#j@?[Z2";
      hSaslThriftClient0.setservicePrincipalName(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-2685), cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(">2d!yiV.ug0#j@?[Z2", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hSaslThriftClient0.getparams();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-2685), cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(">2d!yiV.ug0#j@?[Z2", hSaslThriftClient0.getservicePrincipalName());
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      
      Map<String, String> map0 = hSaslThriftClient0.getSASL_PROPS();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-2685), cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("GXZfm0%w", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(">2d!yiV.ug0#j@?[Z2", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(map0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      
      int int1 = 39;
      cassandraHost0.setMaxFrameSize(int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals("GXZfm0%w", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(39, cassandraHost0.getMaxFrameSize());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("GXZfm0%w(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GXZfm0%w:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-2685), cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Kerberos context couldn't be established with client: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "K8hL\\cZ";
      int int0 = 300;
      TNonblockingSocket tNonblockingSocket0 = new TNonblockingSocket(string0, int0);
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertNotNull(tNonblockingSocket0);
      
      TFramedTransport tFramedTransport0 = new TFramedTransport(tNonblockingSocket0);
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertEquals(0, tFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFramedTransport0.getBufferPosition());
      assertNotNull(tFramedTransport0);
      
      int int1 = 0;
      TFramedTransport tFramedTransport1 = new TFramedTransport(tFramedTransport0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(tFramedTransport1.equals((Object)tFramedTransport0));
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertEquals(0, tFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFramedTransport0.getBufferPosition());
      assertEquals(0, tFramedTransport1.getBytesRemainingInBuffer());
      assertEquals(0, tFramedTransport1.getBufferPosition());
      assertNotNull(tFramedTransport1);
      
      String string1 = "e(`wMi}AAb%~:9r";
      try { 
        HSaslThriftClient.openKerberosTransport(tFramedTransport1, string1, string1);
        fail("Expecting exception: LoginException");
      
      } catch(LoginException e) {
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "f~@9G$";
      int int0 = 49;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("f~@9G$", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("f~@9G$:49", cassandraHost0.getUrl());
      assertEquals(49, cassandraHost0.getPort());
      assertEquals("f~@9G$(200.42.42.0):49", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("f~@9G$(200.42.42.0):49", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("f~@9G$", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("f~@9G$:49", cassandraHost0.getUrl());
      assertEquals(49, cassandraHost0.getPort());
      assertEquals("f~@9G$(200.42.42.0):49", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("f~@9G$(200.42.42.0):49", cassandraHost0.getName());
      assertEquals("f~@9G$", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("f~@9G$", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      assertNotNull(nOPLogger0);
      
      hSaslThriftClient0.setlog(nOPLogger0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("f~@9G$", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("f~@9G$:49", cassandraHost0.getUrl());
      assertEquals(49, cassandraHost0.getPort());
      assertEquals("f~@9G$(200.42.42.0):49", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("f~@9G$(200.42.42.0):49", cassandraHost0.getName());
      assertEquals("f~@9G$", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("f~@9G$", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "GRCeDy2cK]sIp6";
      int int0 = (-545);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("GRCeDy2cK]sIp6(200.42.42.0):-545", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GRCeDy2cK]sIp6:-545", cassandraHost0.getUrl());
      assertEquals((-545), cassandraHost0.getPort());
      assertEquals("GRCeDy2cK]sIp6(200.42.42.0):-545", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("GRCeDy2cK]sIp6", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      String string1 = "<[Ryx";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("GRCeDy2cK]sIp6(200.42.42.0):-545", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GRCeDy2cK]sIp6:-545", cassandraHost0.getUrl());
      assertEquals((-545), cassandraHost0.getPort());
      assertEquals("GRCeDy2cK]sIp6(200.42.42.0):-545", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("GRCeDy2cK]sIp6", cassandraHost0.getHost());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("GRCeDy2cK]sIp6", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("<[Ryx", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      String string2 = "&=U:[";
      hSaslThriftClient0.setclientPrincipalName(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("GRCeDy2cK]sIp6(200.42.42.0):-545", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("GRCeDy2cK]sIp6:-545", cassandraHost0.getUrl());
      assertEquals((-545), cassandraHost0.getPort());
      assertEquals("GRCeDy2cK]sIp6(200.42.42.0):-545", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("GRCeDy2cK]sIp6", cassandraHost0.getHost());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("&=U:[", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("<[Ryx", hSaslThriftClient0.getservicePrincipalName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = "org.apache.cassandra.thrift.Cassandra$describe_ring_args";
      String string1 = hashMap0.put(string0, string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      hSaslThriftClient_KerberosUserConfiguration0.setoptions(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HashMap<String, String> hashMap1 = hSaslThriftClient_KerberosUserConfiguration0.getoptions();
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      assertSame(hashMap1, hashMap0);
      
      HashMap<String, String> hashMap2 = hSaslThriftClient_KerberosUserConfiguration0.getDEFAULT_KERBEROS_OPTIONS();
      assertFalse(hashMap2.equals((Object)hashMap1));
      assertFalse(hashMap2.equals((Object)hashMap0));
      assertFalse(hashMap2.isEmpty());
      assertEquals(4, hashMap2.size());
      assertNotNull(hashMap2);
      assertNotSame(hashMap2, hashMap1);
      assertNotSame(hashMap2, hashMap0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration(string0);
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      hSaslThriftClient_KerberosUserConfiguration0.setoptions(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = hSaslThriftClient0.getclientPrincipalName();
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      HashMap<String, String> hashMap1 = hSaslThriftClient_KerberosUserConfiguration0.options;
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      assertSame(hashMap1, hashMap0);
      
      hSaslThriftClient_KerberosUserConfiguration0.setoptions(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertSame(string0, string1);
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      String string1 = "set_keyspace";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string1, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("set_keyspace", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      hSaslThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("set_keyspace", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "kre?qp @h+m_H";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "*bXRL7K^w8yQ3^{){<";
      stringArray0[2] = string2;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      boolean boolean0 = true;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("kre?qp @h+m_H", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("kre?qp @h+m_H", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      
      boolean boolean1 = false;
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertEquals(8, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "zQqel'pY#&,";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("zQqel'pY#&,", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("zQqel'pY#&,(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("zQqel'pY#&,(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("zQqel'pY#&,:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = "\"Y!";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("zQqel'pY#&,", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("zQqel'pY#&,(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("zQqel'pY#&,(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("zQqel'pY#&,:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("\"Y!", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("zQqel'pY#&,", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string2 = hSaslThriftClient0.getclientPrincipalName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("zQqel'pY#&,", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("zQqel'pY#&,(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("zQqel'pY#&,(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("zQqel'pY#&,:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("\"Y!", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("zQqel'pY#&,", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("zQqel'pY#&,", string2);
      assertNotNull(string2);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "";
      int int0 = 2608;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("(127.0.0.1):2608", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):2608", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2608", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(2608, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("(127.0.0.1):2608", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):2608", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2608", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(2608, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "!#UIc?q\"OGfbGNd~";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("!#UIc?q\"OGfbGNd~:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("!#UIc?q\"OGfbGNd~", cassandraHost0.getHost());
      assertEquals("!#UIc?q\"OGfbGNd~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("!#UIc?q\"OGfbGNd~(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = "Could not get client socket: ";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("!#UIc?q\"OGfbGNd~:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("!#UIc?q\"OGfbGNd~", cassandraHost0.getHost());
      assertEquals("!#UIc?q\"OGfbGNd~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("!#UIc?q\"OGfbGNd~(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Could not get client socket: ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("Could not get client socket: ", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(hSaslThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Logger logger0 = hSaslThriftClient0.getlog();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("!#UIc?q\"OGfbGNd~:9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("!#UIc?q\"OGfbGNd~", cassandraHost0.getHost());
      assertEquals("!#UIc?q\"OGfbGNd~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("!#UIc?q\"OGfbGNd~(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Could not get client socket: ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("Could not get client socket: ", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNotNull(logger0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "";
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration(string0);
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      String string1 = "nC<m";
      AppConfigurationEntry[] appConfigurationEntryArray0 = hSaslThriftClient_KerberosUserConfiguration0.getAppConfigurationEntry(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, appConfigurationEntryArray0.length);
      assertNotNull(appConfigurationEntryArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "z2suVDpTc";
      String string1 = "^q<55if[#";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("z2suVDpTc", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("^q<55if[#", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      
      String string2 = hSaslThriftClient0.getservicePrincipalName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("z2suVDpTc", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("^q<55if[#", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("z2suVDpTc", string2);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "-*";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("-*:9160", cassandraHost0.getUrl());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("-*", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      String string1 = "";
      String string2 = "Could not set SO_KEEPALIVE on socket: ";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-*:9160", cassandraHost0.getUrl());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("-*", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("Could not set SO_KEEPALIVE on socket: ", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      hSaslThriftClient0.clientPrincipalName = string2;
      assertEquals("-*:9160", cassandraHost0.getUrl());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("-*", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("Could not set SO_KEEPALIVE on socket: ", hSaslThriftClient0.getclientPrincipalName());
      
      String string3 = hSaslThriftClient0.getservicePrincipalName();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-*:9160", cassandraHost0.getUrl());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("-*", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("Could not set SO_KEEPALIVE on socket: ", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = hSaslThriftClient0.clientPrincipalName;
      stringArray0[1] = hSaslThriftClient0.servicePrincipalName;
      String string4 = "renewTGT";
      stringArray0[2] = string4;
      stringArray0[3] = hSaslThriftClient0.servicePrincipalName;
      stringArray0[4] = string3;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = true;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertEquals(7, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      hSaslThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertEquals("-*:9160", cassandraHost0.getUrl());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("-*(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("-*", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("Could not set SO_KEEPALIVE on socket: ", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string4);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      String string0 = "M6^`Q>1)a43WwwMj";
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration1 = new HSaslThriftClient.KerberosUserConfiguration(string0);
      assertFalse(hSaslThriftClient_KerberosUserConfiguration1.equals((Object)hSaslThriftClient_KerberosUserConfiguration0));
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration1);
      
      String string1 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      String string2 = "[version: ";
      String string3 = "$tD<!FVTfz*x<~";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string3;
      stringArray0[1] = string2;
      stringArray0[2] = string3;
      stringArray0[3] = string2;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      String string4 = "%Z\\B D-`h3s.^_DA0M";
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      
      stringArray0[6] = string4;
      stringArray0[7] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string2, stringArray0, cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string2, string3, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(8, stringArray0.length);
      assertEquals("[version: ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("$tD<!FVTfz*x<~", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(hSaslThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      Logger logger0 = hSaslThriftClient0.getlog();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(8, stringArray0.length);
      assertEquals("[version: ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("$tD<!FVTfz*x<~", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(logger0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      
      String string5 = null;
      hSaslThriftClient0.setclientPrincipalName(string5);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(8, stringArray0.length);
      assertNull(hSaslThriftClient0.getclientPrincipalName());
      assertEquals("[version: ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      
      hSaslThriftClient0.setlog(logger0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(8, stringArray0.length);
      assertNull(hSaslThriftClient0.getclientPrincipalName());
      assertEquals("[version: ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      
      String string6 = hSaslThriftClient0.getservicePrincipalName();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals(8, stringArray0.length);
      assertNull(hSaslThriftClient0.getclientPrincipalName());
      assertEquals("[version: ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[version: ", string6);
      assertNotNull(string6);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(string2, string6);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertSame(string6, string2);
      assertNotSame(string6, string4);
      
      String string7 = hSaslThriftClient0.getservicePrincipalName();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals(8, stringArray0.length);
      assertNull(hSaslThriftClient0.getclientPrincipalName());
      assertEquals("[version: ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[version: ", string7);
      assertNotNull(string7);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string7);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(string2, string6);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string7);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string7, string3);
      assertSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertSame(string7, string2);
      assertNotSame(string7, string4);
      
      String string8 = hSaslThriftClient0.getclientPrincipalName();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(8, stringArray0.length);
      assertNull(hSaslThriftClient0.getclientPrincipalName());
      assertEquals("[version: ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertNull(string8);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string7);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(string2, string6);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string7);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      
      HashMap<String, String> hashMap0 = hSaslThriftClient_KerberosUserConfiguration0.getDEFAULT_KERBEROS_OPTIONS();
      assertFalse(hSaslThriftClient_KerberosUserConfiguration0.equals((Object)hSaslThriftClient_KerberosUserConfiguration1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
      assertNotNull(hashMap0);
      assertNotSame(hSaslThriftClient_KerberosUserConfiguration0, hSaslThriftClient_KerberosUserConfiguration1);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "*LJ=&c5mYZ";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("*LJ=&c5mYZ", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("*LJ=&c5mYZ(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("*LJ=&c5mYZ(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("*LJ=&c5mYZ:0", cassandraHost0.getUrl());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      String string1 = "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      stringArray0[4] = string1;
      stringArray0[5] = string0;
      stringArray0[6] = string1;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(7, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string1, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("*LJ=&c5mYZ", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("*LJ=&c5mYZ(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("*LJ=&c5mYZ(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("*LJ=&c5mYZ:0", cassandraHost0.getUrl());
      assertEquals("*LJ=&c5mYZ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters1 = hSaslThriftClient0.getparams();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("*LJ=&c5mYZ", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("*LJ=&c5mYZ(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("*LJ=&c5mYZ(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("*LJ=&c5mYZ:0", cassandraHost0.getUrl());
      assertEquals("*LJ=&c5mYZ", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertSame(tSSLTransportFactory_TSSLTransportParameters1, tSSLTransportFactory_TSSLTransportParameters0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "+44;R";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("+44;R", cassandraHost0.getHost());
      assertEquals("+44;R:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = null;
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      String string2 = "";
      stringArray0[3] = string2;
      stringArray0[4] = string0;
      stringArray0[5] = string1;
      stringArray0[6] = string1;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      boolean boolean0 = false;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0, boolean0);
      assertEquals(9, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertEquals(9, stringArray0.length);
      assertEquals("+44;R", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("+44;R", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("+44;R", cassandraHost0.getHost());
      assertEquals("+44;R:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertNotNull(hSaslThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Map<String, String> map0 = hSaslThriftClient0.getSASL_PROPS();
      assertFalse(string0.equals((Object)string2));
      assertEquals(9, stringArray0.length);
      assertEquals("+44;R", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("+44;R", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("+44;R", cassandraHost0.getHost());
      assertEquals("+44;R:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertNotNull(map0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      
      HSaslThriftClient hSaslThriftClient1 = (HSaslThriftClient)hSaslThriftClient0.close();
      assertFalse(string0.equals((Object)string2));
      assertEquals(9, stringArray0.length);
      assertEquals("+44;R", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("+44;R", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("+44;R", cassandraHost0.getHost());
      assertEquals("+44;R:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hSaslThriftClient1.getSinceLastUsed());
      assertEquals("+44;R", hSaslThriftClient1.getservicePrincipalName());
      assertEquals("+44;R", hSaslThriftClient1.getclientPrincipalName());
      assertNotNull(hSaslThriftClient1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hSaslThriftClient0, hSaslThriftClient1);
      assertNotSame(string0, string2);
      assertSame(hSaslThriftClient1, hSaslThriftClient0);
      
      hSaslThriftClient0.setclientPrincipalName(stringArray0[2]);
      assertFalse(string0.equals((Object)string2));
      assertEquals(9, stringArray0.length);
      assertEquals("+44;R", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("+44;R", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("+44;R", cassandraHost0.getHost());
      assertEquals("+44;R:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hSaslThriftClient0, hSaslThriftClient1);
      assertNotSame(string0, string2);
      
      Logger logger0 = null;
      hSaslThriftClient0.setlog(logger0);
      assertFalse(string0.equals((Object)string2));
      assertEquals(9, stringArray0.length);
      assertEquals("+44;R", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("+44;R", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("+44;R", cassandraHost0.getHost());
      assertEquals("+44;R:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hSaslThriftClient0, hSaslThriftClient1);
      assertNotSame(string0, string2);
      
      Logger logger1 = hSaslThriftClient0.getlog();
      assertFalse(string0.equals((Object)string2));
      assertEquals(9, stringArray0.length);
      assertEquals("+44;R", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("+44;R", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("+44;R", cassandraHost0.getHost());
      assertEquals("+44;R:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertNull(logger1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hSaslThriftClient0, hSaslThriftClient1);
      assertNotSame(string0, string2);
      
      String string3 = "A@P D";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters1 = new TSSLTransportFactory.TSSLTransportParameters(string3, stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters1.equals((Object)tSSLTransportFactory_TSSLTransportParameters0));
      assertEquals(9, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters1);
      
      hSaslThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters1.equals((Object)tSSLTransportFactory_TSSLTransportParameters0));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertEquals(9, stringArray0.length);
      assertEquals("+44;R", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("+44;R", hSaslThriftClient0.getservicePrincipalName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("+44;R", cassandraHost0.getHost());
      assertEquals("+44;R:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("+44;R(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hSaslThriftClient0, hSaslThriftClient1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters1, tSSLTransportFactory_TSSLTransportParameters0);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "Could not get client socket: ";
      String string1 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      String string2 = null;
      String string3 = "column_names";
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string2, string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNull(hSaslThriftClient0.getservicePrincipalName());
      assertEquals("column_names", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      String string4 = hSaslThriftClient0.getservicePrincipalName();
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertNull(hSaslThriftClient0.getservicePrincipalName());
      assertEquals("column_names", hSaslThriftClient0.getclientPrincipalName());
      assertNull(string4);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Kerberos context couldn't be established with client: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "bapv;^y8Mta\"<>nDOw";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      cassandraHost0.setMaxActive(int0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String string1 = "get_slice failed: unknown result";
      int int1 = 114;
      cassandraHost0.setMaxFrameSize(int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("get_slice failed: unknown result", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("get_slice failed: unknown result", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertNotNull(tMemoryInputTransport0);
      
      hSaslThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("get_slice failed: unknown result", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("get_slice failed: unknown result", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, hSaslThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hSaslThriftClient0.transport.getBufferPosition());
      
      Map<String, String> map0 = hSaslThriftClient0.getSASL_PROPS();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("get_slice failed: unknown result", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("get_slice failed: unknown result", hSaslThriftClient0.getclientPrincipalName());
      assertNotNull(map0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      
      String string2 = "";
      hSaslThriftClient0.setclientPrincipalName(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("get_slice failed: unknown result", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      HSaslThriftClient.KerberosUserConfiguration hSaslThriftClient_KerberosUserConfiguration0 = new HSaslThriftClient.KerberosUserConfiguration();
      assertNotNull(hSaslThriftClient_KerberosUserConfiguration0);
      
      HashMap<String, String> hashMap0 = HSaslThriftClient.KerberosUserConfiguration.DEFAULT_KERBEROS_OPTIONS;
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      hSaslThriftClient_KerberosUserConfiguration0.setoptions(hashMap0);
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string3 = "nK?n:3bYg\\>";
      AppConfigurationEntry[] appConfigurationEntryArray0 = hSaslThriftClient_KerberosUserConfiguration0.getAppConfigurationEntry(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, appConfigurationEntryArray0.length);
      assertNotNull(appConfigurationEntryArray0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      AppConfigurationEntry[] appConfigurationEntryArray1 = hSaslThriftClient_KerberosUserConfiguration0.getAppConfigurationEntry(string2);
      assertFalse(appConfigurationEntryArray1.equals((Object)appConfigurationEntryArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertEquals(1, appConfigurationEntryArray1.length);
      assertNotNull(appConfigurationEntryArray1);
      assertNotSame(appConfigurationEntryArray1, appConfigurationEntryArray0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      
      String string4 = "79[";
      hSaslThriftClient0.servicePrincipalName = string4;
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("79[", hSaslThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      
      System.setCurrentTimeMillis(cassandraHost0.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int0 == int1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      
      hSaslThriftClient0.setclientPrincipalName(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("bapv;^y8Mta\"<>nDOw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("bapv;^y8Mta\"<>nDOw:0", cassandraHost0.getUrl());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("bapv;^y8Mta\"<>nDOw(200.42.42.0):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("bapv;^y8Mta\"<>nDOw", hSaslThriftClient0.getclientPrincipalName());
      assertEquals("79[", hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1L), hSaslThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try { 
        hSaslThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open SASL connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "n]mTg4P>'sR1 da";
      int int0 = (-11);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("n]mTg4P>'sR1 da", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.getName());
      assertEquals("n]mTg4P>'sR1 da:-11", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-11), cassandraHost0.getPort());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HSaslThriftClient hSaslThriftClient0 = new HSaslThriftClient(cassandraHost0, string0, string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("n]mTg4P>'sR1 da", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.getName());
      assertEquals("n]mTg4P>'sR1 da:-11", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-11), cassandraHost0.getPort());
      assertEquals("n]mTg4P>'sR1 da", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("n]mTg4P>'sR1 da", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(hSaslThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      Logger logger0 = hSaslThriftClient0.getlog();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("n]mTg4P>'sR1 da", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.getName());
      assertEquals("n]mTg4P>'sR1 da:-11", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-11), cassandraHost0.getPort());
      assertEquals("n]mTg4P>'sR1 da", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("n]mTg4P>'sR1 da", hSaslThriftClient0.getservicePrincipalName());
      assertNotNull(logger0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      ch.qos.logback.classic.Logger logger1 = null;
      hSaslThriftClient0.setlog(logger1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("n]mTg4P>'sR1 da", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.getName());
      assertEquals("n]mTg4P>'sR1 da:-11", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-11), cassandraHost0.getPort());
      assertEquals("n]mTg4P>'sR1 da", hSaslThriftClient0.getclientPrincipalName());
      assertEquals(1392409281320L, hSaslThriftClient0.getSinceLastUsed());
      assertEquals("n]mTg4P>'sR1 da", hSaslThriftClient0.getservicePrincipalName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      TNonblockingSocket tNonblockingSocket0 = new TNonblockingSocket(string0, cassandraHost0.DEFAULT_PORT, cassandraHost0.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("n]mTg4P>'sR1 da", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("n]mTg4P>'sR1 da(200.42.42.0):-11", cassandraHost0.getName());
      assertEquals("n]mTg4P>'sR1 da:-11", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-11), cassandraHost0.getPort());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertNotNull(tNonblockingSocket0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String string1 = "a\\:U9zWD3r.]Y";
      // Undeclared exception!
      try { 
        HSaslThriftClient.openKerberosTransport(tNonblockingSocket0, hSaslThriftClient0.clientPrincipalName, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HSaslThriftClient", e);
      }
  }
}
