/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 03:00:01 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Principal;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import me.prettyprint.cassandra.connection.client.HKerberosThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.cassandra.thrift.Cassandra;
import org.apache.cassandra.thrift.KsDef;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TSaslServerTransport;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HKerberosThriftClient_ESTest extends HKerberosThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "N(J1A>)s_AL";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("N(J1A>)s_AL", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N(J1A>)s_AL:9160", cassandraHost0.getUrl());
      assertEquals("N(J1A>)s_AL(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("N(J1A>)s_AL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals("N(J1A>)s_AL", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("N(J1A>)s_AL:9160", cassandraHost0.getUrl());
      assertEquals("N(J1A>)s_AL(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("N(J1A>)s_AL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to N(J1A>)s_AL(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5df074db
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "cwv%";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cwv%:9160", cassandraHost0.getUrl());
      assertEquals("cwv%(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cwv%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("cwv%", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cwv%:9160", cassandraHost0.getUrl());
      assertEquals("cwv%(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("cwv%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("cwv%", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cwv%:9160", cassandraHost0.getUrl());
      assertEquals("cwv%(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("cwv%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("cwv%", cassandraHost0.getHost());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to cwv%(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5df074db
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "system_dro=_keyspace_result";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("system_dro=_keyspace_result", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("system_dro=_keyspace_result(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_dro=_keyspace_result:9160", cassandraHost0.getUrl());
      assertEquals("system_dro=_keyspace_result(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("system_dro=_keyspace_result", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("system_dro=_keyspace_result(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_dro=_keyspace_result:9160", cassandraHost0.getUrl());
      assertEquals("system_dro=_keyspace_result(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(cassandraHost0.DEFAULT_PORT);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("system_dro=_keyspace_result", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("system_dro=_keyspace_result(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_dro=_keyspace_result:9160", cassandraHost0.getUrl());
      assertEquals("system_dro=_keyspace_result(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      assertNotNull(tMemoryBuffer0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      hKerberosThriftClient0.transport = (TTransport) tMemoryBuffer0;
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("system_dro=_keyspace_result", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("system_dro=_keyspace_result(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_dro=_keyspace_result:9160", cassandraHost0.getUrl());
      assertEquals("system_dro=_keyspace_result(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals(0, hKerberosThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hKerberosThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = "";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = "08H? sk.(ESgb";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "Kerberos context couldn't be established with client.";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Kerberos context couldn't be established with client.(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Kerberos context couldn't be established with client.", cassandraHost0.getHost());
      assertEquals("Kerberos context couldn't be established with client.:9160", cassandraHost0.getUrl());
      assertEquals("Kerberos context couldn't be established with client.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Kerberos context couldn't be established with client.(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Kerberos context couldn't be established with client.", cassandraHost0.getHost());
      assertEquals("Kerberos context couldn't be established with client.:9160", cassandraHost0.getUrl());
      assertEquals("Kerberos context couldn't be established with client.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to Kerberos context couldn't be established with client.(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5df074db
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "Connection has been shut down";
      int int0 = 1124;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Connection has been shut down(200.42.42.0):1124", cassandraHost0.toString());
      assertEquals("Connection has been shut down", cassandraHost0.getHost());
      assertEquals("Connection has been shut down(200.42.42.0):1124", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Connection has been shut down:1124", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1124, cassandraHost0.getPort());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Connection has been shut down(200.42.42.0):1124", cassandraHost0.toString());
      assertEquals("Connection has been shut down", cassandraHost0.getHost());
      assertEquals("Connection has been shut down(200.42.42.0):1124", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Connection has been shut down:1124", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1124, cassandraHost0.getPort());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to Connection has been shut down(200.42.42.0):1124 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5deca7bf
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Class<Principal> class0 = Principal.class;
      Set<Principal> set0 = subject0.getPrincipals(class0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      String string0 = "=NskF";
      int int0 = 2234;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("=NskF:2234", cassandraHost0.getUrl());
      assertEquals("=NskF(200.42.42.0):2234", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("=NskF(200.42.42.0):2234", cassandraHost0.getName());
      assertEquals(2234, cassandraHost0.getPort());
      assertEquals("=NskF", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("=NskF:2234", cassandraHost0.getUrl());
      assertEquals("=NskF(200.42.42.0):2234", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("=NskF(200.42.42.0):2234", cassandraHost0.getName());
      assertEquals(2234, cassandraHost0.getPort());
      assertEquals("=NskF", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = "Kerberos context couldn't be established with client.";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("=NskF:2234", cassandraHost0.getUrl());
      assertEquals("=NskF(200.42.42.0):2234", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("=NskF(200.42.42.0):2234", cassandraHost0.getName());
      assertEquals(2234, cassandraHost0.getPort());
      assertEquals("=NskF", cassandraHost0.getHost());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to =NskF(200.42.42.0):2234 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5ded2e29
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Class<Principal> class0 = Principal.class;
      Set<Principal> set0 = subject0.getPrincipals(class0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Subject subject1 = new Subject(boolean0, set0, set0, set0);
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(subject1);
      
      CassandraHost cassandraHost0 = null;
      String string0 = "^=(:&,mV$?kiCSVWn/q";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject1, cassandraHost0, string0);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      String string1 = ";jMQxJwkkOv<}+'3";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-64);
      byteArray0[0] = byte0;
      byte byte1 = (byte)119;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)75;
      byteArray0[3] = byte3;
      byte byte4 = (byte)35;
      byteArray0[4] = byte4;
      byte byte5 = (byte)91;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-42);
      byteArray0[8] = byte8;
      int int1 = (-449);
      int int2 = 1;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0, int1, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-449), tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(1, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(9, byteArray0.length);
      assertNotNull(tMemoryInputTransport0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)119, (byte)0, (byte)75, (byte)35, (byte)91, (byte)0, (byte)0, (byte) (-42)}, byteArray0);
      
      hKerberosThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals((-449), tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(1, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(1, hKerberosThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals((-449), hKerberosThriftClient0.transport.getBufferPosition());
      
      int int3 = 0;
      tMemoryInputTransport0.reset(byteArray0, int3, (int) byte7);
      assertFalse(byte7 == byte0);
      assertFalse(byte7 == byte8);
      assertFalse(byte7 == byte1);
      assertFalse(byte7 == byte5);
      assertFalse(byte7 == byte4);
      assertFalse(byte7 == byte3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)119, (byte)0, (byte)75, (byte)35, (byte)91, (byte)0, (byte)0, (byte) (-42)}, byteArray0);
      
      boolean boolean0 = hKerberosThriftClient0.isOpen();
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 9160);
          boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
          assertTrue(boolean0);
          
          Subject subject0 = new Subject();
          assertNotNull(subject0);
          
          String string0 = "j";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("j(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("j(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("j:9160", cassandraHost0.getUrl());
          assertEquals("j", cassandraHost0.getHost());
          assertNotNull(cassandraHost0);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          
          System.setCurrentTimeMillis(cassandraHost0.DEFAULT_MAX_FRAME_SIZE);
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("j(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("j(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("j:9160", cassandraHost0.getUrl());
          assertEquals("j", cassandraHost0.getHost());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          
          HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals("j(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("j(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals("j:9160", cassandraHost0.getUrl());
          assertEquals("j", cassandraHost0.getHost());
          assertEquals(2147483647L, hKerberosThriftClient0.getSinceLastUsed());
          assertNotNull(hKerberosThriftClient0);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          
          // Undeclared exception!
          try { 
            hKerberosThriftClient0.open();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"javax.security.auth.AuthPermission\" \"doAs\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // javax.security.auth.Subject.doAs(Subject.java:348)
             // me.prettyprint.cassandra.connection.security.KerberosHelper.authenticateClient(KerberosHelper.java:73)
             // me.prettyprint.cassandra.connection.client.HKerberosThriftClient.open(HKerberosThriftClient.java:80)
             // sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "UI";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("UI", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("UI:0", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.toString());
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      boolean boolean0 = false;
      cassandraHost0.setLifo(boolean0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("UI", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("UI:0", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      CassandraHost cassandraHost1 = new CassandraHost(string0, cassandraHost0.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("UI", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("UI:0", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("UI(200.42.42.0):2147483647", cassandraHost1.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getPort());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("UI(200.42.42.0):2147483647", cassandraHost1.toString());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals("UI", cassandraHost1.getHost());
      assertTrue(cassandraHost1.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("UI:2147483647", cassandraHost1.getUrl());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertNotNull(cassandraHost1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      String string1 = "[0Y4_f=-PC\"4(D`";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("UI", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("UI:0", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("UI(200.42.42.0):2147483647", cassandraHost1.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getPort());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("UI(200.42.42.0):2147483647", cassandraHost1.toString());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals("UI", cassandraHost1.getHost());
      assertTrue(cassandraHost1.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("UI:2147483647", cassandraHost1.getUrl());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("UI", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("UI:0", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("UI(200.42.42.0):0", cassandraHost0.toString());
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:2147483647
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
}
