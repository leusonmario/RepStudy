/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 03:33:39 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.io.ByteArrayOutputStream;
import java.net.URL;
import java.security.AccessControlContext;
import java.security.AllPermission;
import java.security.CodeSource;
import java.security.PermissionCollection;
import java.security.Principal;
import java.security.ProtectionDomain;
import java.security.cert.Certificate;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import javax.security.auth.SubjectDomainCombiner;
import me.prettyprint.cassandra.connection.client.HKerberosThriftClient;
import me.prettyprint.cassandra.connection.client.HThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.cassandra.thrift.AuthenticationRequest;
import org.apache.cassandra.thrift.Cassandra;
import org.apache.http.auth.NTCredentials;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.slf4j.helpers.NOPLogger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HKerberosThriftClient_ESTest extends HKerberosThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = ",";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(",", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(",:9160", cassandraHost0.getUrl());
      assertEquals(",(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(",(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(1L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(hKerberosThriftClient0);
      assertEquals(",", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(",:9160", cassandraHost0.getUrl());
      assertEquals(",(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(",(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(",", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to ,(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@3869e1ce
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = "bSoK=}P";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(hKerberosThriftClient0);
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("bSoK=}P", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
      
      hKerberosThriftClient0.setkerberosTicket(subject0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("bSoK=}P", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
      
      Logger logger0 = (Logger)HKerberosThriftClient.log;
      assertNotNull(logger0);
      
      hKerberosThriftClient0.setlog(logger0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("bSoK=}P", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
      
      Subject subject1 = hKerberosThriftClient0.getkerberosTicket();
      assertSame(subject0, subject1);
      assertSame(subject1, subject0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(subject1);
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("bSoK=}P", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
      
      hKerberosThriftClient0.setservicePrincipalName(hKerberosThriftClient0.servicePrincipalName);
      assertSame(subject0, subject1);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("bSoK=}P", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
      
      String string1 = hKerberosThriftClient0.getservicePrincipalName();
      assertEquals("bSoK=}P", string1);
      assertSame(subject0, subject1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(string1);
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("bSoK=}P", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = null;
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(hKerberosThriftClient0);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(byteArrayOutputStream0);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(tIOStreamTransport0);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      
      hKerberosThriftClient0.settransport(tIOStreamTransport0);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      
      org.slf4j.Logger logger0 = hKerberosThriftClient0.getlog();
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(logger0);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotNull(cassandraHost0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(4L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(hKerberosThriftClient0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(4L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):9160 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "dk";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("dk(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("dk", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("dk:9160", cassandraHost0.getUrl());
      assertEquals("dk(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(5L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(hKerberosThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("dk(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("dk", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("dk:9160", cassandraHost0.getUrl());
      assertEquals("dk(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(5L, hKerberosThriftClient0.getmySerial());
      assertEquals("dk", hKerberosThriftClient0.getservicePrincipalName());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "Hs;";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals("Hs;(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Hs;", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Hs;(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Hs;:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(6L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(hKerberosThriftClient0);
      assertEquals("Hs;(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Hs;", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Hs;(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Hs;:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("Hs;", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(6L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to Hs;(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@3869e1ce
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      boolean boolean0 = false;
      LinkedHashSet<Principal> linkedHashSet0 = new LinkedHashSet<Principal>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Subject subject0 = new Subject(boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertNotNull(subject0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string0 = "#x>7}x9hZRctN";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#x>7}x9hZRctN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("#x>7}x9hZRctN", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("#x>7}x9hZRctN(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#x>7}x9hZRctN:9160", cassandraHost0.getUrl());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(7L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(hKerberosThriftClient0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#x>7}x9hZRctN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("#x>7}x9hZRctN", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("#x>7}x9hZRctN(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#x>7}x9hZRctN:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("#x>7}x9hZRctN", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(7L, hKerberosThriftClient0.getmySerial());
      
      Subject subject1 = hKerberosThriftClient0.getkerberosTicket();
      assertSame(subject0, subject1);
      assertSame(subject1, subject0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(7L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(subject1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#x>7}x9hZRctN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("#x>7}x9hZRctN", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("#x>7}x9hZRctN(200.42.42.0):9160", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#x>7}x9hZRctN:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("#x>7}x9hZRctN", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(7L, hKerberosThriftClient0.getmySerial());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = "w";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(8L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(hKerberosThriftClient0);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("w", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(8L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      assertNotNull(nOPLogger0);
      
      hKerberosThriftClient0.setlog(nOPLogger0);
      assertEquals(8L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("w", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(8L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      String string1 = "(qw!|HCNu<";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(9L, hKerberosThriftClient0.mySerial);
      assertNotNull(hKerberosThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(qw!|HCNu<", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(9L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      
      String string2 = "me.prettyprint.cassandra.connection.client.HKerberosThriftClient";
      hKerberosThriftClient0.setservicePrincipalName(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(9L, hKerberosThriftClient0.mySerial);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(9L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      boolean boolean0 = false;
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Set<Principal> set0 = subject0.getPrincipals();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Subject subject1 = new Subject(boolean0, set0, set0, set0);
      assertNotNull(subject1);
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = "Z5nT/m`O=wg}]KL}ZS";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Z5nT/m`O=wg}]KL}ZS(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Z5nT/m`O=wg}]KL}ZS:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Z5nT/m`O=wg}]KL}ZS(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Z5nT/m`O=wg}]KL}ZS", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      
      String string1 = "Kerberos context couldn't be established with client.";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject1, cassandraHost0, string1);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(10L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(hKerberosThriftClient0);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Z5nT/m`O=wg}]KL}ZS(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Z5nT/m`O=wg}]KL}ZS:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Z5nT/m`O=wg}]KL}ZS(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Z5nT/m`O=wg}]KL}ZS", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Kerberos context couldn't be established with client.", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(10L, hKerberosThriftClient0.getmySerial());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to Z5nT/m`O=wg}]KL}ZS(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@3869e1ce
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = "[value: ";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(11L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(hKerberosThriftClient0);
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("[value: ", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(11L, hKerberosThriftClient0.getmySerial());
      
      org.slf4j.Logger logger0 = hKerberosThriftClient0.getlog();
      assertEquals(11L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(logger0);
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("[value: ", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(11L, hKerberosThriftClient0.getmySerial());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      boolean boolean0 = false;
      LinkedHashSet<Principal> linkedHashSet0 = new LinkedHashSet<Principal>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Subject subject0 = new Subject(boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertNotNull(subject0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string0 = "";
      String string1 = "ITEM_ID";
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(string1);
      assertNotNull(jMXPrincipal0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = linkedHashSet0.add(jMXPrincipal0);
      assertTrue(boolean1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotNull(cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      
      String string2 = "";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string2);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(12L, hKerberosThriftClient0.mySerial);
      assertNotNull(hKerberosThriftClient0);
      assertFalse(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(12L, hKerberosThriftClient0.getmySerial());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      
      Subject subject1 = new Subject();
      assertNotNull(subject1);
      assertTrue(subject1.equals((Object)subject0));
      
      hKerberosThriftClient0.setkerberosTicket(subject1);
      assertNotSame(subject0, subject1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(subject1, subject0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(12L, hKerberosThriftClient0.mySerial);
      assertFalse(boolean0 == boolean1);
      assertTrue(subject0.equals((Object)subject1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(subject1.equals((Object)subject0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(12L, hKerberosThriftClient0.getmySerial());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = ")}MxP&k1j[t\\,NO_.]";
      int int0 = 1;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotNull(cassandraHost0);
      assertEquals(")}MxP&k1j[t\\,NO_.]", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(")}MxP&k1j[t\\,NO_.](200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals(")}MxP&k1j[t\\,NO_.]:1", cassandraHost0.getUrl());
      assertEquals(")}MxP&k1j[t\\,NO_.](200.42.42.0):1", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(13L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(hKerberosThriftClient0);
      assertEquals(")}MxP&k1j[t\\,NO_.]", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(")}MxP&k1j[t\\,NO_.](200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals(")}MxP&k1j[t\\,NO_.]:1", cassandraHost0.getUrl());
      assertEquals(")}MxP&k1j[t\\,NO_.](200.42.42.0):1", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(")}MxP&k1j[t\\,NO_.]", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(13L, hKerberosThriftClient0.getmySerial());
      
      String string1 = hKerberosThriftClient0.getservicePrincipalName();
      assertEquals(")}MxP&k1j[t\\,NO_.]", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(13L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(string1);
      assertEquals(")}MxP&k1j[t\\,NO_.]", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(")}MxP&k1j[t\\,NO_.](200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals(")}MxP&k1j[t\\,NO_.]:1", cassandraHost0.getUrl());
      assertEquals(")}MxP&k1j[t\\,NO_.](200.42.42.0):1", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(")}MxP&k1j[t\\,NO_.]", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(13L, hKerberosThriftClient0.getmySerial());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Class<Principal> class0 = Principal.class;
      Set<Principal> set0 = subject0.getPublicCredentials(class0);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Class<HKerberosThriftClient> class1 = HKerberosThriftClient.class;
      Set<HKerberosThriftClient> set1 = subject0.getPublicCredentials(class1);
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      Subject subject1 = new Subject(boolean0, set0, set1, set1);
      assertNotNull(subject1);
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      String string0 = "";
      String string1 = " , ";
      boolean boolean1 = subject1.equals(string1);
      assertFalse(boolean1);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertNotSame(string1, string0);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      int int0 = 696;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(696, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):696", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):696", cassandraHost0.toString());
      assertEquals(":696", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      
      cassandraHost0.setLifo(boolean1);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(boolean0 == boolean1);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(696, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):696", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):696", cassandraHost0.toString());
      assertEquals(":696", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject1, cassandraHost0, string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(14L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(hKerberosThriftClient0);
      assertFalse(set1.contains(hKerberosThriftClient0));
      assertTrue(boolean0 == boolean1);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(696, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):696", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):696", cassandraHost0.toString());
      assertEquals(":696", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(14L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      
      Subject subject2 = hKerberosThriftClient0.getkerberosTicket();
      assertNotSame(subject0, subject2);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertSame(subject1, subject2);
      assertNotSame(string0, string1);
      assertNotSame(subject2, subject0);
      assertSame(subject2, subject1);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(14L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(subject2);
      assertFalse(set1.contains(hKerberosThriftClient0));
      assertTrue(boolean0 == boolean1);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(subject2.equals((Object)subject0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(696, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):696", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):696", cassandraHost0.toString());
      assertEquals(":696", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(14L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      
      String string2 = hKerberosThriftClient0.getservicePrincipalName();
      assertEquals("", string2);
      assertNotSame(subject0, subject2);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertSame(subject1, subject2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(14L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(string2);
      assertFalse(set1.contains(hKerberosThriftClient0));
      assertTrue(boolean0 == boolean1);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject0.equals((Object)subject2));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(696, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):696", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):696", cassandraHost0.toString());
      assertEquals(":696", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(14L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):696 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "me.prettyprint.cassandra.connection.client.HKerberosThriftClient";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      long long0 = 405L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(405L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.getName());
      
      String string1 = "z\\ez0A(";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(15L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(hKerberosThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(405L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(15L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("z\\ez0A(", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      
      hKerberosThriftClient0.setuseageStartTime(cassandraHost0.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(2147483647L, hKerberosThriftClient0.useageStartTime);
      assertEquals(15L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(405L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1390261797673L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(15L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("z\\ez0A(", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(2147483647L, hKerberosThriftClient0.getuseageStartTime());
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(string0.equals((Object)string1));
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(405L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.getName());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@3869e1ce
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = null;
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(16L, hKerberosThriftClient0.mySerial);
      assertNotNull(hKerberosThriftClient0);
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(16L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      Subject subject0 = null;
      String string0 = "niL";
      int int0 = 1;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("niL", cassandraHost0.getHost());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals("niL:1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.getName());
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.toString());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("niL", cassandraHost0.getHost());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals("niL:1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.getName());
      
      int int1 = 2075;
      cassandraHost0.setMaxFrameSize(int1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.toString());
      assertEquals(2075, cassandraHost0.getMaxFrameSize());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("niL", cassandraHost0.getHost());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals("niL:1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.getName());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(17L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(hKerberosThriftClient0);
      assertFalse(int0 == int1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.toString());
      assertEquals(2075, cassandraHost0.getMaxFrameSize());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("niL", cassandraHost0.getHost());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals("niL:1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.getName());
      assertEquals(17L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("niL", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      String string1 = "%QYC5K?#\\coc1m`4R83";
      Cassandra.Client cassandra_Client0 = null;
      hKerberosThriftClient0.keyspaceName = string1;
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.toString());
      assertEquals(2075, cassandraHost0.getMaxFrameSize());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("niL", cassandraHost0.getHost());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals("niL:1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.getName());
      assertEquals(17L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("%QYC5K?#\\coc1m`4R83", hKerberosThriftClient0.getkeyspaceName());
      assertEquals("niL", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      hKerberosThriftClient0.clearAuthentication();
      assertNotSame(string0, string1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(17L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.toString());
      assertEquals(2075, cassandraHost0.getMaxFrameSize());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("niL", cassandraHost0.getHost());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals("niL:1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.getName());
      assertEquals(17L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("%QYC5K?#\\coc1m`4R83", hKerberosThriftClient0.getkeyspaceName());
      assertEquals("niL", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      Subject subject1 = hKerberosThriftClient0.getkerberosTicket();
      assertNotSame(string0, string1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(17L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNull(subject1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.toString());
      assertEquals(2075, cassandraHost0.getMaxFrameSize());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("niL", cassandraHost0.getHost());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals("niL:1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("niL(200.42.42.0):1", cassandraHost0.getName());
      assertEquals(17L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("%QYC5K?#\\coc1m`4R83", hKerberosThriftClient0.getkeyspaceName());
      assertEquals("niL", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to niL(200.42.42.0):1 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@38658cb5
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Class<Principal> class0 = Principal.class;
      Class<Principal> class1 = Principal.class;
      Set<Principal> set0 = subject0.getPrincipals(class1);
      assertSame(class1, class0);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<Principal> set1 = subject0.getPrincipals();
      assertNotNull(set1);
      assertTrue(set1.equals((Object)set0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      Subject subject1 = new Subject(boolean0, set1, set1, set1);
      assertNotNull(subject1);
      assertTrue(set1.equals((Object)set0));
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      String string0 = "column_parent";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      
      int int0 = 0;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      
      String string1 = "";
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertNotSame(string0, string1);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(string0.equals((Object)string1));
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject1, cassandraHost0, string1);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(hKerberosThriftClient0);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      HKerberosThriftClient.log = hKerberosThriftClient0.log;
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      AuthenticationRequest authenticationRequest0 = new AuthenticationRequest(hKerberosThriftClient0.credentials);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(authenticationRequest0);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertTrue(authenticationRequest0.isSetCredentials());
      
      Map<String, String> map0 = authenticationRequest0.getCredentials();
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(map0);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertTrue(authenticationRequest0.isSetCredentials());
      
      hKerberosThriftClient0.setAuthenticated(map0);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertTrue(authenticationRequest0.isSetCredentials());
      
      Set<Object> set2 = subject0.getPrivateCredentials();
      assertNotSame(subject0, subject1);
      assertNotNull(set2);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      
      hKerberosThriftClient0.settransport(tMemoryInputTransport0);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      hKerberosThriftClient0.setkerberosTicket(subject0);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      String string2 = hKerberosThriftClient0.getservicePrincipalName();
      assertEquals("", string2);
      assertNotSame(subject0, subject1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(subject1, subject0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(string2);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(subject1.equals((Object)subject0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      Subject subject2 = hKerberosThriftClient0.getkerberosTicket();
      assertSame(subject0, subject2);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject2);
      assertNotSame(subject1, subject0);
      assertSame(subject2, subject0);
      assertNotSame(subject2, subject1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(subject2);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(subject2.equals((Object)subject1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("column_parent", cassandraHost0.getHost());
      assertEquals("column_parent(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("column_parent:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "";
      int int0 = 331;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):331", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":331", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):331", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(331, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      
      String string1 = null;
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(19L, hKerberosThriftClient0.mySerial);
      assertNotNull(hKerberosThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):331", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":331", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):331", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(331, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(19L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      String string2 = hKerberosThriftClient0.getservicePrincipalName();
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(19L, hKerberosThriftClient0.mySerial);
      assertNull(string2);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):331", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":331", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):331", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(331, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(19L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Set<Object> set0 = subject0.getPrivateCredentials();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      CassandraHost cassandraHost0 = null;
      String string0 = "";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(hKerberosThriftClient0);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      hKerberosThriftClient0.setkerberosTicket(subject0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      Logger logger0 = (Logger)HKerberosThriftClient.log;
      assertNotNull(logger0);
      
      hKerberosThriftClient0.setlog(logger0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      hKerberosThriftClient0.setservicePrincipalName(string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      String string1 = hKerberosThriftClient0.getservicePrincipalName();
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(string1);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      hKerberosThriftClient0.setlog(logger0);
      assertSame(string0, string1);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      Subject subject1 = hKerberosThriftClient0.getkerberosTicket();
      assertSame(subject0, subject1);
      assertSame(string0, string1);
      assertSame(subject1, subject0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(subject1);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      String string2 = subject1.toString();
      assertEquals("Subject:\n", string2);
      assertSame(subject0, subject1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(subject1, subject0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      Set<Principal> set1 = subject1.getPrincipals();
      assertSame(subject0, subject1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(subject1, subject0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(set1);
      assertFalse(string0.equals((Object)string2));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      boolean boolean0 = subject1.equals(set0);
      assertFalse(boolean0);
      assertSame(subject0, subject1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(subject1, subject0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      Logger logger1 = null;
      hKerberosThriftClient0.setlog(logger1);
      assertSame(subject0, subject1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      hKerberosThriftClient0.setkerberosTicket(subject1);
      assertSame(subject0, subject1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(subject1, subject0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      Subject subject2 = hKerberosThriftClient0.getkerberosTicket();
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertSame(subject2, subject0);
      assertSame(subject2, subject1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(subject2);
      assertFalse(string0.equals((Object)string2));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      hKerberosThriftClient0.setkerberosTicket(subject2);
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertSame(subject2, subject0);
      assertSame(subject2, subject1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      String string3 = hKerberosThriftClient0.getservicePrincipalName();
      assertEquals("", string3);
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      String string4 = "Creating a new thrift connection to {}";
      hKerberosThriftClient0.setservicePrincipalName(string4);
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("Creating a new thrift connection to {}", hKerberosThriftClient0.getservicePrincipalName());
      
      hKerberosThriftClient0.setkerberosTicket(subject2);
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertSame(subject2, subject0);
      assertSame(subject2, subject1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("Creating a new thrift connection to {}", hKerberosThriftClient0.getservicePrincipalName());
      
      hKerberosThriftClient0.setservicePrincipalName(string3);
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(string3, string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      hKerberosThriftClient0.setkerberosTicket(subject2);
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertSame(subject2, subject0);
      assertSame(subject2, subject1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      String string5 = "org.apache.cassandra.thrift.CounterColumn";
      hKerberosThriftClient0.setservicePrincipalName(string5);
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org.apache.cassandra.thrift.CounterColumn", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      org.slf4j.Logger logger2 = hKerberosThriftClient0.getlog();
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNull(logger2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertEquals("org.apache.cassandra.thrift.CounterColumn", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      org.slf4j.Logger logger3 = hKerberosThriftClient0.getlog();
      assertSame(subject0, subject1);
      assertSame(subject0, subject2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertNull(logger3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertEquals("org.apache.cassandra.thrift.CounterColumn", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "\\)[y&vqX`)#CQ`N/I7";
      int int0 = 507;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(507, cassandraHost0.getPort());
      assertEquals("\\)[y&vqX`)#CQ`N/I7(200.42.42.0):507", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("\\)[y&vqX`)#CQ`N/I7", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("\\)[y&vqX`)#CQ`N/I7:507", cassandraHost0.getUrl());
      assertEquals("\\)[y&vqX`)#CQ`N/I7(200.42.42.0):507", cassandraHost0.toString());
      
      Subject subject0 = null;
      String string1 = "s]f,rLYp\\?7U7L8_\"~b";
      CassandraHost cassandraHost1 = new CassandraHost(string1, cassandraHost0.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(507, cassandraHost0.getPort());
      assertEquals("\\)[y&vqX`)#CQ`N/I7(200.42.42.0):507", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("\\)[y&vqX`)#CQ`N/I7", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("\\)[y&vqX`)#CQ`N/I7:507", cassandraHost0.getUrl());
      assertEquals("\\)[y&vqX`)#CQ`N/I7(200.42.42.0):507", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getPort());
      assertEquals("s]f,rLYp\\?7U7L8_\"~b:2147483647", cassandraHost1.getUrl());
      assertEquals("200.42.42.1", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("s]f,rLYp\\?7U7L8_\"~b(200.42.42.1):2147483647", cassandraHost1.toString());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("s]f,rLYp\\?7U7L8_\"~b", cassandraHost1.getHost());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("s]f,rLYp\\?7U7L8_\"~b(200.42.42.1):2147483647", cassandraHost1.getName());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost1, string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(21L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertNotNull(hKerberosThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(507, cassandraHost0.getPort());
      assertEquals("\\)[y&vqX`)#CQ`N/I7(200.42.42.0):507", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("\\)[y&vqX`)#CQ`N/I7", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("\\)[y&vqX`)#CQ`N/I7:507", cassandraHost0.getUrl());
      assertEquals("\\)[y&vqX`)#CQ`N/I7(200.42.42.0):507", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getPort());
      assertEquals("s]f,rLYp\\?7U7L8_\"~b:2147483647", cassandraHost1.getUrl());
      assertEquals("200.42.42.1", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("s]f,rLYp\\?7U7L8_\"~b(200.42.42.1):2147483647", cassandraHost1.toString());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("s]f,rLYp\\?7U7L8_\"~b", cassandraHost1.getHost());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("s]f,rLYp\\?7U7L8_\"~b(200.42.42.1):2147483647", cassandraHost1.getName());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("\\)[y&vqX`)#CQ`N/I7", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(21L, hKerberosThriftClient0.getmySerial());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:2147483647
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Subject subject0 = null;
          String string0 = "me.prettyprint.cassandra.connection.client.HKerberosThriftClient";
          EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 9160);
          boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
          assertTrue(boolean0);
          
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          assertNotNull(cassandraHost0);
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient:9160", cassandraHost0.getUrl());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", cassandraHost0.getHost());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.toString());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          
          long long0 = 405L;
          cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient:9160", cassandraHost0.getUrl());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", cassandraHost0.getHost());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(405L, cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          
          cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient:9160", cassandraHost0.getUrl());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", cassandraHost0.getHost());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(405L, cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          
          String string1 = "`";
          String string2 = "A3Rb/IX|;";
          HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
          assertEquals(0, hKerberosThriftClient0.timeout);
          assertEquals(22L, hKerberosThriftClient0.mySerial);
          assertEquals(0L, hKerberosThriftClient0.useageStartTime);
          assertNotNull(hKerberosThriftClient0);
          assertFalse(string0.equals((Object)string1));
          assertFalse(string0.equals((Object)string2));
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient:9160", cassandraHost0.getUrl());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", cassandraHost0.getHost());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient(200.42.42.0):9160", cassandraHost0.toString());
          assertEquals(405L, cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(9160, cassandraHost0.getPort());
          assertTrue(cassandraHost0.getLifo());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", hKerberosThriftClient0.getservicePrincipalName());
          assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
          assertNull(hKerberosThriftClient0.getkeyspaceName());
          assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
          assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
          assertEquals(22L, hKerberosThriftClient0.getmySerial());
          
          long long1 = (-3371L);
          // Undeclared exception!
          try { 
            hKerberosThriftClient0.open();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"javax.security.auth.AuthPermission\" \"doAs\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // javax.security.auth.Subject.doAs(Subject.java:348)
             // me.prettyprint.cassandra.connection.security.KerberosHelper.authenticateClient(KerberosHelper.java:73)
             // me.prettyprint.cassandra.connection.client.HKerberosThriftClient.open(HKerberosThriftClient.java:60)
             // sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }
}
