/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 04:18:52 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.security.auth.callback.CallbackHandler;
import me.prettyprint.cassandra.connection.client.HThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.cassandra.thrift.AuthenticationRequest;
import org.apache.cassandra.thrift.Cassandra;
import org.apache.cassandra.thrift.CfDef;
import org.apache.cassandra.thrift.ColumnDef;
import org.apache.cassandra.thrift.KsDef;
import org.apache.commons.lang.NotImplementedException;
import org.apache.http.entity.BasicHttpEntity;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.entity.HttpEntityWrapper;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.transport.AutoExpandingBufferReadTransport;
import org.apache.thrift.transport.AutoExpandingBufferWriteTransport;
import org.apache.thrift.transport.TFastFramedTransport;
import org.apache.thrift.transport.TFileTransport;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.THttpClient;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingSocket;
import org.apache.thrift.transport.TSaslServerTransport;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TStandardFile;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HThriftClient_ESTest extends HThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertNull(cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "org.apache.thrift.transport.TFraPedTransport@0000Z00004";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean0 = hThriftClient0.isOpen();
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      ColumnDef columnDef0 = new ColumnDef();
      assertNotNull(columnDef0);
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetValidation_class());
      assertNull(columnDef0.getIndex_type());
      assertFalse(columnDef0.isSetIndex_options());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      
      boolean boolean1 = hThriftClient1.isAlreadyAuthenticated(columnDef0.index_options);
      assertTrue(boolean1 == boolean0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetValidation_class());
      assertNull(columnDef0.getIndex_type());
      assertFalse(columnDef0.isSetIndex_options());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      long long0 = hThriftClient1.getSinceLastUsed();
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, long0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.setAuthenticated(columnDef0.index_options);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "YlmqWrYzc_qKL=";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("YlmqWrYzc_qKL=", cassandraHost0.getHost());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("YlmqWrYzc_qKL=:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("YlmqWrYzc_qKL=", cassandraHost0.getHost());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("YlmqWrYzc_qKL=:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      hThriftClient0.startToUse();
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("YlmqWrYzc_qKL=", cassandraHost0.getHost());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("YlmqWrYzc_qKL=:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertNotNull(hashMap0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("YlmqWrYzc_qKL=", cassandraHost0.getHost());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("YlmqWrYzc_qKL=:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("YlmqWrYzc_qKL=", cassandraHost0.getHost());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("YlmqWrYzc_qKL=:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("YlmqWrYzc_qKL=(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "OK %ZVrQm@16";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      
      boolean boolean1 = hThriftClient0.equals(cassandraHost0);
      assertTrue(boolean1 == boolean0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "!gLT;q";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("!gLT;q:9160", cassandraHost0.getUrl());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("!gLT;q", cassandraHost0.getHost());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("!gLT;q:9160", cassandraHost0.getUrl());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("!gLT;q", cassandraHost0.getHost());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tMemoryInputTransport0);
      assertNotNull(tTransport0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("!gLT;q:9160", cassandraHost0.getUrl());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("!gLT;q", cassandraHost0.getHost());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hThriftClient0.transport = tTransport0;
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("!gLT;q:9160", cassandraHost0.getUrl());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("!gLT;q", cassandraHost0.getHost());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("!gLT;q:9160", cassandraHost0.getUrl());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("!gLT;q", cassandraHost0.getHost());
      assertEquals("!gLT;q(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "xlKnuiiKUj*7N:VB0{";
      int int0 = 52;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("xlKnuiiKUj*7N", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("xlKnuiiKUj*7N(200.42.42.0):52", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(52, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xlKnuiiKUj*7N:52", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("xlKnuiiKUj*7N(200.42.42.0):52", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("xlKnuiiKUj*7N", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("xlKnuiiKUj*7N(200.42.42.0):52", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(52, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xlKnuiiKUj*7N:52", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("xlKnuiiKUj*7N(200.42.42.0):52", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("xlKnuiiKUj*7N", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("xlKnuiiKUj*7N(200.42.42.0):52", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(52, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xlKnuiiKUj*7N:52", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("xlKnuiiKUj*7N(200.42.42.0):52", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to xlKnuiiKUj*7N(200.42.42.0):52 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@62c5b0b3
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "CZw";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZw", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZw:9160", cassandraHost0.getUrl());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZw", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZw:9160", cassandraHost0.getUrl());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      
      hThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZw", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZw:9160", cassandraHost0.getUrl());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No writing allowed!
         //
         verifyException("org.apache.thrift.transport.TMemoryInputTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "CZwL";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      cassandraHost0.setCassandraThriftSocketTimeout(cassandraHost0.DEFAULT_PORT);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.keyspaceName = string0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      hThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      
      String string1 = null;
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra(string1);
      assertNotNull(cassandra_Client0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Cassandra.Client cassandra_Client1 = hThriftClient0.getCassandra(string0);
      assertNotNull(cassandra_Client1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(cassandra_Client1, cassandra_Client0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "CassandraClient<8pHaC!I%:-133-1125>";
      int int0 = (-247);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals((-247), cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<8pHaC!I%:-247", cassandraHost0.getUrl());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-247", cassandraHost0.toString());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-247", cassandraHost0.getName());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals((-247), cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<8pHaC!I%:-247", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-247", cassandraHost0.toString());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-247", cassandraHost0.getName());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-247), cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<8pHaC!I%:-247", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-247", cassandraHost0.toString());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-247", cassandraHost0.getName());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to CassandraClient<8pHaC!I%(200.42.42.0):-247 , Cannot open without port.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "0l!X";
      int int0 = 917;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("0l!X:917", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("0l!X(200.42.42.0):917", cassandraHost0.getName());
      assertEquals(917, cassandraHost0.getPort());
      assertEquals("0l!X(200.42.42.0):917", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0l!X", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("0l!X:917", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("0l!X(200.42.42.0):917", cassandraHost0.getName());
      assertEquals(917, cassandraHost0.getPort());
      assertEquals("0l!X(200.42.42.0):917", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0l!X", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):9160 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "a;4Vl\"m%2";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("a;4Vl\"m%2", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("a;4Vl\"m%2(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("a;4Vl\"m%2:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("a;4Vl\"m%2(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("a;4Vl\"m%2", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("a;4Vl\"m%2(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("a;4Vl\"m%2:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("a;4Vl\"m%2(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("a;4Vl\"m%2", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("a;4Vl\"m%2(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("a;4Vl\"m%2:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("a;4Vl\"m%2(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      int int0 = 892;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):892", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(":892", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):892", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):892", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(":892", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):892", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      int int1 = 1;
      cassandraHost0.setMaxFrameSize(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):892", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(":892", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):892", cassandraHost0.toString());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(int0 == int1);
      assertNotNull(hThriftClient1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):892", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(":892", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):892", cassandraHost0.toString());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertFalse(int0 == int1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):892", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(892, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":892", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):892", cassandraHost0.toString());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):892 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertNotNull(cassandraHost1);
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("(127.0.0.1):0", cassandraHost1.getName());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals(":0", cassandraHost1.getUrl());
      assertEquals("", cassandraHost1.getHost());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost1.toString());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getLifo());
      assertEquals(0, cassandraHost1.getPort());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "\"*ToW#Ba5]#qrb<H";
      int int0 = 204;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("\"*ToW#Ba5]#qrb<H:204", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(204, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("\"*ToW#Ba5]#qrb<H(200.42.42.0):204", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("\"*ToW#Ba5]#qrb<H(200.42.42.0):204", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("\"*ToW#Ba5]#qrb<H", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("\"*ToW#Ba5]#qrb<H:204", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(204, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("\"*ToW#Ba5]#qrb<H(200.42.42.0):204", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("\"*ToW#Ba5]#qrb<H(200.42.42.0):204", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("\"*ToW#Ba5]#qrb<H", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("\"*ToW#Ba5]#qrb<H:204", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(204, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("\"*ToW#Ba5]#qrb<H(200.42.42.0):204", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("\"*ToW#Ba5]#qrb<H(200.42.42.0):204", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("\"*ToW#Ba5]#qrb<H", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      hThriftClient1.clearAuthentication();
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("\"*ToW#Ba5]#qrb<H:204", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(204, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("\"*ToW#Ba5]#qrb<H(200.42.42.0):204", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("\"*ToW#Ba5]#qrb<H(200.42.42.0):204", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("\"*ToW#Ba5]#qrb<H", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "($mVbJ*x\\!h";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("($mVbJ*x\\!h(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("($mVbJ*x\\!h", cassandraHost0.getHost());
      assertEquals("($mVbJ*x\\!h:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("($mVbJ*x\\!h(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("($mVbJ*x\\!h(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("($mVbJ*x\\!h", cassandraHost0.getHost());
      assertEquals("($mVbJ*x\\!h:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("($mVbJ*x\\!h(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to ($mVbJ*x\\!h(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@62c9ff9f
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "system_update_column_family_args(";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      hThriftClient0.startToUse();
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      
      String string1 = hThriftClient0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("CassandraClient<system_update_column_family_args(:9160-18>", string1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = hThriftClient1.isOpen();
      assertFalse(string0.equals((Object)string1));
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean1 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(boolean1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "Y";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Y", cassandraHost0.getHost());
      assertEquals("Y:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Y", cassandraHost0.getHost());
      assertEquals("Y:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Y", cassandraHost0.getHost());
      assertEquals("Y:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      boolean boolean1 = hThriftClient0.isOpen();
      assertFalse(boolean1 == boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Y", cassandraHost0.getHost());
      assertEquals("Y:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean1);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Y", cassandraHost0.getHost());
      assertEquals("Y:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      CassandraHost cassandraHost1 = hThriftClient1.getCassandraHost();
      assertNotNull(cassandraHost1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Y", cassandraHost0.getHost());
      assertEquals("Y:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Y(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("Y", cassandraHost1.getHost());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("Y:9160", cassandraHost1.getUrl());
      assertEquals("Y(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals(9160, cassandraHost1.getPort());
      assertTrue(cassandraHost1.getLifo());
      assertTrue(cassandraHost1.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertEquals("Y(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost1, cassandraHost0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to Y(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@62c9ff9f
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "y[~C`TnQ";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("y[~C`TnQ(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("y[~C`TnQ:0", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("y[~C`TnQ(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("y[~C`TnQ", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("y[~C`TnQ(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("y[~C`TnQ:0", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("y[~C`TnQ(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("y[~C`TnQ", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      boolean boolean0 = hThriftClient0.equals(string0);
      assertEquals("y[~C`TnQ(200.42.42.0):0", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("y[~C`TnQ:0", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("y[~C`TnQ(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("y[~C`TnQ", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "K&|h\\5Lm8B[";
      int int0 = 3921;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("K&|h\\5Lm8B[(200.42.42.0):3921", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("K&|h\\5Lm8B[(200.42.42.0):3921", cassandraHost0.toString());
      assertEquals(3921, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("K&|h\\5Lm8B[:3921", cassandraHost0.getUrl());
      assertEquals("K&|h\\5Lm8B[", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("K&|h\\5Lm8B[(200.42.42.0):3921", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("K&|h\\5Lm8B[(200.42.42.0):3921", cassandraHost0.toString());
      assertEquals(3921, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("K&|h\\5Lm8B[:3921", cassandraHost0.getUrl());
      assertEquals("K&|h\\5Lm8B[", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "getCassandra called on client that was not open. You should not have gotten here.";
      int int0 = 6;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:6", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):6", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(6, cassandraHost0.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):6", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:6", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):6", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(6, cassandraHost0.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):6", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "=Ixg/5^";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("=Ixg/5^(200.42.42.0):0", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("=Ixg/5^(200.42.42.0):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("=Ixg/5^:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=Ixg/5^", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("=Ixg/5^(200.42.42.0):0", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("=Ixg/5^(200.42.42.0):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("=Ixg/5^:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=Ixg/5^", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      boolean boolean0 = hThriftClient0.isOpen();
      assertEquals("=Ixg/5^(200.42.42.0):0", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("=Ixg/5^(200.42.42.0):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("=Ixg/5^:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=Ixg/5^", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("=Ixg/5^(200.42.42.0):0", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("=Ixg/5^(200.42.42.0):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("=Ixg/5^:0", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=Ixg/5^", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to =Ixg/5^(200.42.42.0):0 , Cannot open without port.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      int int0 = 0;
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(int0);
      assertNotNull(tMemoryBuffer0);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      TBinaryProtocol tBinaryProtocol0 = new TBinaryProtocol(tMemoryBuffer0, boolean0, boolean1);
      assertNotNull(tBinaryProtocol0);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tBinaryProtocol0, tBinaryProtocol0);
      assertNotNull(cassandra_Client0);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      cassandra_Client0.send_describe_snitch();
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      // Undeclared exception!
      try { 
        hThriftClient0.equals(cassandraHost0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      TTransport tTransport0 = null;
      int int0 = 0;
      int int1 = (-1344);
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(tTransport0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tFastFramedTransport0);
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      
      // Undeclared exception!
      try { 
        hThriftClient1.maybeWrapWithTFramedTransport(tFastFramedTransport0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      int int0 = (-614);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-614", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":-614", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-614), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-614", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-614", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":-614", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-614), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-614", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      boolean boolean0 = hThriftClient0.equals(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-614", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":-614", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-614), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-614", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean0);
      
      hThriftClient0.clearAuthentication();
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-614", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":-614", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-614), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-614", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "get_range_slices_args(";
      int int0 = (-414);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("get_range_slices_args((200.42.42.0):-414", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-414), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("get_range_slices_args((200.42.42.0):-414", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("get_range_slices_args(:-414", cassandraHost0.getUrl());
      assertEquals("get_range_slices_args(", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int1 = 0;
      cassandraHost0.setMaxFrameSize(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("get_range_slices_args((200.42.42.0):-414", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-414), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("get_range_slices_args((200.42.42.0):-414", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("get_range_slices_args(:-414", cassandraHost0.getUrl());
      assertEquals("get_range_slices_args(", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertFalse(int0 == int1);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("get_range_slices_args((200.42.42.0):-414", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-414), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("get_range_slices_args((200.42.42.0):-414", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("get_range_slices_args(:-414", cassandraHost0.getUrl());
      assertEquals("get_range_slices_args(", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "sJ}cju";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("sJ}cju", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("sJ}cju(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("sJ}cju:0", cassandraHost0.getUrl());
      assertEquals("sJ}cju(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("sJ}cju", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("sJ}cju(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("sJ}cju:0", cassandraHost0.getUrl());
      assertEquals("sJ}cju(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        hThriftClient0.setAuthenticated(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "/H,s";
      int int0 = 1221;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("/H,s(200.42.42.0):1221", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1221, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("/H,s:1221", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("/H,s(200.42.42.0):1221", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("/H,s", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("/H,s(200.42.42.0):1221", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1221, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("/H,s:1221", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("/H,s(200.42.42.0):1221", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("/H,s", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("/H,s(200.42.42.0):1221", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1221, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("/H,s:1221", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("/H,s(200.42.42.0):1221", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("/H,s", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      hThriftClient1.setAuthenticated(map0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("/H,s(200.42.42.0):1221", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1221, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("/H,s:1221", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("/H,s(200.42.42.0):1221", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("/H,s", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "&ro";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("&ro:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("&ro", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("&ro(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&ro(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("&ro:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("&ro", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("&ro(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&ro(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      Map<String, String> map0 = null;
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals("&ro:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("&ro", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("&ro(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&ro(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      int int0 = (-32);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("(127.0.0.1):-32", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-32), cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):-32", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":-32", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("(127.0.0.1):-32", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-32), cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):-32", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":-32", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals("(127.0.0.1):-32", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-32), cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):-32", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":-32", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "#fK7hL{";
      int int0 = 97;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.toString());
      assertEquals("#fK7hL{", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(97, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("#fK7hL{:97", cassandraHost0.getUrl());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.toString());
      assertEquals("#fK7hL{", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(97, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("#fK7hL{:97", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.toString());
      assertEquals("#fK7hL{", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(97, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("#fK7hL{:97", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, long0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      hThriftClient0.setAuthenticated(map0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.toString());
      assertEquals("#fK7hL{", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(97, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("#fK7hL{:97", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      AuthenticationRequest authenticationRequest0 = new AuthenticationRequest(map0);
      assertNotNull(authenticationRequest0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(authenticationRequest0.isSetCredentials());
      assertEquals(28, authenticationRequest0.getCredentialsSize());
      
      Map<String, String> map1 = authenticationRequest0.getCredentials();
      assertNotNull(map1);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(authenticationRequest0.isSetCredentials());
      assertEquals(28, authenticationRequest0.getCredentialsSize());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertSame(map0, map1);
      assertSame(map1, map0);
      
      hThriftClient0.setAuthenticated(map1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.toString());
      assertEquals("#fK7hL{", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(97, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("#fK7hL{:97", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(authenticationRequest0.isSetCredentials());
      assertEquals(28, authenticationRequest0.getCredentialsSize());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(map0, map1);
      assertSame(map1, map0);
      
      long long1 = hThriftClient0.getSinceLastUsed();
      assertTrue(long1 == long0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.toString());
      assertEquals("#fK7hL{", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(97, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("#fK7hL{:97", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, long1);
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(authenticationRequest0.credentials);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.toString());
      assertEquals("#fK7hL{", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(97, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("#fK7hL{(200.42.42.0):97", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("#fK7hL{:97", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(authenticationRequest0.isSetCredentials());
      assertEquals(28, authenticationRequest0.getCredentialsSize());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(boolean0);
      assertSame(map0, map1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "=5n(D2V";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      HThriftClient hThriftClient2 = hThriftClient1.close();
      assertNotNull(hThriftClient2);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      
      boolean boolean0 = hThriftClient0.equals(string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(boolean0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertNotNull(cassandraHost1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("=5n(D2V", cassandraHost1.getHost());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getLifo());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V:9160", cassandraHost1.getUrl());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(cassandraHost1, cassandraHost0);
      
      hThriftClient0.startToUse();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      
      long long0 = hThriftClient2.getSinceLastUsed();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(0L, long0);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      
      cassandraHost0.setLifo(boolean0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      
      HThriftClient hThriftClient3 = hThriftClient2.close();
      assertNotNull(hThriftClient3);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("=5n(D2V:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("=5n(D2V", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("=5n(D2V(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient2.getSinceLastUsed());
      assertEquals(0L, hThriftClient3.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient3);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient3);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient3, hThriftClient0);
      assertSame(hThriftClient3, hThriftClient1);
      assertSame(hThriftClient3, hThriftClient2);
      
      String string1 = "getCassandra called on client that was not open. You should not have gotten here.";
      KsDef ksDef0 = null;
      KsDef ksDef1 = null;
      try {
        ksDef1 = new KsDef(ksDef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cassandra.thrift.KsDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "ePJK=//-;,eOi\\28DO-";
      int int0 = (-3322);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hThriftClient0.startToUse();
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean0 = hThriftClient0.equals(string0);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      
      hThriftClient0.startToUse();
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hThriftClient0.startToUse();
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean1 = hThriftClient0.equals(cassandraHost0);
      assertTrue(boolean1 == boolean0);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1);
      
      boolean boolean2 = false;
      cassandraHost0.setLifo(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      cassandraHost0.setUseSocketKeepalive(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertNotNull(cassandraHost1);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost1.toString());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals((-3322), cassandraHost1.getPort());
      assertFalse(cassandraHost1.getLifo());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost1.getUrl());
      assertEquals((-3322), cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost1.getName());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost1.getHost());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      
      boolean boolean3 = hThriftClient0.equals(string0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean3);
      assertSame(cassandraHost0, cassandraHost1);
      
      CassandraHost cassandraHost2 = hThriftClient0.getCassandraHost();
      assertNotNull(cassandraHost2);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost2.toString());
      assertFalse(cassandraHost2.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost2.getMaxFrameSize());
      assertEquals(50, cassandraHost2.getMaxActive());
      assertTrue(cassandraHost2.getUseThriftFramedTransport());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost2.getHost());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost2.getUrl());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost2.getName());
      assertEquals((-3322), cassandraHost2.getCassandraThriftSocketTimeout());
      assertEquals((-3322), cassandraHost2.getPort());
      assertEquals("200.42.42.0", cassandraHost2.getIp());
      assertFalse(cassandraHost2.getLifo());
      assertEquals((-1L), cassandraHost2.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost2, cassandraHost0);
      assertSame(cassandraHost2, cassandraHost1);
      
      String string1 = hThriftClient0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("CassandraClient<ePJK=//-;,eOi\\28DO-:-3322-34>", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(cassandraHost0, cassandraHost1);
      
      hThriftClient0.startToUse();
      assertFalse(string0.equals((Object)string1));
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-3322), cassandraHost0.getPort());
      assertEquals("ePJK=//-;,eOi\\28DO-(200.42.42.0):-3322", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ePJK=//-;,eOi\\28DO-", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("ePJK=//-;,eOi\\28DO-:-3322", cassandraHost0.getUrl());
      assertEquals((-3322), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(cassandraHost0, cassandraHost1);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "";
      int int0 = 524;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):524", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":524", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):524", cassandraHost0.toString());
      assertEquals(524, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):524", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":524", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):524", cassandraHost0.toString());
      assertEquals(524, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(boolean0);
      
      int int1 = 13;
      cassandraHost0.setCassandraThriftSocketTimeout(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):524", cassandraHost0.getName());
      assertEquals(":524", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):524", cassandraHost0.toString());
      assertEquals(524, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(13, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertFalse(int0 == int1);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):524", cassandraHost0.getName());
      assertEquals(":524", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):524", cassandraHost0.toString());
      assertEquals(524, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(13, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "FjR|%D";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("FjR|%D:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("FjR|%D", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("FjR|%D(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("FjR|%D(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("FjR|%D:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("FjR|%D", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("FjR|%D(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("FjR|%D(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      String string1 = "row_cache_save_period_in_seconds";
      CfDef cfDef0 = new CfDef(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(cfDef0);
      assertTrue(cfDef0.isSetKeyspace());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertEquals("keys_only", cfDef0.getCaching());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetId());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isReplicate_on_write());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertNull(cfDef0.getSubcomparator_type());
      assertNull(cfDef0.getComment());
      assertEquals("row_cache_save_period_in_seconds", cfDef0.getName());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertTrue(cfDef0.isSetCaching());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertTrue(cfDef0.isSetName());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertNull(cfDef0.getKey_validation_class());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetComment());
      assertFalse(cfDef0.isSetKey_alias());
      assertNull(cfDef0.getCompaction_strategy());
      assertEquals("FjR|%D", cfDef0.getKeyspace());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertEquals(0, cfDef0.getId());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertNull(cfDef0.getRow_cache_provider());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.id);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertFalse(cfDef0.replicate_on_write);
      
      boolean boolean0 = false;
      cassandraHost0.setLifo(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("FjR|%D:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("FjR|%D", cassandraHost0.getHost());
      assertEquals("FjR|%D(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("FjR|%D(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string1);
      
      int int0 = 2736;
      cassandraHost0.setMaxFrameSize(int0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("FjR|%D:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2736, cassandraHost0.getMaxFrameSize());
      assertEquals("FjR|%D", cassandraHost0.getHost());
      assertEquals("FjR|%D(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("FjR|%D(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string1);
      
      Map<String, String> map0 = cfDef0.getCompaction_strategy_options();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(map0);
      assertTrue(cfDef0.isSetKeyspace());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertEquals("keys_only", cfDef0.getCaching());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetId());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isReplicate_on_write());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertNull(cfDef0.getSubcomparator_type());
      assertNull(cfDef0.getComment());
      assertEquals("row_cache_save_period_in_seconds", cfDef0.getName());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertTrue(cfDef0.isSetCaching());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertTrue(cfDef0.isSetName());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertNull(cfDef0.getKey_validation_class());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetComment());
      assertFalse(cfDef0.isSetKey_alias());
      assertNull(cfDef0.getCompaction_strategy());
      assertEquals("FjR|%D", cfDef0.getKeyspace());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertEquals(0, cfDef0.getId());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertNull(cfDef0.getRow_cache_provider());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.id);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertFalse(cfDef0.replicate_on_write);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.setAuthenticated(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "Cfq!v,";
      int int0 = (-2003);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertEquals((-2003), cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertEquals((-2003), cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      double double0 = 1.0;
      AutoExpandingBufferWriteTransport autoExpandingBufferWriteTransport0 = new AutoExpandingBufferWriteTransport(cassandraHost0.DEFAULT_MAX_ACTIVE, double0);
      assertNotNull(autoExpandingBufferWriteTransport0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertEquals((-2003), cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals(0, autoExpandingBufferWriteTransport0.getBufferPosition());
      assertEquals((-1), autoExpandingBufferWriteTransport0.getBytesRemainingInBuffer());
      assertTrue(autoExpandingBufferWriteTransport0.isOpen());
      assertEquals(0, autoExpandingBufferWriteTransport0.getPos());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(autoExpandingBufferWriteTransport0);
      assertNotNull(tTransport0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertEquals((-2003), cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, autoExpandingBufferWriteTransport0.getBufferPosition());
      assertEquals((-1), autoExpandingBufferWriteTransport0.getBytesRemainingInBuffer());
      assertTrue(autoExpandingBufferWriteTransport0.isOpen());
      assertEquals(0, autoExpandingBufferWriteTransport0.getPos());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "}#SN>00ba; ZHb@{";
      int int0 = 41;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      boolean boolean1 = cassandraHost0.isPerformNameResolution();
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(boolean1);
      
      boolean boolean2 = hThriftClient0.isOpen();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(boolean2);
      
      hThriftClient0.startToUse();
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean3 = hThriftClient1.isOpen();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(boolean3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      String string1 = null;
      int int1 = 0;
      TSocket tSocket0 = new TSocket(string1, int1);
      assertFalse(int1 == int0);
      assertNotNull(tSocket0);
      assertEquals(0, tSocket0.getBufferPosition());
      assertFalse(tSocket0.isOpen());
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tSocket0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tTransport0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tSocket0.getBufferPosition());
      assertFalse(tSocket0.isOpen());
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      assertFalse(tTransport0.isOpen());
      assertEquals((-1), tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(tSocket0, tTransport0);
      assertSame(tTransport0, tSocket0);
      
      int int2 = 0;
      cassandraHost0.setMaxFrameSize(int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      hThriftClient0.clearAuthentication();
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(cassandraHost1);
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost1.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost1.toString());
      assertFalse(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost1.getName());
      assertEquals(0, cassandraHost1.getMaxFrameSize());
      assertEquals(41, cassandraHost1.getPort());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost1.getHost());
      assertEquals(0, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("}#SN>00ba; ZHb@{:41", cassandraHost0.getUrl());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("}#SN>00ba; ZHb@{", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("}#SN>00ba; ZHb@{(200.42.42.0):41", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(41, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(cassandraHost1, cassandraHost0);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-78);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)94;
      byteArray0[2] = byte2;
      byte byte3 = (byte)44;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-110);
      byteArray0[4] = byte4;
      int int1 = 2276;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte3, int1);
      assertFalse(int1 == int0);
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte1);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-39), byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-1), (byte)94, (byte)44, (byte) (-110)}, byteArray0);
      
      String string1 = "merge_shards_chance:";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockPrintStream0);
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(byteArrayInputStream0, mockPrintStream0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte1);
      assertNotNull(tIOStreamTransport0);
      assertEquals((-39), byteArrayInputStream0.available());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("merge_shards_chance:", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/merge_shards_chance:", mockFile0.toString());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-1), (byte)94, (byte)44, (byte) (-110)}, byteArray0);
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals((-39), byteArrayInputStream0.available());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("merge_shards_chance:", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/merge_shards_chance:", mockFile0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      
      hThriftClient1.clearAuthentication();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      HThriftClient hThriftClient2 = hThriftClient1.close();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertNotNull(hThriftClient2);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      boolean boolean0 = hThriftClient0.isOpen();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = hThriftClient0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("CassandraClient<:9160-41>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Map<String, String> map0 = null;
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      
      int int0 = (-2674);
      cassandraHost0.setMaxActive(int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-2674), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      
      cassandraHost0.setMaxActive(int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-2674), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      
      boolean boolean1 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-2674), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1);
      assertNotSame(string0, string1);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-2674), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      hThriftClient0.startToUse();
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-2674), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      
      boolean boolean2 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-2674), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(cassandraHost1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-2674), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost1.toString());
      assertEquals((-2674), cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getLifo());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost1.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertEquals(9160, cassandraHost1.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertEquals(":9160", cassandraHost1.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost1.getName());
      assertEquals("", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost1, cassandraHost0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):9160 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "nLUUru3`f.t(;\"#T^^\"";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)25;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-123);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-9);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)16;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-125);
      byteArray0[7] = byte7;
      int int0 = 0;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0, byteArray0[7], int0);
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals((-125), tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte) (-123), (byte) (-9), (byte)0, (byte)16, (byte)0, (byte) (-125)}, byteArray0);
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tMemoryInputTransport0);
      assertNotNull(tTransport0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals((-125), tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte) (-123), (byte) (-9), (byte)0, (byte)16, (byte)0, (byte) (-125)}, byteArray0);
      
      hThriftClient0.transport = tTransport0;
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals((-125), tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "8pHaC!I%";
      int int0 = (-1333);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-1333), cassandraHost0.getPort());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-1333), cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      String string1 = "(;J!7SO3im7mEY`ITBE";
      boolean boolean0 = hThriftClient0.equals(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-1333), cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(byteArrayOutputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tIOStreamTransport0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(tTransport0);
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-1333), cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotSame(string0, string1);
      
      byte[] byteArray0 = new byte[0];
      int int1 = 0;
      int int2 = 0;
      byteArrayOutputStream0.write(byteArray0, int1, int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      hThriftClient0.transport = tTransport0;
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-1333), cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(hThriftClient1);
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-1333), cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot write to null outputStream
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "CassandraClient<`Z#;mZS@Ig):0-251>";
      int int0 = 16777216;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(16777216, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<`Z#;mZS@Ig)(200.42.42.0):16777216", cassandraHost0.getName());
      assertEquals("CassandraClient<`Z#;mZS@Ig):16777216", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<`Z#;mZS@Ig)(200.42.42.0):16777216", cassandraHost0.toString());
      assertEquals("CassandraClient<`Z#;mZS@Ig)", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(16777216, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<`Z#;mZS@Ig)(200.42.42.0):16777216", cassandraHost0.getName());
      assertEquals("CassandraClient<`Z#;mZS@Ig):16777216", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<`Z#;mZS@Ig)(200.42.42.0):16777216", cassandraHost0.toString());
      assertEquals("CassandraClient<`Z#;mZS@Ig)", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:16777216
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "gvC]h";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("gvC]h", cassandraHost0.getHost());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("gvC]h:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("gvC]h", cassandraHost0.getHost());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("gvC]h:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("gvC]h", cassandraHost0.getHost());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("gvC]h:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      HThriftClient hThriftClient2 = hThriftClient0.close();
      assertNotNull(hThriftClient2);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("gvC]h", cassandraHost0.getHost());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("gvC]h:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = null;
      String string2 = hashMap0.put(string1, string1);
      assertNull(string2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      hThriftClient1.setAuthenticated(hashMap0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("gvC]h", cassandraHost0.getHost());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("gvC]h:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      
      String string3 = "Transport open status {} for client {}";
      CallbackHandler callbackHandler0 = mock(CallbackHandler.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-93);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-39);
      byteArray0[1] = byte1;
      byte byte2 = (byte)13;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-87);
      byteArray0[3] = byte3;
      byte byte4 = (byte)44;
      byteArray0[4] = byte4;
      byte byte5 = (byte)14;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-32);
      byteArray0[6] = byte6;
      byte byte7 = (byte)96;
      byteArray0[7] = byte7;
      int int0 = 2;
      int int1 = 2149;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tMemoryInputTransport0);
      assertEquals(2149, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(2, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-39), (byte)13, (byte) (-87), (byte)44, (byte)14, (byte) (-32), (byte)96}, byteArray0);
      
      TSaslServerTransport tSaslServerTransport0 = new TSaslServerTransport(string1, string3, string0, hashMap0, callbackHandler0, tMemoryInputTransport0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tSaslServerTransport0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2149, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(2, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tSaslServerTransport0.getBufferPosition());
      assertEquals((-1), tSaslServerTransport0.getBytesRemainingInBuffer());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-39), (byte)13, (byte) (-87), (byte)44, (byte)14, (byte) (-32), (byte)96}, byteArray0);
      
      hThriftClient1.transport = (TTransport) tSaslServerTransport0;
      assertEquals((-1), hThriftClient1.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient1.transport.getBufferPosition());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("gvC]h", cassandraHost0.getHost());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("gvC]h:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2149, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(2, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tSaslServerTransport0.getBufferPosition());
      assertEquals((-1), tSaslServerTransport0.getBytesRemainingInBuffer());
      
      boolean boolean0 = hThriftClient1.isOpen();
      assertFalse(string0.equals((Object)string3));
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("gvC]h", cassandraHost0.getHost());
      assertEquals("gvC]h(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("gvC]h:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      assertNotSame(string0, string3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(string2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "VK6BzDZ3o|npfu?qe";
      int int0 = 2;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int1 = 203;
      cassandraHost0.setCassandraThriftSocketTimeout(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean0 = true;
      cassandraHost0.setLifo(boolean0);
      assertFalse(int0 == int1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean1 = hThriftClient0.isOpen();
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1);
      
      hThriftClient0.clearAuthentication();
      assertFalse(int0 == int1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertFalse(int0 == int1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, long0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(int0 == int1);
      assertNotNull(hThriftClient1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      ColumnDef columnDef0 = new ColumnDef();
      assertNotNull(columnDef0);
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_options());
      assertNull(columnDef0.getIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      
      ColumnDef columnDef1 = new ColumnDef(columnDef0);
      assertTrue(columnDef1.equals((Object)columnDef0));
      assertNotNull(columnDef1);
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_options());
      assertNull(columnDef0.getIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertFalse(columnDef1.isSetIndex_type());
      assertEquals(0, columnDef1.getIndex_optionsSize());
      assertFalse(columnDef1.isSetValidation_class());
      assertNull(columnDef1.getIndex_type());
      assertFalse(columnDef1.isSetIndex_options());
      assertNull(columnDef1.getValidation_class());
      assertFalse(columnDef1.isSetIndex_name());
      assertFalse(columnDef1.isSetName());
      assertNull(columnDef1.getIndex_name());
      
      boolean boolean2 = true;
      columnDef1.unsetIndex_name();
      assertTrue(columnDef0.equals((Object)columnDef1));
      assertTrue(columnDef1.equals((Object)columnDef0));
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_options());
      assertNull(columnDef0.getIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertFalse(columnDef1.isSetIndex_type());
      assertEquals(0, columnDef1.getIndex_optionsSize());
      assertFalse(columnDef1.isSetValidation_class());
      assertNull(columnDef1.getIndex_type());
      assertFalse(columnDef1.isSetIndex_options());
      assertNull(columnDef1.getValidation_class());
      assertFalse(columnDef1.isSetIndex_name());
      assertFalse(columnDef1.isSetName());
      assertNull(columnDef1.getIndex_name());
      assertNotSame(columnDef0, columnDef1);
      assertNotSame(columnDef1, columnDef0);
      
      columnDef1.setIndex_typeIsSet(boolean2);
      assertTrue(columnDef0.equals((Object)columnDef1));
      assertTrue(columnDef1.equals((Object)columnDef0));
      assertFalse(boolean2 == boolean1);
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_options());
      assertNull(columnDef0.getIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertFalse(columnDef1.isSetIndex_type());
      assertEquals(0, columnDef1.getIndex_optionsSize());
      assertFalse(columnDef1.isSetValidation_class());
      assertNull(columnDef1.getIndex_type());
      assertFalse(columnDef1.isSetIndex_options());
      assertNull(columnDef1.getValidation_class());
      assertFalse(columnDef1.isSetIndex_name());
      assertFalse(columnDef1.isSetName());
      assertNull(columnDef1.getIndex_name());
      assertNotSame(columnDef0, columnDef1);
      assertNotSame(columnDef1, columnDef0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      Map<String, String> map0 = columnDef1.getIndex_options();
      assertTrue(columnDef0.equals((Object)columnDef1));
      assertTrue(columnDef1.equals((Object)columnDef0));
      assertNull(map0);
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_options());
      assertNull(columnDef0.getIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertFalse(columnDef1.isSetIndex_type());
      assertEquals(0, columnDef1.getIndex_optionsSize());
      assertFalse(columnDef1.isSetValidation_class());
      assertNull(columnDef1.getIndex_type());
      assertFalse(columnDef1.isSetIndex_options());
      assertNull(columnDef1.getValidation_class());
      assertFalse(columnDef1.isSetIndex_name());
      assertFalse(columnDef1.isSetName());
      assertNull(columnDef1.getIndex_name());
      assertNotSame(columnDef0, columnDef1);
      assertNotSame(columnDef1, columnDef0);
      
      boolean boolean4 = hThriftClient1.isAlreadyAuthenticated(map0);
      assertFalse(int0 == int1);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(columnDef0.equals((Object)columnDef1));
      assertTrue(columnDef1.equals((Object)columnDef0));
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_options());
      assertNull(columnDef0.getIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertFalse(columnDef1.isSetIndex_type());
      assertEquals(0, columnDef1.getIndex_optionsSize());
      assertFalse(columnDef1.isSetValidation_class());
      assertNull(columnDef1.getIndex_type());
      assertFalse(columnDef1.isSetIndex_options());
      assertNull(columnDef1.getValidation_class());
      assertFalse(columnDef1.isSetIndex_name());
      assertFalse(columnDef1.isSetName());
      assertNull(columnDef1.getIndex_name());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean4);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(columnDef0, columnDef1);
      assertNotSame(columnDef1, columnDef0);
      
      long long1 = hThriftClient1.getSinceLastUsed();
      assertFalse(int0 == int1);
      assertTrue(long1 == long0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, long1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertFalse(int0 == int1);
      assertNotNull(cassandraHost1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost0.getHost());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getLifo());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("VK6BzDZ3o|npfu?qe:2", cassandraHost1.getUrl());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost1.getName());
      assertEquals("VK6BzDZ3o|npfu?qe", cassandraHost1.getHost());
      assertEquals(2, cassandraHost1.getPort());
      assertEquals(203, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("VK6BzDZ3o|npfu?qe(200.42.42.0):2", cassandraHost1.toString());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost1, cassandraHost0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.setAuthenticated(columnDef1.index_options);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      TTransport tTransport0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        hThriftClient1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "getCassandra called on client that was not open. You should not have gotten here.";
      int int0 = 2;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean0 = hThriftClient1.isOpen();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(boolean0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean1 = cassandraHost0.isPerformNameResolution();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(boolean1);
      
      TTransport tTransport0 = null;
      TTransport tTransport1 = null;
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(tTransport1);
      assertNotNull(tFastFramedTransport0);
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      
      hThriftClient1.transport = (TTransport) tFastFramedTransport0;
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient1.transport.getBufferPosition());
      assertEquals(0, hThriftClient1.transport.getBytesRemainingInBuffer());
      
      CassandraHost cassandraHost1 = hThriftClient1.getCassandraHost();
      assertNotNull(cassandraHost1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(2, cassandraHost1.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost1.getName());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost1.getHost());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost1.getUrl());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost1.toString());
      assertTrue(cassandraHost1.getLifo());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost1, cassandraHost0);
      
      ColumnDef columnDef0 = new ColumnDef();
      assertNotNull(columnDef0);
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_options());
      assertNull(columnDef0.getIndex_type());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      
      columnDef0.unsetName();
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_options());
      assertNull(columnDef0.getIndex_type());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      
      String string1 = "system_add_keyspace_args(";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TFastFramedTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = 1;
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      boolean boolean2 = hThriftClient0.isOpen();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string1 = hThriftClient0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("CassandraClient<Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1-49>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = hThriftClient0.equals(object0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean4);
      assertNotSame(string0, string1);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(hThriftClient1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      HThriftClient hThriftClient2 = hThriftClient1.close();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(hThriftClient2);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      
      String string2 = hThriftClient1.toString();
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("CassandraClient<Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1-49>", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      boolean boolean5 = hThriftClient0.isOpen();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(boolean5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      
      Cassandra.Client cassandra_Client0 = hThriftClient2.getCassandra();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(cassandra_Client0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT:1", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Invalid value for CASSANDRA_THRIFT_SOCKET_TIMEOUT(200.42.42.0):1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      
      boolean boolean6 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6);
      
      String string3 = "6s~$z_F*";
      // Undeclared exception!
      try { 
        cassandra_Client0.describe_keyspace(string3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No writing allowed!
         //
         verifyException("org.apache.thrift.transport.TMemoryInputTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "<q<|OivT&";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("<q<|OivT&", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("<q<|OivT&:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("<q<|OivT&", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("<q<|OivT&:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      hThriftClient0.startToUse();
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("<q<|OivT&", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("<q<|OivT&:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      boolean boolean0 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("<q<|OivT&", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("<q<|OivT&:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      boolean boolean1 = hThriftClient0.isOpen();
      assertFalse(boolean1 == boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("<q<|OivT&", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("<q<|OivT&:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean1);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      
      hThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("<q<|OivT&", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("<q<|OivT&:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = "CassandraClient<:9160-1093>";
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(cassandra_Client0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("<q<|OivT&", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("<q<|OivT&:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("<q<|OivT&(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No writing allowed!
         //
         verifyException("org.apache.thrift.transport.TMemoryInputTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      CassandraHost cassandraHost1 = hThriftClient1.getCassandraHost();
      assertNull(cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "";
      int int0 = (-32);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-32), cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):-32", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-32", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-32", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-32), cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):-32", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-32", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-32", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      TTransport tTransport0 = null;
      TSaslServerTransport tSaslServerTransport0 = new TSaslServerTransport(tTransport0);
      assertNotNull(tSaslServerTransport0);
      assertEquals((-1), tSaslServerTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tSaslServerTransport0.getBufferPosition());
      
      hThriftClient0.transport = (TTransport) tSaslServerTransport0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-32), cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):-32", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-32", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-32", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1), tSaslServerTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tSaslServerTransport0.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-32), cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("(127.0.0.1):-32", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-32", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-32", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TSaslTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "CZwL";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      int int0 = 207;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(207, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      boolean boolean0 = false;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(207, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(207, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(207, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      String string1 = null;
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra(string1);
      assertNotNull(cassandra_Client0);
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(207, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      
      hThriftClient0.startToUse();
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(207, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      
      HThriftClient hThriftClient2 = hThriftClient0.close();
      assertNotNull(hThriftClient2);
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CZwL", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(207, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "Cfq!v,";
      int int0 = (-2003);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals((-2003), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      boolean boolean0 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals((-2003), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-2003), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      double double0 = 1.0;
      AutoExpandingBufferWriteTransport autoExpandingBufferWriteTransport0 = new AutoExpandingBufferWriteTransport(cassandraHost0.DEFAULT_MAX_ACTIVE, double0);
      assertNotNull(autoExpandingBufferWriteTransport0);
      assertEquals((-2003), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1), autoExpandingBufferWriteTransport0.getBytesRemainingInBuffer());
      assertTrue(autoExpandingBufferWriteTransport0.isOpen());
      assertEquals(0, autoExpandingBufferWriteTransport0.getPos());
      assertEquals(0, autoExpandingBufferWriteTransport0.getBufferPosition());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(autoExpandingBufferWriteTransport0);
      assertNotNull(tTransport0);
      assertEquals((-2003), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1), autoExpandingBufferWriteTransport0.getBytesRemainingInBuffer());
      assertTrue(autoExpandingBufferWriteTransport0.isOpen());
      assertEquals(0, autoExpandingBufferWriteTransport0.getPos());
      assertEquals(0, autoExpandingBufferWriteTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      hThriftClient0.transport = tTransport0;
      assertEquals((-2003), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cfq!v,(200.42.42.0):-2003", cassandraHost0.getName());
      assertEquals("Cfq!v,:-2003", cassandraHost0.getUrl());
      assertEquals("Cfq!v,", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1), autoExpandingBufferWriteTransport0.getBytesRemainingInBuffer());
      assertTrue(autoExpandingBufferWriteTransport0.isOpen());
      assertEquals(0, autoExpandingBufferWriteTransport0.getPos());
      assertEquals(0, autoExpandingBufferWriteTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      String string1 = "_:Ur$#e[QP2/r&[J|?u";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string1);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // Code is not implemented
         //
         verifyException("org.apache.thrift.transport.AutoExpandingBufferWriteTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "8pHaC!I%";
      int int0 = (-1333);
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      String string1 = "(;J!7SO3im7mEY`ITBE";
      boolean boolean0 = hThriftClient0.equals(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(byteArrayOutputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tIOStreamTransport0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(tTransport0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string0, string1);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)6;
      byteArray0[0] = byte0;
      tIOStreamTransport0.write(byteArray0);
      assertEquals("\u0006", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int1 = 0;
      int int2 = 0;
      byteArrayOutputStream0.write(byteArray1, int1, int2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertEquals("\u0006", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      hThriftClient0.transport = tTransport0;
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("\u0006", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(cassandra_Client0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string0, string1);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(hThriftClient1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string0, string1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient0, hThriftClient1);
      
      Cassandra.Client cassandra_Client1 = hThriftClient0.getCassandra();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(cassandra_Client1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandra_Client1, cassandra_Client0);
      
      byteArrayOutputStream0.close();
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals("\u0006\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot write to null outputStream
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "nLUUru3`f.t(;\"#T^^\"";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)25;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-123);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-9);
      byteArray0[3] = byte3;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)16;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-125);
      byteArray0[7] = byte7;
      int int0 = 0;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0, byteArray0[7], int0);
      assertNotNull(tMemoryInputTransport0);
      assertEquals((-125), tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte) (-123), (byte) (-9), (byte)0, (byte)16, (byte)0, (byte) (-125), (byte)0, (byte)0}, byteArray0);
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tMemoryInputTransport0);
      assertNotNull(tTransport0);
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-125), tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte) (-123), (byte) (-9), (byte)0, (byte)16, (byte)0, (byte) (-125), (byte)0, (byte)0}, byteArray0);
      
      hThriftClient0.transport = tTransport0;
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-125), tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      
      long long0 = (-2508L);
      System.setCurrentTimeMillis(long0);
      tMemoryInputTransport0.reset(byteArray0);
      assertEquals(10, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte) (-123), (byte) (-9), (byte)0, (byte)16, (byte)0, (byte) (-125), (byte)0, (byte)0}, byteArray0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-2508L), hThriftClient0.getSinceLastUsed());
      assertEquals((-2508L), hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "getCassandra called on client that was not open. You should not have gotten here.";
      int int0 = 2;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      long long0 = 0L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean1 = hThriftClient1.isOpen();
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean2 = cassandraHost0.isPerformNameResolution();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean2);
      
      CassandraHost cassandraHost1 = hThriftClient1.getCassandraHost();
      assertNotNull(cassandraHost1);
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost1.toString());
      assertEquals(0L, cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.(200.42.42.0):2", cassandraHost1.getName());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.:2", cassandraHost1.getUrl());
      assertEquals(2, cassandraHost1.getPort());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("getCassandra called on client that was not open. You should not have gotten here.", cassandraHost1.getHost());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost1, cassandraHost0);
      
      ColumnDef columnDef0 = new ColumnDef();
      assertNotNull(columnDef0);
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetIndex_options());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetValidation_class());
      assertNull(columnDef0.getIndex_type());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      
      columnDef0.unsetName();
      assertFalse(columnDef0.isSetIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNull(columnDef0.getIndex_name());
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetIndex_options());
      assertFalse(columnDef0.isSetIndex_type());
      assertFalse(columnDef0.isSetValidation_class());
      assertNull(columnDef0.getIndex_type());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      
      try { 
        columnDef0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Required field 'name' was not present! Struct: ColumnDef(name:null, validation_class:null)
         //
         verifyException("org.apache.cassandra.thrift.ColumnDef", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "J";
      int int0 = 892;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 892);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("J", cassandraHost0.getHost());
      assertEquals(892, cassandraHost0.getPort());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      int int1 = 233;
      cassandraHost0.setMaxFrameSize(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(233, cassandraHost0.getMaxFrameSize());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("J", cassandraHost0.getHost());
      assertEquals(892, cassandraHost0.getPort());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertFalse(int0 == int1);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(233, cassandraHost0.getMaxFrameSize());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("J", cassandraHost0.getHost());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      int int2 = 1;
      cassandraHost0.setMaxFrameSize(int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertEquals("J", cassandraHost0.getHost());
      assertEquals(892, cassandraHost0.getPort());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertEquals("J", cassandraHost0.getHost());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      String string1 = hThriftClient0.toString();
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertEquals("J", cassandraHost0.getHost());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("CassandraClient<J:892-58>", string1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string1, string0);
      
      HThriftClient hThriftClient2 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(hThriftClient2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertEquals("J", cassandraHost0.getHost());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      
      boolean boolean1 = true;
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertEquals("J", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(892, cassandraHost0.getPort());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      
      HThriftClient hThriftClient3 = hThriftClient0.open();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(hThriftClient3);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertEquals("J", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient3.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient3, hThriftClient2);
      assertSame(hThriftClient3, hThriftClient0);
      assertSame(hThriftClient3, hThriftClient1);
      
      long long0 = hThriftClient3.getSinceLastUsed();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertEquals("J", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient3.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(1392409281320L, long0);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient3, hThriftClient2);
      assertSame(hThriftClient3, hThriftClient0);
      assertSame(hThriftClient3, hThriftClient1);
      
      Cassandra.Client cassandra_Client0 = hThriftClient3.getCassandra();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(cassandra_Client0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertEquals("J", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient3.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient3, hThriftClient2);
      assertSame(hThriftClient3, hThriftClient0);
      assertSame(hThriftClient3, hThriftClient1);
      
      String string2 = hThriftClient0.toString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("J(200.42.42.0):892", cassandraHost0.toString());
      assertEquals("J(200.42.42.0):892", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("J:892", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxFrameSize());
      assertEquals("J", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(892, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("CassandraClient<J:892-58>", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient3);
      
      AuthenticationRequest authenticationRequest0 = new AuthenticationRequest();
      assertNotNull(authenticationRequest0);
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertFalse(authenticationRequest0.isSetCredentials());
      
      try { 
        authenticationRequest0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Required field 'credentials' was not present! Struct: AuthenticationRequest(credentials:null)
         //
         verifyException("org.apache.cassandra.thrift.AuthenticationRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "8pHaC!I%";
      int int0 = (-1333);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1333), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1333), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      String string1 = "(;J!7SO3im7mEY`ITBE";
      boolean boolean0 = hThriftClient0.equals(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1333), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(byteArrayOutputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tIOStreamTransport0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(tTransport0);
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1333), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      
      byte[] byteArray0 = new byte[0];
      tTransport0.write(byteArray0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1333), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(string0, string1);
      
      int int1 = 0;
      int int2 = 0;
      byteArrayOutputStream0.write(byteArray0, int1, int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      hThriftClient0.transport = tTransport0;
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1333), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(hThriftClient1);
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1333), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.cassandraClient;
      assertNull(cassandra_Client0);
      
      long long0 = (-1052L);
      System.setCurrentTimeMillis(long0);
      long long1 = hThriftClient0.getSinceLastUsed();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(long1 == long0);
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):-1333", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1333), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%:-1333", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1052L), hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals((-1052L), long1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      
      byteArrayOutputStream0.close();
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot write to null outputStream
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "nLUUru3`f.t(;\"#T^^\"";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)25;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-123);
      byte byte3 = (byte) (-9);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)16;
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-125);
      byteArray0[7] = byte7;
      int int0 = 0;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0, byteArray0[7], int0);
      assertNotNull(tMemoryInputTransport0);
      assertEquals((-125), tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)0, (byte) (-9), (byte)0, (byte)16, (byte)0, (byte) (-125)}, byteArray0);
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tMemoryInputTransport0);
      assertNotNull(tTransport0);
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-125), tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals((-125), tTransport0.getBufferPosition());
      assertTrue(tTransport0.isOpen());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)0, (byte) (-9), (byte)0, (byte)16, (byte)0, (byte) (-125)}, byteArray0);
      assertSame(tMemoryInputTransport0, tTransport0);
      assertSame(tTransport0, tMemoryInputTransport0);
      
      hThriftClient0.transport = tTransport0;
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-125), tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals((-125), tTransport0.getBufferPosition());
      assertTrue(tTransport0.isOpen());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals((-125), hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals("nLUUru3`f.t(;\"#T^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(;\"#T^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("nLUUru3`f.t(;\"#T^^\":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "";
      int int0 = (-32);
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      cassandraHost0.setMaxFrameSize(int0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-32), cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-32), cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertNotNull(cassandraHost1);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-32), cassandraHost0.getMaxFrameSize());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost1.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost1.toString());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals((-32), cassandraHost1.getMaxFrameSize());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost1.getName());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertEquals(":9160", cassandraHost1.getUrl());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):9160 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "CZwL";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      int int0 = 203;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(int0);
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertNotNull(tMemoryInputTransport0);
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      
      hThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      
      String string1 = null;
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra(string1);
      assertNotNull(cassandra_Client0);
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      hThriftClient0.startToUse();
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertNotNull(cassandraHost1);
      assertEquals("CZwL", cassandraHost0.getHost());
      assertEquals(203, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(203L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CZwL:9160", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CZwL", cassandraHost1.getHost());
      assertEquals(203, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("CZwL:9160", cassandraHost1.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost1.getName());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(203L, cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("CZwL(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost1, cassandraHost0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "8pHaC!I%";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      boolean boolean0 = hThriftClient0.equals(string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      TSocket tSocket0 = new TSocket(string0, cassandraHost0.DEFAULT_PORT);
      assertNotNull(tSocket0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      assertFalse(tSocket0.isOpen());
      assertEquals(0, tSocket0.getBufferPosition());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      TIOStreamTransport tIOStreamTransport0 = null;
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tIOStreamTransport0);
      assertNotNull(tTransport0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      hThriftClient0.transport = tTransport0;
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("8pHaC!I%:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TFramedTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "CassandraClient<8pHaC!I%:-1333-1125>";
      int int0 = (-1572);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.toString());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1572), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<8pHaC!I%:-1572", cassandraHost0.getUrl());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.toString());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1572), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<8pHaC!I%:-1572", cassandraHost0.getUrl());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.toString());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1572), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<8pHaC!I%:-1572", cassandraHost0.getUrl());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      TTransport tTransport0 = null;
      TTransport tTransport1 = hThriftClient0.maybeWrapWithTFramedTransport(tTransport0);
      assertNull(tTransport1);
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.toString());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals((-1572), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<8pHaC!I%:-1572", cassandraHost0.getUrl());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "CassandraClient<8pHaC!I%:-1333-1125>";
      int int0 = (-1572);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CassandraClient<8pHaC!I%:-1572", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1572), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CassandraClient<8pHaC!I%:-1572", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1572), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CassandraClient<8pHaC!I%:-1572", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1572), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-56);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-54);
      byteArray0[1] = byte1;
      byte byte2 = (byte)75;
      byteArray0[2] = byte2;
      byte byte3 = (byte)40;
      byteArray0[3] = byte3;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0);
      assertNotNull(tMemoryInputTransport0);
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(4, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-54), (byte)75, (byte)40}, byteArray0);
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tMemoryInputTransport0);
      assertNotNull(tTransport0);
      assertEquals(4, tTransport0.getBytesRemainingInBuffer());
      assertTrue(tTransport0.isOpen());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("CassandraClient<8pHaC!I%:-1572", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<8pHaC!I%", cassandraHost0.getHost());
      assertEquals("CassandraClient<8pHaC!I%(200.42.42.0):-1572", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1572), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(4, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-54), (byte)75, (byte)40}, byteArray0);
      assertSame(tTransport0, tMemoryInputTransport0);
      assertSame(tMemoryInputTransport0, tTransport0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to CassandraClient<8pHaC!I%(200.42.42.0):-1572 , Cannot open without port.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "OK %Z8rfm@16";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      int int0 = 0;
      cassandraHost0.setMaxActive(int0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertNotNull(cassandraHost1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, cassandraHost1.getMaxFrameSize());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost1.getMaxActive());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to OK %Z8rfm@16(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@62c9ff9f
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "nLUUru3`f.t(2\"#^^\"";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(2\"#^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("nLUUru3`f.t(2\"#^^\":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("nLUUru3`f.t(2\"#^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("nLUUru3`f.t(2\"#^^\":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)25;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-123);
      byte byte3 = (byte) (-9);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)16;
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(2\"#^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("nLUUru3`f.t(2\"#^^\":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-125);
      byteArray0[7] = byteArray0[0];
      int int0 = 0;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0, byteArray0[7], int0);
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(25, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)0, (byte) (-9), (byte)0, (byte)16, (byte)0, (byte)25}, byteArray0);
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tMemoryInputTransport0);
      assertNotNull(tTransport0);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(2\"#^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("nLUUru3`f.t(2\"#^^\":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(25, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertTrue(tTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(25, tTransport0.getBufferPosition());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)0, (byte) (-9), (byte)0, (byte)16, (byte)0, (byte)25}, byteArray0);
      assertSame(tMemoryInputTransport0, tTransport0);
      assertSame(tTransport0, tMemoryInputTransport0);
      
      hThriftClient0.transport = tTransport0;
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(2\"#^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("nLUUru3`f.t(2\"#^^\":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(25, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertTrue(tTransport0.isOpen());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(25, tTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(25, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("nLUUru3`f.t(2\"#^^\"", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("nLUUru3`f.t(2\"#^^\":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("nLUUru3`f.t(2\"#^^\"(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "8pHaC!I%";
      int int0 = (-1312);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertNotNull(cassandraHost0);
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("8pHaC!I%:-1312", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1312), cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("8pHaC!I%:-1312", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1312), cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(byteArrayOutputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      
      TTransport tTransport0 = hThriftClient0.maybeWrapWithTFramedTransport(tIOStreamTransport0);
      assertNotNull(tTransport0);
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("8pHaC!I%:-1312", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1312), cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int1 = (-3189);
      tTransport0.consumeBuffer(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("8pHaC!I%:-1312", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1312), cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals((-3189), tTransport0.getBufferPosition());
      assertEquals(3189, tTransport0.getBytesRemainingInBuffer());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hThriftClient0.transport = tTransport0;
      assertEquals("8pHaC!I%", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("8pHaC!I%:-1312", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals("8pHaC!I%(200.42.42.0):-1312", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1312), cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals((-3189), tTransport0.getBufferPosition());
      assertEquals(3189, tTransport0.getBytesRemainingInBuffer());
      assertEquals((-3189), hThriftClient0.transport.getBufferPosition());
      assertEquals(3189, hThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3189
         //
         verifyException("org.apache.thrift.protocol.TBinaryProtocol", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "system_update_column_family_args(";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertNotNull(hThriftClient1);
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      hThriftClient0.startToUse();
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      
      TTransport tTransport0 = hThriftClient1.transport;
      assertNull(tTransport0);
      
      TTransport tTransport1 = hThriftClient1.maybeWrapWithTFramedTransport(tTransport0);
      assertNotNull(tTransport1);
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, tTransport1.getBytesRemainingInBuffer());
      assertEquals(0, tTransport1.getBufferPosition());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      hThriftClient1.transport = tTransport1;
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, tTransport1.getBytesRemainingInBuffer());
      assertEquals(0, tTransport1.getBufferPosition());
      assertEquals(0, hThriftClient1.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient1.transport.getBufferPosition());
      
      String string1 = hThriftClient0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("system_update_column_family_args(:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("system_update_column_family_args(", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("system_update_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals("CassandraClient<system_update_column_family_args(:9160-69>", string1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.isOpen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TFramedTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "CZw";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertNotNull(cassandraHost0);
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZw:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertNotNull(hThriftClient0);
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZw:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      hThriftClient0.keyspaceName = string0;
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZw:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertNotNull(tMemoryInputTransport0);
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZw:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      
      String string1 = hThriftClient0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZw:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("CassandraClient<CZw:9160-70>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra(string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(cassandra_Client0);
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CZw(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CZw", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getMaxFrameSize());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CZw:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(Integer.MAX_VALUE, CassandraHost.DEFAULT_MAX_FRAME_SIZE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
  }
}
