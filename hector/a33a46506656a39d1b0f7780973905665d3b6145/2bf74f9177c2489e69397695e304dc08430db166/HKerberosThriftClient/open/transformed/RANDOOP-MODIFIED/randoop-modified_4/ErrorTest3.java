import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1501");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.10", 51);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "Subject(Subject):101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1502");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long10 = cassandraHost9.getMaxWaitTimeWhenExhausted();
        cassandraHost9.setCassandraThriftSocketTimeout(0);
        boolean boolean13 = cassandraHost9.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "127.0.0.1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1503");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str22 = subject0.toString();
        java.lang.String str23 = subject0.toString();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet25 = subject0.getPublicCredentials();
        java.lang.String str26 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160");
        java.lang.String str29 = cassandraHost28.toString();
        cassandraHost28.setCassandraThriftSocketTimeout((int) (byte) 44);
        int int32 = cassandraHost28.getMaxActive();
        java.lang.String str33 = cassandraHost28.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "32(0.0.0.32):50");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1504");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", 101);
        cassandraHost10.setMaxActive(98);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1505");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("9269(0.0.36.53):1");
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray20, false);
        tSSLTransportParameters24.setTrustStore("0.0.0.8", "Subject(Subject):101", "0.0.0.1", "0.0.0.0(0.0.0.0):101");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):97", tSSLTransportParameters24);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1506");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) -1);
        java.lang.String str10 = cassandraHost9.getName();
        int int11 = cassandraHost9.getCassandraThriftSocketTimeout();
        java.lang.String str12 = cassandraHost9.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "-1:301");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1507");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)(hi!(hi!)):9261");
        java.lang.String str10 = cassandraHost9.getUrl();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        tSSLTransportParameters28.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "Subject(Subject):32", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1508");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        cassandraHost9.setUseSocketKeepalive(false);
        boolean boolean12 = cassandraHost9.getUseSocketKeepalive();
        boolean boolean13 = cassandraHost9.isPerformNameResolution();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26);
        tSSLTransportParameters33.setKeyStore("9269", "-1:32", "Subject(Subject)", "-1:101");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1):100", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1509");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        java.util.Set<java.security.Principal> principalSet11 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!):9160", 9261);
        int int15 = cassandraHost14.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):35", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:35", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):9160", strArray31, true);
        tSSLTransportParameters44.setTrustStore("CassandraClient<%s-%d>:10", "hi!(hi!)");
        tSSLTransportParameters44.setTrustStore("-1(-1):35", "100:0", "32(0.0.0.32)", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "Subject(Subject)", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1510");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        tSSLTransportParameters21.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", "", "301", "127.0.0.1(127.0.0.1):10");
        boolean boolean27 = subject0.equals((java.lang.Object) "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost30 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):35", 50);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):9160", strArray45);
        tSSLTransportParameters57.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient60 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost30, "9313", tSSLTransportParameters57);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient60.equals(null)", !hKerberosThriftClient60.equals(null));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1511");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):10", (int) (byte) 8);
        java.lang.String str16 = cassandraHost15.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "(127.0.0.1)((127.0.0.1)):102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1512");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        boolean boolean8 = subject0.isReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray22);
        boolean boolean31 = subject0.equals((java.lang.Object) "127.0.0.1");
        java.lang.String str32 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet33 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost36 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost36.setMaxWaitTimeWhenExhausted((long) 10);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost40 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean41 = cassandraHost36.equals((java.lang.Object) cassandraHost40);
        java.lang.String str42 = cassandraHost36.getHost();
        cassandraHost36.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost36, "0.0.0.101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1513");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        int int9 = cassandraHost6.getCassandraThriftSocketTimeout();
        java.lang.String str10 = cassandraHost6.getName();
        boolean boolean11 = cassandraHost6.getUseThriftFramedTransport();
        java.lang.String str12 = cassandraHost6.toString();
        cassandraHost6.setUseThriftFramedTransport(true);
        java.lang.String str15 = cassandraHost6.getName();
        boolean boolean16 = cassandraHost6.getUseSocketKeepalive();
        java.lang.String str17 = cassandraHost6.toString();
        boolean boolean18 = subject0.equals((java.lang.Object) str17);
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean24 = cassandraHost22.equals((java.lang.Object) 0.0f);
        int int25 = cassandraHost22.getCassandraThriftSocketTimeout();
        java.lang.String str26 = cassandraHost22.getName();
        java.lang.String str27 = cassandraHost22.getUrl();
        java.lang.String str28 = cassandraHost22.getHost();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray43, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray43, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray43);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient56 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "10:100", tSSLTransportParameters55);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient56.equals(null)", !hKerberosThriftClient56.equals(null));
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1514");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        boolean boolean9 = subject0.isReadOnly();
        boolean boolean10 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet11 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost13.setUseSocketKeepalive(false);
        cassandraHost13.setMaxWaitTimeWhenExhausted(31L);
        java.lang.String[] strArray32 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9562", strArray32, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1515");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        int int12 = cassandraHost9.getCassandraThriftSocketTimeout();
        java.lang.String str13 = cassandraHost9.getName();
        boolean boolean14 = cassandraHost9.getUseThriftFramedTransport();
        java.lang.String str15 = cassandraHost9.toString();
        cassandraHost9.setUseThriftFramedTransport(true);
        java.lang.String str18 = cassandraHost9.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1)):99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1516");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPrivateCredentials();
        boolean boolean8 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject5.getPublicCredentials();
        boolean boolean13 = subject0.equals((java.lang.Object) objSet12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str18 = cassandraHost15.toString();
        cassandraHost15.setMaxActive(9160);
        cassandraHost15.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean23 = cassandraHost15.getUseThriftFramedTransport();
        boolean boolean24 = subject0.equals((java.lang.Object) boolean23);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("-1:32", 100);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "CassandraClient<%s-%d>:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1517");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        java.lang.String str20 = subject0.toString();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost23.setMaxActive((int) (short) 0);
        int int26 = cassandraHost23.getCassandraThriftSocketTimeout();
        cassandraHost23.setCassandraThriftSocketTimeout(100);
        int int29 = cassandraHost23.getPort();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45, false);
        tSSLTransportParameters60.setTrustStore("102", "Subject(Subject):32", ":0", "11");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "1001", tSSLTransportParameters60);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1518");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        boolean boolean8 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):9160");
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters13.setKeyStore("hi!", "");
        tSSLTransportParameters13.setKeyStore("CassandraClient<%s-%d>", "CassandraClient<%s-%d>");
        tSSLTransportParameters13.requireClientAuth(true);
        tSSLTransportParameters13.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", "Subject:\n", "0.0.0.0", "0");
        tSSLTransportParameters13.setTrustStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "127.0.0.1(127.0.0.1):1");
        tSSLTransportParameters13.setTrustStore("32(0.0.0.32):-2", "CassandraClient<%s-%d>:-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "hi!(hi!):10", tSSLTransportParameters13);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1519");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        long long16 = atomicLong7.longValue();
        atomicLong7.set(99L);
        int int19 = atomicLong7.intValue();
        boolean boolean20 = subject0.equals((java.lang.Object) atomicLong7);
        boolean boolean21 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))", (int) (byte) 112);
        java.lang.String[] strArray39 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0:101", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray39);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, ":9160", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1520");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        boolean boolean7 = subject0.isReadOnly();
        subject0.setReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost11.setMaxActive((int) (short) 0);
        int int14 = cassandraHost11.getCassandraThriftSocketTimeout();
        java.lang.String str15 = cassandraHost11.getIp();
        int int16 = cassandraHost11.getPort();
        java.lang.String str17 = cassandraHost11.getIp();
        boolean boolean18 = subject0.equals((java.lang.Object) str17);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("100(0.0.0.100):100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "33");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1521");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean3 = cassandraHost2.getLifo();
        cassandraHost2.setMaxActive(9160);
        boolean boolean6 = cassandraHost2.getUseSocketKeepalive();
        boolean boolean7 = cassandraHost2.getUseThriftFramedTransport();
        cassandraHost2.setLifo(false);
        javax.security.auth.Subject subject10 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet11 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject10.getPrivateCredentials();
        boolean boolean13 = subject10.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        boolean boolean25 = subject10.equals((java.lang.Object) tSSLTransportParameters24);
        java.util.Set<java.lang.Object> objSet26 = subject10.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet27 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet28 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet29 = subject10.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 9);
        boolean boolean33 = subject10.equals((java.lang.Object) cassandraHost32);
        java.lang.String str34 = subject10.toString();
        boolean boolean35 = cassandraHost2.equals((java.lang.Object) subject10);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost38 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        java.lang.String str39 = cassandraHost38.toString();
        java.lang.String str40 = cassandraHost38.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject10, cassandraHost38, "(127.0.0.1)((127.0.0.1)):1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1522");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        boolean boolean19 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("100", (int) (short) 100);
        long long23 = cassandraHost22.getMaxWaitTimeWhenExhausted();
        java.lang.String str24 = cassandraHost22.toString();
        cassandraHost22.setLifo(true);
        java.lang.String str27 = cassandraHost22.getHost();
        java.lang.String str28 = cassandraHost22.getName();
        cassandraHost22.setMaxActive((int) (short) 9359);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.32", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):9160", strArray45, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient57 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "(127.0.0.1)((127.0.0.1)):-2", tSSLTransportParameters56);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient57.equals(null)", !hKerberosThriftClient57.equals(null));
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1523");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (byte) 32);
        int int10 = cassandraHost9.getPort();
        javax.security.auth.Subject subject12 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet13 = subject12.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet14 = subject12.getPrincipals();
        java.util.Set<java.security.Principal> principalSet15 = subject12.getPrincipals();
        subject12.setReadOnly();
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray27);
        boolean boolean33 = subject12.equals((java.lang.Object) tSSLTransportParameters32);
        tSSLTransportParameters32.setTrustStore("", "CassandraClient<%s-%d>:52");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "9313", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1524");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str10 = cassandraHost7.toString();
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 1);
        boolean boolean13 = cassandraHost7.getLifo();
        cassandraHost7.setCassandraThriftSocketTimeout((int) (byte) -2);
        cassandraHost7.setCassandraThriftSocketTimeout(101);
        boolean boolean18 = cassandraHost7.getLifo();
        java.lang.String str19 = cassandraHost7.toString();
        boolean boolean20 = subject0.equals((java.lang.Object) str19);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (byte) 10);
        cassandraHost23.setCassandraThriftSocketTimeout((int) (short) 1);
        java.lang.String str26 = cassandraHost23.toString();
        boolean boolean27 = cassandraHost23.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "202");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1525");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        boolean boolean7 = subject0.isReadOnly();
        boolean boolean9 = subject0.equals((java.lang.Object) 108L);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost12.setUseThriftFramedTransport(true);
        boolean boolean15 = cassandraHost12.getLifo();
        long long16 = cassandraHost12.getMaxWaitTimeWhenExhausted();
        cassandraHost12.setUseSocketKeepalive(false);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):102");
        int int21 = cassandraHost20.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!:9160", "127.0.0.1(127.0.0.1):102" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", strArray25, false);
        boolean boolean28 = cassandraHost20.equals((java.lang.Object) strArray25);
        java.lang.String str29 = cassandraHost20.getUrl();
        boolean boolean30 = cassandraHost20.getUseThriftFramedTransport();
        boolean boolean31 = cassandraHost12.equals((java.lang.Object) cassandraHost20);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray49, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray49, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray49, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray49, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "9260", tSSLTransportParameters64);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1526");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        javax.security.auth.Subject subject6 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet7 = subject6.getPublicCredentials();
        subject6.setReadOnly();
        java.lang.String str9 = subject6.toString();
        java.lang.String str10 = subject6.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean14 = cassandraHost12.equals((java.lang.Object) 0.0f);
        java.lang.String str15 = cassandraHost12.getName();
        boolean boolean16 = subject6.equals((java.lang.Object) cassandraHost12);
        java.lang.String str17 = cassandraHost12.toString();
        int int18 = cassandraHost12.getPort();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost(":0");
        boolean boolean21 = cassandraHost12.equals((java.lang.Object) cassandraHost20);
        cassandraHost20.setMaxActive(198);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1527");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str8 = cassandraHost7.getIp();
        int int9 = cassandraHost7.getMaxActive();
        java.lang.String str10 = cassandraHost7.getUrl();
        boolean boolean11 = subject0.equals((java.lang.Object) cassandraHost7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean15 = cassandraHost13.equals((java.lang.Object) 0.0f);
        int int16 = cassandraHost13.getPort();
        java.lang.String str17 = cassandraHost13.getName();
        java.lang.String str18 = cassandraHost13.getHost();
        boolean boolean19 = cassandraHost13.getUseThriftFramedTransport();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray31, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "0.0.0.100(0.0.0.100):8", tSSLTransportParameters38);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1528");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        boolean boolean10 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):10", 103);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1529");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        boolean boolean8 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        boolean boolean12 = cassandraHost11.getLifo();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(", strArray25, false);
        tSSLTransportParameters33.setKeyStore("-1:32", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "127.0.0.1(127.0.0.1):-1", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1530");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):-1", (int) (byte) 9);
        int int7 = cassandraHost6.getPort();
        boolean boolean8 = cassandraHost6.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "CassandraClient<%s-%d>:-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1531");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.lang.String str12 = subject0.toString();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int18 = cassandraHost17.getMaxActive();
        cassandraHost17.setMaxWaitTimeWhenExhausted(33L);
        int int21 = cassandraHost17.getCassandraThriftSocketTimeout();
        java.lang.String str22 = cassandraHost17.getName();
        cassandraHost17.setMaxWaitTimeWhenExhausted(22L);
        cassandraHost17.setCassandraThriftSocketTimeout((int) (byte) 1);
        java.lang.String str27 = cassandraHost17.toString();
        int int28 = cassandraHost17.getMaxActive();
        boolean boolean29 = cassandraHost17.getLifo();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("51", strArray40);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):98", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1532");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.concurrent.atomic.AtomicLong atomicLong4 = new java.util.concurrent.atomic.AtomicLong(0L);
        long long5 = atomicLong4.get();
        long long7 = atomicLong4.getAndSet(9L);
        boolean boolean10 = atomicLong4.weakCompareAndSet((long) (short) -1, 0L);
        long long11 = atomicLong4.decrementAndGet();
        long long12 = atomicLong4.get();
        boolean boolean13 = subject0.equals((java.lang.Object) long12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) -1);
        cassandraHost16.setUseThriftFramedTransport(false);
        cassandraHost16.setUseSocketKeepalive(true);
        cassandraHost16.setUseSocketKeepalive(true);
        boolean boolean23 = cassandraHost16.isPerformNameResolution();
        javax.security.auth.Subject subject25 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet26 = subject25.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet27 = subject25.getPrivateCredentials();
        boolean boolean28 = subject25.isReadOnly();
        java.lang.String[] strArray37 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray37);
        boolean boolean40 = subject25.equals((java.lang.Object) tSSLTransportParameters39);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "0.0.0.0(0.0.0.0)(0.0.0.0(0.0.0.0)):9160", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1533");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100:102");
        cassandraHost8.setCassandraThriftSocketTimeout((int) (short) 31);
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray24, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "101", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1534");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("9160", (int) (short) 1);
        cassandraHost22.setMaxActive((int) '#');
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "1:9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1535");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost7.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str10 = cassandraHost7.getIp();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:0", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("12", strArray24, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1):-2", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1536");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean8 = atomicLong5.compareAndSet((long) 50, (-1L));
        boolean boolean9 = subject0.equals((java.lang.Object) 50);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPrivateCredentials();
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet12 = subject11.getPublicCredentials();
        subject11.setReadOnly();
        java.lang.String str14 = subject11.toString();
        java.lang.String str15 = subject11.toString();
        java.lang.String str16 = subject11.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong17 = new java.util.concurrent.atomic.AtomicLong();
        float float18 = atomicLong17.floatValue();
        long long20 = atomicLong17.getAndSet((long) (byte) 100);
        long long21 = atomicLong17.incrementAndGet();
        long long22 = atomicLong17.getAndIncrement();
        long long23 = atomicLong17.incrementAndGet();
        long long25 = atomicLong17.getAndSet((long) ' ');
        java.lang.String str26 = atomicLong17.toString();
        atomicLong17.set((long) (byte) 1);
        atomicLong17.lazySet((long) 50);
        long long31 = atomicLong17.decrementAndGet();
        boolean boolean32 = subject11.equals((java.lang.Object) long31);
        boolean boolean33 = subject0.equals((java.lang.Object) boolean32);
        java.util.Set<java.security.Principal> principalSet34 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost37 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long38 = cassandraHost37.getMaxWaitTimeWhenExhausted();
        cassandraHost37.setCassandraThriftSocketTimeout((-1));
        cassandraHost37.setMaxWaitTimeWhenExhausted(1L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost37, "35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1537");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1");
        java.lang.String str13 = cassandraHost12.toString();
        int int14 = cassandraHost12.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "184");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1538");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))");
        cassandraHost11.setLifo(true);
        boolean boolean14 = cassandraHost11.isPerformNameResolution();
        java.lang.String str15 = cassandraHost11.toString();
        long long16 = cassandraHost11.getMaxWaitTimeWhenExhausted();
        cassandraHost11.setUseSocketKeepalive(false);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):9160", strArray28);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9359", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1539");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("1", 0);
        cassandraHost8.setCassandraThriftSocketTimeout(0);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):52", strArray23);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "Subject:110", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1540");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet14 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet15 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost(":9160(:9160):11", (int) (short) 50);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):214");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1541");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("9269", (int) (byte) 10);
        java.lang.String[] strArray21 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.32", strArray21, true);
        tSSLTransportParameters30.setKeyStore("2", ":9160(:9160)", "18", "0(0.0.0.0):0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "127.0.0.1:10", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1542");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPrivateCredentials();
        boolean boolean10 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet11 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet14 = subject7.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet15 = subject7.getPrincipals();
        subject7.setReadOnly();
        boolean boolean17 = subject0.equals((java.lang.Object) subject7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9160", (int) (short) 9359);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray36, false);
        tSSLTransportParameters51.setTrustStore("102", "Subject(Subject):32", ":0", "11");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient57 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject7, cassandraHost20, ":0((:0()", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient57.equals(null)", !hKerberosThriftClient57.equals(null));
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1543");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        cassandraHost8.setCassandraThriftSocketTimeout((int) (short) 1);
        int int11 = cassandraHost8.getPort();
        java.lang.String str12 = cassandraHost8.getIp();
        boolean boolean13 = cassandraHost8.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "hi!(hi!)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1544");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98");
        java.lang.String[] strArray12 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):9160", strArray12, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "127.0.0.1(127.0.0.1):10", tSSLTransportParameters16);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1545");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int9 = cassandraHost8.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "-1:0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1546");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost2.setMaxWaitTimeWhenExhausted((long) 10);
        java.lang.String str5 = cassandraHost2.toString();
        cassandraHost2.setUseThriftFramedTransport(false);
        boolean boolean8 = cassandraHost2.getLifo();
        cassandraHost2.setUseThriftFramedTransport(true);
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet12 = subject11.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject11.getPrivateCredentials();
        boolean boolean14 = subject11.isReadOnly();
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24);
        boolean boolean28 = subject11.equals((java.lang.Object) tSSLTransportParameters27);
        boolean boolean29 = cassandraHost2.equals((java.lang.Object) subject11);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost31 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean33 = cassandraHost31.equals((java.lang.Object) 0.0f);
        int int34 = cassandraHost31.getCassandraThriftSocketTimeout();
        cassandraHost31.setUseSocketKeepalive(false);
        java.lang.String str37 = cassandraHost31.getHost();
        java.lang.String str38 = cassandraHost31.getHost();
        java.lang.String str39 = cassandraHost31.toString();
        boolean boolean40 = cassandraHost31.getUseThriftFramedTransport();
        boolean boolean41 = cassandraHost31.isPerformNameResolution();
        java.lang.String[] strArray52 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray52, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray52, false);
        tSSLTransportParameters57.setKeyStore("10", "(127.0.0.1)((127.0.0.1)):35", "214", "0.0.0.0(0.0.0.0):101");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient63 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject11, cassandraHost31, "CassandraClient<%s-%d>:32", tSSLTransportParameters57);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient63.equals(null)", !hKerberosThriftClient63.equals(null));
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1547");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("100");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100):9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):102", strArray36);
        tSSLTransportParameters47.setKeyStore("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))(127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))):9160", "9270");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient51 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "Subject:110", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient51.equals(null)", !hKerberosThriftClient51.equals(null));
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1548");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        java.lang.String str10 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean14 = cassandraHost12.equals((java.lang.Object) 0.0f);
        int int15 = cassandraHost12.getPort();
        java.lang.String str16 = cassandraHost12.getName();
        java.lang.String str17 = cassandraHost12.getHost();
        boolean boolean18 = cassandraHost12.getUseThriftFramedTransport();
        cassandraHost12.setUseThriftFramedTransport(false);
        boolean boolean21 = cassandraHost12.getUseThriftFramedTransport();
        java.lang.String[] strArray28 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        tSSLTransportParameters32.setTrustStore("0.0.0.32", "1", "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", "0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "214:9", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1549");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("100:35");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "10:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1550");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("11", 9268);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray26);
        tSSLTransportParameters37.setTrustStore("", "hi!(hi!):0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "9270", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1551");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        subject7.setReadOnly();
        java.lang.String str10 = subject7.toString();
        java.lang.String str11 = subject7.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean15 = cassandraHost13.equals((java.lang.Object) 0.0f);
        java.lang.String str16 = cassandraHost13.getName();
        boolean boolean17 = subject7.equals((java.lang.Object) cassandraHost13);
        java.lang.String str18 = cassandraHost13.toString();
        java.lang.String str19 = cassandraHost13.toString();
        java.lang.String[] strArray28 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray28);
        tSSLTransportParameters33.setTrustStore("Subject:35", "(127.0.0.1):0", "hi!", "Subject:\n");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))):9160", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1552");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean3 = cassandraHost2.getLifo();
        cassandraHost2.setMaxActive(9160);
        boolean boolean6 = cassandraHost2.getUseSocketKeepalive();
        boolean boolean7 = cassandraHost2.getUseThriftFramedTransport();
        cassandraHost2.setLifo(false);
        javax.security.auth.Subject subject10 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet11 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject10.getPrivateCredentials();
        boolean boolean13 = subject10.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        boolean boolean25 = subject10.equals((java.lang.Object) tSSLTransportParameters24);
        java.util.Set<java.lang.Object> objSet26 = subject10.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet27 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet28 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet29 = subject10.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 9);
        boolean boolean33 = subject10.equals((java.lang.Object) cassandraHost32);
        java.lang.String str34 = subject10.toString();
        boolean boolean35 = cassandraHost2.equals((java.lang.Object) subject10);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost38 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!):100", 9);
        java.lang.String str39 = cassandraHost38.getHost();
        boolean boolean40 = cassandraHost38.getUseSocketKeepalive();
        java.lang.String[] strArray49 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray49, false);
        tSSLTransportParameters55.setKeyStore("127.0.0.1(127.0.0.1):10", ":0");
        tSSLTransportParameters55.setTrustStore("0", "hi!(hi!):100", "208", ":0(:0):10");
        tSSLTransportParameters55.setKeyStore("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):10", "214", "hi!(hi!):0", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient69 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject10, cassandraHost38, "(127.0.0.1):0", tSSLTransportParameters55);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient69.equals(null)", !hKerberosThriftClient69.equals(null));
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1553");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        subject0.setReadOnly();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, false);
        tSSLTransportParameters54.setTrustStore("127.0.0.1", "hi!(hi!):9160");
        boolean boolean58 = subject0.equals((java.lang.Object) tSSLTransportParameters54);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost61 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):50", (int) (byte) -54);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!", "127.0.0.1", "-1", "Subject:\n" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters72 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray70, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters74 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:101", strArray70, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient75 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost61, "0(0.0.0.0):0", tSSLTransportParameters74);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient75.equals(null)", !hKerberosThriftClient75.equals(null));
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1554");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 35);
        boolean boolean13 = cassandraHost9.equals((java.lang.Object) 35);
        java.lang.String str14 = cassandraHost9.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "0(0.0.0.0):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1555");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        java.lang.String str9 = cassandraHost8.getName();
        int int10 = cassandraHost8.getCassandraThriftSocketTimeout();
        int int11 = cassandraHost8.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "-1:32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1556");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        boolean boolean9 = subject0.isReadOnly();
        boolean boolean10 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 10);
        cassandraHost13.setUseSocketKeepalive(true);
        java.lang.String str16 = cassandraHost13.getHost();
        cassandraHost13.setMaxActive(9);
        cassandraHost13.setLifo(true);
        cassandraHost13.setCassandraThriftSocketTimeout(9269);
        java.lang.String str23 = cassandraHost13.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "(127.0.0.1)((127.0.0.1))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1557");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.lang.String[] strArray7 = new java.lang.String[] { "(127.0.0.1)((127.0.0.1)):9260", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters8 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray7);
        boolean boolean9 = subject0.equals((java.lang.Object) tSSLTransportParameters8);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("-2", (int) (byte) 102);
        cassandraHost12.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, ":0(:0)(:0(:0)):97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1558");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("1");
        cassandraHost5.setCassandraThriftSocketTimeout((int) ' ');
        java.lang.String[] strArray19 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray19, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray19, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray19, true);
        tSSLTransportParameters26.setTrustStore("(127.0.0.1)((127.0.0.1)):1", "100:35", "(127.0.0.1):11", ":9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))))", tSSLTransportParameters26);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1559");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong4 = new java.util.concurrent.atomic.AtomicLong();
        float float5 = atomicLong4.floatValue();
        long long6 = atomicLong4.get();
        long long8 = atomicLong4.getAndSet(0L);
        long long9 = atomicLong4.incrementAndGet();
        atomicLong4.lazySet((long) (short) 102);
        boolean boolean12 = subject0.equals((java.lang.Object) atomicLong4);
        java.util.Set<java.lang.Object> objSet13 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) (byte) -2);
        java.lang.String str17 = cassandraHost16.getHost();
        java.lang.String str18 = cassandraHost16.getUrl();
        javax.security.auth.Subject subject21 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet22 = subject21.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject21.getPrivateCredentials();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray33, false);
        boolean boolean40 = subject21.equals((java.lang.Object) strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "9269:9160", tSSLTransportParameters42);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1560");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 10);
        boolean boolean7 = cassandraHost6.isPerformNameResolution();
        boolean boolean8 = subject0.equals((java.lang.Object) boolean7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0)", (int) (byte) 98);
        java.lang.String str12 = cassandraHost11.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "18");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1561");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):-2", (int) (short) 98);
        java.lang.String str7 = cassandraHost6.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "302");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1562");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160");
        long long9 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        boolean boolean10 = cassandraHost8.getUseSocketKeepalive();
        cassandraHost8.setCassandraThriftSocketTimeout((int) (short) 198);
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray24, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "hi!:9160", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1563");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.lang.String str8 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("1001", 2);
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0)(:0(:0)):97", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45", strArray28);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1564");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int6 = cassandraHost5.getPort();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray22, true);
        boolean boolean37 = cassandraHost5.equals((java.lang.Object) tSSLTransportParameters36);
        boolean boolean38 = cassandraHost5.getUseSocketKeepalive();
        cassandraHost5.setUseSocketKeepalive(false);
        cassandraHost5.setUseThriftFramedTransport(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "100(0.0.0.100):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1565");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("101:1", (int) (short) -1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1566");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("32", 50);
        cassandraHost25.setUseThriftFramedTransport(false);
        cassandraHost25.setMaxActive((int) (short) 9260);
        boolean boolean30 = subject0.equals((java.lang.Object) cassandraHost25);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost33 = new me.prettyprint.cassandra.service.CassandraHost(":9160(:9160):11");
        int int34 = cassandraHost33.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost33, "32(0.0.0.32):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1567");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", (int) (byte) 10);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "301");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1568");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("Subject", 50);
        cassandraHost20.setLifo(true);
        cassandraHost20.setMaxActive((int) (byte) 98);
        boolean boolean25 = cassandraHost20.getUseThriftFramedTransport();
        java.lang.String str26 = cassandraHost20.getIp();
        boolean boolean27 = cassandraHost20.getLifo();
        java.lang.String[] strArray36 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray36);
        tSSLTransportParameters41.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "100:0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "100(0.0.0.100)(100(0.0.0.100)):-1", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1569");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1:10", (int) (byte) 45);
        javax.security.auth.Subject subject13 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet14 = subject13.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet15 = subject13.getPrivateCredentials();
        boolean boolean16 = subject13.isReadOnly();
        java.lang.String[] strArray26 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray26);
        boolean boolean30 = subject13.equals((java.lang.Object) tSSLTransportParameters29);
        tSSLTransportParameters29.setTrustStore("11", "(127.0.0.1):9", "127.0.0.1(127.0.0.1)", "0.0.0.0(0.0.0.0):101");
        tSSLTransportParameters29.setKeyStore("127.0.0.1(127.0.0.1):10", "301");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "-1:1", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1570");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters18.setKeyStore("hi!", "");
        tSSLTransportParameters18.setTrustStore("", "hi!");
        tSSLTransportParameters18.setKeyStore("hi!", "hi!", "hi!", "hi!");
        boolean boolean30 = subject0.equals((java.lang.Object) "hi!");
        java.lang.String str31 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost33 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean35 = cassandraHost33.equals((java.lang.Object) 0.0f);
        int int36 = cassandraHost33.getCassandraThriftSocketTimeout();
        cassandraHost33.setUseSocketKeepalive(false);
        java.lang.String str39 = cassandraHost33.getHost();
        boolean boolean40 = cassandraHost33.getUseThriftFramedTransport();
        java.lang.String str41 = cassandraHost33.getHost();
        int int42 = cassandraHost33.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost33, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1571");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        javax.security.auth.Subject subject18 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet19 = subject18.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet20 = subject18.getPrincipals();
        subject18.setReadOnly();
        subject18.setReadOnly();
        java.util.Set<java.lang.Object> objSet23 = subject18.getPrivateCredentials();
        java.lang.Class<?> wildcardClass24 = subject18.getClass();
        boolean boolean25 = subject0.equals((java.lang.Object) subject18);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("-2");
        java.lang.String str28 = cassandraHost27.getHost();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101:1", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45", strArray41, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient51 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject18, cassandraHost27, "", tSSLTransportParameters50);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient51.equals(null)", !hKerberosThriftClient51.equals(null));
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1572");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0(0.0.0.0):9160");
        java.lang.String[] strArray16 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray16);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray16);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray16);
        tSSLTransportParameters19.setTrustStore("Subject:35", "hi!:9160", "32", "(127.0.0.1)");
        tSSLTransportParameters19.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "", tSSLTransportParameters19);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1573");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int8 = atomicLong7.intValue();
        boolean boolean9 = subject0.equals((java.lang.Object) int8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) 10);
        boolean boolean18 = cassandraHost15.isPerformNameResolution();
        cassandraHost15.setUseSocketKeepalive(false);
        java.lang.String[] strArray35 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9280", strArray35, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "98", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1574");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str7 = cassandraHost6.getName();
        boolean boolean8 = subject0.equals((java.lang.Object) str7);
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("100", (int) (short) 100);
        long long13 = cassandraHost12.getMaxWaitTimeWhenExhausted();
        java.lang.String str14 = cassandraHost12.getIp();
        java.util.concurrent.atomic.AtomicLong atomicLong15 = new java.util.concurrent.atomic.AtomicLong();
        float float16 = atomicLong15.floatValue();
        long long18 = atomicLong15.getAndSet((long) (byte) 100);
        long long19 = atomicLong15.incrementAndGet();
        long long20 = atomicLong15.getAndIncrement();
        long long21 = atomicLong15.incrementAndGet();
        long long23 = atomicLong15.getAndSet((long) ' ');
        java.lang.String str24 = atomicLong15.toString();
        atomicLong15.set((long) (byte) 1);
        long long27 = atomicLong15.longValue();
        long long29 = atomicLong15.getAndAdd((long) (short) 50);
        boolean boolean32 = atomicLong15.weakCompareAndSet((long) (byte) 110, 12L);
        boolean boolean33 = cassandraHost12.equals((java.lang.Object) atomicLong15);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray46, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray46, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):10", strArray46);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient55 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "127.0.0.1(127.0.0.1)", tSSLTransportParameters54);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient55.equals(null)", !hKerberosThriftClient55.equals(null));
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1575");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost5.setMaxActive((int) (short) 0);
        int int8 = cassandraHost5.getPort();
        cassandraHost5.setUseThriftFramedTransport(false);
        boolean boolean11 = cassandraHost5.getUseThriftFramedTransport();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):9160", strArray21, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", tSSLTransportParameters27);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1576");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160", (int) (byte) 0);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):102", strArray32);
        tSSLTransportParameters39.setTrustStore("102", "0");
        tSSLTransportParameters39.setKeyStore(":9160(:9160):11", "Subject:110", ":10", "44");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "104", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1577");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0)", 17);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "127");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1578");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPrivateCredentials();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray34, false);
        boolean boolean42 = subject0.equals((java.lang.Object) tSSLTransportParameters41);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost45 = new me.prettyprint.cassandra.service.CassandraHost("Subject:50", (int) (short) 102);
        java.lang.String str46 = cassandraHost45.toString();
        java.lang.String[] strArray58 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray58, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray58, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost45, "0.0.0.32", tSSLTransportParameters64);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1579");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", (int) (short) 10);
        cassandraHost8.setMaxWaitTimeWhenExhausted((long) 102);
        java.lang.String str11 = cassandraHost8.getUrl();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray22, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "301:9260", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1580");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):1", (int) (byte) -56);
        boolean boolean8 = cassandraHost7.getUseThriftFramedTransport();
        boolean boolean9 = subject0.equals((java.lang.Object) cassandraHost7);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray20, false);
        boolean boolean29 = subject0.equals((java.lang.Object) strArray20);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("9269:9160", 1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost32, "Subject(Subject)(Subject(Subject)):105");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1581");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str11 = cassandraHost10.getUrl();
        boolean boolean12 = cassandraHost10.isPerformNameResolution();
        java.util.concurrent.atomic.AtomicLong atomicLong14 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean15 = cassandraHost10.equals((java.lang.Object) atomicLong14);
        java.lang.String str16 = cassandraHost10.toString();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0:101", strArray35);
        tSSLTransportParameters51.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1)((127.0.0.1)):99", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1582");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost13.setMaxWaitTimeWhenExhausted((long) 10);
        cassandraHost13.setCassandraThriftSocketTimeout((int) (short) 0);
        cassandraHost13.setCassandraThriftSocketTimeout((-1));
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient21 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "Subject:35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient21.equals(null)", !hKerberosThriftClient21.equals(null));
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1583");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost(":100", (int) (byte) 9);
        java.lang.String str11 = cassandraHost10.getUrl();
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):102", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1)((127.0.0.1)):99", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1584");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)", (int) (byte) -1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1)((127.0.0.1)):102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1585");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str23 = cassandraHost22.getUrl();
        boolean boolean24 = cassandraHost22.isPerformNameResolution();
        java.util.concurrent.atomic.AtomicLong atomicLong26 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean27 = cassandraHost22.equals((java.lang.Object) atomicLong26);
        cassandraHost22.setLifo(true);
        cassandraHost22.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "hi!:9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1586");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost(":0((:0():98", (int) (short) 198);
        cassandraHost10.setUseThriftFramedTransport(false);
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(", strArray27);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):50", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1587");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String str21 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean25 = cassandraHost24.getLifo();
        cassandraHost24.setCassandraThriftSocketTimeout(100);
        javax.security.auth.Subject subject29 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet30 = subject29.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet31 = subject29.getPrincipals();
        subject29.setReadOnly();
        subject29.setReadOnly();
        java.util.Set<java.lang.Object> objSet34 = subject29.getPrivateCredentials();
        java.lang.String[] strArray46 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray46, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):9160", strArray46, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray46);
        boolean boolean54 = subject29.equals((java.lang.Object) tSSLTransportParameters53);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient55 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient55.equals(null)", !hKerberosThriftClient55.equals(null));
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1588");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters18.setKeyStore("hi!", "");
        tSSLTransportParameters18.setTrustStore("", "hi!");
        tSSLTransportParameters18.setKeyStore("hi!", "hi!", "hi!", "hi!");
        boolean boolean30 = subject0.equals((java.lang.Object) "hi!");
        boolean boolean31 = subject0.isReadOnly();
        boolean boolean32 = subject0.isReadOnly();
        java.lang.String str33 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost36 = new me.prettyprint.cassandra.service.CassandraHost("0", 102);
        java.lang.String[] strArray55 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray55, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray55, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray55, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray55, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters70 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray55, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("301:10", strArray55);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient72 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost36, ":9160:100", tSSLTransportParameters71);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient72.equals(null)", !hKerberosThriftClient72.equals(null));
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1589");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.util.Set<java.lang.Object> objSet12 = subject5.getPrivateCredentials();
        java.lang.String str13 = subject5.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (byte) 10);
        boolean boolean17 = cassandraHost16.getLifo();
        cassandraHost16.setUseSocketKeepalive(false);
        java.lang.String str20 = cassandraHost16.getUrl();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray32, false);
        tSSLTransportParameters39.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost16, "2", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1590");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        java.lang.String str10 = cassandraHost9.toString();
        boolean boolean11 = cassandraHost9.getUseSocketKeepalive();
        boolean boolean12 = cassandraHost9.getUseThriftFramedTransport();
        cassandraHost9.setMaxWaitTimeWhenExhausted((long) 103);
        java.lang.String str15 = cassandraHost9.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "hi!(hi!):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1591");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str9 = cassandraHost8.getName();
        java.lang.String str10 = cassandraHost8.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "50");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1592");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("101", (int) (short) 10);
        java.lang.String str12 = cassandraHost11.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "100(0.0.0.100)(100(0.0.0.100)):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1593");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        javax.security.auth.Subject subject6 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet7 = subject6.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject6.getPrivateCredentials();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray18, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray18, false);
        boolean boolean25 = subject6.equals((java.lang.Object) strArray18);
        boolean boolean26 = subject6.isReadOnly();
        java.util.Set<java.lang.Object> objSet27 = subject6.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet28 = subject6.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost31 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost31.setMaxActive((int) (byte) 10);
        boolean boolean34 = cassandraHost31.getUseThriftFramedTransport();
        cassandraHost31.setCassandraThriftSocketTimeout(9261);
        cassandraHost31.setMaxWaitTimeWhenExhausted(50L);
        java.lang.String str39 = cassandraHost31.getUrl();
        java.lang.String str40 = cassandraHost31.getName();
        boolean boolean41 = subject6.equals((java.lang.Object) cassandraHost31);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost31, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1594");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)", (-1));
        int int12 = cassandraHost11.getMaxActive();
        boolean boolean13 = cassandraHost11.getUseThriftFramedTransport();
        java.lang.String str14 = cassandraHost11.getIp();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray29);
        tSSLTransportParameters42.setTrustStore("hi!:9160", "(127.0.0.1)((127.0.0.1)):9260");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "32(0.0.0.32):50", tSSLTransportParameters42);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1595");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", (int) (byte) 53);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "Subject(Subject)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1596");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 11);
        int int8 = cassandraHost7.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:110", strArray22, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1597");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160");
        boolean boolean14 = subject0.equals((java.lang.Object) cassandraHost13);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 137);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "301");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1598");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet10 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9");
        java.lang.String str13 = cassandraHost12.getIp();
        java.lang.String[] strArray22 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("102", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100)", strArray22);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "198", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1599");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet21 = subject0.getPrincipals();
        java.lang.String str22 = subject0.toString();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 11);
        int int27 = cassandraHost26.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost29.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str32 = cassandraHost29.toString();
        cassandraHost29.setMaxActive(9160);
        cassandraHost29.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean37 = cassandraHost29.getUseThriftFramedTransport();
        cassandraHost29.setLifo(true);
        boolean boolean40 = cassandraHost26.equals((java.lang.Object) cassandraHost29);
        java.lang.String str41 = cassandraHost26.getHost();
        javax.security.auth.Subject subject45 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet46 = subject45.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet47 = subject45.getPrivateCredentials();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray57, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray57, false);
        boolean boolean64 = subject45.equals((java.lang.Object) strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101:1", strArray57, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient68 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "0.0.0.8", tSSLTransportParameters67);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient68.equals(null)", !hKerberosThriftClient68.equals(null));
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1600");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong9 = new java.util.concurrent.atomic.AtomicLong((long) '4');
        atomicLong9.set((long) 102);
        atomicLong9.lazySet(8L);
        boolean boolean16 = atomicLong9.weakCompareAndSet((long) 'a', (long) 9);
        boolean boolean19 = atomicLong9.weakCompareAndSet(9313L, (long) (byte) 110);
        atomicLong9.lazySet(9304L);
        boolean boolean22 = subject0.equals((java.lang.Object) atomicLong9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):100");
        cassandraHost24.setUseThriftFramedTransport(false);
        java.lang.String[] strArray39 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):1", strArray39, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1601");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPrivateCredentials();
        boolean boolean8 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject5.getPublicCredentials();
        boolean boolean13 = subject0.equals((java.lang.Object) objSet12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str18 = cassandraHost15.toString();
        cassandraHost15.setMaxActive(9160);
        cassandraHost15.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean23 = cassandraHost15.getUseThriftFramedTransport();
        boolean boolean24 = subject0.equals((java.lang.Object) boolean23);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet26 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("32", (int) (byte) -2);
        cassandraHost29.setUseSocketKeepalive(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "8");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1602");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        java.lang.String str10 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost13.setMaxWaitTimeWhenExhausted((long) 10);
        cassandraHost13.setCassandraThriftSocketTimeout((int) (short) 0);
        java.lang.String str18 = cassandraHost13.toString();
        cassandraHost13.setUseSocketKeepalive(false);
        java.lang.String str21 = cassandraHost13.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "hi!(hi!):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1603");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        java.lang.String[] strArray17 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9261", strArray17);
        boolean boolean23 = subject0.equals((java.lang.Object) strArray17);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost25.setMaxActive((int) (short) 0);
        int int28 = cassandraHost25.getPort();
        boolean boolean29 = cassandraHost25.getUseThriftFramedTransport();
        int int30 = cassandraHost25.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray52, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray52, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray52, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray52, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray52, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray52, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters70 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))", strArray52, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters72 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):100", strArray52, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters74 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32)(32(0.0.0.32))", strArray52, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters76 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9270", strArray52, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters78 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):52", strArray52, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient79 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", tSSLTransportParameters78);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient79.equals(null)", !hKerberosThriftClient79.equals(null));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1604");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.lang.String str8 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("98", (int) (byte) 99);
        cassandraHost11.setUseThriftFramedTransport(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):52");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1605");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray13);
        boolean boolean17 = subject0.equals((java.lang.Object) tSSLTransportParameters16);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("209");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray29, false);
        tSSLTransportParameters35.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", ":0(:0):10");
        tSSLTransportParameters35.setTrustStore("-1:0", "0.0.0.100(0.0.0.100):9260");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "100:35", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1606");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        int int11 = cassandraHost8.getCassandraThriftSocketTimeout();
        java.lang.String str12 = cassandraHost8.getName();
        boolean boolean13 = cassandraHost8.getUseThriftFramedTransport();
        cassandraHost8.setMaxActive((int) (short) 9);
        java.lang.String str16 = cassandraHost8.getHost();
        cassandraHost8.setUseSocketKeepalive(false);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32):50", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100:35", strArray36, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):35", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1607");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet14 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet15 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost18.setMaxWaitTimeWhenExhausted((long) 10);
        java.lang.String str21 = cassandraHost18.toString();
        cassandraHost18.setUseThriftFramedTransport(false);
        boolean boolean24 = cassandraHost18.getLifo();
        long long25 = cassandraHost18.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "1455");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1608");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean6 = cassandraHost5.getUseThriftFramedTransport();
        cassandraHost5.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost5.setMaxWaitTimeWhenExhausted(2L);
        java.util.concurrent.atomic.AtomicLong atomicLong12 = new java.util.concurrent.atomic.AtomicLong((long) (short) 102);
        int int13 = atomicLong12.intValue();
        long long15 = atomicLong12.addAndGet(199L);
        boolean boolean16 = cassandraHost5.equals((java.lang.Object) long15);
        int int17 = cassandraHost5.getCassandraThriftSocketTimeout();
        java.lang.String str18 = cassandraHost5.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "-1(-1):101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1609");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100", (-2));
        java.lang.String[] strArray23 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", strArray23, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "-1:102", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1610");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost6.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str9 = cassandraHost6.toString();
        cassandraHost6.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost6.setLifo(false);
        cassandraHost6.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "31");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1611");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        subject0.setReadOnly();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, false);
        tSSLTransportParameters54.setTrustStore("127.0.0.1", "hi!(hi!):9160");
        boolean boolean58 = subject0.equals((java.lang.Object) tSSLTransportParameters54);
        subject0.setReadOnly();
        boolean boolean60 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost63 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", 50);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost63, "9269(0.0.36.53):1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1612");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (short) 102);
        boolean boolean10 = subject0.equals((java.lang.Object) "127.0.0.1");
        java.util.Set<java.lang.Object> objSet11 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("0.0.1.45", 111);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray29, false);
        tSSLTransportParameters40.setTrustStore("", "100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "Subject:50", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1613");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):100", 17);
        java.lang.String str8 = cassandraHost7.toString();
        int int9 = cassandraHost7.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "127.0.0.1:9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1614");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):0", (int) (short) 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray21, false);
        tSSLTransportParameters31.setTrustStore("101", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1615");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost6.setMaxActive((int) (short) 0);
        int int9 = cassandraHost6.getPort();
        cassandraHost6.setUseThriftFramedTransport(false);
        cassandraHost6.setMaxActive((int) ' ');
        long long14 = cassandraHost6.getMaxWaitTimeWhenExhausted();
        boolean boolean15 = cassandraHost6.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "(127.0.0.1)((127.0.0.1)):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1616");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters18.setKeyStore("hi!", "");
        tSSLTransportParameters18.setTrustStore("", "hi!");
        tSSLTransportParameters18.setKeyStore("hi!", "hi!", "hi!", "hi!");
        boolean boolean30 = subject0.equals((java.lang.Object) "hi!");
        java.lang.String str31 = subject0.toString();
        java.lang.String str32 = subject0.toString();
        java.util.Set<java.lang.Object> objSet33 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost36 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) (byte) 0);
        int int37 = cassandraHost36.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost36, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):12");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1617");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):1", (int) (short) 102);
        long long10 = cassandraHost9.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "hi!");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1618");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost6.setUseThriftFramedTransport(true);
        int int9 = cassandraHost6.getMaxActive();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32)", strArray18);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "1:9260", tSSLTransportParameters24);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1619");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 10);
        cassandraHost12.setUseSocketKeepalive(true);
        java.lang.String str15 = cassandraHost12.getHost();
        java.lang.String[] strArray30 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray30, false);
        tSSLTransportParameters41.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "0(0.0.0.0):9160", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1620");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String str4 = subject0.toString();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):101", (int) (byte) 45);
        boolean boolean9 = cassandraHost8.getUseThriftFramedTransport();
        cassandraHost8.setMaxWaitTimeWhenExhausted(211L);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):35", strArray26, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1):102", tSSLTransportParameters38);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1621");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):32");
        boolean boolean5 = subject0.equals((java.lang.Object) cassandraHost4);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str10 = cassandraHost7.toString();
        int int11 = cassandraHost7.getMaxActive();
        boolean boolean12 = subject0.equals((java.lang.Object) cassandraHost7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", 102);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "100:0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1622");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (-1));
        cassandraHost7.setUseThriftFramedTransport(true);
        java.lang.String str10 = cassandraHost7.getHost();
        java.lang.String str11 = cassandraHost7.getUrl();
        boolean boolean12 = cassandraHost7.isPerformNameResolution();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("209", strArray31, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "32(0.0.0.32)(32(0.0.0.32)):0", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1623");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        subject0.setReadOnly();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("100(0.0.0.100):9160", (int) 'a');
        java.lang.String str8 = cassandraHost7.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "hi!(hi!):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1624");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.lang.String str7 = subject0.toString();
        java.lang.String str8 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean12 = cassandraHost11.getUseSocketKeepalive();
        boolean boolean13 = cassandraHost11.getLifo();
        java.lang.String str14 = cassandraHost11.getName();
        int int15 = cassandraHost11.getPort();
        cassandraHost11.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "33");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1625");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):50", (int) (byte) 110);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", (int) (byte) 0);
        boolean boolean13 = cassandraHost9.equals((java.lang.Object) cassandraHost12);
        java.lang.String[] strArray29 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", strArray29, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "-1:0", tSSLTransportParameters42);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1626");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("-1:101");
        cassandraHost5.setMaxActive(32);
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:32", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:110", strArray25);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "Subject(Subject):101", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1627");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost8.setMaxActive((int) (byte) 10);
        boolean boolean11 = cassandraHost8.getUseThriftFramedTransport();
        cassandraHost8.setCassandraThriftSocketTimeout(9261);
        cassandraHost8.setMaxWaitTimeWhenExhausted(50L);
        java.lang.String str16 = cassandraHost8.getUrl();
        java.lang.String str17 = cassandraHost8.toString();
        int int18 = cassandraHost8.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "-1:1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1628");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray20, true);
        tSSLTransportParameters27.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean31 = subject0.equals((java.lang.Object) tSSLTransportParameters27);
        java.util.Set<java.lang.Object> objSet32 = subject0.getPrivateCredentials();
        boolean boolean33 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet34 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost37 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean38 = cassandraHost37.getUseThriftFramedTransport();
        cassandraHost37.setMaxActive((int) (byte) -1);
        java.lang.String str41 = cassandraHost37.getHost();
        cassandraHost37.setLifo(false);
        java.lang.String[] strArray58 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray58, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray58, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray58);
        tSSLTransportParameters67.setKeyStore("32(0.0.0.32):-2", "32(0.0.0.32):50");
        tSSLTransportParameters67.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient73 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost37, "184:-2", tSSLTransportParameters67);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient73.equals(null)", !hKerberosThriftClient73.equals(null));
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1629");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str8 = cassandraHost7.getHost();
        boolean boolean9 = cassandraHost7.getUseSocketKeepalive();
        java.lang.String str10 = cassandraHost7.getName();
        cassandraHost7.setMaxWaitTimeWhenExhausted((-1L));
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", 101);
        cassandraHost15.setMaxActive(98);
        boolean boolean18 = cassandraHost7.equals((java.lang.Object) 98);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "0.0.1.45");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1630");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost9.setUseThriftFramedTransport(true);
        boolean boolean12 = cassandraHost7.equals((java.lang.Object) cassandraHost9);
        java.lang.String str13 = cassandraHost9.getUrl();
        cassandraHost9.setLifo(false);
        int int16 = cassandraHost9.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "Subject(Subject):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1631");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("-1:35");
        cassandraHost10.setMaxWaitTimeWhenExhausted((long) 9261);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "CassandraClient<%s-%d>");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1632");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("102");
        boolean boolean8 = cassandraHost7.getLifo();
        java.lang.String[] strArray17 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray17);
        tSSLTransportParameters22.setTrustStore("Subject:35", "(127.0.0.1):0", "hi!", "Subject:\n");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "8(0.0.0.8):60", tSSLTransportParameters22);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1633");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPublicCredentials();
        boolean boolean19 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("32", 50);
        cassandraHost22.setCassandraThriftSocketTimeout(0);
        cassandraHost22.setCassandraThriftSocketTimeout(0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1634");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("-1:101", (int) (byte) 102);
        java.lang.String str13 = cassandraHost12.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "100(0.0.0.100)(100(0.0.0.100)):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1635");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):1", (int) ' ');
        java.lang.String str14 = cassandraHost13.getName();
        boolean boolean15 = cassandraHost13.getLifo();
        long long16 = cassandraHost13.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "0.0.1.45");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1636");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet10 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean14 = cassandraHost12.equals((java.lang.Object) 0.0f);
        int int15 = cassandraHost12.getCassandraThriftSocketTimeout();
        cassandraHost12.setUseSocketKeepalive(false);
        cassandraHost12.setLifo(false);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str23 = cassandraHost22.getHost();
        boolean boolean24 = cassandraHost22.getUseSocketKeepalive();
        java.lang.String str25 = cassandraHost22.getName();
        boolean boolean26 = cassandraHost12.equals((java.lang.Object) cassandraHost22);
        boolean boolean27 = cassandraHost12.getUseThriftFramedTransport();
        java.lang.String str28 = cassandraHost12.getName();
        boolean boolean29 = subject0.equals((java.lang.Object) str28);
        boolean boolean30 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost33 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean34 = cassandraHost33.getUseThriftFramedTransport();
        cassandraHost33.setMaxActive((int) (byte) -1);
        int int37 = cassandraHost33.getCassandraThriftSocketTimeout();
        java.lang.String str38 = cassandraHost33.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost33, "101:1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1637");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost2.setMaxWaitTimeWhenExhausted((long) 10);
        java.lang.String str5 = cassandraHost2.toString();
        cassandraHost2.setUseThriftFramedTransport(false);
        boolean boolean8 = cassandraHost2.getLifo();
        cassandraHost2.setUseThriftFramedTransport(true);
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet12 = subject11.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject11.getPrivateCredentials();
        boolean boolean14 = subject11.isReadOnly();
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24);
        boolean boolean28 = subject11.equals((java.lang.Object) tSSLTransportParameters27);
        boolean boolean29 = cassandraHost2.equals((java.lang.Object) subject11);
        subject11.setReadOnly();
        javax.security.auth.Subject subject31 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet32 = subject31.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet33 = subject31.getPrincipals();
        subject31.setReadOnly();
        boolean boolean35 = subject31.isReadOnly();
        java.lang.String str36 = subject31.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong38 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int39 = atomicLong38.intValue();
        boolean boolean40 = subject31.equals((java.lang.Object) int39);
        java.util.Set<java.lang.Object> objSet41 = subject31.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost43 = new me.prettyprint.cassandra.service.CassandraHost("1");
        boolean boolean45 = cassandraHost43.equals((java.lang.Object) ":100");
        boolean boolean46 = subject31.equals((java.lang.Object) cassandraHost43);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject11, cassandraHost43, "0.0.0.10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1638");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong15 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean16 = cassandraHost13.equals((java.lang.Object) '#');
        java.lang.String str17 = cassandraHost13.getHost();
        java.lang.String str18 = cassandraHost13.getIp();
        int int19 = cassandraHost13.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!", "127.0.0.1", "-1", "Subject:\n" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:101", strArray28, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1639");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean27 = cassandraHost26.getUseThriftFramedTransport();
        boolean boolean28 = cassandraHost26.getUseSocketKeepalive();
        cassandraHost26.setCassandraThriftSocketTimeout((int) 'a');
        boolean boolean31 = cassandraHost26.getLifo();
        cassandraHost26.setUseSocketKeepalive(false);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!", "127.0.0.1", "-1", "Subject:\n" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:101", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject)", strArray43);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "Subject(Subject):9160", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1640");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        java.lang.String str20 = subject0.toString();
        boolean boolean21 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("12", (int) (byte) 44);
        int int25 = cassandraHost24.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray42, true);
        tSSLTransportParameters56.setTrustStore("(127.0.0.1)((127.0.0.1)):98", ":0(:0)(:0(:0)):97", "-1(-1):0", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):9");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient62 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "32(0.0.0.32):97", tSSLTransportParameters56);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient62.equals(null)", !hKerberosThriftClient62.equals(null));
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1641");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str8 = cassandraHost7.getIp();
        int int9 = cassandraHost7.getMaxActive();
        java.lang.String str10 = cassandraHost7.getUrl();
        boolean boolean11 = subject0.equals((java.lang.Object) cassandraHost7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("0:9160", 98);
        boolean boolean15 = subject0.equals((java.lang.Object) 98);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160");
        cassandraHost17.setMaxActive(98);
        cassandraHost17.setUseThriftFramedTransport(false);
        cassandraHost17.setUseSocketKeepalive(false);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray37, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray37, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):102", strArray37, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):52", strArray37, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray37, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "114", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1642");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", 0);
        boolean boolean10 = subject0.equals((java.lang.Object) "-1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0):10", (int) (byte) -56);
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray28);
        tSSLTransportParameters36.setKeyStore("(127.0.0.1)", "Subject(Subject):9160", "127.0.0.1(127.0.0.1)", "9269(0.0.36.53):1");
        tSSLTransportParameters36.setTrustStore("12", "0(0.0.0.0):9160", "(127.0.0.1)((127.0.0.1)):102", "CassandraClient<%s-%d>");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9260", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1643");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        subject0.setReadOnly();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("", 102);
        cassandraHost7.setUseThriftFramedTransport(true);
        cassandraHost7.setCassandraThriftSocketTimeout((int) (byte) 100);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters13.setKeyStore("hi!", "");
        tSSLTransportParameters13.setKeyStore("CassandraClient<%s-%d>", "CassandraClient<%s-%d>");
        tSSLTransportParameters13.requireClientAuth(true);
        tSSLTransportParameters13.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", "Subject:\n", "0.0.0.0", "0");
        tSSLTransportParameters13.setTrustStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "127.0.0.1(127.0.0.1):1");
        tSSLTransportParameters13.setTrustStore("32(0.0.0.32):-2", "CassandraClient<%s-%d>:-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "9260", tSSLTransportParameters13);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1644");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("32(0.0.0.32)(32(0.0.0.32)):-125", (int) (short) 9);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray25, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "Subject(Subject):50", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1645");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPublicCredentials();
        java.lang.String str10 = subject7.toString();
        boolean boolean11 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPublicCredentials();
        boolean boolean14 = subject0.equals((java.lang.Object) subject7);
        subject7.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9160", (int) (short) 9359);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)(hi!(hi!)):0", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("51", strArray31, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject7, cassandraHost18, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):17", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1646");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("-1:0");
        boolean boolean8 = cassandraHost7.getUseThriftFramedTransport();
        java.lang.String str9 = cassandraHost7.getIp();
        cassandraHost7.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "100(0.0.0.100):45");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1647");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.lang.String str12 = subject0.toString();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", (int) (byte) 100);
        cassandraHost17.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient21 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "0(0.0.0.0):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient21.equals(null)", !hKerberosThriftClient21.equals(null));
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1648");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", (int) (short) 0);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 0);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("209", (int) (byte) -2);
        int int16 = cassandraHost15.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1649");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str13 = cassandraHost12.getName();
        int int14 = cassandraHost12.getPort();
        cassandraHost12.setMaxActive((int) (byte) 97);
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        tSSLTransportParameters26.setTrustStore("hi!:9160", "CassandraClient<%s-%d>");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "Subject(Subject)", tSSLTransportParameters26);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1650");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("100:0", (int) (short) 50);
        cassandraHost6.setLifo(true);
        java.lang.String[] strArray26 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):9160", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):35", strArray26, true);
        tSSLTransportParameters41.setKeyStore("104", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))):50", "32", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):32");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "301:10", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1651");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("100(0.0.0.100):9160", 1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, "Subject(Subject):35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1652");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean18 = subject0.isReadOnly();
        java.lang.String str19 = subject0.toString();
        java.util.Set<java.lang.Object> objSet20 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160");
        cassandraHost23.setUseSocketKeepalive(false);
        int int26 = cassandraHost23.getPort();
        java.lang.String str27 = cassandraHost23.toString();
        boolean boolean28 = cassandraHost23.getUseSocketKeepalive();
        java.lang.String str29 = cassandraHost23.getName();
        java.lang.String str30 = cassandraHost23.getUrl();
        java.lang.String[] strArray44 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray44, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):50", strArray44, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):214", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1653");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        java.lang.String str6 = cassandraHost5.toString();
        boolean boolean7 = cassandraHost5.getUseSocketKeepalive();
        java.lang.String str8 = cassandraHost5.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "0.0.0.100:102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1654");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)(hi!(hi!)):0");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):10", strArray21);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1655");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet20 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):0", (int) (byte) -2);
        java.lang.String str24 = cassandraHost23.getHost();
        java.lang.String str25 = cassandraHost23.toString();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53)", strArray40, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "127.0.0.1(127.0.0.1):1", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1656");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160");
        boolean boolean14 = subject0.equals((java.lang.Object) cassandraHost13);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):0", (int) (byte) -2);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1657");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost11.setUseThriftFramedTransport(true);
        boolean boolean14 = cassandraHost9.equals((java.lang.Object) cassandraHost11);
        cassandraHost9.setUseSocketKeepalive(true);
        cassandraHost9.setMaxActive((int) (short) 111);
        java.lang.String str19 = cassandraHost9.getIp();
        java.lang.String[] strArray32 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray32, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "0.0.0.101", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1658");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.lang.String str7 = subject0.toString();
        boolean boolean8 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        cassandraHost11.setUseSocketKeepalive(false);
        cassandraHost11.setUseSocketKeepalive(false);
        int int16 = cassandraHost11.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "32(0.0.0.32):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1659");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int8 = atomicLong7.intValue();
        boolean boolean9 = subject0.equals((java.lang.Object) int8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPublicCredentials();
        java.lang.String str12 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("", 32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1660");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet12 = subject11.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet13 = subject11.getPrincipals();
        java.util.Set<java.lang.Object> objSet14 = subject11.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet15 = subject11.getPrincipals();
        java.util.Set<java.lang.Object> objSet16 = subject11.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject11.getPublicCredentials();
        java.lang.String str18 = subject11.toString();
        boolean boolean19 = subject0.equals((java.lang.Object) subject11);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean23 = cassandraHost21.equals((java.lang.Object) 0.0f);
        int int24 = cassandraHost21.getCassandraThriftSocketTimeout();
        cassandraHost21.setUseSocketKeepalive(false);
        cassandraHost21.setLifo(false);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost31 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str32 = cassandraHost31.getHost();
        boolean boolean33 = cassandraHost31.getUseSocketKeepalive();
        java.lang.String str34 = cassandraHost31.getName();
        boolean boolean35 = cassandraHost21.equals((java.lang.Object) cassandraHost31);
        boolean boolean36 = cassandraHost21.getUseThriftFramedTransport();
        cassandraHost21.setMaxWaitTimeWhenExhausted((long) 35);
        java.lang.String str39 = cassandraHost21.toString();
        cassandraHost21.setCassandraThriftSocketTimeout((int) (short) 199);
        cassandraHost21.setMaxActive((int) (short) 9359);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject11, cassandraHost21, "33");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1661");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str10 = cassandraHost9.getIp();
        java.lang.String str11 = cassandraHost9.getHost();
        int int12 = cassandraHost9.getPort();
        long long13 = cassandraHost9.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray26);
        tSSLTransportParameters34.setKeyStore(":9160", ":100", "9269", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "9270", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1662");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        boolean boolean7 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        boolean boolean12 = cassandraHost11.getLifo();
        java.lang.String str13 = cassandraHost11.getIp();
        javax.security.auth.Subject subject16 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet17 = subject16.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject16.getPrincipals();
        subject16.setReadOnly();
        boolean boolean20 = subject16.isReadOnly();
        java.lang.String str21 = subject16.toString();
        boolean boolean22 = subject16.isReadOnly();
        javax.security.auth.Subject subject23 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet24 = subject23.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet25 = subject23.getPrincipals();
        subject23.setReadOnly();
        boolean boolean27 = subject23.isReadOnly();
        java.lang.String str28 = subject23.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong30 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int31 = atomicLong30.intValue();
        boolean boolean32 = subject23.equals((java.lang.Object) int31);
        boolean boolean33 = subject23.isReadOnly();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray45, true);
        boolean boolean54 = subject23.equals((java.lang.Object) strArray45);
        boolean boolean55 = subject16.equals((java.lang.Object) strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9270", strArray45, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient58 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "0.0.0.10", tSSLTransportParameters57);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient58.equals(null)", !hKerberosThriftClient58.equals(null));
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1663");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray13);
        boolean boolean17 = subject0.equals((java.lang.Object) tSSLTransportParameters16);
        java.lang.String str18 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost21.setMaxActive((int) (byte) 10);
        boolean boolean24 = cassandraHost21.getUseThriftFramedTransport();
        java.util.concurrent.atomic.AtomicLong atomicLong26 = new java.util.concurrent.atomic.AtomicLong((long) (short) 0);
        boolean boolean27 = cassandraHost21.equals((java.lang.Object) (short) 0);
        cassandraHost21.setUseSocketKeepalive(false);
        cassandraHost21.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1664");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost(":9160", (int) (short) 11);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "-1:101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1665");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean23 = cassandraHost22.getLifo();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray37, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray37, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray37, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray37, false);
        boolean boolean51 = cassandraHost22.equals((java.lang.Object) false);
        cassandraHost22.setMaxActive((int) (short) 9260);
        long long54 = cassandraHost22.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters70 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray68, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray68);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters72 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray68);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters74 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray68, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters76 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray68, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters78 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray68, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters80 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):10", strArray68, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient81 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "0.0.0.10", tSSLTransportParameters80);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient81.equals(null)", !hKerberosThriftClient81.equals(null));
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1666");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("8");
        boolean boolean10 = cassandraHost9.getUseSocketKeepalive();
        cassandraHost9.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1)):-56");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1667");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPublicCredentials();
        javax.security.auth.Subject subject20 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet21 = subject20.getPublicCredentials();
        subject20.setReadOnly();
        java.lang.String str23 = subject20.toString();
        java.lang.String str24 = subject20.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean28 = cassandraHost26.equals((java.lang.Object) 0.0f);
        java.lang.String str29 = cassandraHost26.getName();
        boolean boolean30 = subject20.equals((java.lang.Object) cassandraHost26);
        java.lang.String str31 = cassandraHost26.toString();
        int int32 = cassandraHost26.getPort();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost34 = new me.prettyprint.cassandra.service.CassandraHost(":0");
        boolean boolean35 = cassandraHost26.equals((java.lang.Object) cassandraHost34);
        cassandraHost34.setMaxActive(198);
        java.lang.String[] strArray53 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray53, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray53, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray53, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray53, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost34, ":0(:0)(:0(:0)):97", tSSLTransportParameters65);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1668");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str8 = cassandraHost7.getIp();
        java.lang.String str9 = cassandraHost7.getHost();
        java.lang.String str10 = cassandraHost7.getIp();
        boolean boolean11 = cassandraHost7.getLifo();
        javax.security.auth.Subject subject12 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet13 = subject12.getPublicCredentials();
        subject12.setReadOnly();
        java.lang.String str15 = subject12.toString();
        java.lang.String str16 = subject12.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean20 = cassandraHost18.equals((java.lang.Object) 0.0f);
        java.lang.String str21 = cassandraHost18.getName();
        boolean boolean22 = subject12.equals((java.lang.Object) cassandraHost18);
        int int23 = cassandraHost18.getCassandraThriftSocketTimeout();
        cassandraHost18.setLifo(false);
        boolean boolean26 = cassandraHost7.equals((java.lang.Object) cassandraHost18);
        java.lang.String[] strArray35 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray35);
        tSSLTransportParameters40.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "100:0");
        tSSLTransportParameters40.setTrustStore("9", "Subject(Subject):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1669");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("100", (int) (short) 100);
        long long6 = cassandraHost5.getMaxWaitTimeWhenExhausted();
        java.lang.String str7 = cassandraHost5.getIp();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray16, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray16);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray16);
        java.lang.Class<?> wildcardClass21 = strArray16.getClass();
        boolean boolean22 = cassandraHost5.equals((java.lang.Object) wildcardClass21);
        cassandraHost5.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "32(0.0.0.32):97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1670");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost42 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100:102", (int) (short) 60);
        boolean boolean43 = cassandraHost42.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost42, "hi!(hi!)(hi!(hi!)):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1671");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("32", 50);
        cassandraHost25.setUseThriftFramedTransport(false);
        cassandraHost25.setMaxActive((int) (short) 9260);
        boolean boolean30 = subject0.equals((java.lang.Object) cassandraHost25);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost34 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str35 = cassandraHost34.getUrl();
        boolean boolean36 = cassandraHost34.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost34, "0.0.0.100(0.0.0.100):9269");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1672");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        subject0.setReadOnly();
        boolean boolean21 = subject0.isReadOnly();
        java.lang.String str22 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", (int) (short) 400);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "50");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1673");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        boolean boolean17 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9");
        int int21 = cassandraHost20.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1674");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str10 = cassandraHost7.toString();
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost7.setLifo(false);
        java.lang.String str15 = cassandraHost7.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "1001");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1675");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.lang.String str12 = subject0.toString();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str17 = cassandraHost16.getIp();
        java.lang.String str18 = cassandraHost16.getHost();
        int int19 = cassandraHost16.getPort();
        long long20 = cassandraHost16.getMaxWaitTimeWhenExhausted();
        cassandraHost16.setCassandraThriftSocketTimeout(9160);
        java.lang.String str23 = cassandraHost16.getUrl();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray41, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray41, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:52", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("11", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100):9260", strArray41);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "(127.0.0.1)((127.0.0.1)):-2", tSSLTransportParameters58);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1676");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean18 = subject0.isReadOnly();
        java.lang.String str19 = subject0.toString();
        java.util.Set<java.lang.Object> objSet20 = subject0.getPublicCredentials();
        javax.security.auth.Subject subject21 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet22 = subject21.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject21.getPrivateCredentials();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray33, false);
        boolean boolean40 = subject21.equals((java.lang.Object) strArray33);
        boolean boolean41 = subject21.isReadOnly();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray51, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray51);
        boolean boolean57 = subject21.equals((java.lang.Object) strArray51);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost60 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        boolean boolean61 = cassandraHost60.getLifo();
        boolean boolean62 = subject21.equals((java.lang.Object) cassandraHost60);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient64 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost60, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient64.equals(null)", !hKerberosThriftClient64.equals(null));
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1677");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "13");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1678");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long12 = cassandraHost11.getMaxWaitTimeWhenExhausted();
        cassandraHost11.setLifo(false);
        boolean boolean15 = cassandraHost11.getLifo();
        cassandraHost11.setMaxActive((int) (byte) 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32)(32(0.0.0.32))", strArray26, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "1001", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1679");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost5.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str8 = cassandraHost5.toString();
        int int9 = cassandraHost5.getMaxActive();
        java.lang.String str10 = cassandraHost5.getName();
        boolean boolean11 = cassandraHost5.isPerformNameResolution();
        boolean boolean13 = cassandraHost5.equals((java.lang.Object) 9270L);
        java.lang.String[] strArray31 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray31);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "-2:-2", tSSLTransportParameters45);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1680");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("0", 9160);
        boolean boolean11 = cassandraHost10.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "100(0.0.0.100):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1681");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str8 = cassandraHost7.getIp();
        int int9 = cassandraHost7.getMaxActive();
        java.lang.String str10 = cassandraHost7.getUrl();
        boolean boolean11 = subject0.equals((java.lang.Object) cassandraHost7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        boolean boolean15 = cassandraHost14.getLifo();
        java.lang.String str16 = cassandraHost14.toString();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray33, true);
        tSSLTransportParameters49.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):12", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1682");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str22 = subject0.toString();
        java.lang.String str23 = subject0.toString();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet25 = subject0.getPublicCredentials();
        java.lang.String str26 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("Subject:50", (int) (short) 102);
        java.lang.String str30 = cassandraHost29.getName();
        java.lang.String[] strArray41 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray41);
        tSSLTransportParameters44.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "Subject:35", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1683");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray25);
        tSSLTransportParameters36.setKeyStore("CassandraClient<%s-%d>:10", "127.0.0.1(127.0.0.1):9160");
        boolean boolean40 = subject0.equals((java.lang.Object) "CassandraClient<%s-%d>:10");
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost44 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        java.lang.String str45 = cassandraHost44.toString();
        cassandraHost44.setUseSocketKeepalive(false);
        int int48 = cassandraHost44.getPort();
        cassandraHost44.setCassandraThriftSocketTimeout((int) (byte) 12);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost44, "0.0.0.32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1684");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", (int) '#');
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "0.0.0.100(0.0.0.100):8");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1685");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost9.setMaxActive((int) (short) 0);
        int int12 = cassandraHost9.getCassandraThriftSocketTimeout();
        java.lang.String str13 = cassandraHost9.getIp();
        boolean boolean14 = cassandraHost9.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "11");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1686");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost(":0", (int) 'a');
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "Subject:110");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1687");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPrivateCredentials();
        boolean boolean8 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject5.getPublicCredentials();
        boolean boolean13 = subject0.equals((java.lang.Object) objSet12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):1", (int) (short) 50);
        cassandraHost16.setUseSocketKeepalive(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "-1(-1)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1688");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean25 = cassandraHost23.equals((java.lang.Object) 0.0f);
        int int26 = cassandraHost23.getCassandraThriftSocketTimeout();
        java.lang.String str27 = cassandraHost23.getName();
        java.lang.String str28 = cassandraHost23.getUrl();
        java.lang.String str29 = cassandraHost23.getIp();
        java.lang.String str30 = cassandraHost23.getIp();
        java.lang.String[] strArray45 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray45);
        tSSLTransportParameters53.requireClientAuth(true);
        tSSLTransportParameters53.requireClientAuth(true);
        tSSLTransportParameters53.setTrustStore("hi!(hi!)(hi!(hi!))", ":0(:0):-1", "0.0.0.0:101", "(127.0.0.1):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient63 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "32(0.0.0.32):-125", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient63.equals(null)", !hKerberosThriftClient63.equals(null));
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1689");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost15.setUseThriftFramedTransport(true);
        boolean boolean18 = cassandraHost13.equals((java.lang.Object) cassandraHost15);
        int int19 = cassandraHost15.getCassandraThriftSocketTimeout();
        java.lang.String str20 = cassandraHost15.getIp();
        boolean boolean21 = cassandraHost15.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1690");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 100);
        atomicLong7.set((long) (short) 10);
        boolean boolean10 = subject0.equals((java.lang.Object) (short) 10);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        boolean boolean14 = cassandraHost13.getUseThriftFramedTransport();
        java.lang.String str15 = cassandraHost13.getIp();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):32", (int) (byte) -123);
        boolean boolean19 = cassandraHost13.equals((java.lang.Object) cassandraHost18);
        java.lang.String str20 = cassandraHost13.getUrl();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray36, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient51 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "9280(0.0.36.64):98", tSSLTransportParameters50);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient51.equals(null)", !hKerberosThriftClient51.equals(null));
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1691");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean14 = cassandraHost13.isPerformNameResolution();
        cassandraHost13.setUseThriftFramedTransport(true);
        cassandraHost13.setUseSocketKeepalive(false);
        boolean boolean19 = cassandraHost13.getLifo();
        boolean boolean20 = cassandraHost13.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1692");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPublicCredentials();
        java.lang.String str10 = subject7.toString();
        boolean boolean11 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPublicCredentials();
        boolean boolean14 = subject0.equals((java.lang.Object) subject7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost(":0", (-1));
        boolean boolean18 = subject0.equals((java.lang.Object) cassandraHost17);
        boolean boolean19 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9);
        java.lang.String str23 = cassandraHost22.getUrl();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:101", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40, true);
        boolean boolean59 = cassandraHost22.equals((java.lang.Object) tSSLTransportParameters58);
        boolean boolean60 = subject0.equals((java.lang.Object) cassandraHost22);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost63 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        cassandraHost63.setCassandraThriftSocketTimeout((int) (short) 1);
        int int66 = cassandraHost63.getPort();
        java.lang.String str67 = cassandraHost63.getIp();
        boolean boolean68 = cassandraHost63.isPerformNameResolution();
        java.lang.String str69 = cassandraHost63.getHost();
        long long70 = cassandraHost63.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient72 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost63, "0.0.0.0(0.0.0.0):101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient72.equals(null)", !hKerberosThriftClient72.equals(null));
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1693");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPrivateCredentials();
        boolean boolean8 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject5.getPublicCredentials();
        boolean boolean13 = subject0.equals((java.lang.Object) objSet12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str18 = cassandraHost15.toString();
        cassandraHost15.setMaxActive(9160);
        cassandraHost15.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean23 = cassandraHost15.getUseThriftFramedTransport();
        boolean boolean24 = subject0.equals((java.lang.Object) boolean23);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet26 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet27 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost30 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0)", 1);
        cassandraHost30.setMaxActive(9268);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32):50", strArray45);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient55 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost30, "(127.0.0.1)((127.0.0.1)):-2", tSSLTransportParameters54);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient55.equals(null)", !hKerberosThriftClient55.equals(null));
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1694");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", (int) '#');
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, ":0(:0)(:0(:0)):35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1695");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):102", strArray28, true);
        boolean boolean37 = subject0.equals((java.lang.Object) "127.0.0.1(127.0.0.1):102");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost40 = new me.prettyprint.cassandra.service.CassandraHost("98", 97);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost40, "9561");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1696");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        boolean boolean8 = cassandraHost7.getLifo();
        java.lang.String str9 = cassandraHost7.toString();
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100):9260", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray28);
        tSSLTransportParameters46.setKeyStore("Subject(Subject)", "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):102", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "31");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "-1(-1):35", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1697");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong9 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 100);
        long long10 = atomicLong9.longValue();
        long long11 = atomicLong9.getAndIncrement();
        long long12 = atomicLong9.getAndIncrement();
        java.lang.String str13 = atomicLong9.toString();
        long long14 = atomicLong9.getAndDecrement();
        atomicLong9.set(9260L);
        boolean boolean17 = subject0.equals((java.lang.Object) atomicLong9);
        java.util.Set<java.lang.Object> objSet18 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        boolean boolean22 = cassandraHost21.getLifo();
        java.lang.String str23 = cassandraHost21.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "100:1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1698");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) '4');
        java.lang.String str10 = cassandraHost7.getHost();
        java.lang.String str11 = cassandraHost7.getName();
        cassandraHost7.setMaxActive(100);
        cassandraHost7.setLifo(false);
        int int16 = cassandraHost7.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))(127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1699");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int6 = cassandraHost5.getPort();
        int int7 = cassandraHost5.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "8");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1700");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        java.util.Set<java.security.Principal> principalSet20 = subject0.getPrincipals();
        java.lang.String[] strArray33 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray33);
        boolean boolean42 = subject0.equals((java.lang.Object) "100");
        java.util.Set<java.security.Principal> principalSet43 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost46 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100", (int) (byte) 10);
        int int47 = cassandraHost46.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost46, "9269(0.0.36.53):1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1701");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        java.lang.String str12 = cassandraHost11.toString();
        boolean boolean13 = cassandraHost11.getUseSocketKeepalive();
        boolean boolean14 = cassandraHost11.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "127.0.0.1(127.0.0.1):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1702");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean9 = cassandraHost7.equals((java.lang.Object) 0.0f);
        int int10 = cassandraHost7.getCassandraThriftSocketTimeout();
        cassandraHost7.setMaxActive((int) '4');
        java.lang.String str13 = cassandraHost7.toString();
        java.lang.String str14 = cassandraHost7.getHost();
        boolean boolean15 = cassandraHost7.getUseThriftFramedTransport();
        java.lang.String[] strArray24 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32):-125", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.1", strArray24);
        tSSLTransportParameters31.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "209:-2", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1703");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):52", (int) (short) 11);
        cassandraHost7.setMaxActive((int) (short) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.32", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):35", strArray24);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "CassandraClient<%s-%d>:100", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1704");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) (byte) 98);
        int int8 = cassandraHost7.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):12");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1705");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost(":0", (int) (short) 10);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1706");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.lang.String[] strArray14 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray14);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray14);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray14);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray14);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray14);
        tSSLTransportParameters19.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "100:0");
        boolean boolean23 = subject0.equals((java.lang.Object) "100:0");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):52", (int) (short) 32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, ":60");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1707");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong25 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean26 = cassandraHost23.equals((java.lang.Object) '#');
        java.lang.String str27 = cassandraHost23.getHost();
        boolean boolean28 = cassandraHost20.equals((java.lang.Object) cassandraHost23);
        cassandraHost23.setLifo(false);
        boolean boolean31 = cassandraHost23.isPerformNameResolution();
        java.lang.String[] strArray45 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        tSSLTransportParameters54.setTrustStore("1", "127.0.0.1(127.0.0.1):102", "209", "127.0.0.1(127.0.0.1):10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient60 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "hi!(hi!)", tSSLTransportParameters54);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient60.equals(null)", !hKerberosThriftClient60.equals(null));
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1708");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray20, true);
        tSSLTransportParameters27.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean31 = subject0.equals((java.lang.Object) tSSLTransportParameters27);
        java.util.Set<java.lang.Object> objSet32 = subject0.getPrivateCredentials();
        boolean boolean33 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet34 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost37 = new me.prettyprint.cassandra.service.CassandraHost("9269", (int) (short) 9);
        boolean boolean38 = cassandraHost37.getLifo();
        boolean boolean39 = cassandraHost37.getUseThriftFramedTransport();
        boolean boolean40 = cassandraHost37.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost37, "CassandraClient<%s-%d>:10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1709");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        int int11 = cassandraHost8.getCassandraThriftSocketTimeout();
        java.lang.String str12 = cassandraHost8.getName();
        boolean boolean13 = cassandraHost8.getUseThriftFramedTransport();
        java.lang.String str14 = cassandraHost8.toString();
        long long15 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        cassandraHost8.setCassandraThriftSocketTimeout((int) (short) 8);
        int int18 = cassandraHost8.getPort();
        java.lang.String str19 = cassandraHost8.getIp();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!:9160", "127.0.0.1(127.0.0.1):102" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.1.45", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:10", strArray27, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, ":0(:0):97", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1710");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("-2", (int) (byte) 102);
        cassandraHost11.setMaxWaitTimeWhenExhausted(50L);
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", strArray28, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "100:1", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1711");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean8 = cassandraHost7.getUseSocketKeepalive();
        cassandraHost7.setCassandraThriftSocketTimeout(35);
        java.lang.String str11 = cassandraHost7.toString();
        java.lang.String str12 = cassandraHost7.getIp();
        int int13 = cassandraHost7.getMaxActive();
        java.lang.String[] strArray21 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray21);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "198", tSSLTransportParameters25);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1712");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))", (int) (short) 100);
        int int7 = cassandraHost6.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "100(0.0.0.100):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1713");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters18.setKeyStore("hi!", "");
        tSSLTransportParameters18.setTrustStore("", "hi!");
        tSSLTransportParameters18.setKeyStore("hi!", "hi!", "hi!", "hi!");
        boolean boolean30 = subject0.equals((java.lang.Object) "hi!");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost33 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long34 = cassandraHost33.getMaxWaitTimeWhenExhausted();
        cassandraHost33.setCassandraThriftSocketTimeout((-1));
        cassandraHost33.setMaxWaitTimeWhenExhausted(1L);
        cassandraHost33.setMaxActive(0);
        cassandraHost33.setMaxActive(301);
        cassandraHost33.setLifo(false);
        java.lang.String[] strArray53 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray53, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray53, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):9160", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32)(32(0.0.0.32))", strArray53, false);
        tSSLTransportParameters60.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient63 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost33, "209", tSSLTransportParameters60);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient63.equals(null)", !hKerberosThriftClient63.equals(null));
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1714");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        java.util.Set<java.security.Principal> principalSet20 = subject0.getPrincipals();
        java.lang.String[] strArray33 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray33);
        boolean boolean42 = subject0.equals((java.lang.Object) "100");
        java.util.Set<java.security.Principal> principalSet43 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet44 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost47 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean48 = cassandraHost47.getUseSocketKeepalive();
        boolean boolean49 = cassandraHost47.getLifo();
        java.lang.String str50 = cassandraHost47.getName();
        java.lang.String str51 = cassandraHost47.getHost();
        java.lang.String str52 = cassandraHost47.getIp();
        boolean boolean53 = cassandraHost47.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient55 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost47, "12");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient55.equals(null)", !hKerberosThriftClient55.equals(null));
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1715");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):32");
        boolean boolean5 = subject0.equals((java.lang.Object) cassandraHost4);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str10 = cassandraHost7.toString();
        int int11 = cassandraHost7.getMaxActive();
        boolean boolean12 = subject0.equals((java.lang.Object) cassandraHost7);
        java.util.concurrent.atomic.AtomicLong atomicLong14 = new java.util.concurrent.atomic.AtomicLong((long) (-1));
        boolean boolean15 = subject0.equals((java.lang.Object) atomicLong14);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100", (int) (byte) 10);
        java.lang.String str19 = cassandraHost18.toString();
        int int20 = cassandraHost18.getMaxActive();
        boolean boolean21 = cassandraHost18.getUseSocketKeepalive();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray34, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "Subject:110", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1716");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost9.setMaxActive((int) (short) 0);
        int int12 = cassandraHost9.getPort();
        long long13 = cassandraHost9.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray25, false);
        tSSLTransportParameters32.requireClientAuth(true);
        tSSLTransportParameters32.setKeyStore("(127.0.0.1):1", "hi!(hi!):9160", "100(0.0.0.100)", ":0(");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1):0", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1717");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int8 = atomicLong7.intValue();
        boolean boolean9 = subject0.equals((java.lang.Object) int8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong19 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean20 = cassandraHost17.equals((java.lang.Object) '#');
        java.lang.String str21 = cassandraHost17.getHost();
        boolean boolean22 = cassandraHost14.equals((java.lang.Object) cassandraHost17);
        boolean boolean23 = cassandraHost17.getLifo();
        javax.security.auth.Subject subject25 = new javax.security.auth.Subject();
        subject25.setReadOnly();
        java.util.Set<java.security.Principal> principalSet27 = subject25.getPrincipals();
        java.util.Set<java.lang.Object> objSet28 = subject25.getPublicCredentials();
        java.lang.String[] strArray32 = new java.lang.String[] { "(127.0.0.1)((127.0.0.1)):9260", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray32);
        boolean boolean34 = subject25.equals((java.lang.Object) tSSLTransportParameters33);
        tSSLTransportParameters33.setKeyStore("209", "Subject:\n");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "221", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1718");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String[] strArray17 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray17, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):35", strArray17, true);
        tSSLTransportParameters29.requireClientAuth(false);
        boolean boolean32 = subject0.equals((java.lang.Object) tSSLTransportParameters29);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost35 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost37 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost37.setUseThriftFramedTransport(true);
        boolean boolean40 = cassandraHost35.equals((java.lang.Object) cassandraHost37);
        java.lang.String str41 = cassandraHost37.getUrl();
        cassandraHost37.setLifo(false);
        int int44 = cassandraHost37.getPort();
        long long45 = cassandraHost37.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost37, "(127.0.0.1):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1719");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost(":102", 100);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "hi!(hi!)(hi!(hi!)):9261");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1720");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean10 = cassandraHost9.getLifo();
        cassandraHost9.setCassandraThriftSocketTimeout(100);
        cassandraHost9.setMaxActive(0);
        java.lang.String str15 = cassandraHost9.getUrl();
        cassandraHost9.setMaxWaitTimeWhenExhausted((long) (byte) 103);
        boolean boolean18 = cassandraHost9.getUseThriftFramedTransport();
        boolean boolean19 = subject0.equals((java.lang.Object) boolean18);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean23 = cassandraHost21.equals((java.lang.Object) 0.0f);
        int int24 = cassandraHost21.getCassandraThriftSocketTimeout();
        cassandraHost21.setMaxActive((int) '4');
        boolean boolean27 = cassandraHost21.getLifo();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost30 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long31 = cassandraHost30.getMaxWaitTimeWhenExhausted();
        cassandraHost30.setCassandraThriftSocketTimeout((int) (short) -1);
        cassandraHost30.setUseThriftFramedTransport(true);
        cassandraHost30.setMaxWaitTimeWhenExhausted(201L);
        boolean boolean38 = cassandraHost21.equals((java.lang.Object) cassandraHost30);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray57, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray57, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray57, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray57, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray57, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters73 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:101", strArray57, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters75 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray57, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters77 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:50", strArray57, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient78 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost30, "100(0.0.0.100)(100(0.0.0.100)):99", tSSLTransportParameters77);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient78.equals(null)", !hKerberosThriftClient78.equals(null));
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1721");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("101", (int) (short) 10);
        java.lang.String[] strArray17 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray17);
        tSSLTransportParameters21.setTrustStore("hi!", "(127.0.0.1)((127.0.0.1)):35");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "100(0.0.0.100)(100(0.0.0.100)):100", tSSLTransportParameters21);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1722");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPublicCredentials();
        java.lang.String str10 = subject7.toString();
        boolean boolean11 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPublicCredentials();
        boolean boolean14 = subject0.equals((java.lang.Object) subject7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)", 10);
        boolean boolean18 = cassandraHost17.isPerformNameResolution();
        cassandraHost17.setLifo(false);
        cassandraHost17.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject7, cassandraHost17, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1723");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.concurrent.atomic.AtomicLong atomicLong1 = new java.util.concurrent.atomic.AtomicLong();
        float float2 = atomicLong1.floatValue();
        long long3 = atomicLong1.get();
        int int4 = atomicLong1.intValue();
        boolean boolean7 = atomicLong1.weakCompareAndSet((long) 100, (long) ' ');
        int int8 = atomicLong1.intValue();
        boolean boolean9 = subject0.equals((java.lang.Object) atomicLong1);
        java.lang.String str10 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("10", (int) (byte) 100);
        java.lang.String str14 = cassandraHost13.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1724");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        boolean boolean8 = subject0.isReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        java.lang.String str11 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("");
        int int14 = cassandraHost13.getMaxActive();
        cassandraHost13.setUseThriftFramedTransport(true);
        cassandraHost13.setMaxWaitTimeWhenExhausted(101L);
        int int19 = cassandraHost13.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient21 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "Subject(Subject):99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient21.equals(null)", !hKerberosThriftClient21.equals(null));
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1725");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean6 = cassandraHost5.getUseThriftFramedTransport();
        cassandraHost5.setUseThriftFramedTransport(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1726");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        long long16 = atomicLong7.longValue();
        atomicLong7.set(99L);
        int int19 = atomicLong7.intValue();
        boolean boolean20 = subject0.equals((java.lang.Object) atomicLong7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean24 = cassandraHost23.getUseThriftFramedTransport();
        boolean boolean25 = cassandraHost23.getUseSocketKeepalive();
        cassandraHost23.setCassandraThriftSocketTimeout((int) 'a');
        boolean boolean28 = cassandraHost23.getUseThriftFramedTransport();
        int int29 = cassandraHost23.getPort();
        boolean boolean30 = cassandraHost23.isPerformNameResolution();
        int int31 = cassandraHost23.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray51, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray51, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray51, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray51, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("8", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray51, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject)", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray51, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient72 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "32", tSSLTransportParameters71);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient72.equals(null)", !hKerberosThriftClient72.equals(null));
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1727");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100", (int) (short) 221);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "214");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1728");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.lang.String str8 = subject5.toString();
        java.lang.String str9 = subject5.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) 0.0f);
        java.lang.String str14 = cassandraHost11.getName();
        boolean boolean15 = subject5.equals((java.lang.Object) cassandraHost11);
        java.lang.String str16 = cassandraHost11.toString();
        java.lang.String str17 = cassandraHost11.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1729");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong4 = new java.util.concurrent.atomic.AtomicLong();
        float float5 = atomicLong4.floatValue();
        long long6 = atomicLong4.get();
        long long8 = atomicLong4.getAndSet(0L);
        long long9 = atomicLong4.incrementAndGet();
        atomicLong4.lazySet((long) (short) 102);
        boolean boolean12 = subject0.equals((java.lang.Object) atomicLong4);
        java.util.Set<java.lang.Object> objSet13 = subject0.getPublicCredentials();
        javax.security.auth.Subject subject14 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet15 = subject14.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet16 = subject14.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet17 = subject14.getPrincipals();
        java.util.Set<java.security.Principal> principalSet18 = subject14.getPrincipals();
        java.util.Set<java.security.Principal> principalSet19 = subject14.getPrincipals();
        java.lang.String str20 = subject14.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost23.setMaxActive((int) (short) 11);
        boolean boolean26 = subject14.equals((java.lang.Object) (short) 11);
        subject14.setReadOnly();
        boolean boolean28 = subject0.equals((java.lang.Object) subject14);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost31 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.1", 60);
        javax.security.auth.Subject subject35 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet36 = subject35.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet37 = subject35.getPrincipals();
        subject35.setReadOnly();
        boolean boolean39 = subject35.isReadOnly();
        java.lang.String str40 = subject35.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong42 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int43 = atomicLong42.intValue();
        boolean boolean44 = subject35.equals((java.lang.Object) int43);
        boolean boolean45 = subject35.isReadOnly();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray57, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray57, true);
        boolean boolean66 = subject35.equals((java.lang.Object) strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:10", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32):-125", strArray57);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient69 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost31, "32(0.0.0.32)", tSSLTransportParameters68);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient69.equals(null)", !hKerberosThriftClient69.equals(null));
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1730");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean9 = cassandraHost8.getLifo();
        int int10 = cassandraHost8.getPort();
        long long11 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1731");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost(":9160");
        cassandraHost8.setUseSocketKeepalive(true);
        java.lang.String[] strArray18 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray18, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray18, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:35", strArray18, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "209:-2", tSSLTransportParameters24);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1732");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (byte) 10);
        cassandraHost9.setCassandraThriftSocketTimeout((int) (short) 1);
        java.lang.String str12 = cassandraHost9.toString();
        java.lang.String str13 = cassandraHost9.getIp();
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32):-125", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "100(0.0.0.100):100", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1733");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))):9160", (int) (byte) 44);
        java.lang.String[] strArray20 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray20, true);
        tSSLTransportParameters27.setKeyStore("9269(0.0.36.53)", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):52");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", tSSLTransportParameters27);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1734");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean15 = cassandraHost14.getUseSocketKeepalive();
        cassandraHost14.setCassandraThriftSocketTimeout(35);
        java.lang.String str18 = cassandraHost14.toString();
        java.lang.String str19 = cassandraHost14.getIp();
        java.lang.String str20 = cassandraHost14.getName();
        cassandraHost14.setMaxWaitTimeWhenExhausted(400L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "2");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1735");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost10.setMaxActive((int) (byte) 10);
        boolean boolean13 = cassandraHost10.getUseThriftFramedTransport();
        java.lang.String str14 = cassandraHost10.getUrl();
        cassandraHost10.setUseSocketKeepalive(false);
        boolean boolean17 = cassandraHost10.isPerformNameResolution();
        java.lang.String str18 = cassandraHost10.getIp();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):50", strArray32);
        tSSLTransportParameters40.setKeyStore(":0(", "100(0.0.0.100):100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "9280(0.0.36.64):98", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1736");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)", 10);
        boolean boolean12 = cassandraHost11.isPerformNameResolution();
        cassandraHost11.setLifo(false);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):9160", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):99", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":100", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10:100", strArray33);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "0.0.0.0:101", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1737");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", (int) (short) 9359);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("115", strArray20);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost4, "0.0.1.45", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1738");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray20, true);
        tSSLTransportParameters27.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean31 = subject0.equals((java.lang.Object) tSSLTransportParameters27);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet33 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost36 = new me.prettyprint.cassandra.service.CassandraHost("Subject", (int) (byte) -1);
        int int37 = cassandraHost36.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost36, ":0((:0()");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1739");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) 0.0f);
        int int14 = cassandraHost11.getCassandraThriftSocketTimeout();
        java.lang.String str15 = cassandraHost11.getName();
        int int16 = cassandraHost11.getCassandraThriftSocketTimeout();
        java.lang.String str17 = cassandraHost11.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "2");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1740");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPrivateCredentials();
        boolean boolean8 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject5.getPublicCredentials();
        boolean boolean13 = subject0.equals((java.lang.Object) objSet12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str18 = cassandraHost15.toString();
        cassandraHost15.setMaxActive(9160);
        cassandraHost15.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean23 = cassandraHost15.getUseThriftFramedTransport();
        boolean boolean24 = subject0.equals((java.lang.Object) boolean23);
        java.util.Set<java.lang.Object> objSet25 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52", (int) (byte) -1);
        cassandraHost28.setUseSocketKeepalive(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "0.0.0.100(0.0.0.100):8");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1741");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!):9160", 35);
        boolean boolean13 = cassandraHost12.getUseSocketKeepalive();
        int int14 = cassandraHost12.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "51");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1742");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        boolean boolean10 = cassandraHost9.getUseThriftFramedTransport();
        int int11 = cassandraHost9.getMaxActive();
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray27, false);
        tSSLTransportParameters37.setTrustStore("101", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160");
        tSSLTransportParameters37.requireClientAuth(false);
        tSSLTransportParameters37.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):98", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1743");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        java.lang.String str23 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160");
        long long26 = cassandraHost25.getMaxWaitTimeWhenExhausted();
        boolean boolean27 = cassandraHost25.getLifo();
        cassandraHost25.setLifo(true);
        java.lang.String[] strArray42 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray42, true);
        tSSLTransportParameters49.setTrustStore("9261", "CassandraClient<%s-%d>:-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "100(0.0.0.100)(100(0.0.0.100)):102", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1744");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost41 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean43 = cassandraHost41.equals((java.lang.Object) 0.0f);
        int int44 = cassandraHost41.getPort();
        java.lang.String str45 = cassandraHost41.getName();
        cassandraHost41.setMaxActive((int) (short) 20);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost41, "-1:35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1745");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):1", 301);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100):9260", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):100", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0)", strArray24, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.0", tSSLTransportParameters38);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1746");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):1", (int) (byte) -56);
        boolean boolean8 = cassandraHost7.getUseThriftFramedTransport();
        boolean boolean9 = subject0.equals((java.lang.Object) cassandraHost7);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray20, false);
        boolean boolean29 = subject0.equals((java.lang.Object) strArray20);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long33 = cassandraHost32.getMaxWaitTimeWhenExhausted();
        cassandraHost32.setCassandraThriftSocketTimeout((-1));
        cassandraHost32.setMaxWaitTimeWhenExhausted(1L);
        cassandraHost32.setMaxActive(0);
        java.lang.String str40 = cassandraHost32.toString();
        int int41 = cassandraHost32.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray52, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", strArray52);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient58 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost32, "0.0.0.100", tSSLTransportParameters57);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient58.equals(null)", !hKerberosThriftClient58.equals(null));
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1747");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str7 = cassandraHost6.getName();
        boolean boolean8 = subject0.equals((java.lang.Object) str7);
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("100(0.0.0.100)(100(0.0.0.100)):1");
        cassandraHost11.setUseSocketKeepalive(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray22, false);
        tSSLTransportParameters28.setTrustStore("", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "32(0.0.0.32)(32(0.0.0.32))", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1748");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("98", (int) (byte) 50);
        java.lang.String[] strArray19 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray19, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        boolean boolean24 = cassandraHost9.equals((java.lang.Object) "");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100)(100(0.0.0.100)):100", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100:1", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):102", strArray39, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "0.0.0.100(0.0.0.100):45", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1749");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        subject0.setReadOnly();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, false);
        tSSLTransportParameters54.setTrustStore("127.0.0.1", "hi!(hi!):9160");
        boolean boolean58 = subject0.equals((java.lang.Object) tSSLTransportParameters54);
        subject0.setReadOnly();
        javax.security.auth.Subject subject60 = new javax.security.auth.Subject();
        subject60.setReadOnly();
        subject60.setReadOnly();
        java.util.Set<java.lang.Object> objSet63 = subject60.getPublicCredentials();
        subject60.setReadOnly();
        java.lang.String str65 = subject60.toString();
        java.util.Set<java.lang.Object> objSet66 = subject60.getPrivateCredentials();
        boolean boolean67 = subject0.equals((java.lang.Object) subject60);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost69 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        int int70 = cassandraHost69.getMaxActive();
        java.lang.String str71 = cassandraHost69.getIp();
        cassandraHost69.setMaxWaitTimeWhenExhausted(10L);
        boolean boolean74 = cassandraHost69.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient76 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost69, "9468");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient76.equals(null)", !hKerberosThriftClient76.equals(null));
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1750");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters12 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray10, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray10, false);
        boolean boolean15 = subject0.equals((java.lang.Object) "Subject:\n");
        subject0.setReadOnly();
        boolean boolean17 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", (int) (byte) 99);
        boolean boolean21 = cassandraHost20.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, ":0(:0):97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1751");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("-1:32", 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("209", strArray39, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient58 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "8(0.0.0.8):60", tSSLTransportParameters57);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient58.equals(null)", !hKerberosThriftClient58.equals(null));
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1752");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", 101);
        cassandraHost6.setMaxActive(98);
        java.lang.String str9 = cassandraHost6.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1753");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        boolean boolean7 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        cassandraHost11.setCassandraThriftSocketTimeout((int) (short) 1);
        int int14 = cassandraHost11.getPort();
        java.lang.String str15 = cassandraHost11.getName();
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray27, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "Subject(Subject):52", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1754");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("100", 0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "9(0.0.0.9):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1755");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet21 = subject0.getPrincipals();
        java.lang.String str22 = subject0.toString();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str27 = cassandraHost26.getUrl();
        boolean boolean28 = cassandraHost26.isPerformNameResolution();
        java.util.concurrent.atomic.AtomicLong atomicLong30 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean31 = cassandraHost26.equals((java.lang.Object) atomicLong30);
        cassandraHost26.setLifo(true);
        boolean boolean34 = cassandraHost26.getUseSocketKeepalive();
        cassandraHost26.setUseThriftFramedTransport(false);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray50, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray50);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray50);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray50, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray50, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray50, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray50);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient62 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "9468", tSSLTransportParameters61);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient62.equals(null)", !hKerberosThriftClient62.equals(null));
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1756");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("32", 50);
        cassandraHost25.setUseThriftFramedTransport(false);
        cassandraHost25.setMaxActive((int) (short) 9260);
        boolean boolean30 = subject0.equals((java.lang.Object) cassandraHost25);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost33 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean35 = cassandraHost33.equals((java.lang.Object) 0.0f);
        int int36 = cassandraHost33.getCassandraThriftSocketTimeout();
        java.lang.String str37 = cassandraHost33.getName();
        boolean boolean38 = cassandraHost33.getUseThriftFramedTransport();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray55, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray55, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100):97", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):50", strArray55, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):10", strArray55);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient69 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost33, "(127.0.0.1):35", tSSLTransportParameters68);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient69.equals(null)", !hKerberosThriftClient69.equals(null));
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1757");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.lang.String str7 = subject0.toString();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0(0.0.0.0)", (int) (short) 9311);
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100:102", strArray24);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "9160", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1758");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        java.lang.String str13 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):10", (int) (short) 31);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "100(0.0.0.100)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1759");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong25 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean26 = cassandraHost23.equals((java.lang.Object) '#');
        java.lang.String str27 = cassandraHost23.getHost();
        boolean boolean28 = cassandraHost20.equals((java.lang.Object) cassandraHost23);
        cassandraHost23.setLifo(false);
        boolean boolean31 = cassandraHost23.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "411");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1760");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) (byte) 0);
        java.lang.String str11 = cassandraHost10.getUrl();
        cassandraHost10.setMaxActive((int) (short) 50);
        java.lang.String str14 = cassandraHost10.toString();
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("102", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):97", strArray27, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "301:9260", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1761");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        boolean boolean7 = subject0.isReadOnly();
        boolean boolean9 = subject0.equals((java.lang.Object) 108L);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        boolean boolean11 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("");
        int int14 = cassandraHost13.getMaxActive();
        cassandraHost13.setUseThriftFramedTransport(true);
        cassandraHost13.setMaxWaitTimeWhenExhausted(101L);
        int int19 = cassandraHost13.getMaxActive();
        java.lang.String[] strArray32 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0)", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):11", strArray32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "0.0.1.45", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1762");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100(0.0.0.100):9160");
        cassandraHost6.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "-1:1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1763");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):1", (int) (short) 102);
        int int9 = cassandraHost8.getMaxActive();
        int int10 = cassandraHost8.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1764");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)(hi!(hi!)):9261", (int) (byte) 45);
        java.lang.String str7 = cassandraHost6.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "100:35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1765");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", 97);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "-1:35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1766");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):102", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)(hi!(hi!)):9261", 97);
        int int23 = cassandraHost22.getPort();
        long long24 = cassandraHost22.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("102", strArray35, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "100(0.0.0.100)(100(0.0.0.100))", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1767");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost7.setUseThriftFramedTransport(true);
        boolean boolean10 = cassandraHost7.getLifo();
        long long11 = cassandraHost7.getMaxWaitTimeWhenExhausted();
        boolean boolean12 = cassandraHost7.isPerformNameResolution();
        java.lang.String[] strArray29 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1768");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)", 60);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "(127.0.0.1):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1769");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long9 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        cassandraHost8.setCassandraThriftSocketTimeout((-1));
        cassandraHost8.setMaxWaitTimeWhenExhausted(9269L);
        cassandraHost8.setMaxWaitTimeWhenExhausted(118L);
        int int16 = cassandraHost8.getPort();
        java.lang.String[] strArray25 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray25, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "Subject(Subject):52", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1770");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String str4 = subject0.toString();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        int int11 = cassandraHost8.getPort();
        java.lang.String str12 = cassandraHost8.getName();
        boolean boolean13 = cassandraHost8.getUseSocketKeepalive();
        int int14 = cassandraHost8.getPort();
        int int15 = cassandraHost8.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.101", strArray28, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "103", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1771");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", 98);
        java.lang.String str10 = cassandraHost9.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1772");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 9);
        boolean boolean23 = subject0.equals((java.lang.Object) cassandraHost22);
        java.util.Set<java.security.Principal> principalSet24 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", (int) (byte) 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray46, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray46, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray46, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):1", strArray46);
        tSSLTransportParameters62.setKeyStore("-1", "127.0.0.1(127.0.0.1):10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, "-1(-1)", tSSLTransportParameters62);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1773");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet20 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (byte) -2);
        cassandraHost23.setMaxActive(50);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1774");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>:-1");
        long long9 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        java.lang.String str10 = cassandraHost8.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1775");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost9.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str12 = cassandraHost9.getHost();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray24, false);
        boolean boolean34 = cassandraHost9.equals((java.lang.Object) strArray24);
        java.lang.String str35 = cassandraHost9.getIp();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray50, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray50);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray50);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray50, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray50, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray50);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", strArray50, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray50);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient63 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):35", tSSLTransportParameters62);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient63.equals(null)", !hKerberosThriftClient63.equals(null));
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1776");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost(":102", 100);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, ":0(:0)(:0(:0)):97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1777");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str9 = cassandraHost8.getHost();
        java.lang.String str10 = cassandraHost8.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0(0.0.0.0)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1778");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters18.setKeyStore("hi!", "");
        tSSLTransportParameters18.setTrustStore("", "hi!");
        tSSLTransportParameters18.setKeyStore("hi!", "hi!", "hi!", "hi!");
        boolean boolean30 = subject0.equals((java.lang.Object) "hi!");
        java.lang.String str31 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost34 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (byte) 10);
        cassandraHost34.setLifo(false);
        boolean boolean37 = cassandraHost34.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost34, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1779");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!):100", 9);
        java.lang.String str12 = cassandraHost11.getHost();
        javax.security.auth.Subject subject14 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet15 = subject14.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet16 = subject14.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet17 = subject14.getPrincipals();
        java.util.Set<java.security.Principal> principalSet18 = subject14.getPrincipals();
        java.util.Set<java.security.Principal> principalSet19 = subject14.getPrincipals();
        java.lang.String str20 = subject14.toString();
        boolean boolean21 = subject14.isReadOnly();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray32);
        boolean boolean42 = subject14.equals((java.lang.Object) tSSLTransportParameters41);
        tSSLTransportParameters41.setTrustStore("hi!(hi!)(hi!(hi!)):9160", "(127.0.0.1):35");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):52", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1780");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray13);
        boolean boolean17 = subject0.equals((java.lang.Object) tSSLTransportParameters16);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost20.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str23 = cassandraHost20.getHost();
        cassandraHost20.setMaxActive(100);
        cassandraHost20.setMaxActive(100);
        cassandraHost20.setLifo(true);
        cassandraHost20.setUseSocketKeepalive(false);
        java.lang.String[] strArray37 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray37, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "32(0.0.0.32)(32(0.0.0.32))(32(0.0.0.32)(32(0.0.0.32)))(32(0.0.0.32)(32(0.0.0.32))(32(0.0.0.32)(32(0.0.0.32)))):0", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1781");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 9160);
        cassandraHost22.setUseSocketKeepalive(false);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0)", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9160", strArray45, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "(127.0.0.1)((127.0.0.1)):9260", tSSLTransportParameters65);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1782");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):-1", (-1));
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "hi!(hi!)(hi!(hi!)):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1783");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", (int) (short) 0);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 0);
        java.lang.String str13 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):9160", (int) (short) 221);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "0.0.0.100(0.0.0.100):45");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1784");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100:1", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):9160", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("221", strArray20);
        boolean boolean33 = subject0.equals((java.lang.Object) tSSLTransportParameters32);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost36 = new me.prettyprint.cassandra.service.CassandraHost("98", (int) (byte) 50);
        java.lang.String[] strArray46 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray46, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46);
        boolean boolean51 = cassandraHost36.equals((java.lang.Object) "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost36, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1785");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        int int10 = cassandraHost9.getMaxActive();
        java.lang.String str11 = cassandraHost9.getName();
        cassandraHost9.setCassandraThriftSocketTimeout(102);
        boolean boolean14 = cassandraHost9.getLifo();
        java.lang.String str15 = cassandraHost9.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "Subject:35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1786");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str9 = cassandraHost8.getIp();
        int int10 = cassandraHost8.getMaxActive();
        int int11 = cassandraHost8.getMaxActive();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray25, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "9459", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1787");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet12 = subject11.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet13 = subject11.getPrincipals();
        java.util.Set<java.lang.Object> objSet14 = subject11.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet15 = subject11.getPrincipals();
        java.util.Set<java.lang.Object> objSet16 = subject11.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject11.getPublicCredentials();
        java.lang.String str18 = subject11.toString();
        boolean boolean19 = subject0.equals((java.lang.Object) subject11);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("-1:35");
        cassandraHost21.setMaxWaitTimeWhenExhausted((long) 9261);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject11, cassandraHost21, "221:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1788");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean7 = subject0.equals((java.lang.Object) "127.0.0.1(127.0.0.1):-1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("9269:9160", 1);
        cassandraHost10.setMaxWaitTimeWhenExhausted(0L);
        cassandraHost10.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "32(0.0.0.32):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1789");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet20 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("-1:0");
        boolean boolean23 = cassandraHost22.getUseThriftFramedTransport();
        java.lang.String str24 = cassandraHost22.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "(127.0.0.1)((127.0.0.1))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1790");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean12 = cassandraHost11.getUseSocketKeepalive();
        long long13 = cassandraHost11.getMaxWaitTimeWhenExhausted();
        int int14 = cassandraHost11.getMaxActive();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(", strArray19);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1)):98", tSSLTransportParameters21);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1791");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 100);
        atomicLong7.set((long) (short) 10);
        boolean boolean10 = subject0.equals((java.lang.Object) (short) 10);
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):52", (int) (byte) 10);
        java.lang.String[] strArray29 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        tSSLTransportParameters40.setTrustStore("CassandraClient<%s-%d>", "127.0.0.1(127.0.0.1):10");
        tSSLTransportParameters40.setTrustStore("CassandraClient<%s-%d>", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", "(127.0.0.1):100", "0.0.0.0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "CassandraClient<%s-%d>:-1", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1792");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("0");
        java.lang.String str10 = cassandraHost9.getIp();
        boolean boolean11 = cassandraHost9.getLifo();
        cassandraHost9.setMaxActive((int) (short) 52);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, ":60");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1793");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)(hi!(hi!)):9261", (int) (short) 11);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "Subject(Subject):99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1794");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (short) 52);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "9460");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1795");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("11", 0);
        boolean boolean8 = cassandraHost7.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1796");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String[] strArray17 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):9160", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray17);
        boolean boolean25 = subject0.equals((java.lang.Object) tSSLTransportParameters24);
        java.util.Set<java.security.Principal> principalSet26 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 10);
        cassandraHost29.setUseSocketKeepalive(true);
        java.lang.String str32 = cassandraHost29.getHost();
        cassandraHost29.setUseSocketKeepalive(true);
        cassandraHost29.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "9561");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1797");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("100");
        cassandraHost5.setCassandraThriftSocketTimeout((int) (byte) 53);
        java.lang.String str8 = cassandraHost5.toString();
        java.lang.String str9 = cassandraHost5.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "9270");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1798");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean9 = cassandraHost7.equals((java.lang.Object) 0.0f);
        cassandraHost7.setUseSocketKeepalive(false);
        cassandraHost7.setLifo(true);
        java.lang.String str14 = cassandraHost7.getName();
        java.lang.String str15 = cassandraHost7.toString();
        java.lang.String str16 = cassandraHost7.getHost();
        boolean boolean17 = cassandraHost7.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1799");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean8 = atomicLong5.compareAndSet((long) 50, (-1L));
        boolean boolean9 = subject0.equals((java.lang.Object) 50);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):-2", (int) (short) 98);
        java.lang.String str13 = cassandraHost12.getHost();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!", "127.0.0.1", "-1", "Subject:\n" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:101", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray23);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "Subject:\n", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1800");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        boolean boolean40 = subject5.isReadOnly();
        javax.security.auth.Subject subject41 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet42 = subject41.getPublicCredentials();
        subject41.setReadOnly();
        java.lang.String str44 = subject41.toString();
        java.lang.String str45 = subject41.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost47 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean49 = cassandraHost47.equals((java.lang.Object) 0.0f);
        java.lang.String str50 = cassandraHost47.getName();
        boolean boolean51 = subject41.equals((java.lang.Object) cassandraHost47);
        java.lang.String str52 = cassandraHost47.toString();
        int int53 = cassandraHost47.getPort();
        java.lang.String str54 = cassandraHost47.toString();
        cassandraHost47.setUseThriftFramedTransport(true);
        boolean boolean57 = cassandraHost47.getUseSocketKeepalive();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters59.setKeyStore("hi!", "");
        tSSLTransportParameters59.setTrustStore("", "hi!");
        tSSLTransportParameters59.setTrustStore("", "CassandraClient<%s-%d>", "", "");
        tSSLTransportParameters59.setKeyStore("0.0.0.100", "(127.0.0.1)((127.0.0.1))", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", "-1:0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient76 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost47, "0.0.0.0(0.0.0.0):101", tSSLTransportParameters59);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient76.equals(null)", !hKerberosThriftClient76.equals(null));
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1801");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("", 102);
        java.lang.String str9 = cassandraHost8.getUrl();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("11", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray20, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.32", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1802");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost12.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str15 = cassandraHost12.getIp();
        java.lang.String str16 = cassandraHost12.getName();
        cassandraHost12.setUseSocketKeepalive(true);
        int int19 = cassandraHost12.getMaxActive();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray31, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "(127.0.0.1)((127.0.0.1)):9260", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1803");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("32(0.0.0.32):-1", (int) (short) 10);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "51");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1804");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", 101);
        cassandraHost9.setMaxActive(98);
        cassandraHost9.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "hi!:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1805");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.util.Set<java.lang.Object> objSet12 = subject5.getPrivateCredentials();
        java.lang.String str13 = subject5.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", (int) (byte) 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9", strArray31);
        tSSLTransportParameters40.setKeyStore("12", "Subject(Subject):101");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost16, "221", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1806");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0");
        cassandraHost11.setCassandraThriftSocketTimeout((int) (short) -1);
        java.lang.String str14 = cassandraHost11.getHost();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray19);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "8", tSSLTransportParameters21);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1807");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))):50", (int) (short) 9);
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost13.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str16 = cassandraHost13.getHost();
        cassandraHost13.setMaxActive(100);
        cassandraHost13.setMaxActive(100);
        java.lang.String str21 = cassandraHost13.getUrl();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100):0", strArray35, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "9320", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1808");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost9.setUseThriftFramedTransport(true);
        boolean boolean12 = cassandraHost9.getUseThriftFramedTransport();
        cassandraHost9.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "-1(-1)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1809");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "0.0.0.0(0.0.0.0)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1810");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean13 = cassandraHost12.getUseSocketKeepalive();
        cassandraHost12.setCassandraThriftSocketTimeout(35);
        java.lang.String str16 = cassandraHost12.toString();
        java.lang.String str17 = cassandraHost12.getIp();
        int int18 = cassandraHost12.getMaxActive();
        cassandraHost12.setLifo(true);
        cassandraHost12.setMaxWaitTimeWhenExhausted(215L);
        java.lang.String[] strArray32 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("102", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100)", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9160", strArray32, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "208", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1811");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong21 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 100);
        long long23 = atomicLong21.addAndGet((long) 9160);
        float float24 = atomicLong21.floatValue();
        long long25 = atomicLong21.getAndIncrement();
        double double26 = atomicLong21.doubleValue();
        boolean boolean27 = subject0.equals((java.lang.Object) atomicLong21);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean31 = cassandraHost29.equals((java.lang.Object) 0.0f);
        int int32 = cassandraHost29.getCassandraThriftSocketTimeout();
        cassandraHost29.setUseSocketKeepalive(false);
        java.lang.String str35 = cassandraHost29.getHost();
        java.lang.String str36 = cassandraHost29.getHost();
        java.lang.String str37 = cassandraHost29.toString();
        cassandraHost29.setLifo(false);
        java.lang.String str40 = cassandraHost29.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1812");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray15, true);
        boolean boolean24 = subject0.equals((java.lang.Object) tSSLTransportParameters23);
        java.util.Set<java.lang.Object> objSet25 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost28.setMaxActive((-1));
        java.lang.String str31 = cassandraHost28.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "100:0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1813");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)(hi!(hi!)):9261", (int) (byte) 45);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "hi!(hi!):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1814");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))):9160", 42);
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet12 = subject11.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject11.getPrivateCredentials();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray23, false);
        boolean boolean30 = subject11.equals((java.lang.Object) strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray23, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "52", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1815");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean9 = cassandraHost8.getLifo();
        cassandraHost8.setMaxActive(9160);
        boolean boolean12 = cassandraHost8.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "hi!:9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1816");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", 0);
        cassandraHost9.setLifo(false);
        cassandraHost9.setCassandraThriftSocketTimeout((int) (byte) -123);
        boolean boolean14 = subject0.equals((java.lang.Object) cassandraHost9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("-1:32", 13);
        int int18 = cassandraHost17.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "114");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1817");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        java.lang.String str9 = cassandraHost6.getName();
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost6);
        java.util.concurrent.atomic.AtomicLong atomicLong12 = new java.util.concurrent.atomic.AtomicLong(9313L);
        long long13 = atomicLong12.decrementAndGet();
        boolean boolean14 = subject0.equals((java.lang.Object) long13);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))", 0);
        cassandraHost17.setMaxWaitTimeWhenExhausted((long) (short) 301);
        boolean boolean20 = cassandraHost17.getUseSocketKeepalive();
        java.lang.String[] strArray38 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:10", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)(hi!(hi!)):9160", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):10", strArray38);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "1:0", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1818");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean7 = cassandraHost5.equals((java.lang.Object) 0.0f);
        int int8 = cassandraHost5.getCassandraThriftSocketTimeout();
        java.lang.String str9 = cassandraHost5.getName();
        java.lang.String str10 = cassandraHost5.getUrl();
        java.lang.String str11 = cassandraHost5.toString();
        java.lang.String str12 = cassandraHost5.getIp();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray23, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "135", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1819");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong4 = new java.util.concurrent.atomic.AtomicLong();
        float float5 = atomicLong4.floatValue();
        long long6 = atomicLong4.get();
        long long8 = atomicLong4.getAndSet(0L);
        long long9 = atomicLong4.incrementAndGet();
        atomicLong4.lazySet((long) (short) 102);
        boolean boolean12 = subject0.equals((java.lang.Object) atomicLong4);
        java.util.concurrent.atomic.AtomicLong atomicLong14 = new java.util.concurrent.atomic.AtomicLong((long) (short) 10);
        atomicLong14.set(1L);
        atomicLong14.set((long) 10);
        atomicLong14.set(467L);
        boolean boolean21 = subject0.equals((java.lang.Object) 467L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", (int) (byte) 100);
        cassandraHost24.setMaxActive(100);
        cassandraHost24.setLifo(false);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray41, false);
        tSSLTransportParameters51.setKeyStore("Subject", "Subject:35", "", "(127.0.0.1)");
        tSSLTransportParameters51.setKeyStore("0.0.0.10", "127.0.0.1(127.0.0.1):102", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "(127.0.0.1):9160");
        tSSLTransportParameters51.setTrustStore("hi!(hi!)(hi!(hi!)):0", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "214:101", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1820");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):1", (int) ' ');
        cassandraHost8.setCassandraThriftSocketTimeout(13);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23);
        tSSLTransportParameters32.setTrustStore("9269", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):12", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1821");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 10);
        boolean boolean7 = cassandraHost6.isPerformNameResolution();
        boolean boolean8 = subject0.equals((java.lang.Object) boolean7);
        java.util.Set<java.lang.Object> objSet9 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean13 = cassandraHost12.getUseThriftFramedTransport();
        cassandraHost12.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost12.setMaxWaitTimeWhenExhausted(2L);
        java.util.concurrent.atomic.AtomicLong atomicLong19 = new java.util.concurrent.atomic.AtomicLong((long) (short) 102);
        int int20 = atomicLong19.intValue();
        long long22 = atomicLong19.addAndGet(199L);
        boolean boolean23 = cassandraHost12.equals((java.lang.Object) long22);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100))(0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100))):50");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1822");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 10);
        boolean boolean7 = cassandraHost6.isPerformNameResolution();
        boolean boolean8 = subject0.equals((java.lang.Object) boolean7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):1", (int) (short) 102);
        int int12 = cassandraHost11.getMaxActive();
        java.lang.String str13 = cassandraHost11.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1823");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.lang.String str12 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean17 = cassandraHost16.getUseSocketKeepalive();
        cassandraHost16.setCassandraThriftSocketTimeout(35);
        java.lang.String str20 = cassandraHost16.toString();
        java.lang.String str21 = cassandraHost16.getIp();
        int int22 = cassandraHost16.getMaxActive();
        cassandraHost16.setLifo(true);
        cassandraHost16.setMaxWaitTimeWhenExhausted(215L);
        java.lang.String str27 = cassandraHost16.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1824");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        boolean boolean23 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost(":100");
        boolean boolean28 = cassandraHost27.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, "0.0.0.0(0.0.0.0)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1825");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("8(0.0.0.8):60", 201);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray18, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray18, false);
        tSSLTransportParameters23.setTrustStore("10", "127.0.0.1(127.0.0.1):102", "(127.0.0.1):9160", "Subject:\n");
        tSSLTransportParameters23.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1)((127.0.0.1)):99", tSSLTransportParameters23);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1826");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean8 = atomicLong5.compareAndSet((long) 50, (-1L));
        boolean boolean9 = subject0.equals((java.lang.Object) 50);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost(":0(", (int) (byte) -123);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "Subject:50");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1827");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean3 = cassandraHost2.getLifo();
        cassandraHost2.setMaxActive(9160);
        boolean boolean6 = cassandraHost2.getUseSocketKeepalive();
        boolean boolean7 = cassandraHost2.getUseThriftFramedTransport();
        cassandraHost2.setLifo(false);
        javax.security.auth.Subject subject10 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet11 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject10.getPrivateCredentials();
        boolean boolean13 = subject10.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        boolean boolean25 = subject10.equals((java.lang.Object) tSSLTransportParameters24);
        java.util.Set<java.lang.Object> objSet26 = subject10.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet27 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet28 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet29 = subject10.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 9);
        boolean boolean33 = subject10.equals((java.lang.Object) cassandraHost32);
        java.lang.String str34 = subject10.toString();
        boolean boolean35 = cassandraHost2.equals((java.lang.Object) subject10);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost38 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", 101);
        cassandraHost38.setMaxActive(98);
        cassandraHost38.setLifo(false);
        java.lang.String[] strArray51 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        tSSLTransportParameters52.setKeyStore("CassandraClient<%s-%d>", "Subject:\n", "CassandraClient<%s-%d>", "Subject:\n");
        tSSLTransportParameters52.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "hi!:9160", "-1", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient63 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject10, cassandraHost38, "98(0.0.0.98)", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient63.equals(null)", !hKerberosThriftClient63.equals(null));
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1828");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)");
        int int11 = cassandraHost10.getPort();
        int int12 = cassandraHost10.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "100(0.0.0.100):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1829");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        boolean boolean8 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet11 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0)", (int) (byte) 98);
        cassandraHost14.setMaxActive(201);
        cassandraHost14.setUseSocketKeepalive(true);
        int int19 = cassandraHost14.getPort();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):102", strArray32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "0.0.0.32", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1830");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        boolean boolean17 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("100", (int) (short) 100);
        long long22 = cassandraHost21.getMaxWaitTimeWhenExhausted();
        java.lang.String str23 = cassandraHost21.toString();
        cassandraHost21.setLifo(true);
        java.lang.String str26 = cassandraHost21.getHost();
        cassandraHost21.setUseSocketKeepalive(false);
        java.lang.String[] strArray41 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray41, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray41, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", strArray41, false);
        tSSLTransportParameters49.setTrustStore("13", "100(0.0.0.100)(100(0.0.0.100)):1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "12", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1831");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0):10", (int) (short) 9390);
        boolean boolean11 = cassandraHost10.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "127.0.0.1(127.0.0.1):1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1832");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean9 = cassandraHost8.getLifo();
        cassandraHost8.setCassandraThriftSocketTimeout(100);
        cassandraHost8.setMaxActive(0);
        java.lang.String str14 = cassandraHost8.getUrl();
        cassandraHost8.setMaxWaitTimeWhenExhausted((long) (byte) 103);
        java.lang.String[] strArray32 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0)(:0(:0)):97", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45", strArray32);
        boolean boolean45 = cassandraHost8.equals((java.lang.Object) tSSLTransportParameters44);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1833");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray25);
        tSSLTransportParameters36.setKeyStore("CassandraClient<%s-%d>:10", "127.0.0.1(127.0.0.1):9160");
        boolean boolean40 = subject0.equals((java.lang.Object) "CassandraClient<%s-%d>:10");
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost44 = new me.prettyprint.cassandra.service.CassandraHost("9269(0.0.36.53):1", (int) (short) 1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost44, ":0(:0):97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1834");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", (int) (byte) 101);
        cassandraHost8.setMaxWaitTimeWhenExhausted(9389L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.100:97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1835");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("-1", 0);
        java.lang.String str9 = cassandraHost8.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "Subject");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1836");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("32(0.0.0.32):50", (int) (byte) -125);
        java.lang.String str9 = cassandraHost8.getUrl();
        java.lang.String str10 = cassandraHost8.toString();
        java.lang.String str11 = cassandraHost8.getName();
        javax.security.auth.Subject subject15 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet16 = subject15.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject15.getPrivateCredentials();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray27, false);
        boolean boolean34 = subject15.equals((java.lang.Object) strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray27, false);
        tSSLTransportParameters37.setKeyStore("100:0", "(127.0.0.1):35");
        tSSLTransportParameters37.setKeyStore("214", "198");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0(0.0.0.0)(0(0.0.0.0)):137", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1837");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.lang.String str7 = subject0.toString();
        javax.security.auth.Subject subject8 = new javax.security.auth.Subject();
        java.lang.String str9 = subject8.toString();
        java.util.Set<java.security.Principal> principalSet10 = subject8.getPrincipals();
        java.lang.String str11 = subject8.toString();
        boolean boolean12 = subject0.equals((java.lang.Object) str11);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("");
        int int15 = cassandraHost14.getMaxActive();
        cassandraHost14.setUseThriftFramedTransport(true);
        cassandraHost14.setMaxWaitTimeWhenExhausted(101L);
        cassandraHost14.setUseSocketKeepalive(false);
        cassandraHost14.setMaxWaitTimeWhenExhausted((long) (short) 8);
        int int24 = cassandraHost14.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1838");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet10 = subject0.getPrincipals();
        boolean boolean11 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):102", (int) (byte) -56);
        cassandraHost14.setMaxWaitTimeWhenExhausted(208L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1839");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean9 = cassandraHost8.isPerformNameResolution();
        cassandraHost8.setUseThriftFramedTransport(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(", strArray24, false);
        tSSLTransportParameters32.setKeyStore("-1:32", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.100(0.0.0.100):9269", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1840");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean19 = subject0.equals((java.lang.Object) 8L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):10");
        int int22 = cassandraHost21.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "32(0.0.0.32)(32(0.0.0.32))(32(0.0.0.32)(32(0.0.0.32)))(32(0.0.0.32)(32(0.0.0.32))(32(0.0.0.32)(32(0.0.0.32)))):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1841");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        boolean boolean8 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost11.setMaxActive((int) (byte) 10);
        boolean boolean14 = cassandraHost11.getUseThriftFramedTransport();
        cassandraHost11.setCassandraThriftSocketTimeout(9261);
        cassandraHost11.setMaxWaitTimeWhenExhausted(50L);
        java.lang.String str19 = cassandraHost11.getUrl();
        java.lang.String str20 = cassandraHost11.toString();
        long long21 = cassandraHost11.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9160", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.1.45", strArray34, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "115", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1842");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPrivateCredentials();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray34, false);
        boolean boolean42 = subject0.equals((java.lang.Object) tSSLTransportParameters41);
        boolean boolean43 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost46 = new me.prettyprint.cassandra.service.CassandraHost("100:35", (int) (short) 130);
        cassandraHost46.setMaxActive((int) (short) 2);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray59, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray59, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray59, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray59);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient67 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost46, "301:9260", tSSLTransportParameters66);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient67.equals(null)", !hKerberosThriftClient67.equals(null));
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1843");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0)", (int) (short) 301);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):52");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1844");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.lang.String str22 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost(":0", 13);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "1:9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1845");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("100", (int) (short) 100);
        long long9 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        java.lang.String str10 = cassandraHost8.toString();
        long long11 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray21, false);
        tSSLTransportParameters27.setTrustStore("199", "(127.0.0.1)");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "214:9", tSSLTransportParameters27);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1846");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int10 = cassandraHost9.getMaxActive();
        boolean boolean11 = cassandraHost9.getUseThriftFramedTransport();
        javax.security.auth.Subject subject12 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet13 = subject12.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet14 = subject12.getPrincipals();
        java.util.Set<java.lang.Object> objSet15 = subject12.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong17 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float18 = atomicLong17.floatValue();
        long long19 = atomicLong17.incrementAndGet();
        double double20 = atomicLong17.doubleValue();
        boolean boolean21 = subject12.equals((java.lang.Object) double20);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray32, true);
        tSSLTransportParameters39.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean43 = subject12.equals((java.lang.Object) tSSLTransportParameters39);
        java.util.Set<java.lang.Object> objSet44 = subject12.getPrivateCredentials();
        boolean boolean45 = subject12.isReadOnly();
        boolean boolean46 = cassandraHost9.equals((java.lang.Object) subject12);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "8(0.0.0.8):60");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1847");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        boolean boolean17 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.lang.String str19 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!):9260", (int) (byte) 105);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray34);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "hi!(hi!):100", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1848");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):10", (int) (byte) 103);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient21 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "11");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient21.equals(null)", !hKerberosThriftClient21.equals(null));
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1849");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("32", 50);
        cassandraHost25.setUseThriftFramedTransport(false);
        cassandraHost25.setMaxActive((int) (short) 9260);
        boolean boolean30 = subject0.equals((java.lang.Object) cassandraHost25);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost33 = new me.prettyprint.cassandra.service.CassandraHost("101", 1);
        java.lang.String str34 = cassandraHost33.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost33, "100(0.0.0.100)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1850");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        boolean boolean23 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("100");
        cassandraHost27.setCassandraThriftSocketTimeout((int) (byte) 53);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1851");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost10.setUseThriftFramedTransport(true);
        boolean boolean13 = cassandraHost8.equals((java.lang.Object) cassandraHost10);
        java.lang.String str14 = cassandraHost10.getUrl();
        cassandraHost10.setLifo(false);
        cassandraHost10.setUseThriftFramedTransport(true);
        long long19 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!:9160", "127.0.0.1(127.0.0.1):102" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.1.45", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "0.0.1.45", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1852");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        boolean boolean9 = subject0.isReadOnly();
        boolean boolean10 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet11 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("100:1", (int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("50", strArray24);
        tSSLTransportParameters29.setTrustStore("-2", "Subject:50");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):35", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1853");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", (int) (byte) 100);
        cassandraHost8.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100))(0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100))):50");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1854");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("100(0.0.0.100):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "50");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1855");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPublicCredentials();
        java.lang.String str10 = subject7.toString();
        boolean boolean11 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPublicCredentials();
        boolean boolean14 = subject0.equals((java.lang.Object) subject7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost(":0", (-1));
        boolean boolean18 = subject0.equals((java.lang.Object) cassandraHost17);
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        cassandraHost22.setUseSocketKeepalive(false);
        cassandraHost22.setUseSocketKeepalive(false);
        int int27 = cassandraHost22.getMaxActive();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):102", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):102", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray42);
        tSSLTransportParameters53.setKeyStore("0.0.0.101", ":100:9", "Subject:50", "33");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "Subject(Subject):10", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1856");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):102");
        int int7 = cassandraHost6.getMaxActive();
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45", strArray24, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))))", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1857");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100");
        java.lang.String str7 = cassandraHost6.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1858");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("Subject", 50);
        cassandraHost10.setLifo(true);
        java.lang.String str13 = cassandraHost10.toString();
        java.lang.String str14 = cassandraHost10.getUrl();
        boolean boolean15 = cassandraHost10.getUseThriftFramedTransport();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):11", strArray26);
        tSSLTransportParameters33.setKeyStore("127.0.0.1:10", "100(0.0.0.100)(100(0.0.0.100)):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "32(0.0.0.32)(32(0.0.0.32)):0", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1859");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("0");
        java.lang.String str9 = cassandraHost8.getIp();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):97", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):102", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray26);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "33", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1860");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("8", (int) (short) 60);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int11 = cassandraHost10.getPort();
        boolean boolean12 = cassandraHost10.isPerformNameResolution();
        boolean boolean13 = cassandraHost7.equals((java.lang.Object) cassandraHost10);
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):102", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "411", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1861");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):9160", 0);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24);
        tSSLTransportParameters31.setKeyStore("hi!:100", "(127.0.0.1):100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1):11", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1862");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        boolean boolean7 = subject0.isReadOnly();
        boolean boolean9 = subject0.equals((java.lang.Object) 108L);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost13.setMaxActive((int) (byte) 10);
        boolean boolean16 = cassandraHost13.getUseThriftFramedTransport();
        java.lang.String str17 = cassandraHost13.getUrl();
        cassandraHost13.setUseSocketKeepalive(false);
        boolean boolean20 = cassandraHost13.isPerformNameResolution();
        java.lang.String str21 = cassandraHost13.getIp();
        cassandraHost13.setMaxActive(100);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9280", strArray34, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "127.0.0.1(127.0.0.1):-1", tSSLTransportParameters42);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1863");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)", 10);
        boolean boolean10 = cassandraHost9.isPerformNameResolution();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):35");
        boolean boolean13 = cassandraHost9.equals((java.lang.Object) "(127.0.0.1):35");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1864");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("9269:9160", (int) (byte) -58);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "118");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1865");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPrivateCredentials();
        boolean boolean8 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject5.getPublicCredentials();
        boolean boolean13 = subject0.equals((java.lang.Object) objSet12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str18 = cassandraHost15.toString();
        cassandraHost15.setMaxActive(9160);
        cassandraHost15.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean23 = cassandraHost15.getUseThriftFramedTransport();
        boolean boolean24 = subject0.equals((java.lang.Object) boolean23);
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", 101);
        cassandraHost29.setMaxActive(98);
        java.lang.String str32 = cassandraHost29.getName();
        cassandraHost29.setCassandraThriftSocketTimeout((int) 'a');
        cassandraHost29.setMaxWaitTimeWhenExhausted(9661L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "Subject(Subject)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1866");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", (int) (byte) 100);
        cassandraHost9.setMaxActive(100);
        boolean boolean12 = cassandraHost9.getUseSocketKeepalive();
        javax.security.auth.Subject subject17 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet18 = subject17.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet19 = subject17.getPrincipals();
        subject17.setReadOnly();
        boolean boolean21 = subject17.isReadOnly();
        java.lang.String str22 = subject17.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong24 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int25 = atomicLong24.intValue();
        boolean boolean26 = subject17.equals((java.lang.Object) int25);
        boolean boolean27 = subject17.isReadOnly();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray39, true);
        boolean boolean48 = subject17.equals((java.lang.Object) strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):1", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):10", strArray39);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "184:-2", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1867");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean12 = cassandraHost11.getUseThriftFramedTransport();
        boolean boolean13 = cassandraHost11.getUseSocketKeepalive();
        cassandraHost11.setLifo(false);
        boolean boolean16 = cassandraHost11.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "-1(-1):35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1868");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("100(0.0.0.100)", (int) (byte) 45);
        java.lang.String str9 = cassandraHost8.getUrl();
        cassandraHost8.setUseSocketKeepalive(false);
        javax.security.auth.Subject subject17 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet18 = subject17.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject17.getPrivateCredentials();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray29, false);
        boolean boolean36 = subject17.equals((java.lang.Object) strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray29, false);
        tSSLTransportParameters44.setTrustStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", "0(0.0.0.0):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "214", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1869");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)(hi!(hi!)):9261", 97);
        int int10 = cassandraHost9.getPort();
        long long11 = cassandraHost9.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23, false);
        tSSLTransportParameters31.setKeyStore("100(0.0.0.100)(100(0.0.0.100)):100", "32(0.0.0.32)(32(0.0.0.32))", "214(0.0.0.214):9160", "hi!:0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "112", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1870");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (-1));
        java.lang.String str9 = cassandraHost8.getIp();
        cassandraHost8.setMaxActive((int) (short) 52);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, ":0((:0():2");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1871");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("Subject", 101);
        java.lang.String str10 = cassandraHost9.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1872");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("301", 9260);
        java.lang.String str10 = cassandraHost9.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1873");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("Subject", 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray26, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1874");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        boolean boolean8 = subject0.isReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray22);
        boolean boolean31 = subject0.equals((java.lang.Object) "127.0.0.1");
        java.lang.String str32 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet33 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost36 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost36.setMaxActive((int) (byte) 10);
        boolean boolean39 = cassandraHost36.getUseThriftFramedTransport();
        cassandraHost36.setCassandraThriftSocketTimeout(9261);
        cassandraHost36.setMaxWaitTimeWhenExhausted(50L);
        long long44 = cassandraHost36.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost36, "0.0.0.100:97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1875");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("0:9160", (int) (short) 50);
        java.lang.String[] strArray38 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):10", strArray38);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", tSSLTransportParameters45);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1876");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean11 = cassandraHost10.getUseSocketKeepalive();
        boolean boolean12 = cassandraHost10.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1877");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160");
        boolean boolean14 = subject0.equals((java.lang.Object) cassandraHost13);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str18 = cassandraHost17.getUrl();
        boolean boolean19 = cassandraHost17.isPerformNameResolution();
        java.util.concurrent.atomic.AtomicLong atomicLong21 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean22 = cassandraHost17.equals((java.lang.Object) atomicLong21);
        cassandraHost17.setLifo(true);
        cassandraHost17.setUseThriftFramedTransport(false);
        java.lang.String str27 = cassandraHost17.getHost();
        int int28 = cassandraHost17.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray41 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray41, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray41);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))(127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))):9160", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1878");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("32", (-1));
        boolean boolean14 = subject0.equals((java.lang.Object) "32");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", 50);
        java.lang.String str18 = cassandraHost17.toString();
        cassandraHost17.setLifo(true);
        cassandraHost17.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "(127.0.0.1)((127.0.0.1)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1879");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet12 = subject11.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet13 = subject11.getPrincipals();
        java.util.Set<java.lang.Object> objSet14 = subject11.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet15 = subject11.getPrincipals();
        java.util.Set<java.lang.Object> objSet16 = subject11.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject11.getPublicCredentials();
        java.lang.String str18 = subject11.toString();
        boolean boolean19 = subject0.equals((java.lang.Object) subject11);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):8", (int) (byte) 89);
        java.lang.String[] strArray38 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9280", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1:10", strArray38, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "100(0.0.0.100)(100(0.0.0.100)):99", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1880");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("Subject", 50);
        cassandraHost12.setLifo(true);
        java.lang.String str15 = cassandraHost12.getIp();
        int int16 = cassandraHost12.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "(127.0.0.1)((127.0.0.1)):-56");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1881");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):97", 35);
        boolean boolean10 = cassandraHost9.isPerformNameResolution();
        cassandraHost9.setUseSocketKeepalive(true);
        boolean boolean13 = cassandraHost9.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "127.0.0.1(127.0.0.1):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1882");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray13);
        boolean boolean17 = subject0.equals((java.lang.Object) tSSLTransportParameters16);
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet20 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) (byte) 0);
        java.lang.String[] strArray39 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray39);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient51 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "0.0.0.1", tSSLTransportParameters50);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient51.equals(null)", !hKerberosThriftClient51.equals(null));
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1883");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean12 = cassandraHost10.equals((java.lang.Object) 0.0f);
        int int13 = cassandraHost10.getCassandraThriftSocketTimeout();
        cassandraHost10.setUseSocketKeepalive(false);
        cassandraHost10.setLifo(false);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str21 = cassandraHost20.getHost();
        boolean boolean22 = cassandraHost20.getUseSocketKeepalive();
        java.lang.String str23 = cassandraHost20.getName();
        boolean boolean24 = cassandraHost10.equals((java.lang.Object) cassandraHost20);
        java.lang.String str25 = cassandraHost20.getName();
        boolean boolean26 = cassandraHost20.getUseThriftFramedTransport();
        java.lang.String[] strArray42 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100)(100(0.0.0.100)):1", strArray42);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "hi!(hi!)(hi!(hi!)):9160", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1884");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", 50);
        boolean boolean12 = cassandraHost11.getLifo();
        java.lang.String[] strArray30 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):35", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:-1", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0:101", strArray30);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "127.0.0.1(127.0.0.1):102", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1885");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        cassandraHost8.setUseSocketKeepalive(false);
        int int13 = cassandraHost8.getCassandraThriftSocketTimeout();
        boolean boolean14 = cassandraHost8.isPerformNameResolution();
        cassandraHost8.setMaxActive((int) (short) 0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "127.0.0.1(127.0.0.1):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1886");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost12.setUseThriftFramedTransport(true);
        boolean boolean15 = cassandraHost10.equals((java.lang.Object) cassandraHost12);
        boolean boolean16 = cassandraHost10.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1)((127.0.0.1)):102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1887");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("9270", 0);
        javax.security.auth.Subject subject12 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet13 = subject12.getPublicCredentials();
        subject12.setReadOnly();
        subject12.setReadOnly();
        boolean boolean16 = subject12.isReadOnly();
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray28, true);
        boolean boolean38 = subject12.equals((java.lang.Object) tSSLTransportParameters37);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "127.0.0.1", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1888");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        boolean boolean8 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str12 = cassandraHost11.getName();
        int int13 = cassandraHost11.getPort();
        cassandraHost11.setMaxActive((int) (byte) 97);
        cassandraHost11.setUseThriftFramedTransport(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100)", strArray30, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "hi!(hi!):100", tSSLTransportParameters42);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1889");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long7 = cassandraHost6.getMaxWaitTimeWhenExhausted();
        cassandraHost6.setUseThriftFramedTransport(false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray21);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):52", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1890");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong();
        float float6 = atomicLong5.floatValue();
        long long8 = atomicLong5.getAndSet((long) (byte) 100);
        long long9 = atomicLong5.incrementAndGet();
        double double10 = atomicLong5.doubleValue();
        long long12 = atomicLong5.getAndAdd((-1L));
        boolean boolean13 = subject0.equals((java.lang.Object) (-1L));
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost16.setMaxActive((int) (byte) 10);
        boolean boolean19 = cassandraHost16.getUseThriftFramedTransport();
        java.lang.String str20 = cassandraHost16.getUrl();
        boolean boolean21 = cassandraHost16.getUseThriftFramedTransport();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray33);
        tSSLTransportParameters39.setTrustStore("Subject", "8", "Subject:35", ":0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, ":0((:0()", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1891");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost6.setUseThriftFramedTransport(true);
        int int9 = cassandraHost6.getMaxActive();
        cassandraHost6.setUseThriftFramedTransport(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, ":0((:0():98");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1892");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        java.util.Set<java.lang.Object> objSet40 = subject5.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost43 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        java.lang.String str44 = cassandraHost43.toString();
        cassandraHost43.setLifo(true);
        cassandraHost43.setMaxWaitTimeWhenExhausted(9388L);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray63, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray63);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray63);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray63, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray63, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters73 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray63, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters75 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":100", strArray63, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters77 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray63, true);
        tSSLTransportParameters77.setKeyStore("hi!(hi!)(hi!(hi!)):100", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))):50", "", "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient83 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost43, ":100", tSSLTransportParameters77);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient83.equals(null)", !hKerberosThriftClient83.equals(null));
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1893");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost25.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str28 = cassandraHost25.getHost();
        cassandraHost25.setMaxActive(100);
        cassandraHost25.setMaxActive(100);
        int int33 = cassandraHost25.getMaxActive();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray44, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101", strArray44, false);
        tSSLTransportParameters52.setTrustStore(":102", "0.0.0.0(0.0.0.0)", "9261", "0.0.0.100:102");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient58 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "(127.0.0.1)((127.0.0.1)):102", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient58.equals(null)", !hKerberosThriftClient58.equals(null));
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1894");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray13);
        boolean boolean17 = subject0.equals((java.lang.Object) tSSLTransportParameters16);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost19.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str22 = cassandraHost19.toString();
        cassandraHost19.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost19.setMaxWaitTimeWhenExhausted((long) (byte) 1);
        java.lang.String str27 = cassandraHost19.getHost();
        boolean boolean28 = cassandraHost19.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "127.0.0.1:9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1895");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):-1", (int) (short) 199);
        javax.security.auth.Subject subject8 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet9 = subject8.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet10 = subject8.getPrincipals();
        subject8.setReadOnly();
        boolean boolean12 = subject8.isReadOnly();
        javax.security.auth.Subject subject13 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet14 = subject13.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet15 = subject13.getPublicCredentials();
        java.lang.String str16 = subject13.toString();
        boolean boolean17 = subject13.isReadOnly();
        java.util.Set<java.lang.Object> objSet18 = subject13.getPrivateCredentials();
        boolean boolean19 = subject8.equals((java.lang.Object) subject13);
        java.util.Set<java.security.Principal> principalSet20 = subject13.getPrincipals();
        boolean boolean21 = cassandraHost7.equals((java.lang.Object) principalSet20);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "32(0.0.0.32)(32(0.0.0.32)):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1896");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        int int9 = cassandraHost6.getCassandraThriftSocketTimeout();
        java.lang.String str10 = cassandraHost6.getName();
        boolean boolean11 = cassandraHost6.getUseThriftFramedTransport();
        java.lang.String str12 = cassandraHost6.toString();
        cassandraHost6.setUseThriftFramedTransport(true);
        java.lang.String str15 = cassandraHost6.getName();
        boolean boolean16 = cassandraHost6.getUseSocketKeepalive();
        java.lang.String str17 = cassandraHost6.toString();
        boolean boolean18 = subject0.equals((java.lang.Object) str17);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray34);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):-1", tSSLTransportParameters42);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1897");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        java.lang.String str5 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong6 = new java.util.concurrent.atomic.AtomicLong();
        float float7 = atomicLong6.floatValue();
        long long9 = atomicLong6.getAndSet((long) (byte) 100);
        long long10 = atomicLong6.incrementAndGet();
        long long11 = atomicLong6.getAndIncrement();
        long long12 = atomicLong6.incrementAndGet();
        long long14 = atomicLong6.getAndSet((long) ' ');
        java.lang.String str15 = atomicLong6.toString();
        atomicLong6.set((long) (byte) 1);
        atomicLong6.lazySet((long) 50);
        long long20 = atomicLong6.decrementAndGet();
        boolean boolean21 = subject0.equals((java.lang.Object) long20);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost23.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str26 = cassandraHost23.toString();
        cassandraHost23.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost23.setCassandraThriftSocketTimeout((int) '4');
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "Subject(Subject):52");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1898");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean8 = atomicLong5.compareAndSet((long) 50, (-1L));
        boolean boolean9 = subject0.equals((java.lang.Object) 50);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong12 = new java.util.concurrent.atomic.AtomicLong((long) 100);
        java.lang.String str13 = atomicLong12.toString();
        boolean boolean14 = subject0.equals((java.lang.Object) atomicLong12);
        java.util.Set<java.lang.Object> objSet15 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", (int) (byte) 100);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):101", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray35, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "9313", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1899");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean18 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("11", 9268);
        cassandraHost21.setMaxWaitTimeWhenExhausted(216L);
        int int24 = cassandraHost21.getMaxActive();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray34, false);
        tSSLTransportParameters40.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", ":0(:0):10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "32(0.0.0.32):-125", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1900");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet10 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("100");
        int int13 = cassandraHost12.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1901");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.lang.String str8 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean12 = cassandraHost10.equals((java.lang.Object) 0.0f);
        int int13 = cassandraHost10.getCassandraThriftSocketTimeout();
        java.lang.String str14 = cassandraHost10.getName();
        java.lang.String str15 = cassandraHost10.getUrl();
        java.lang.String str16 = cassandraHost10.getIp();
        java.lang.String str17 = cassandraHost10.getIp();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):-56", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("118", strArray32, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "127.0.0.1", tSSLTransportParameters45);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1902");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("-1", 101);
        java.lang.String str9 = cassandraHost8.getIp();
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:32", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:110", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214:101", strArray28);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "9(0.0.0.9):9160", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1903");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        cassandraHost10.setUseSocketKeepalive(false);
        boolean boolean13 = cassandraHost10.getUseSocketKeepalive();
        cassandraHost10.setLifo(false);
        cassandraHost10.setMaxActive(10);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1904");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str7 = cassandraHost6.getName();
        boolean boolean8 = subject0.equals((java.lang.Object) str7);
        boolean boolean9 = subject0.isReadOnly();
        boolean boolean10 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):32");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:0", strArray29);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "0", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1905");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("214", (int) (byte) 111);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1906");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("100(0.0.0.100)");
        cassandraHost10.setLifo(false);
        cassandraHost10.setMaxWaitTimeWhenExhausted((long) 52);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "-1(-1):1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1907");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) (byte) 0);
        boolean boolean9 = cassandraHost8.getUseThriftFramedTransport();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "50", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1908");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPublicCredentials();
        java.lang.String[] strArray34 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        tSSLTransportParameters39.setTrustStore("(127.0.0.1)", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10");
        boolean boolean43 = subject0.equals((java.lang.Object) "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost45 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))");
        cassandraHost45.setLifo(true);
        boolean boolean48 = cassandraHost45.isPerformNameResolution();
        java.lang.String str49 = cassandraHost45.toString();
        boolean boolean50 = cassandraHost45.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost45, ":0(:0)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1909");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.lang.String str7 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        javax.security.auth.Subject subject10 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet11 = subject10.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject10.getPrivateCredentials();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray22, false);
        boolean boolean29 = subject10.equals((java.lang.Object) strArray22);
        boolean boolean30 = subject10.isReadOnly();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray40);
        boolean boolean46 = subject10.equals((java.lang.Object) strArray40);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost49 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        boolean boolean50 = cassandraHost49.getLifo();
        boolean boolean51 = subject10.equals((java.lang.Object) cassandraHost49);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost49, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1910");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        int int9 = cassandraHost6.getPort();
        java.lang.String str10 = cassandraHost6.getName();
        java.lang.String str11 = cassandraHost6.getHost();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("214", 9);
        boolean boolean15 = cassandraHost6.equals((java.lang.Object) "214");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "301(0.0.1.45):10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1911");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.lang.String str8 = subject0.toString();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost14.setUseThriftFramedTransport(true);
        boolean boolean17 = cassandraHost12.equals((java.lang.Object) cassandraHost14);
        java.lang.String str18 = cassandraHost14.getUrl();
        cassandraHost14.setLifo(false);
        int int21 = cassandraHost14.getPort();
        long long22 = cassandraHost14.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "hi!(hi!):9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1912");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("9269", (int) (short) 9);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, ":9160(:9160):11");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1913");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.lang.String[] strArray17 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray17, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray17);
        boolean boolean29 = subject0.equals((java.lang.Object) strArray17);
        java.util.Set<java.lang.Object> objSet30 = subject0.getPublicCredentials();
        java.lang.String[] strArray43 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0:101", strArray43);
        boolean boolean52 = subject0.equals((java.lang.Object) "0.0.0.0:101");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost55 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):32", (int) (byte) -123);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient57 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost55, "0.0.1.45");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient57.equals(null)", !hKerberosThriftClient57.equals(null));
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1914");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray15);
        boolean boolean21 = subject0.equals((java.lang.Object) tSSLTransportParameters20);
        java.lang.String str22 = subject0.toString();
        boolean boolean23 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean27 = cassandraHost25.equals((java.lang.Object) 0.0f);
        int int28 = cassandraHost25.getCassandraThriftSocketTimeout();
        cassandraHost25.setUseSocketKeepalive(false);
        cassandraHost25.setLifo(false);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost35 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str36 = cassandraHost35.getHost();
        boolean boolean37 = cassandraHost35.getUseSocketKeepalive();
        java.lang.String str38 = cassandraHost35.getName();
        boolean boolean39 = cassandraHost25.equals((java.lang.Object) cassandraHost35);
        boolean boolean40 = cassandraHost25.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "32(0.0.0.32)(32(0.0.0.32))(32(0.0.0.32)(32(0.0.0.32))):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1915");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet10 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("100", 52);
        boolean boolean14 = cassandraHost13.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "CassandraClient<%s-%d>");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1916");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        java.lang.String str21 = cassandraHost20.getUrl();
        cassandraHost20.setMaxActive((int) (short) 199);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, ":0(:0)(:0(:0)):35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1917");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (byte) 1);
        int int6 = cassandraHost5.getMaxActive();
        boolean boolean7 = cassandraHost5.getLifo();
        java.lang.String str8 = cassandraHost5.getIp();
        int int9 = cassandraHost5.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1918");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        int int11 = cassandraHost8.getCassandraThriftSocketTimeout();
        java.lang.String str12 = cassandraHost8.getName();
        boolean boolean13 = cassandraHost8.getUseThriftFramedTransport();
        java.lang.String str14 = cassandraHost8.toString();
        cassandraHost8.setUseThriftFramedTransport(true);
        int int17 = cassandraHost8.getMaxActive();
        java.lang.String str18 = cassandraHost8.getName();
        java.lang.String[] strArray34 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269:9160", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214:9", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray34);
        tSSLTransportParameters43.setKeyStore(":0(:0)(:0(:0)):97", "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):52");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.100(0.0.0.100):9160", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1919");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0)", (int) (byte) 98);
        cassandraHost28.setMaxActive(201);
        cassandraHost28.setUseSocketKeepalive(true);
        int int33 = cassandraHost28.getPort();
        javax.security.auth.Subject subject35 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet36 = subject35.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet37 = subject35.getPrivateCredentials();
        boolean boolean38 = subject35.isReadOnly();
        java.lang.String[] strArray47 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray47);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray47);
        boolean boolean50 = subject35.equals((java.lang.Object) tSSLTransportParameters49);
        tSSLTransportParameters49.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "(127.0.0.1):100", "Subject:35", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient56 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9359", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient56.equals(null)", !hKerberosThriftClient56.equals(null));
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1920");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        java.lang.String str10 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("-1:102", (int) (byte) 44);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "CassandraClient<%s-%d>:52");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1921");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray16 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray16);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray16, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray16, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray16, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray16, true);
        boolean boolean26 = subject0.equals((java.lang.Object) tSSLTransportParameters25);
        java.util.Set<java.security.Principal> principalSet27 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("100");
        cassandraHost29.setUseSocketKeepalive(true);
        boolean boolean32 = cassandraHost29.getUseSocketKeepalive();
        cassandraHost29.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1922");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost27.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str30 = cassandraHost27.getIp();
        java.lang.String str31 = cassandraHost27.getName();
        boolean boolean32 = cassandraHost27.getUseSocketKeepalive();
        cassandraHost27.setUseThriftFramedTransport(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray51, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray51, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray51, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray51, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:-1", strArray51);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, "214", tSSLTransportParameters64);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1923");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", (int) '#');
        java.lang.String[] strArray17 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):9160", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32)(32(0.0.0.32))", strArray17, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.100:102", tSSLTransportParameters24);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1924");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int8 = cassandraHost7.getPort();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray24, true);
        boolean boolean39 = cassandraHost7.equals((java.lang.Object) tSSLTransportParameters38);
        cassandraHost7.setMaxActive((int) (short) 20);
        java.lang.String str42 = cassandraHost7.getHost();
        java.lang.String[] strArray58 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray58, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray58, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray58, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray58, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):1", strArray58, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient72 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):102", tSSLTransportParameters71);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient72.equals(null)", !hKerberosThriftClient72.equals(null));
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1925");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("101:1", 9459);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1926");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("100", 52);
        boolean boolean12 = cassandraHost11.getUseSocketKeepalive();
        java.lang.String str13 = cassandraHost11.getHost();
        java.lang.String[] strArray26 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100:102", strArray26);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "CassandraClient<%s-%d>:32", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1927");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int9 = cassandraHost8.getMaxActive();
        boolean boolean10 = cassandraHost8.getUseThriftFramedTransport();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray15);
        tSSLTransportParameters18.setTrustStore("0.0.0.100", "0", "(127.0.0.1)((127.0.0.1)):35", "10");
        boolean boolean24 = cassandraHost8.equals((java.lang.Object) tSSLTransportParameters18);
        tSSLTransportParameters18.setTrustStore("100:1", ":0(:0):10", "100:0", "hi!(hi!):100");
        boolean boolean30 = subject0.equals((java.lang.Object) ":0(:0):10");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):-2");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost32, "13(0.0.0.13):221");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1928");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray15);
        boolean boolean21 = subject0.equals((java.lang.Object) tSSLTransportParameters20);
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPublicCredentials();
        boolean boolean24 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost(":0((:0():98", (int) (short) 198);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, "hi!(hi!)(hi!(hi!)):209");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1929");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", (int) (short) 103);
        java.lang.String str9 = cassandraHost8.getIp();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):1", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1(-1)", strArray20);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "8", tSSLTransportParameters27);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1930");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPublicCredentials();
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray27, false);
        tSSLTransportParameters30.setTrustStore("9269", ":9160", "hi!:9160", "127.0.0.1(127.0.0.1):10");
        boolean boolean36 = subject0.equals((java.lang.Object) tSSLTransportParameters30);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost38 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260");
        cassandraHost38.setUseThriftFramedTransport(true);
        boolean boolean41 = cassandraHost38.getUseSocketKeepalive();
        java.lang.String str42 = cassandraHost38.getUrl();
        java.lang.String[] strArray58 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray58, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray58, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray58, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray58, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray58, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient72 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost38, "10:101", tSSLTransportParameters71);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient72.equals(null)", !hKerberosThriftClient72.equals(null));
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1931");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean3 = cassandraHost2.getLifo();
        cassandraHost2.setMaxActive(9160);
        boolean boolean6 = cassandraHost2.getUseSocketKeepalive();
        boolean boolean7 = cassandraHost2.getUseThriftFramedTransport();
        cassandraHost2.setLifo(false);
        javax.security.auth.Subject subject10 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet11 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject10.getPrivateCredentials();
        boolean boolean13 = subject10.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        boolean boolean25 = subject10.equals((java.lang.Object) tSSLTransportParameters24);
        java.util.Set<java.lang.Object> objSet26 = subject10.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet27 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet28 = subject10.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet29 = subject10.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 9);
        boolean boolean33 = subject10.equals((java.lang.Object) cassandraHost32);
        java.lang.String str34 = subject10.toString();
        boolean boolean35 = cassandraHost2.equals((java.lang.Object) subject10);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost38 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):52", 0);
        int int39 = cassandraHost38.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject10, cassandraHost38, "8(0.0.0.8):60");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1932");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost25.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str28 = cassandraHost25.toString();
        cassandraHost25.setMaxActive(9160);
        cassandraHost25.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean33 = cassandraHost25.getUseThriftFramedTransport();
        cassandraHost25.setUseSocketKeepalive(false);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray49, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray49, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray49, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray49, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100):0", strArray49, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9390", strArray49);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient62 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)", tSSLTransportParameters61);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient62.equals(null)", !hKerberosThriftClient62.equals(null));
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1933");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters18.setKeyStore("hi!", "");
        tSSLTransportParameters18.setTrustStore("", "hi!");
        tSSLTransportParameters18.setKeyStore("hi!", "hi!", "hi!", "hi!");
        boolean boolean30 = subject0.equals((java.lang.Object) "hi!");
        boolean boolean31 = subject0.isReadOnly();
        boolean boolean32 = subject0.isReadOnly();
        java.lang.String str33 = subject0.toString();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:0", strArray45, true);
        boolean boolean57 = subject0.equals((java.lang.Object) "-1:0");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost60 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean61 = cassandraHost60.getUseThriftFramedTransport();
        cassandraHost60.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost60.setMaxWaitTimeWhenExhausted(10L);
        boolean boolean66 = cassandraHost60.getLifo();
        java.lang.String str67 = cassandraHost60.getHost();
        boolean boolean68 = cassandraHost60.getLifo();
        cassandraHost60.setUseThriftFramedTransport(true);
        java.lang.String[] strArray80 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters81 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray80);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters83 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray80, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient84 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost60, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):99", tSSLTransportParameters83);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient84.equals(null)", !hKerberosThriftClient84.equals(null));
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1934");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong8 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 0);
        long long9 = atomicLong8.getAndDecrement();
        long long10 = atomicLong8.decrementAndGet();
        long long11 = atomicLong8.longValue();
        long long12 = atomicLong8.longValue();
        long long13 = atomicLong8.incrementAndGet();
        atomicLong8.set((long) (short) 12);
        boolean boolean16 = subject0.equals((java.lang.Object) (short) 12);
        subject0.setReadOnly();
        boolean boolean19 = subject0.equals((java.lang.Object) 49L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long22 = cassandraHost21.getMaxWaitTimeWhenExhausted();
        cassandraHost21.setUseThriftFramedTransport(false);
        java.lang.String[] strArray33 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9261", strArray33);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "119", tSSLTransportParameters38);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1935");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.concurrent.atomic.AtomicLong atomicLong1 = new java.util.concurrent.atomic.AtomicLong();
        float float2 = atomicLong1.floatValue();
        long long3 = atomicLong1.get();
        int int4 = atomicLong1.intValue();
        boolean boolean7 = atomicLong1.weakCompareAndSet((long) 100, (long) ' ');
        int int8 = atomicLong1.intValue();
        boolean boolean9 = subject0.equals((java.lang.Object) atomicLong1);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int13 = cassandraHost12.getCassandraThriftSocketTimeout();
        java.lang.String str14 = cassandraHost12.getHost();
        boolean boolean15 = cassandraHost12.getUseThriftFramedTransport();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray27, true);
        boolean boolean38 = cassandraHost12.equals((java.lang.Object) "-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1936");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong21 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 100);
        long long23 = atomicLong21.addAndGet((long) 9160);
        float float24 = atomicLong21.floatValue();
        long long25 = atomicLong21.getAndIncrement();
        double double26 = atomicLong21.doubleValue();
        boolean boolean27 = subject0.equals((java.lang.Object) atomicLong21);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost30 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.32", (int) (short) 8);
        javax.security.auth.Subject subject31 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet32 = subject31.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet33 = subject31.getPrincipals();
        subject31.setReadOnly();
        boolean boolean35 = subject31.isReadOnly();
        java.lang.String str36 = subject31.toString();
        java.util.Set<java.lang.Object> objSet37 = subject31.getPrivateCredentials();
        subject31.setReadOnly();
        java.util.Set<java.security.Principal> principalSet39 = subject31.getPrincipals();
        boolean boolean40 = cassandraHost30.equals((java.lang.Object) principalSet39);
        int int41 = cassandraHost30.getPort();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray56, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray56, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray56, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray56, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient69 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost30, "0.0.0.0(0.0.0.0)", tSSLTransportParameters68);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient69.equals(null)", !hKerberosThriftClient69.equals(null));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1937");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        subject0.setReadOnly();
        boolean boolean21 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) -1);
        java.lang.String str25 = cassandraHost24.getName();
        int int26 = cassandraHost24.getCassandraThriftSocketTimeout();
        java.lang.String str27 = cassandraHost24.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "301:10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1938");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray15, true);
        boolean boolean24 = subject0.equals((java.lang.Object) tSSLTransportParameters23);
        java.util.Set<java.lang.Object> objSet25 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet26 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):0");
        boolean boolean29 = cassandraHost28.getLifo();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (byte) 10);
        cassandraHost32.setCassandraThriftSocketTimeout((int) (short) 1);
        java.lang.String str35 = cassandraHost32.toString();
        boolean boolean36 = cassandraHost32.getLifo();
        boolean boolean37 = cassandraHost28.equals((java.lang.Object) cassandraHost32);
        boolean boolean38 = cassandraHost28.getUseSocketKeepalive();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray53, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray53, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray53);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient64 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9260", tSSLTransportParameters63);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient64.equals(null)", !hKerberosThriftClient64.equals(null));
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1939");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str9 = cassandraHost8.getIp();
        boolean boolean10 = subject0.equals((java.lang.Object) str9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("100:1", (int) (short) 1);
        cassandraHost13.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "13(0.0.0.13):221");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1940");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost(":9160", (int) (short) 11);
        long long6 = cassandraHost5.getMaxWaitTimeWhenExhausted();
        java.lang.String str7 = cassandraHost5.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "411");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1941");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str7 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("11", (int) ' ');
        cassandraHost11.setMaxWaitTimeWhenExhausted(129L);
        cassandraHost11.setUseThriftFramedTransport(true);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray29);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9359", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1942");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int8 = cassandraHost7.getPort();
        java.lang.String str9 = cassandraHost7.getName();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100):97", strArray24);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "-1:0", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1943");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):32");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1944");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", 51);
        java.lang.String str14 = cassandraHost13.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1945");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean25 = cassandraHost23.equals((java.lang.Object) 0.0f);
        int int26 = cassandraHost23.getPort();
        java.lang.String str27 = cassandraHost23.getName();
        java.lang.String str28 = cassandraHost23.getHost();
        boolean boolean29 = cassandraHost23.getUseThriftFramedTransport();
        cassandraHost23.setMaxWaitTimeWhenExhausted(103L);
        java.lang.String[] strArray43 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray43, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("102", strArray43, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45", strArray43);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "0.0.0.10", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1946");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong8 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        long long9 = atomicLong8.getAndDecrement();
        float float10 = atomicLong8.floatValue();
        float float11 = atomicLong8.floatValue();
        float float12 = atomicLong8.floatValue();
        boolean boolean15 = atomicLong8.compareAndSet(9260L, (long) (byte) 103);
        long long17 = atomicLong8.getAndAdd(33L);
        boolean boolean18 = subject0.equals((java.lang.Object) 33L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int22 = cassandraHost21.getMaxActive();
        cassandraHost21.setMaxWaitTimeWhenExhausted(33L);
        int int25 = cassandraHost21.getCassandraThriftSocketTimeout();
        java.lang.String str26 = cassandraHost21.getName();
        cassandraHost21.setMaxWaitTimeWhenExhausted(22L);
        cassandraHost21.setCassandraThriftSocketTimeout((int) (byte) 1);
        java.lang.String str31 = cassandraHost21.toString();
        int int32 = cassandraHost21.getMaxActive();
        boolean boolean33 = cassandraHost21.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "9269(0.0.36.53)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1947");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        boolean boolean7 = subject0.isReadOnly();
        subject0.setReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (byte) 10);
        cassandraHost12.setCassandraThriftSocketTimeout((int) (short) 1);
        java.lang.String str15 = cassandraHost12.toString();
        java.lang.String str16 = cassandraHost12.getIp();
        boolean boolean17 = cassandraHost12.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "113");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1948");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong8 = new java.util.concurrent.atomic.AtomicLong((long) '4');
        int int9 = atomicLong8.intValue();
        boolean boolean10 = subject0.equals((java.lang.Object) atomicLong8);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:101", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:50", strArray28, true);
        boolean boolean49 = subject0.equals((java.lang.Object) strArray28);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost52 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.10", 60);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost52, "104");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1949");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.util.Set<java.lang.Object> objSet12 = subject5.getPrivateCredentials();
        java.lang.String str13 = subject5.toString();
        java.util.Set<java.lang.Object> objSet14 = subject5.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean18 = cassandraHost16.equals((java.lang.Object) 0.0f);
        int int19 = cassandraHost16.getPort();
        java.lang.String str20 = cassandraHost16.getName();
        java.lang.String str21 = cassandraHost16.getHost();
        boolean boolean22 = cassandraHost16.getUseThriftFramedTransport();
        cassandraHost16.setMaxWaitTimeWhenExhausted(103L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        java.lang.String str28 = cassandraHost27.toString();
        boolean boolean29 = cassandraHost27.getLifo();
        boolean boolean30 = cassandraHost27.getLifo();
        boolean boolean31 = cassandraHost16.equals((java.lang.Object) boolean30);
        java.lang.String str32 = cassandraHost16.getUrl();
        cassandraHost16.setLifo(false);
        int int35 = cassandraHost16.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost16, "0.0.0.100(0.0.0.100):9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1950");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean12 = cassandraHost10.equals((java.lang.Object) 0.0f);
        int int13 = cassandraHost10.getCassandraThriftSocketTimeout();
        cassandraHost10.setUseThriftFramedTransport(true);
        java.lang.String[] strArray25 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:0", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1:10", strArray25, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "100(0.0.0.100):9160", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1951");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):100", 11);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "127.0.0.1(127.0.0.1):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1952");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        int int12 = cassandraHost9.getCassandraThriftSocketTimeout();
        java.lang.String str13 = cassandraHost9.getName();
        boolean boolean14 = cassandraHost9.getUseThriftFramedTransport();
        java.lang.String str15 = cassandraHost9.toString();
        int int16 = cassandraHost9.getPort();
        java.lang.String[] strArray29 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100:102", strArray29);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):97", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1953");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.lang.String str8 = subject0.toString();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost11.setMaxActive((int) (short) 0);
        int int14 = cassandraHost11.getPort();
        boolean boolean15 = cassandraHost11.getUseThriftFramedTransport();
        int int16 = cassandraHost11.getCassandraThriftSocketTimeout();
        java.lang.String str17 = cassandraHost11.getIp();
        java.lang.String str18 = cassandraHost11.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "209:-2");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1954");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        int int7 = cassandraHost6.getMaxActive();
        cassandraHost6.setUseThriftFramedTransport(true);
        cassandraHost6.setMaxWaitTimeWhenExhausted(101L);
        cassandraHost6.setUseSocketKeepalive(false);
        java.lang.String str14 = cassandraHost6.getHost();
        cassandraHost6.setCassandraThriftSocketTimeout((int) (byte) 1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1955");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        boolean boolean10 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        boolean boolean12 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)");
        java.lang.String str15 = cassandraHost14.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "10:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1956");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong8 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 0);
        long long9 = atomicLong8.getAndDecrement();
        long long10 = atomicLong8.decrementAndGet();
        long long11 = atomicLong8.longValue();
        long long12 = atomicLong8.longValue();
        long long13 = atomicLong8.incrementAndGet();
        atomicLong8.set((long) (short) 12);
        boolean boolean16 = subject0.equals((java.lang.Object) (short) 12);
        javax.security.auth.Subject subject17 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet18 = subject17.getPublicCredentials();
        subject17.setReadOnly();
        javax.security.auth.Subject subject20 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet21 = subject20.getPublicCredentials();
        subject20.setReadOnly();
        java.lang.String str23 = subject20.toString();
        java.lang.String str24 = subject20.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean28 = cassandraHost26.equals((java.lang.Object) 0.0f);
        java.lang.String str29 = cassandraHost26.getName();
        boolean boolean30 = subject20.equals((java.lang.Object) cassandraHost26);
        cassandraHost26.setUseThriftFramedTransport(false);
        boolean boolean33 = subject17.equals((java.lang.Object) cassandraHost26);
        java.lang.String str34 = cassandraHost26.getIp();
        java.lang.String str35 = cassandraHost26.getIp();
        boolean boolean36 = cassandraHost26.getUseThriftFramedTransport();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray48, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray48, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray48);
        tSSLTransportParameters55.setKeyStore("221", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", "0.0.0.100", "32(0.0.0.32)(32(0.0.0.32)):-125");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient61 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))):99", tSSLTransportParameters55);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient61.equals(null)", !hKerberosThriftClient61.equals(null));
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1957");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) (short) -1);
        java.lang.String str10 = cassandraHost9.getIp();
        boolean boolean11 = cassandraHost9.getUseSocketKeepalive();
        boolean boolean12 = cassandraHost9.isPerformNameResolution();
        java.lang.String str13 = cassandraHost9.getName();
        boolean boolean14 = cassandraHost9.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "209:-2");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1958");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray11, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray11);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray11);
        tSSLTransportParameters15.setKeyStore("-1", "127.0.0.1");
        tSSLTransportParameters15.setKeyStore("(127.0.0.1):9160", "0.0.0.0(0.0.0.0):101", "(127.0.0.1):100", "(127.0.0.1)((127.0.0.1)):35");
        boolean boolean24 = subject0.equals((java.lang.Object) "0.0.0.0(0.0.0.0):101");
        java.util.Set<java.lang.Object> objSet25 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("32(0.0.0.32):50", 51);
        cassandraHost28.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1959");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean9 = cassandraHost7.equals((java.lang.Object) 0.0f);
        int int10 = cassandraHost7.getCassandraThriftSocketTimeout();
        java.lang.String str11 = cassandraHost7.getName();
        java.lang.String str12 = cassandraHost7.getUrl();
        java.lang.String str13 = cassandraHost7.toString();
        cassandraHost7.setMaxActive(10);
        boolean boolean16 = cassandraHost7.getUseSocketKeepalive();
        boolean boolean17 = subject0.equals((java.lang.Object) cassandraHost7);
        javax.security.auth.Subject subject18 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet19 = subject18.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet20 = subject18.getPublicCredentials();
        java.lang.String str21 = subject18.toString();
        boolean boolean22 = subject18.isReadOnly();
        java.util.Set<java.lang.Object> objSet23 = subject18.getPrivateCredentials();
        java.lang.String str24 = subject18.toString();
        boolean boolean25 = subject0.equals((java.lang.Object) subject18);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("101");
        java.lang.String str28 = cassandraHost27.getHost();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray38);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, "50", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1960");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        tSSLTransportParameters21.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", "", "301", "127.0.0.1(127.0.0.1):10");
        boolean boolean27 = subject0.equals((java.lang.Object) "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost30 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int31 = cassandraHost30.getMaxActive();
        java.lang.String str32 = cassandraHost30.getName();
        java.lang.String[] strArray46 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray46, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray46, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9160", strArray46, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient56 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost30, ":0((:0():2", tSSLTransportParameters55);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient56.equals(null)", !hKerberosThriftClient56.equals(null));
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1961");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean9 = cassandraHost7.equals((java.lang.Object) 0.0f);
        int int10 = cassandraHost7.getCassandraThriftSocketTimeout();
        java.lang.String str11 = cassandraHost7.getName();
        java.lang.String str12 = cassandraHost7.getUrl();
        java.lang.String str13 = cassandraHost7.toString();
        cassandraHost7.setMaxActive(10);
        boolean boolean16 = cassandraHost7.getUseSocketKeepalive();
        boolean boolean17 = subject0.equals((java.lang.Object) cassandraHost7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long20 = cassandraHost19.getMaxWaitTimeWhenExhausted();
        cassandraHost19.setLifo(false);
        long long23 = cassandraHost19.getMaxWaitTimeWhenExhausted();
        java.lang.String str24 = cassandraHost19.getUrl();
        java.lang.String str25 = cassandraHost19.getName();
        cassandraHost19.setUseThriftFramedTransport(true);
        long long28 = cassandraHost19.getMaxWaitTimeWhenExhausted();
        int int29 = cassandraHost19.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1962");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong6 = new java.util.concurrent.atomic.AtomicLong();
        long long7 = atomicLong6.get();
        double double8 = atomicLong6.doubleValue();
        long long9 = atomicLong6.getAndIncrement();
        atomicLong6.set(10L);
        boolean boolean14 = atomicLong6.weakCompareAndSet((long) (byte) 111, (-1L));
        atomicLong6.lazySet((long) 9260);
        boolean boolean17 = subject0.equals((java.lang.Object) 9260);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean21 = cassandraHost20.getUseThriftFramedTransport();
        cassandraHost20.setMaxActive((int) (byte) -1);
        cassandraHost20.setCassandraThriftSocketTimeout((int) (short) 102);
        cassandraHost20.setUseSocketKeepalive(false);
        boolean boolean28 = cassandraHost20.getLifo();
        java.lang.String str29 = cassandraHost20.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "Subject(Subject):99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1963");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0(0.0.0.0):101", (int) (short) 50);
        java.lang.String[] strArray15 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray15, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15, false);
        tSSLTransportParameters20.setKeyStore("CassandraClient<%s-%d>:-1", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):10", "-1:101", "");
        tSSLTransportParameters20.setKeyStore("130", ":9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost4, "9211", tSSLTransportParameters20);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1964");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPrivateCredentials();
        boolean boolean8 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject5.getPublicCredentials();
        boolean boolean13 = subject0.equals((java.lang.Object) objSet12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str18 = cassandraHost15.toString();
        cassandraHost15.setMaxActive(9160);
        cassandraHost15.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean23 = cassandraHost15.getUseThriftFramedTransport();
        boolean boolean24 = subject0.equals((java.lang.Object) boolean23);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet26 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):10");
        int int29 = cassandraHost28.getMaxActive();
        java.lang.String[] strArray38 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray38, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "(127.0.0.1)((127.0.0.1)):1", tSSLTransportParameters45);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1965");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        int int9 = cassandraHost6.getCassandraThriftSocketTimeout();
        java.lang.String str10 = cassandraHost6.getName();
        boolean boolean11 = cassandraHost6.isPerformNameResolution();
        cassandraHost6.setMaxActive((int) (short) 12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters15.setKeyStore("hi!", "");
        tSSLTransportParameters15.setKeyStore("CassandraClient<%s-%d>", "CassandraClient<%s-%d>");
        tSSLTransportParameters15.requireClientAuth(true);
        tSSLTransportParameters15.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", "Subject:\n", "0.0.0.0", "0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):52", tSSLTransportParameters15);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1966");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        boolean boolean23 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, ":9160(:9160)(:9160(:9160)):11");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }
}

