import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1001");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str11 = cassandraHost10.getUrl();
        boolean boolean12 = cassandraHost10.isPerformNameResolution();
        java.util.concurrent.atomic.AtomicLong atomicLong14 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean15 = cassandraHost10.equals((java.lang.Object) atomicLong14);
        cassandraHost10.setLifo(true);
        java.lang.String str18 = cassandraHost10.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "hi!(hi!):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1002");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):1", 9);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "hi!(hi!):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1003");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int11 = cassandraHost10.getMaxActive();
        cassandraHost10.setMaxWaitTimeWhenExhausted((long) '#');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray23);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "103", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1004");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("10");
        boolean boolean8 = subject0.equals((java.lang.Object) cassandraHost7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long11 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        boolean boolean12 = cassandraHost10.getUseThriftFramedTransport();
        java.lang.String str13 = cassandraHost10.toString();
        java.lang.String str14 = cassandraHost10.toString();
        long long15 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        long long16 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        java.lang.String str17 = cassandraHost10.toString();
        java.lang.String str18 = cassandraHost10.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "18");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1005");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters18.setKeyStore("hi!", "");
        tSSLTransportParameters18.setTrustStore("", "hi!");
        tSSLTransportParameters18.setKeyStore("hi!", "hi!", "hi!", "hi!");
        boolean boolean30 = subject0.equals((java.lang.Object) "hi!");
        boolean boolean31 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost33 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52");
        cassandraHost33.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost33, "0.0.0.100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1006");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):9160", (int) (short) 100);
        cassandraHost9.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "-1:0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1007");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) (byte) 98);
        boolean boolean11 = subject0.equals((java.lang.Object) (byte) 98);
        java.util.Set<java.security.Principal> principalSet12 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean16 = cassandraHost14.equals((java.lang.Object) 0.0f);
        int int17 = cassandraHost14.getCassandraThriftSocketTimeout();
        java.lang.String str18 = cassandraHost14.getName();
        java.lang.String str19 = cassandraHost14.getUrl();
        java.lang.String[] strArray30 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30, false);
        tSSLTransportParameters35.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "127", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1008");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong8 = new java.util.concurrent.atomic.AtomicLong((long) '4');
        int int9 = atomicLong8.intValue();
        boolean boolean10 = subject0.equals((java.lang.Object) atomicLong8);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):100", (int) (byte) 97);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32):-125", strArray31);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "100(0.0.0.100):9160", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1009");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) 0.0f);
        int int14 = cassandraHost11.getPort();
        java.lang.String str15 = cassandraHost11.getName();
        java.lang.String str16 = cassandraHost11.getHost();
        boolean boolean17 = cassandraHost11.getUseThriftFramedTransport();
        boolean boolean18 = cassandraHost11.getLifo();
        long long19 = cassandraHost11.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient21 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "Subject(Subject)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient21.equals(null)", !hKerberosThriftClient21.equals(null));
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1010");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost9.setUseThriftFramedTransport(true);
        boolean boolean12 = cassandraHost7.equals((java.lang.Object) cassandraHost9);
        boolean boolean13 = cassandraHost7.getUseThriftFramedTransport();
        java.util.concurrent.atomic.AtomicLong atomicLong15 = new java.util.concurrent.atomic.AtomicLong((long) (short) 102);
        int int16 = atomicLong15.intValue();
        long long18 = atomicLong15.addAndGet(199L);
        java.lang.String str19 = atomicLong15.toString();
        int int20 = atomicLong15.intValue();
        boolean boolean21 = cassandraHost7.equals((java.lang.Object) atomicLong15);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):100", strArray40, true);
        tSSLTransportParameters60.setKeyStore("(127.0.0.1)((127.0.0.1)):9260", "0.0.0.100", "Subject:35", "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", tSSLTransportParameters60);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1011");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("100:0", (int) (short) 100);
        boolean boolean3 = cassandraHost2.getLifo();
        javax.security.auth.Subject subject4 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet5 = subject4.getPublicCredentials();
        subject4.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject4.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject4.getPrincipals();
        java.lang.String str9 = subject4.toString();
        boolean boolean10 = cassandraHost2.equals((java.lang.Object) subject4);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        cassandraHost13.setMaxWaitTimeWhenExhausted((long) '4');
        java.lang.String str16 = cassandraHost13.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject4, cassandraHost13, "32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1012");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters12 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray10, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray10, false);
        boolean boolean15 = subject0.equals((java.lang.Object) "Subject:\n");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray20);
        java.lang.Class<?> wildcardClass24 = strArray20.getClass();
        boolean boolean25 = subject0.equals((java.lang.Object) strArray20);
        java.util.Set<java.security.Principal> principalSet26 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("9269:9160", 1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "100(0.0.0.100):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1013");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong15 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean16 = cassandraHost13.equals((java.lang.Object) '#');
        java.lang.String str17 = cassandraHost13.getHost();
        boolean boolean18 = cassandraHost10.equals((java.lang.Object) cassandraHost13);
        cassandraHost10.setMaxActive((int) (byte) 8);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1014");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str21 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost26.setUseThriftFramedTransport(true);
        boolean boolean29 = cassandraHost24.equals((java.lang.Object) cassandraHost26);
        boolean boolean30 = cassandraHost24.getUseThriftFramedTransport();
        boolean boolean31 = cassandraHost24.getLifo();
        cassandraHost24.setMaxActive(50);
        java.lang.String str34 = cassandraHost24.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1015");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)", (-1));
        java.lang.String str8 = cassandraHost7.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1016");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        cassandraHost7.setCassandraThriftSocketTimeout((-1));
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        tSSLTransportParameters35.setTrustStore("CassandraClient<%s-%d>", "127.0.0.1(127.0.0.1):10");
        tSSLTransportParameters35.setTrustStore("CassandraClient<%s-%d>", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", "(127.0.0.1):100", "0.0.0.0");
        tSSLTransportParameters35.setKeyStore("Subject(Subject):10", "100(0.0.0.100):100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "CassandraClient<%s-%d>:-1", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1017");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean18 = subject0.isReadOnly();
        java.lang.String str19 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("12", 220);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "0.0.0.100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1018");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):102", strArray28, true);
        boolean boolean37 = subject0.equals((java.lang.Object) "127.0.0.1(127.0.0.1):102");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost40 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):1", (int) (short) 102);
        int int41 = cassandraHost40.getMaxActive();
        java.lang.String[] strArray48 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", strArray48);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost40, "32(0.0.0.32)(32(0.0.0.32))", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1019");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):9160", 0);
        cassandraHost8.setCassandraThriftSocketTimeout(0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "127.0.0.1:10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1020");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("1001", (int) (byte) -2);
        java.lang.String[] strArray17 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32):-125", strArray17, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)", tSSLTransportParameters23);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1021");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) 10);
        cassandraHost7.setCassandraThriftSocketTimeout((int) (short) 0);
        java.lang.String str12 = cassandraHost7.toString();
        cassandraHost7.setUseSocketKeepalive(false);
        java.lang.String str15 = cassandraHost7.getUrl();
        boolean boolean16 = cassandraHost7.isPerformNameResolution();
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray28);
        tSSLTransportParameters33.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1)((127.0.0.1)):9260", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1022");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters12 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray10, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray10, false);
        boolean boolean15 = subject0.equals((java.lang.Object) "Subject:\n");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray20);
        java.lang.Class<?> wildcardClass24 = strArray20.getClass();
        boolean boolean25 = subject0.equals((java.lang.Object) strArray20);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int29 = cassandraHost28.getMaxActive();
        java.lang.String[] strArray42 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray42, true);
        tSSLTransportParameters49.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):100", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1023");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        java.lang.String str9 = cassandraHost8.toString();
        boolean boolean10 = cassandraHost8.getLifo();
        java.lang.String[] strArray23 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray23, true);
        tSSLTransportParameters30.requireClientAuth(true);
        tSSLTransportParameters30.setTrustStore("32(0.0.0.32):-125", "98", ":0(:0):10", "(127.0.0.1):0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "-1:101", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1024");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) 0.0f);
        int int14 = cassandraHost11.getCassandraThriftSocketTimeout();
        java.lang.String str15 = cassandraHost11.getName();
        boolean boolean16 = cassandraHost11.getUseThriftFramedTransport();
        java.lang.String str17 = cassandraHost11.getIp();
        java.lang.String[] strArray31 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray31);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1025");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        javax.security.auth.Subject subject40 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet41 = subject40.getPublicCredentials();
        subject40.setReadOnly();
        java.lang.String str43 = subject40.toString();
        java.lang.String str44 = subject40.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost46 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean48 = cassandraHost46.equals((java.lang.Object) 0.0f);
        java.lang.String str49 = cassandraHost46.getName();
        boolean boolean50 = subject40.equals((java.lang.Object) cassandraHost46);
        java.lang.String str51 = cassandraHost46.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost54 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost54.setMaxWaitTimeWhenExhausted(0L);
        boolean boolean57 = cassandraHost46.equals((java.lang.Object) cassandraHost54);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost54, "31");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1026");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean9 = cassandraHost8.getUseThriftFramedTransport();
        boolean boolean10 = cassandraHost8.getUseSocketKeepalive();
        cassandraHost8.setLifo(false);
        long long13 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        boolean boolean14 = cassandraHost8.getLifo();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray29, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "Subject(Subject):52", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1027");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("100");
        cassandraHost11.setCassandraThriftSocketTimeout((int) (byte) 53);
        java.lang.String str14 = cassandraHost11.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters16.setKeyStore("hi!", "");
        tSSLTransportParameters16.setKeyStore("hi!", "");
        tSSLTransportParameters16.setKeyStore("", "0", "-1", "hi!:100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1)):-2", tSSLTransportParameters16);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1028");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        java.lang.String str23 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean27 = cassandraHost25.equals((java.lang.Object) 0.0f);
        int int28 = cassandraHost25.getPort();
        java.lang.String str29 = cassandraHost25.getName();
        java.lang.String str30 = cassandraHost25.getHost();
        boolean boolean31 = cassandraHost25.getUseThriftFramedTransport();
        boolean boolean32 = cassandraHost25.getLifo();
        long long33 = cassandraHost25.getMaxWaitTimeWhenExhausted();
        javax.security.auth.Subject subject35 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet36 = subject35.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet37 = subject35.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet38 = subject35.getPrincipals();
        java.util.Set<java.security.Principal> principalSet39 = subject35.getPrincipals();
        java.util.Set<java.security.Principal> principalSet40 = subject35.getPrincipals();
        java.lang.String str41 = subject35.toString();
        boolean boolean42 = subject35.isReadOnly();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray53, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray53, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray53, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray53, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray53);
        boolean boolean63 = subject35.equals((java.lang.Object) tSSLTransportParameters62);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient64 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "-1:301", tSSLTransportParameters62);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient64.equals(null)", !hKerberosThriftClient64.equals(null));
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1029");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        subject7.setReadOnly();
        java.lang.String str10 = subject7.toString();
        java.lang.String str11 = subject7.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean15 = cassandraHost13.equals((java.lang.Object) 0.0f);
        java.lang.String str16 = cassandraHost13.getName();
        boolean boolean17 = subject7.equals((java.lang.Object) cassandraHost13);
        java.lang.String str18 = cassandraHost13.toString();
        int int19 = cassandraHost13.getPort();
        java.lang.String str20 = cassandraHost13.getIp();
        java.lang.String[] strArray38 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.32", strArray38, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):52", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1030");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getIp();
        java.lang.String str15 = cassandraHost11.getName();
        cassandraHost11.setUseSocketKeepalive(true);
        java.lang.String str18 = cassandraHost11.getIp();
        java.lang.String str19 = cassandraHost11.getUrl();
        java.lang.String[] strArray30 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray30);
        tSSLTransportParameters33.requireClientAuth(false);
        tSSLTransportParameters33.setKeyStore("100(0.0.0.100)(100(0.0.0.100)):100", "Subject(Subject):52");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "Subject(Subject):35", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1031");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", 101);
        cassandraHost10.setMaxActive(98);
        boolean boolean13 = cassandraHost10.getUseSocketKeepalive();
        java.lang.String[] strArray26 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("102", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray26);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "Subject(Subject):32", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1032");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean10 = cassandraHost9.getLifo();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray24, false);
        boolean boolean38 = cassandraHost9.equals((java.lang.Object) false);
        cassandraHost9.setMaxActive((int) (short) 9260);
        cassandraHost9.setCassandraThriftSocketTimeout((int) (short) 137);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "0.0.0.0(0.0.0.0)(0.0.0.0(0.0.0.0)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1033");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        int int12 = cassandraHost11.getMaxActive();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "Subject(Subject)", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1034");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost8.setMaxActive((int) (short) 0);
        int int11 = cassandraHost8.getPort();
        cassandraHost8.setUseThriftFramedTransport(false);
        boolean boolean14 = cassandraHost8.getUseSocketKeepalive();
        cassandraHost8.setUseSocketKeepalive(false);
        cassandraHost8.setUseSocketKeepalive(false);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100):9260", strArray32, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "hi!(hi!)(hi!(hi!)):0", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1035");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.lang.String str21 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160");
        cassandraHost23.setLifo(true);
        cassandraHost23.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "(127.0.0.1):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1036");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet21 = subject0.getPrincipals();
        java.lang.String str22 = subject0.toString();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("9269");
        java.lang.String str27 = cassandraHost26.getUrl();
        cassandraHost26.setCassandraThriftSocketTimeout(50);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "127.0.0.1(127.0.0.1):102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1037");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))", (int) (byte) 112);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "127.0.0.1(127.0.0.1):97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1038");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("98", (int) (short) 10);
        cassandraHost8.setMaxWaitTimeWhenExhausted((long) (byte) 52);
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", strArray25, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1039");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("9562", (int) (short) 60);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "127");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1040");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost9.setMaxWaitTimeWhenExhausted(0L);
        boolean boolean13 = cassandraHost9.equals((java.lang.Object) ' ');
        boolean boolean14 = cassandraHost9.isPerformNameResolution();
        cassandraHost9.setLifo(true);
        java.lang.String str17 = cassandraHost9.getUrl();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9160", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", strArray30, true);
        tSSLTransportParameters39.setKeyStore("100(0.0.0.100):9160", "Subject(Subject):35");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):9", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1041");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (-1));
        java.lang.String str13 = cassandraHost12.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "hi!:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1042");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int14 = cassandraHost13.getPort();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray30, true);
        boolean boolean45 = cassandraHost13.equals((java.lang.Object) tSSLTransportParameters44);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "13", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1043");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("32", 97);
        java.lang.String str13 = cassandraHost12.getIp();
        java.lang.String[] strArray31 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.32", strArray31, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1044");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30);
        boolean boolean36 = subject0.equals((java.lang.Object) strArray30);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost39 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost39.setMaxWaitTimeWhenExhausted(0L);
        int int42 = cassandraHost39.getPort();
        boolean boolean43 = cassandraHost39.getLifo();
        int int44 = cassandraHost39.getPort();
        java.lang.String[] strArray56 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray56, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray56, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray56);
        tSSLTransportParameters62.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost39, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))(127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))):9160", tSSLTransportParameters62);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1045");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100", 9269);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "9270");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1046");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost12.setMaxWaitTimeWhenExhausted(0L);
        boolean boolean15 = cassandraHost12.getLifo();
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0)", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):11", strArray28);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "(127.0.0.1)((127.0.0.1)):-2", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1047");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) (byte) 103);
        cassandraHost10.setUseSocketKeepalive(false);
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray25, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "hi!(hi!)(hi!(hi!)):0", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1048");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 9);
        boolean boolean23 = subject0.equals((java.lang.Object) cassandraHost22);
        javax.security.auth.Subject subject24 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet25 = subject24.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet26 = subject24.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet27 = subject24.getPrincipals();
        boolean boolean28 = subject24.isReadOnly();
        java.util.Set<java.lang.Object> objSet29 = subject24.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int33 = cassandraHost32.getCassandraThriftSocketTimeout();
        java.lang.String str34 = cassandraHost32.toString();
        boolean boolean35 = subject24.equals((java.lang.Object) cassandraHost32);
        int int36 = cassandraHost32.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost32, "(127.0.0.1)((127.0.0.1))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1049");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long11 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        cassandraHost10.setCassandraThriftSocketTimeout((-1));
        cassandraHost10.setMaxWaitTimeWhenExhausted(9269L);
        boolean boolean16 = cassandraHost10.isPerformNameResolution();
        boolean boolean17 = cassandraHost10.getUseSocketKeepalive();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):1", strArray34);
        tSSLTransportParameters50.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "Subject(Subject):32", tSSLTransportParameters50);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1050");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        int int11 = cassandraHost8.getCassandraThriftSocketTimeout();
        java.lang.String str12 = cassandraHost8.getName();
        java.lang.String str13 = cassandraHost8.getUrl();
        java.lang.String str14 = cassandraHost8.getIp();
        java.lang.String str15 = cassandraHost8.getIp();
        java.lang.String str16 = cassandraHost8.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1051");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters18.setKeyStore("hi!", "");
        tSSLTransportParameters18.setTrustStore("", "hi!");
        tSSLTransportParameters18.setKeyStore("hi!", "hi!", "hi!", "hi!");
        boolean boolean30 = subject0.equals((java.lang.Object) "hi!");
        boolean boolean31 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost33 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost33.setMaxActive((int) (short) 0);
        int int36 = cassandraHost33.getPort();
        boolean boolean37 = cassandraHost33.getUseThriftFramedTransport();
        int int38 = cassandraHost33.getCassandraThriftSocketTimeout();
        cassandraHost33.setUseThriftFramedTransport(true);
        java.lang.String str41 = cassandraHost33.getUrl();
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost33, "100(0.0.0.100)(100(0.0.0.100)):100", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1052");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int6 = cassandraHost5.getMaxActive();
        java.lang.String str7 = cassandraHost5.getName();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray22);
        tSSLTransportParameters33.setTrustStore("CassandraClient<%s-%d>", "127.0.0.1(127.0.0.1):10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "127.0.0.1(127.0.0.1):102", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1053");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100");
        int int22 = cassandraHost21.getMaxActive();
        cassandraHost21.setMaxWaitTimeWhenExhausted(9347L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, ":9160(:9160):11");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1054");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject8 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet9 = subject8.getPublicCredentials();
        subject8.setReadOnly();
        java.lang.String str11 = subject8.toString();
        java.lang.String str12 = subject8.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean16 = cassandraHost14.equals((java.lang.Object) 0.0f);
        java.lang.String str17 = cassandraHost14.getName();
        boolean boolean18 = subject8.equals((java.lang.Object) cassandraHost14);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1055");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost12.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str15 = cassandraHost12.toString();
        cassandraHost12.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost12.setMaxWaitTimeWhenExhausted((long) (byte) 1);
        cassandraHost12.setCassandraThriftSocketTimeout(50);
        boolean boolean22 = cassandraHost12.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "100:35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1056");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        int int6 = cassandraHost5.getCassandraThriftSocketTimeout();
        cassandraHost5.setLifo(false);
        cassandraHost5.setUseThriftFramedTransport(false);
        java.lang.String[] strArray19 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        tSSLTransportParameters20.setTrustStore("hi!:9160", "CassandraClient<%s-%d>");
        tSSLTransportParameters20.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "127.0.0.1");
        tSSLTransportParameters20.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "0:9160", tSSLTransportParameters20);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1057");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str10 = cassandraHost7.toString();
        int int11 = cassandraHost7.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "hi!(hi!)(hi!(hi!)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1058");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):1", (int) ' ');
        cassandraHost22.setCassandraThriftSocketTimeout(13);
        java.lang.String str25 = cassandraHost22.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "0.0.0.32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1059");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str9 = cassandraHost8.getIp();
        boolean boolean10 = subject0.equals((java.lang.Object) str9);
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean15 = cassandraHost14.isPerformNameResolution();
        cassandraHost14.setUseThriftFramedTransport(true);
        javax.security.auth.Subject subject19 = new javax.security.auth.Subject();
        subject19.setReadOnly();
        java.util.Set<java.security.Principal> principalSet21 = subject19.getPrincipals();
        java.util.Set<java.lang.Object> objSet22 = subject19.getPublicCredentials();
        java.lang.String[] strArray26 = new java.lang.String[] { "(127.0.0.1)((127.0.0.1)):9260", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26);
        boolean boolean28 = subject19.equals((java.lang.Object) tSSLTransportParameters27);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "Subject:110", tSSLTransportParameters27);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1060");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) (byte) 0);
        java.lang.String str12 = cassandraHost11.getUrl();
        cassandraHost11.setUseSocketKeepalive(false);
        cassandraHost11.setMaxActive((int) (short) 9);
        cassandraHost11.setMaxActive((int) (byte) 98);
        java.lang.String[] strArray36 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214:9", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray36);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "Subject(Subject):101", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1061");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str22 = subject0.toString();
        java.lang.String str23 = subject0.toString();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet25 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("1", 1);
        int int29 = cassandraHost28.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):8");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1062");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.101");
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters9 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters9.setKeyStore("hi!", "");
        tSSLTransportParameters9.setKeyStore("CassandraClient<%s-%d>", "CassandraClient<%s-%d>");
        tSSLTransportParameters9.setTrustStore("Subject:\n", "hi!:100", "", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        tSSLTransportParameters9.setKeyStore("hi!:100", "CassandraClient<%s-%d>");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", tSSLTransportParameters9);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1063");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost10.setMaxActive((int) (byte) 10);
        boolean boolean13 = cassandraHost10.getUseThriftFramedTransport();
        java.lang.String str14 = cassandraHost10.getUrl();
        cassandraHost10.setUseSocketKeepalive(false);
        boolean boolean17 = cassandraHost10.isPerformNameResolution();
        java.lang.String str18 = cassandraHost10.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1064");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        int int13 = cassandraHost12.getMaxActive();
        cassandraHost12.setMaxWaitTimeWhenExhausted((long) (short) 0);
        boolean boolean16 = cassandraHost12.getUseSocketKeepalive();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", strArray26, false);
        tSSLTransportParameters32.setKeyStore("2", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "(127.0.0.1):102", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1065");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9");
        java.lang.String str22 = cassandraHost21.getIp();
        java.lang.String str23 = cassandraHost21.getHost();
        java.lang.String[] strArray33 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("11", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray33, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "0:9160", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1066");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("11", (int) ' ');
        cassandraHost7.setMaxWaitTimeWhenExhausted(129L);
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray25, false);
        tSSLTransportParameters35.setTrustStore("101", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160");
        tSSLTransportParameters35.requireClientAuth(false);
        tSSLTransportParameters35.requireClientAuth(false);
        tSSLTransportParameters35.setKeyStore("Subject:50", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1):102", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1067");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters12 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray10, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray10, false);
        boolean boolean15 = subject0.equals((java.lang.Object) "Subject:\n");
        java.util.Set<java.lang.Object> objSet16 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean20 = cassandraHost19.getUseSocketKeepalive();
        boolean boolean21 = cassandraHost19.getLifo();
        cassandraHost19.setMaxWaitTimeWhenExhausted(9261L);
        cassandraHost19.setUseSocketKeepalive(true);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("8", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray42, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "102", tSSLTransportParameters58);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1068");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost7.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str10 = cassandraHost7.getIp();
        java.lang.String str11 = cassandraHost7.getName();
        cassandraHost7.setUseSocketKeepalive(true);
        java.lang.String str14 = cassandraHost7.getIp();
        java.lang.String[] strArray26 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray26);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "127.0.0.1(127.0.0.1):102", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1069");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean11 = cassandraHost10.getUseThriftFramedTransport();
        cassandraHost10.setUseThriftFramedTransport(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1070");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost8.setLifo(true);
        boolean boolean11 = cassandraHost8.getUseThriftFramedTransport();
        java.lang.String str12 = cassandraHost8.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1071");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.8");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient7 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient7.equals(null)", !hKerberosThriftClient7.equals(null));
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1072");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray20, true);
        tSSLTransportParameters27.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean31 = subject0.equals((java.lang.Object) tSSLTransportParameters27);
        java.util.Set<java.lang.Object> objSet32 = subject0.getPrivateCredentials();
        boolean boolean33 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost36 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        java.lang.String str37 = cassandraHost36.getUrl();
        cassandraHost36.setMaxWaitTimeWhenExhausted(137L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost36, "Subject(Subject):101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1073");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        boolean boolean10 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)", 101);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "9468");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1074");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost(":100", (int) (byte) 99);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray24, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "127.0.0.1(127.0.0.1):1", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1075");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        java.lang.String[] strArray19 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray19, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray19);
        boolean boolean26 = subject0.equals((java.lang.Object) strArray19);
        java.util.Set<java.security.Principal> principalSet27 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet28 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost30 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0(0.0.0.0)");
        cassandraHost30.setUseSocketKeepalive(false);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray44, true);
        tSSLTransportParameters51.setTrustStore("0.0.0.100(0.0.0.100):9260", "hi!(hi!):9160", ":9160(:9160):11", "(127.0.0.1)((127.0.0.1)):100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient57 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost30, "hi!(hi!)(hi!(hi!))", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient57.equals(null)", !hKerberosThriftClient57.equals(null));
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1076");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long9 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        cassandraHost8.setCassandraThriftSocketTimeout((-1));
        cassandraHost8.setMaxWaitTimeWhenExhausted(9269L);
        cassandraHost8.setMaxWaitTimeWhenExhausted(118L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean21 = cassandraHost19.equals((java.lang.Object) 0.0f);
        cassandraHost19.setUseSocketKeepalive(false);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray32);
        boolean boolean38 = cassandraHost19.equals((java.lang.Object) strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214:9", strArray32, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "100(0.0.0.100)(100(0.0.0.100)):-1", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1077");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))", 101);
        java.lang.String[] strArray19 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray19, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray19, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray19, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):52", strArray19, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):8", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1078");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost3 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        boolean boolean4 = cassandraHost3.getLifo();
        cassandraHost3.setUseSocketKeepalive(false);
        boolean boolean7 = cassandraHost3.getUseThriftFramedTransport();
        boolean boolean8 = cassandraHost3.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost3, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1079");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str9 = cassandraHost8.getIp();
        boolean boolean10 = subject0.equals((java.lang.Object) str9);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("-1", 101);
        java.lang.String str16 = cassandraHost15.getUrl();
        int int17 = cassandraHost15.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, ":100:9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1080");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) (byte) 0);
        java.lang.String str12 = cassandraHost11.getUrl();
        java.lang.String[] strArray30 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100):9260", strArray30, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "0.0.0.0(0.0.0.0):101", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1081");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        boolean boolean17 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long22 = cassandraHost21.getMaxWaitTimeWhenExhausted();
        cassandraHost21.setCassandraThriftSocketTimeout((-1));
        boolean boolean25 = cassandraHost21.isPerformNameResolution();
        java.lang.String str26 = cassandraHost21.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "127.0.0.1(127.0.0.1):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1082");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", (int) (short) 52);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1083");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("9269(0.0.36.53):1", (int) (short) 1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, ":0:12");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1084");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost6.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray25);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "CassandraClient<%s-%d>:-1", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1085");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.lang.String str8 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("Subject", 32);
        java.lang.String[] strArray31 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214:9", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9561", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("221", strArray31, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1)):35", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1086");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("32", 50);
        cassandraHost9.setUseThriftFramedTransport(false);
        cassandraHost9.setMaxActive((int) (short) 9260);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, ":0(");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1087");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", (int) (byte) 100);
        boolean boolean11 = cassandraHost10.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "0.0.0.0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1088");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", (int) (short) 10);
        cassandraHost9.setMaxWaitTimeWhenExhausted((long) 102);
        int int12 = cassandraHost9.getMaxActive();
        java.lang.String[] strArray21 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32):-125", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.1", strArray21);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1089");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 10);
        boolean boolean22 = cassandraHost21.isPerformNameResolution();
        java.lang.String str23 = cassandraHost21.getUrl();
        cassandraHost21.setUseSocketKeepalive(true);
        java.lang.String[] strArray40 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray40);
        tSSLTransportParameters48.setKeyStore("(127.0.0.1)", "Subject(Subject):9160", "127.0.0.1(127.0.0.1)", "9269(0.0.36.53):1");
        tSSLTransportParameters48.setTrustStore("12", "0(0.0.0.0):9160", "(127.0.0.1)((127.0.0.1)):102", "CassandraClient<%s-%d>");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "18", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1090");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        subject0.setReadOnly();
        javax.security.auth.Subject subject12 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet13 = subject12.getPublicCredentials();
        subject12.setReadOnly();
        java.lang.String str15 = subject12.toString();
        java.lang.String str16 = subject12.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean20 = cassandraHost18.equals((java.lang.Object) 0.0f);
        java.lang.String str21 = cassandraHost18.getName();
        boolean boolean22 = subject12.equals((java.lang.Object) cassandraHost18);
        java.lang.String str23 = cassandraHost18.toString();
        int int24 = cassandraHost18.getPort();
        int int25 = cassandraHost18.getMaxActive();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.32", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):9160", strArray40, true);
        tSSLTransportParameters51.setTrustStore("CassandraClient<%s-%d>", "Subject(Subject):32");
        tSSLTransportParameters51.setTrustStore("101:1", "(127.0.0.1)", "Subject:\n", "9269:9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient60 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "32(0.0.0.32)(32(0.0.0.32)):-125", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient60.equals(null)", !hKerberosThriftClient60.equals(null));
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1091");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        int int11 = cassandraHost8.getCassandraThriftSocketTimeout();
        java.lang.String str12 = cassandraHost8.getName();
        java.lang.String str13 = cassandraHost8.getUrl();
        java.lang.String str14 = cassandraHost8.getIp();
        java.lang.String str15 = cassandraHost8.getIp();
        java.lang.String str16 = cassandraHost8.getName();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray22);
        tSSLTransportParameters25.setTrustStore("0.0.0.100", "0", "(127.0.0.1)((127.0.0.1)):35", "10");
        tSSLTransportParameters25.setKeyStore("127.0.0.1(127.0.0.1):102", "101");
        tSSLTransportParameters25.setTrustStore("9160", ":9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):10", tSSLTransportParameters25);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1092");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30);
        boolean boolean36 = subject0.equals((java.lang.Object) strArray30);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost40 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean41 = cassandraHost40.getUseSocketKeepalive();
        boolean boolean42 = cassandraHost40.getLifo();
        java.lang.String str43 = cassandraHost40.getName();
        cassandraHost40.setCassandraThriftSocketTimeout((int) ' ');
        javax.security.auth.Subject subject47 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet48 = subject47.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet49 = subject47.getPrivateCredentials();
        boolean boolean50 = subject47.isReadOnly();
        java.lang.String[] strArray60 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray60);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray60);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray60);
        boolean boolean64 = subject47.equals((java.lang.Object) tSSLTransportParameters63);
        tSSLTransportParameters63.setTrustStore("11", "(127.0.0.1):9", "127.0.0.1(127.0.0.1)", "0.0.0.0(0.0.0.0):101");
        tSSLTransportParameters63.setKeyStore("127.0.0.1(127.0.0.1):10", "301");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient73 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost40, ":0(", tSSLTransportParameters63);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient73.equals(null)", !hKerberosThriftClient73.equals(null));
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1093");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("9160", (int) (short) 100);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "127.0.0.1(127.0.0.1):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1094");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost12.setUseThriftFramedTransport(true);
        boolean boolean15 = cassandraHost10.equals((java.lang.Object) cassandraHost12);
        java.lang.String str16 = cassandraHost12.getUrl();
        cassandraHost12.setLifo(false);
        cassandraHost12.setUseThriftFramedTransport(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray30);
        tSSLTransportParameters34.setKeyStore("-1", "127.0.0.1");
        tSSLTransportParameters34.setTrustStore("199", "0.0.0.0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "9", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1095");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray15);
        boolean boolean21 = subject0.equals((java.lang.Object) tSSLTransportParameters20);
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):1");
        java.lang.String[] strArray37 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray37, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray37, true);
        tSSLTransportParameters44.setKeyStore("127.0.0.1(127.0.0.1):1", "102", "100(0.0.0.100):0", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "100:35", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1096");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong8 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 0);
        long long9 = atomicLong8.getAndDecrement();
        long long10 = atomicLong8.decrementAndGet();
        long long11 = atomicLong8.longValue();
        long long12 = atomicLong8.longValue();
        long long13 = atomicLong8.incrementAndGet();
        atomicLong8.set((long) (short) 12);
        boolean boolean16 = subject0.equals((java.lang.Object) (short) 12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 10);
        boolean boolean20 = cassandraHost19.isPerformNameResolution();
        java.lang.String str21 = cassandraHost19.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1097");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean6 = cassandraHost4.equals((java.lang.Object) 0.0f);
        int int7 = cassandraHost4.getPort();
        java.lang.String str8 = cassandraHost4.getName();
        java.lang.String str9 = cassandraHost4.getHost();
        int int10 = cassandraHost4.getCassandraThriftSocketTimeout();
        cassandraHost4.setCassandraThriftSocketTimeout((int) (short) 112);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost4, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1098");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):102", 0);
        cassandraHost11.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1):11");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1099");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 0);
        cassandraHost26.setLifo(false);
        boolean boolean29 = cassandraHost26.getLifo();
        boolean boolean30 = cassandraHost26.getUseSocketKeepalive();
        int int31 = cassandraHost26.getCassandraThriftSocketTimeout();
        java.lang.String str32 = cassandraHost26.getName();
        cassandraHost26.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "Subject(Subject):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1100");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean18 = subject0.isReadOnly();
        java.lang.String str19 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "209");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1101");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("100:0", (int) (short) 100);
        cassandraHost24.setUseSocketKeepalive(true);
        java.lang.String[] strArray42 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient56 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", tSSLTransportParameters55);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient56.equals(null)", !hKerberosThriftClient56.equals(null));
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1102");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) (byte) 99);
        boolean boolean22 = cassandraHost21.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "-1:301");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1103");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost12.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str15 = cassandraHost12.toString();
        cassandraHost12.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost12.setCassandraThriftSocketTimeout((int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray28);
        tSSLTransportParameters33.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "32", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1104");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", 110);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):8");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1105");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str21 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost(":0", (int) (short) 50);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):102", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", strArray38, true);
        tSSLTransportParameters49.setKeyStore("127.0.0.1(127.0.0.1):97", "0.0.0.100", "9269", "(127.0.0.1):1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient55 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "0.0.0.0(0.0.0.0)(0.0.0.0(0.0.0.0)):9160", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient55.equals(null)", !hKerberosThriftClient55.equals(null));
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1106");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost3 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))");
        cassandraHost3.setLifo(true);
        boolean boolean6 = cassandraHost3.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost3, ":9160:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1107");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160");
        cassandraHost6.setUseSocketKeepalive(false);
        int int9 = cassandraHost6.getPort();
        boolean boolean10 = cassandraHost6.getLifo();
        boolean boolean11 = cassandraHost6.getUseSocketKeepalive();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52", strArray17, false);
        boolean boolean23 = cassandraHost6.equals((java.lang.Object) false);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, ":0((:0():98", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1108");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):10");
        java.lang.String str9 = cassandraHost8.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "214");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1109");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        cassandraHost8.setUseSocketKeepalive(false);
        cassandraHost8.setLifo(true);
        java.lang.String str15 = cassandraHost8.getName();
        java.lang.String str16 = cassandraHost8.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1110");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong8 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 0);
        long long9 = atomicLong8.getAndDecrement();
        long long10 = atomicLong8.decrementAndGet();
        long long11 = atomicLong8.longValue();
        long long12 = atomicLong8.longValue();
        long long13 = atomicLong8.incrementAndGet();
        atomicLong8.set((long) (short) 12);
        boolean boolean16 = subject0.equals((java.lang.Object) (short) 12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean20 = cassandraHost18.equals((java.lang.Object) 0.0f);
        int int21 = cassandraHost18.getPort();
        java.lang.String str22 = cassandraHost18.getName();
        java.lang.String str23 = cassandraHost18.getHost();
        int int24 = cassandraHost18.getCassandraThriftSocketTimeout();
        boolean boolean25 = cassandraHost18.isPerformNameResolution();
        int int26 = cassandraHost18.getPort();
        boolean boolean27 = subject0.equals((java.lang.Object) cassandraHost18);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost30 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", 0);
        cassandraHost30.setLifo(false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters34.setKeyStore("hi!", "");
        tSSLTransportParameters34.setKeyStore("CassandraClient<%s-%d>", "CassandraClient<%s-%d>");
        tSSLTransportParameters34.setTrustStore("Subject:\n", "hi!:100", "", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost30, "9468", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1111");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.10", 51);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):97", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray22);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.100", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1112");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        boolean boolean9 = cassandraHost8.getUseThriftFramedTransport();
        java.lang.String str10 = cassandraHost8.getIp();
        java.lang.String str11 = cassandraHost8.getName();
        cassandraHost8.setMaxWaitTimeWhenExhausted((long) (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "11", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1113");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        int int9 = cassandraHost6.getCassandraThriftSocketTimeout();
        java.lang.String str10 = cassandraHost6.getName();
        boolean boolean11 = cassandraHost6.getUseThriftFramedTransport();
        java.lang.String str12 = cassandraHost6.toString();
        cassandraHost6.setUseThriftFramedTransport(true);
        java.lang.String str15 = cassandraHost6.getName();
        boolean boolean16 = cassandraHost6.getUseSocketKeepalive();
        java.lang.String str17 = cassandraHost6.toString();
        boolean boolean18 = subject0.equals((java.lang.Object) str17);
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        java.lang.String str24 = cassandraHost23.toString();
        cassandraHost23.setCassandraThriftSocketTimeout(0);
        cassandraHost23.setCassandraThriftSocketTimeout(9);
        java.lang.String[] strArray43 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray43);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1114");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        cassandraHost11.setCassandraThriftSocketTimeout((int) (short) 1);
        int int14 = cassandraHost11.getPort();
        java.lang.String[] strArray31 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "-1:301", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1115");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (byte) 1);
        int int8 = cassandraHost7.getMaxActive();
        boolean boolean9 = subject0.equals((java.lang.Object) int8);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0(0.0.0.0):9160");
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray22, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", tSSLTransportParameters27);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1116");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        subject0.setReadOnly();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        int int9 = cassandraHost6.getCassandraThriftSocketTimeout();
        java.lang.String str10 = cassandraHost6.getName();
        java.lang.String str11 = cassandraHost6.getUrl();
        java.lang.String str12 = cassandraHost6.toString();
        cassandraHost6.setMaxActive(10);
        java.lang.String[] strArray23 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray23);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "1001", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1117");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean8 = atomicLong5.compareAndSet((long) 50, (-1L));
        boolean boolean9 = subject0.equals((java.lang.Object) 50);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) 0.0f);
        int int14 = cassandraHost11.getPort();
        java.lang.String str15 = cassandraHost11.getName();
        java.lang.String str16 = cassandraHost11.getHost();
        int int17 = cassandraHost11.getCassandraThriftSocketTimeout();
        boolean boolean18 = cassandraHost11.isPerformNameResolution();
        boolean boolean19 = cassandraHost11.getUseThriftFramedTransport();
        java.lang.String str20 = cassandraHost11.getName();
        cassandraHost11.setMaxWaitTimeWhenExhausted(60L);
        cassandraHost11.setMaxActive((int) (short) 100);
        java.lang.String[] strArray36 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", strArray36);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "9460", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1118");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean8 = atomicLong5.compareAndSet((long) 50, (-1L));
        boolean boolean9 = subject0.equals((java.lang.Object) 50);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost14.setUseThriftFramedTransport(true);
        boolean boolean17 = cassandraHost12.equals((java.lang.Object) cassandraHost14);
        long long18 = cassandraHost14.getMaxWaitTimeWhenExhausted();
        java.lang.String str19 = cassandraHost14.toString();
        cassandraHost14.setUseSocketKeepalive(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "32(0.0.0.32)(32(0.0.0.32))(32(0.0.0.32)(32(0.0.0.32))):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1119");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):0");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray26, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1120");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 9);
        boolean boolean23 = subject0.equals((java.lang.Object) cassandraHost22);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long27 = cassandraHost26.getMaxWaitTimeWhenExhausted();
        cassandraHost26.setCassandraThriftSocketTimeout((-1));
        boolean boolean30 = cassandraHost26.isPerformNameResolution();
        java.lang.String[] strArray40 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray40, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):9", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1121");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        boolean boolean17 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!):9160", 35);
        boolean boolean22 = cassandraHost21.isPerformNameResolution();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray33, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):12", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1122");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (byte) 53);
        java.lang.String[] strArray21 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray21);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, ":0(:0)", tSSLTransportParameters26);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1123");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160", 102);
        boolean boolean11 = cassandraHost10.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1124");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("214", 9);
        long long13 = cassandraHost12.getMaxWaitTimeWhenExhausted();
        java.lang.String str14 = cassandraHost12.getUrl();
        boolean boolean15 = cassandraHost12.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1125");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)");
        boolean boolean7 = cassandraHost6.getLifo();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!:9160", "127.0.0.1(127.0.0.1):102" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", strArray12, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, ":9160(:9160)", tSSLTransportParameters14);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1126");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean6 = cassandraHost4.equals((java.lang.Object) 0.0f);
        int int7 = cassandraHost4.getPort();
        java.lang.String str8 = cassandraHost4.getName();
        java.lang.String str9 = cassandraHost4.getHost();
        int int10 = cassandraHost4.getCassandraThriftSocketTimeout();
        boolean boolean11 = cassandraHost4.isPerformNameResolution();
        boolean boolean12 = cassandraHost4.getUseThriftFramedTransport();
        cassandraHost4.setLifo(false);
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100:102", strArray28);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost4, "100:35", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1127");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean18 = subject0.isReadOnly();
        java.lang.String str19 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost22.setMaxActive((int) (byte) 10);
        boolean boolean25 = cassandraHost22.getUseThriftFramedTransport();
        java.lang.String str26 = cassandraHost22.getUrl();
        java.lang.String str27 = cassandraHost22.getName();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray38, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "98", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1128");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160");
        long long11 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        boolean boolean12 = cassandraHost10.getLifo();
        java.lang.String str13 = cassandraHost10.getUrl();
        java.lang.String str14 = cassandraHost10.getIp();
        boolean boolean15 = cassandraHost10.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1)((127.0.0.1)):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1129");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int8 = atomicLong7.intValue();
        boolean boolean9 = subject0.equals((java.lang.Object) int8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):9160", (int) (short) 9268);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "100:1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1130");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        javax.security.auth.Subject subject6 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet7 = subject6.getPublicCredentials();
        subject6.setReadOnly();
        java.lang.String str9 = subject6.toString();
        java.lang.String str10 = subject6.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean14 = cassandraHost12.equals((java.lang.Object) 0.0f);
        java.lang.String str15 = cassandraHost12.getName();
        boolean boolean16 = subject6.equals((java.lang.Object) cassandraHost12);
        java.lang.String str17 = cassandraHost12.toString();
        int int18 = cassandraHost12.getPort();
        java.lang.String str19 = cassandraHost12.toString();
        cassandraHost12.setCassandraThriftSocketTimeout((int) (byte) 1);
        boolean boolean22 = cassandraHost12.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "hi!(hi!):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1131");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        boolean boolean9 = cassandraHost8.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "127.0.0.1(127.0.0.1):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1132");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean9 = cassandraHost7.equals((java.lang.Object) 0.0f);
        int int10 = cassandraHost7.getCassandraThriftSocketTimeout();
        java.lang.String str11 = cassandraHost7.getName();
        boolean boolean12 = cassandraHost7.isPerformNameResolution();
        cassandraHost7.setMaxActive((int) (short) 12);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray20);
        tSSLTransportParameters23.setTrustStore("0.0.0.100", "0", "(127.0.0.1)((127.0.0.1)):35", "10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "-1(-1):35", tSSLTransportParameters23);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1133");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long12 = cassandraHost11.getMaxWaitTimeWhenExhausted();
        cassandraHost11.setCassandraThriftSocketTimeout((-1));
        cassandraHost11.setMaxWaitTimeWhenExhausted(1L);
        cassandraHost11.setMaxActive(0);
        java.lang.String str19 = cassandraHost11.toString();
        cassandraHost11.setCassandraThriftSocketTimeout((int) (byte) 32);
        java.lang.String str22 = cassandraHost11.getUrl();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:35", strArray38, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "208", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1134");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "Subject(Subject):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1135");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost10.setUseThriftFramedTransport(true);
        boolean boolean13 = cassandraHost10.getUseThriftFramedTransport();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        tSSLTransportParameters31.setTrustStore("(127.0.0.1):100", "hi!:9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "100", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1136");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 35);
        boolean boolean12 = cassandraHost8.equals((java.lang.Object) 35);
        java.lang.String str13 = cassandraHost8.getHost();
        java.lang.String str14 = cassandraHost8.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "9460");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1137");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        cassandraHost6.setUseSocketKeepalive(false);
        boolean boolean9 = cassandraHost6.getUseSocketKeepalive();
        boolean boolean10 = cassandraHost6.getUseSocketKeepalive();
        cassandraHost6.setMaxActive((int) ' ');
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        tSSLTransportParameters30.setKeyStore("-1:0", "102");
        tSSLTransportParameters30.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "9269", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1138");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long14 = cassandraHost13.getMaxWaitTimeWhenExhausted();
        cassandraHost13.setCassandraThriftSocketTimeout((int) (short) -1);
        cassandraHost13.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "(127.0.0.1)((127.0.0.1)):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1139");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100(0.0.0.100):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1140");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("32(0.0.0.32)(32(0.0.0.32)):-125", (int) (short) 9);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):101", strArray27);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "102", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1141");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        boolean boolean17 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject)");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        tSSLTransportParameters37.setTrustStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "Subject(Subject):101", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1142");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("-1:35", 0);
        int int9 = cassandraHost8.getMaxActive();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters11 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters11.setKeyStore("hi!", "");
        tSSLTransportParameters11.setKeyStore("hi!", "");
        tSSLTransportParameters11.setKeyStore("", "0", "-1", "hi!:100");
        tSSLTransportParameters11.setKeyStore("127.0.0.1", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0", tSSLTransportParameters11);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1143");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        boolean boolean9 = cassandraHost8.getLifo();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray15);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "CassandraClient<%s-%d>:-1", tSSLTransportParameters18);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1144");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost25.setUseThriftFramedTransport(true);
        boolean boolean28 = cassandraHost23.equals((java.lang.Object) cassandraHost25);
        java.lang.String str29 = cassandraHost25.getUrl();
        java.lang.String[] strArray45 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):1", strArray45, true);
        tSSLTransportParameters58.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient61 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "-1:32", tSSLTransportParameters58);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient61.equals(null)", !hKerberosThriftClient61.equals(null));
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1145");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPublicCredentials();
        java.lang.String str10 = subject7.toString();
        boolean boolean11 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPublicCredentials();
        boolean boolean14 = subject0.equals((java.lang.Object) subject7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost(":0", (-1));
        boolean boolean18 = subject0.equals((java.lang.Object) cassandraHost17);
        boolean boolean19 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) (short) 12);
        cassandraHost22.setCassandraThriftSocketTimeout((int) (byte) 12);
        java.lang.String str25 = cassandraHost22.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "31");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1146");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)");
        boolean boolean10 = cassandraHost9.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "hi!(hi!)(hi!(hi!)):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1147");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean9 = cassandraHost7.equals((java.lang.Object) 0.0f);
        int int10 = cassandraHost7.getPort();
        java.lang.String str11 = cassandraHost7.getName();
        java.lang.String str12 = cassandraHost7.getHost();
        int int13 = cassandraHost7.getCassandraThriftSocketTimeout();
        boolean boolean14 = cassandraHost7.isPerformNameResolution();
        boolean boolean15 = cassandraHost7.getUseThriftFramedTransport();
        java.lang.String str16 = cassandraHost7.getName();
        boolean boolean17 = cassandraHost7.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):52");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1148");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-2", (-2));
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "0.0.0.0(0.0.0.0):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1149");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost10.setMaxWaitTimeWhenExhausted(0L);
        int int13 = cassandraHost10.getPort();
        boolean boolean14 = cassandraHost10.getLifo();
        int int15 = cassandraHost10.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("12", strArray27);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "214", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1150");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        java.lang.String str9 = cassandraHost6.getName();
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost6);
        java.util.Set<java.security.Principal> principalSet11 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet12 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean16 = cassandraHost15.isPerformNameResolution();
        cassandraHost15.setUseThriftFramedTransport(true);
        cassandraHost15.setUseSocketKeepalive(false);
        java.lang.String str21 = cassandraHost15.getHost();
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) (-2));
        java.lang.String[] strArray35 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35);
        tSSLTransportParameters40.setTrustStore("hi!(hi!):9160", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", "(127.0.0.1)((127.0.0.1)):100", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "Subject:\n", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1151");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):1", (int) '4');
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1152");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        int int11 = cassandraHost8.getPort();
        java.lang.String str12 = cassandraHost8.getName();
        java.lang.String str13 = cassandraHost8.getHost();
        int int14 = cassandraHost8.getCassandraThriftSocketTimeout();
        boolean boolean15 = cassandraHost8.isPerformNameResolution();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray31, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "44", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1153");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str10 = cassandraHost7.toString();
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 1);
        boolean boolean13 = cassandraHost7.getLifo();
        cassandraHost7.setUseThriftFramedTransport(false);
        java.lang.String str16 = cassandraHost7.getName();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", tSSLTransportParameters18);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1154");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str8 = cassandraHost7.getUrl();
        boolean boolean9 = subject0.equals((java.lang.Object) cassandraHost7);
        boolean boolean10 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost12.setUseThriftFramedTransport(true);
        boolean boolean15 = cassandraHost12.getUseSocketKeepalive();
        int int16 = cassandraHost12.getMaxActive();
        java.lang.String str17 = cassandraHost12.getUrl();
        int int18 = cassandraHost12.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "301");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1155");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        boolean boolean7 = subject0.isReadOnly();
        boolean boolean9 = subject0.equals((java.lang.Object) 108L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long13 = cassandraHost12.getMaxWaitTimeWhenExhausted();
        cassandraHost12.setCassandraThriftSocketTimeout((-1));
        cassandraHost12.setMaxWaitTimeWhenExhausted(1L);
        cassandraHost12.setMaxWaitTimeWhenExhausted(161L);
        java.lang.String str20 = cassandraHost12.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1156");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160");
        cassandraHost9.setUseSocketKeepalive(false);
        int int12 = cassandraHost9.getPort();
        cassandraHost9.setCassandraThriftSocketTimeout((int) (byte) -2);
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray28, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "Subject:52", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1157");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))", (int) (byte) -56);
        java.lang.String[] strArray19 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray19, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.0:101", tSSLTransportParameters23);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1158");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.lang.String[] strArray21 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray21, false);
        java.lang.Class<?> wildcardClass32 = tSSLTransportParameters31.getClass();
        boolean boolean33 = subject0.equals((java.lang.Object) tSSLTransportParameters31);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost35 = new me.prettyprint.cassandra.service.CassandraHost("Subject");
        boolean boolean36 = cassandraHost35.getUseSocketKeepalive();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray48, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray48, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:1", strArray48, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient57 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost35, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", tSSLTransportParameters56);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient57.equals(null)", !hKerberosThriftClient57.equals(null));
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1159");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str9 = cassandraHost8.getIp();
        boolean boolean10 = subject0.equals((java.lang.Object) str9);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("100", (int) (short) 100);
        long long16 = cassandraHost15.getMaxWaitTimeWhenExhausted();
        java.lang.String str17 = cassandraHost15.toString();
        cassandraHost15.setLifo(true);
        java.lang.String str20 = cassandraHost15.getHost();
        cassandraHost15.setUseSocketKeepalive(false);
        java.lang.String str23 = cassandraHost15.toString();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray41, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient57 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "9260", tSSLTransportParameters56);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient57.equals(null)", !hKerberosThriftClient57.equals(null));
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1160");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost6.setMaxWaitTimeWhenExhausted(0L);
        int int9 = cassandraHost6.getPort();
        boolean boolean10 = cassandraHost6.getUseThriftFramedTransport();
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        subject11.setReadOnly();
        boolean boolean13 = cassandraHost6.equals((java.lang.Object) subject11);
        boolean boolean14 = cassandraHost6.getUseSocketKeepalive();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters16.setKeyStore("hi!", "");
        tSSLTransportParameters16.setTrustStore("", "hi!");
        tSSLTransportParameters16.setTrustStore("", "CassandraClient<%s-%d>", "", "");
        tSSLTransportParameters16.setKeyStore("Subject:\n", "-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "(127.0.0.1)((127.0.0.1)):35", tSSLTransportParameters16);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1161");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int23 = cassandraHost22.getCassandraThriftSocketTimeout();
        javax.security.auth.Subject subject25 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet26 = subject25.getPublicCredentials();
        subject25.setReadOnly();
        javax.security.auth.Subject subject28 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet29 = subject28.getPublicCredentials();
        subject28.setReadOnly();
        java.lang.String str31 = subject28.toString();
        java.lang.String str32 = subject28.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost34 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean36 = cassandraHost34.equals((java.lang.Object) 0.0f);
        java.lang.String str37 = cassandraHost34.getName();
        boolean boolean38 = subject28.equals((java.lang.Object) cassandraHost34);
        cassandraHost34.setUseThriftFramedTransport(false);
        boolean boolean41 = subject25.equals((java.lang.Object) cassandraHost34);
        java.lang.String str42 = subject25.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost44 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost44.setUseSocketKeepalive(false);
        cassandraHost44.setLifo(false);
        boolean boolean49 = subject25.equals((java.lang.Object) cassandraHost44);
        subject25.setReadOnly();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray66, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray66);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters70 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray66);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray66);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters72 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray66);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters74 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray66, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters75 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray66);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters76 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray66);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters77 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray66);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters79 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray66, false);
        tSSLTransportParameters79.setTrustStore("127.0.0.1", "hi!(hi!):9160");
        boolean boolean83 = subject25.equals((java.lang.Object) tSSLTransportParameters79);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient84 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "", tSSLTransportParameters79);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient84.equals(null)", !hKerberosThriftClient84.equals(null));
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1162");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost10.setMaxActive((int) (byte) 10);
        boolean boolean13 = cassandraHost10.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "hi!(hi!)(hi!(hi!))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1163");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        boolean boolean8 = subject0.equals((java.lang.Object) 198.0d);
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("Subject", 50);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):9160", strArray27, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "127.0.0.1(127.0.0.1)", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1164");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1:10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient4 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost2, "100(0.0.0.100):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient4.equals(null)", !hKerberosThriftClient4.equals(null));
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1165");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str27 = cassandraHost26.getHost();
        boolean boolean28 = cassandraHost26.getUseSocketKeepalive();
        java.lang.String str29 = cassandraHost26.getName();
        cassandraHost26.setLifo(true);
        cassandraHost26.setUseThriftFramedTransport(false);
        cassandraHost26.setLifo(false);
        long long36 = cassandraHost26.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray52, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray52, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray52, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):101", strArray52);
        tSSLTransportParameters64.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient67 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "", tSSLTransportParameters64);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient67.equals(null)", !hKerberosThriftClient67.equals(null));
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1166");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean18 = subject0.isReadOnly();
        java.lang.String str19 = subject0.toString();
        boolean boolean20 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("100");
        cassandraHost22.setCassandraThriftSocketTimeout((int) (byte) 53);
        cassandraHost22.setMaxWaitTimeWhenExhausted(9280L);
        cassandraHost22.setCassandraThriftSocketTimeout((int) (short) 102);
        java.lang.String str29 = cassandraHost22.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1167");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0(0.0.0.0):101", (int) (short) 50);
        boolean boolean11 = cassandraHost10.getLifo();
        java.lang.String[] strArray22 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("11", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101:1", strArray22);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1168");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        javax.security.auth.Subject subject21 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet22 = subject21.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject21.getPublicCredentials();
        boolean boolean24 = subject0.equals((java.lang.Object) subject21);
        boolean boolean25 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean29 = cassandraHost28.getUseThriftFramedTransport();
        cassandraHost28.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost28.setMaxWaitTimeWhenExhausted(2L);
        java.util.concurrent.atomic.AtomicLong atomicLong35 = new java.util.concurrent.atomic.AtomicLong((long) (short) 102);
        int int36 = atomicLong35.intValue();
        long long38 = atomicLong35.addAndGet(199L);
        boolean boolean39 = cassandraHost28.equals((java.lang.Object) long38);
        int int40 = cassandraHost28.getCassandraThriftSocketTimeout();
        long long41 = cassandraHost28.getMaxWaitTimeWhenExhausted();
        cassandraHost28.setCassandraThriftSocketTimeout((int) (short) 9359);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray56, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray56, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101:1", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("118", strArray56, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", tSSLTransportParameters65);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1169");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost6.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str9 = cassandraHost6.toString();
        cassandraHost6.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost6.setMaxWaitTimeWhenExhausted((long) (byte) 1);
        java.lang.String str14 = cassandraHost6.toString();
        cassandraHost6.setLifo(true);
        boolean boolean17 = subject0.equals((java.lang.Object) true);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 199);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray36);
        tSSLTransportParameters47.setTrustStore("(127.0.0.1)((127.0.0.1)):35", "Subject(Subject):102");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient51 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):100", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient51.equals(null)", !hKerberosThriftClient51.equals(null));
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1170");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) (byte) 0);
        javax.security.auth.Subject subject12 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet13 = subject12.getPublicCredentials();
        subject12.setReadOnly();
        javax.security.auth.Subject subject15 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet16 = subject15.getPublicCredentials();
        subject15.setReadOnly();
        java.lang.String str18 = subject15.toString();
        java.lang.String str19 = subject15.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean23 = cassandraHost21.equals((java.lang.Object) 0.0f);
        java.lang.String str24 = cassandraHost21.getName();
        boolean boolean25 = subject15.equals((java.lang.Object) cassandraHost21);
        cassandraHost21.setUseThriftFramedTransport(false);
        boolean boolean28 = subject12.equals((java.lang.Object) cassandraHost21);
        java.lang.String str29 = subject12.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost31 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost31.setUseSocketKeepalive(false);
        cassandraHost31.setLifo(false);
        boolean boolean36 = subject12.equals((java.lang.Object) cassandraHost31);
        subject12.setReadOnly();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray53, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray53, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray53);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray53, false);
        tSSLTransportParameters66.setTrustStore("127.0.0.1", "hi!(hi!):9160");
        boolean boolean70 = subject12.equals((java.lang.Object) tSSLTransportParameters66);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient71 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1)((127.0.0.1)):102", tSSLTransportParameters66);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient71.equals(null)", !hKerberosThriftClient71.equals(null));
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1171");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):0", 0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, ":9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1172");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean23 = cassandraHost22.getUseSocketKeepalive();
        java.lang.String str24 = cassandraHost22.toString();
        cassandraHost22.setUseSocketKeepalive(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "9270");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1173");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPublicCredentials();
        boolean boolean19 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("", 102);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1174");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters12 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray10, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray10, false);
        boolean boolean15 = subject0.equals((java.lang.Object) "Subject:\n");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray20);
        java.lang.Class<?> wildcardClass24 = strArray20.getClass();
        boolean boolean25 = subject0.equals((java.lang.Object) strArray20);
        java.util.Set<java.security.Principal> principalSet26 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        boolean boolean30 = cassandraHost29.getUseThriftFramedTransport();
        int int31 = cassandraHost29.getMaxActive();
        cassandraHost29.setMaxWaitTimeWhenExhausted(202L);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters35.setKeyStore("hi!", "");
        tSSLTransportParameters35.setTrustStore("", "hi!");
        tSSLTransportParameters35.setTrustStore("", "CassandraClient<%s-%d>", "", "");
        tSSLTransportParameters35.setKeyStore("0.0.0.100", "(127.0.0.1)((127.0.0.1))", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", "-1:0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, ":102", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1175");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))", (int) (short) -1);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray33);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "199", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1176");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 0);
        cassandraHost19.setLifo(false);
        boolean boolean22 = cassandraHost19.getUseSocketKeepalive();
        java.lang.String[] strArray31 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray31);
        tSSLTransportParameters36.requireClientAuth(false);
        tSSLTransportParameters36.setKeyStore("hi!:9160", "Subject", "214", "0.0.0.0(0.0.0.0)");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, ":9160:100", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1177");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", (int) '#');
        java.lang.String str12 = cassandraHost11.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1178");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost9.setMaxActive((int) (byte) 10);
        cassandraHost9.setMaxWaitTimeWhenExhausted(103L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1)):98");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1179");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str9 = cassandraHost8.getUrl();
        boolean boolean10 = cassandraHost8.getUseThriftFramedTransport();
        int int11 = cassandraHost8.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1180");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean6 = cassandraHost4.equals((java.lang.Object) 0.0f);
        int int7 = cassandraHost4.getCassandraThriftSocketTimeout();
        java.lang.String str8 = cassandraHost4.getName();
        boolean boolean9 = cassandraHost4.getUseThriftFramedTransport();
        java.lang.String str10 = cassandraHost4.toString();
        java.lang.String str11 = cassandraHost4.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost4, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1181");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost12.setUseThriftFramedTransport(true);
        boolean boolean15 = cassandraHost10.equals((java.lang.Object) cassandraHost12);
        boolean boolean16 = cassandraHost10.getUseThriftFramedTransport();
        boolean boolean17 = cassandraHost10.getLifo();
        cassandraHost10.setMaxActive(50);
        java.lang.String str20 = cassandraHost10.toString();
        javax.security.auth.Subject subject22 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet23 = subject22.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet24 = subject22.getPrincipals();
        java.util.Set<java.security.Principal> principalSet25 = subject22.getPrincipals();
        subject22.setReadOnly();
        java.lang.String[] strArray37 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray37, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray37);
        boolean boolean43 = subject22.equals((java.lang.Object) tSSLTransportParameters42);
        tSSLTransportParameters42.setTrustStore("", "CassandraClient<%s-%d>:52");
        tSSLTransportParameters42.setKeyStore("CassandraClient<%s-%d>:52", "CassandraClient<%s-%d>:10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "100(0.0.0.100)", tSSLTransportParameters42);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1182");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) (byte) -2);
        boolean boolean6 = cassandraHost5.getLifo();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray18, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray18, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray18, false);
        tSSLTransportParameters26.setKeyStore("-2", "-2", "102", "102");
        tSSLTransportParameters26.setTrustStore("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", "127.0.0.1(127.0.0.1):-1", "CassandraClient<%s-%d>:9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "-1:35", tSSLTransportParameters26);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1183");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160");
        cassandraHost10.setMaxActive(98);
        cassandraHost10.setUseThriftFramedTransport(false);
        cassandraHost10.setUseSocketKeepalive(false);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray21);
        tSSLTransportParameters23.requireClientAuth(false);
        tSSLTransportParameters23.setKeyStore("(127.0.0.1):1", "CassandraClient<%s-%d>", "", "Subject(Subject):10");
        tSSLTransportParameters23.setTrustStore("0", "9269(0.0.36.53):9", "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):-1", ":0(:0):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "100(0.0.0.100):0", tSSLTransportParameters23);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1184");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)", (-1));
        int int10 = cassandraHost9.getMaxActive();
        cassandraHost9.setLifo(false);
        boolean boolean13 = cassandraHost9.getUseThriftFramedTransport();
        cassandraHost9.setMaxWaitTimeWhenExhausted((long) 9);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "32(0.0.0.32):-2");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1185");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):52", 0);
        java.lang.String[] strArray40 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray40);
        tSSLTransportParameters46.setKeyStore("Subject:\n", "(127.0.0.1):1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "0.0.0.100(0.0.0.100):9260", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1186");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        boolean boolean13 = cassandraHost12.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1187");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", 101);
        cassandraHost10.setMaxActive(98);
        boolean boolean13 = cassandraHost10.getUseSocketKeepalive();
        java.lang.String str14 = cassandraHost10.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "0.0.0.0(0.0.0.0)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1188");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):12");
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray20);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "100(0.0.0.100):0", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1189");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 221);
        java.lang.String str9 = cassandraHost8.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "100(0.0.0.100):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1190");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 10);
        int int7 = cassandraHost6.getCassandraThriftSocketTimeout();
        cassandraHost6.setLifo(false);
        java.lang.String str10 = cassandraHost6.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "127.0.0.1(127.0.0.1)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1191");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (byte) 1);
        int int11 = cassandraHost10.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "127.0.0.1(127.0.0.1):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1192");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        boolean boolean8 = subject0.equals((java.lang.Object) 198.0d);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("-1:0");
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray24);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1193");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):52", (int) (short) 11);
        boolean boolean9 = cassandraHost8.getUseThriftFramedTransport();
        int int10 = cassandraHost8.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1194");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        java.util.Set<java.lang.Object> objSet13 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100", 102);
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray27, false);
        tSSLTransportParameters31.setTrustStore("", "");
        tSSLTransportParameters31.setTrustStore("Subject", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", "32", "(127.0.0.1):100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "100(0.0.0.100):9160", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1195");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "9280");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1196");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        subject0.setReadOnly();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, false);
        tSSLTransportParameters54.setTrustStore("127.0.0.1", "hi!(hi!):9160");
        boolean boolean58 = subject0.equals((java.lang.Object) tSSLTransportParameters54);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost60 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0");
        cassandraHost60.setCassandraThriftSocketTimeout((int) (short) -1);
        java.lang.String str63 = cassandraHost60.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost60, "-1:1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1197");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPrivateCredentials();
        boolean boolean8 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject5.getPublicCredentials();
        boolean boolean13 = subject0.equals((java.lang.Object) objSet12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str18 = cassandraHost15.toString();
        cassandraHost15.setMaxActive(9160);
        cassandraHost15.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean23 = cassandraHost15.getUseThriftFramedTransport();
        boolean boolean24 = subject0.equals((java.lang.Object) boolean23);
        java.util.Set<java.lang.Object> objSet25 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int29 = cassandraHost28.getPort();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray45, true);
        boolean boolean60 = cassandraHost28.equals((java.lang.Object) tSSLTransportParameters59);
        cassandraHost28.setMaxActive((int) (short) 20);
        java.lang.String str63 = cassandraHost28.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "Subject:50");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1198");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160");
        int int24 = cassandraHost23.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray39);
        tSSLTransportParameters52.setTrustStore("hi!:9160", "(127.0.0.1)((127.0.0.1)):9260");
        tSSLTransportParameters52.setTrustStore("32(0.0.0.32)(32(0.0.0.32))", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "(127.0.0.1):9", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1199");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean12 = cassandraHost11.getLifo();
        cassandraHost11.setMaxActive(9160);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "0.0.0.100(0.0.0.100):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1200");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (byte) 10);
        cassandraHost8.setCassandraThriftSocketTimeout((int) (short) 1);
        java.lang.String str11 = cassandraHost8.toString();
        boolean boolean12 = cassandraHost8.getLifo();
        java.lang.String str13 = cassandraHost8.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1201");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str9 = cassandraHost8.getIp();
        boolean boolean10 = subject0.equals((java.lang.Object) str9);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1");
        java.lang.String str14 = cassandraHost13.toString();
        int int15 = cassandraHost13.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):11", strArray26);
        tSSLTransportParameters33.setKeyStore("127.0.0.1:10", "100(0.0.0.100)(100(0.0.0.100)):-1");
        tSSLTransportParameters33.setTrustStore("214:101", ":9160(:9160)");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "(127.0.0.1):100", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1202");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost9.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str12 = cassandraHost9.getHost();
        cassandraHost9.setMaxActive(100);
        cassandraHost9.setMaxActive(100);
        java.lang.String str17 = cassandraHost9.getName();
        java.lang.String[] strArray32 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray32);
        tSSLTransportParameters40.setTrustStore("CassandraClient<%s-%d>:9160", "127.0.0.1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, ":0:12", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1203");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPrivateCredentials();
        boolean boolean10 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet11 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet14 = subject7.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet15 = subject7.getPrincipals();
        subject7.setReadOnly();
        boolean boolean17 = subject0.equals((java.lang.Object) subject7);
        java.util.Set<java.security.Principal> principalSet18 = subject7.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("-1:102");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):1", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):35", strArray38);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient56 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject7, cassandraHost20, "0.0.0.100(0.0.0.100):45", tSSLTransportParameters55);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient56.equals(null)", !hKerberosThriftClient56.equals(null));
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1204");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):10", (int) (byte) -1);
        int int14 = cassandraHost13.getMaxActive();
        java.lang.String str15 = cassandraHost13.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "9269(0.0.36.53):1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1205");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters12 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray10, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray10, false);
        boolean boolean15 = subject0.equals((java.lang.Object) "Subject:\n");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray20);
        java.lang.Class<?> wildcardClass24 = strArray20.getClass();
        boolean boolean25 = subject0.equals((java.lang.Object) strArray20);
        java.util.Set<java.security.Principal> principalSet26 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", 50);
        java.lang.String str30 = cassandraHost29.toString();
        java.lang.String[] strArray45 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9", strArray45);
        tSSLTransportParameters54.setKeyStore("12", "Subject(Subject):101");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient58 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "0.0.0.100(0.0.0.100):9260", tSSLTransportParameters54);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient58.equals(null)", !hKerberosThriftClient58.equals(null));
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1206");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long8 = cassandraHost7.getMaxWaitTimeWhenExhausted();
        cassandraHost7.setLifo(false);
        long long11 = cassandraHost7.getMaxWaitTimeWhenExhausted();
        java.lang.String str12 = cassandraHost7.getUrl();
        java.lang.String str13 = cassandraHost7.getName();
        cassandraHost7.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, ":100:9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1207");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost(":9160(:9160):11");
        java.lang.String str12 = cassandraHost11.getUrl();
        java.lang.String[] strArray21 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        tSSLTransportParameters22.setTrustStore("hi!:9160", "CassandraClient<%s-%d>");
        tSSLTransportParameters22.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "127.0.0.1");
        tSSLTransportParameters22.setKeyStore("0", "-1", "hi!:9160", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "51", tSSLTransportParameters22);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1208");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        java.lang.String str11 = cassandraHost10.getUrl();
        long long12 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("11", strArray25, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "32(0.0.0.32):-2", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1209");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("");
        int int19 = cassandraHost18.getMaxActive();
        cassandraHost18.setUseThriftFramedTransport(true);
        cassandraHost18.setMaxWaitTimeWhenExhausted(101L);
        cassandraHost18.setUseSocketKeepalive(false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters27.setKeyStore("hi!", "");
        tSSLTransportParameters27.setKeyStore("CassandraClient<%s-%d>", "CassandraClient<%s-%d>");
        tSSLTransportParameters27.requireClientAuth(true);
        tSSLTransportParameters27.setTrustStore("hi!", "(127.0.0.1):9160");
        tSSLTransportParameters27.setTrustStore(":0", "9269(0.0.36.53):1", "CassandraClient<%s-%d>:52", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98");
        tSSLTransportParameters27.setKeyStore("127.0.0.1", "2", "9270", "(127.0.0.1)((127.0.0.1)):98");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):102", tSSLTransportParameters27);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1210");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.lang.String str8 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("11", (int) (short) 2);
        cassandraHost11.setLifo(false);
        java.lang.String[] strArray32 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214:9", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9561", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))", strArray32, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "127.0.0.1(127.0.0.1):97", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1211");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray18, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray18, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray18, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray18, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray18);
        boolean boolean28 = subject0.equals((java.lang.Object) tSSLTransportParameters27);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost31 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean32 = cassandraHost31.getLifo();
        cassandraHost31.setMaxWaitTimeWhenExhausted((long) (short) -1);
        boolean boolean35 = cassandraHost31.isPerformNameResolution();
        cassandraHost31.setUseThriftFramedTransport(false);
        java.lang.String[] strArray45 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray45);
        tSSLTransportParameters50.setKeyStore("127.0.0.1(127.0.0.1):10", "(127.0.0.1)");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost31, "hi!(hi!):9160", tSSLTransportParameters50);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1212");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):100", (int) (byte) -126);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient9 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient9.equals(null)", !hKerberosThriftClient9.equals(null));
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1213");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 100);
        java.lang.String str9 = cassandraHost8.toString();
        cassandraHost8.setMaxWaitTimeWhenExhausted(467L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "9269:9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1214");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPrivateCredentials();
        boolean boolean8 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject5.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject5.getPublicCredentials();
        boolean boolean13 = subject0.equals((java.lang.Object) objSet12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost15.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str18 = cassandraHost15.toString();
        cassandraHost15.setMaxActive(9160);
        cassandraHost15.setCassandraThriftSocketTimeout((int) (short) 100);
        boolean boolean23 = cassandraHost15.getUseThriftFramedTransport();
        boolean boolean24 = subject0.equals((java.lang.Object) boolean23);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", (int) (short) 100);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1215");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int8 = atomicLong7.intValue();
        boolean boolean9 = subject0.equals((java.lang.Object) int8);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("100", (int) (short) 100);
        long long13 = cassandraHost12.getMaxWaitTimeWhenExhausted();
        java.lang.String str14 = cassandraHost12.toString();
        cassandraHost12.setLifo(true);
        java.lang.String str17 = cassandraHost12.getHost();
        cassandraHost12.setUseSocketKeepalive(false);
        cassandraHost12.setUseThriftFramedTransport(true);
        java.lang.String str22 = cassandraHost12.getName();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):1", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "0.0.0.100(0.0.0.100):97", tSSLTransportParameters45);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1216");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("Subject:35", (int) (byte) -2);
        long long7 = cassandraHost6.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray24, true);
        tSSLTransportParameters40.setKeyStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):100", "hi!(hi!)(hi!(hi!)):0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "(127.0.0.1)", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1217");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean9 = cassandraHost8.getUseThriftFramedTransport();
        boolean boolean10 = cassandraHost8.getUseSocketKeepalive();
        cassandraHost8.setCassandraThriftSocketTimeout((int) 'a');
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1218");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("9269:9160", 103);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "18");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1219");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray17, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17, false);
        boolean boolean26 = subject0.equals((java.lang.Object) strArray17);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost29.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str32 = cassandraHost29.getIp();
        java.lang.String str33 = cassandraHost29.getName();
        boolean boolean34 = cassandraHost29.getUseSocketKeepalive();
        cassandraHost29.setUseThriftFramedTransport(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray51, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray51, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):10", strArray51, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray51);
        tSSLTransportParameters61.setTrustStore("Subject(Subject):10", "CassandraClient<%s-%d>:52");
        tSSLTransportParameters61.setTrustStore("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", "-1(-1):35");
        tSSLTransportParameters61.setKeyStore("0.0.0.1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "32(0.0.0.32):50", "0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient75 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "0.0.0.0(0.0.0.0):101", tSSLTransportParameters61);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient75.equals(null)", !hKerberosThriftClient75.equals(null));
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1220");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0(0.0.0.0)");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setCassandraThriftSocketTimeout(18580);
        java.lang.String[] strArray38 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1221");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", (int) (byte) 0);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:0", strArray29);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "10", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1222");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean23 = cassandraHost21.equals((java.lang.Object) 0.0f);
        int int24 = cassandraHost21.getCassandraThriftSocketTimeout();
        cassandraHost21.setUseSocketKeepalive(false);
        java.lang.String str27 = cassandraHost21.getHost();
        cassandraHost21.setLifo(true);
        cassandraHost21.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "9459");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1223");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str13 = cassandraHost12.getHost();
        boolean boolean14 = cassandraHost12.getUseSocketKeepalive();
        java.lang.String str15 = cassandraHost12.getName();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        boolean boolean19 = cassandraHost17.equals((java.lang.Object) (byte) 10);
        boolean boolean20 = cassandraHost12.equals((java.lang.Object) (byte) 10);
        java.lang.String str21 = cassandraHost12.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "(127.0.0.1):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1224");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost8.setMaxActive((int) (short) 0);
        int int11 = cassandraHost8.getPort();
        cassandraHost8.setUseThriftFramedTransport(false);
        boolean boolean14 = cassandraHost8.getUseSocketKeepalive();
        cassandraHost8.setUseSocketKeepalive(false);
        cassandraHost8.setUseSocketKeepalive(false);
        boolean boolean19 = cassandraHost8.isPerformNameResolution();
        int int20 = cassandraHost8.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1)((127.0.0.1))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1225");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("1", 0);
        cassandraHost10.setUseSocketKeepalive(true);
        long long13 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        cassandraHost10.setCassandraThriftSocketTimeout(0);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters17.setKeyStore("hi!", "");
        tSSLTransportParameters17.setTrustStore("", "hi!");
        tSSLTransportParameters17.setTrustStore("", "CassandraClient<%s-%d>", "", "");
        tSSLTransportParameters17.setTrustStore("hi!:9160", "", "0", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        tSSLTransportParameters17.setKeyStore(":102", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "221:100", tSSLTransportParameters17);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1226");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("");
        int int6 = cassandraHost5.getMaxActive();
        cassandraHost5.setUseThriftFramedTransport(true);
        java.lang.String str9 = cassandraHost5.toString();
        cassandraHost5.setMaxActive((int) (short) 9);
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray25);
        tSSLTransportParameters32.requireClientAuth(false);
        tSSLTransportParameters32.setTrustStore("", "127.0.0.1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1227");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        java.lang.String str8 = cassandraHost7.getIp();
        java.lang.String str9 = cassandraHost7.getName();
        boolean boolean10 = cassandraHost7.getUseThriftFramedTransport();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray19, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray19);
        boolean boolean24 = cassandraHost7.equals((java.lang.Object) tSSLTransportParameters23);
        boolean boolean25 = cassandraHost7.getLifo();
        java.lang.String[] strArray42 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:32", strArray42);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "100", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1228");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        cassandraHost11.setCassandraThriftSocketTimeout((int) (short) 1);
        int int14 = cassandraHost11.getPort();
        java.lang.String str15 = cassandraHost11.getIp();
        boolean boolean16 = cassandraHost11.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "9269(0.0.36.53)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1229");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong4 = new java.util.concurrent.atomic.AtomicLong();
        float float5 = atomicLong4.floatValue();
        long long6 = atomicLong4.get();
        long long8 = atomicLong4.getAndSet(0L);
        long long9 = atomicLong4.incrementAndGet();
        atomicLong4.lazySet((long) (short) 102);
        boolean boolean12 = subject0.equals((java.lang.Object) atomicLong4);
        java.lang.String str13 = subject0.toString();
        boolean boolean14 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet15 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        java.lang.String str19 = cassandraHost18.toString();
        cassandraHost18.setCassandraThriftSocketTimeout(0);
        cassandraHost18.setCassandraThriftSocketTimeout(9);
        java.lang.String str24 = cassandraHost18.getHost();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!", "127.0.0.1", "-1", "Subject:\n" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, false);
        tSSLTransportParameters34.setTrustStore("(127.0.0.1)", "CassandraClient<%s-%d>");
        tSSLTransportParameters34.setTrustStore("0.0.0.100:102", "100:0", "Subject:\n", "(127.0.0.1):0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1230");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet14 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost16.setMaxActive((int) (short) 0);
        int int19 = cassandraHost16.getPort();
        long long20 = cassandraHost16.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "Subject(Subject):102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1231");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        boolean boolean8 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) (byte) 0);
        java.lang.String str12 = cassandraHost11.getUrl();
        cassandraHost11.setMaxActive((int) (short) 50);
        int int15 = cassandraHost11.getMaxActive();
        java.lang.String[] strArray24 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray24);
        tSSLTransportParameters29.requireClientAuth(false);
        tSSLTransportParameters29.setTrustStore("32", "0.0.0.0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1)):10", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1232");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", (int) (byte) 1);
        cassandraHost11.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1233");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", (int) (byte) 11);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "127.0.0.1(127.0.0.1):10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1234");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) -1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "-1(-1)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1235");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (byte) 10);
        boolean boolean10 = cassandraHost9.isPerformNameResolution();
        cassandraHost9.setUseSocketKeepalive(false);
        cassandraHost9.setUseThriftFramedTransport(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "33");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1236");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30);
        boolean boolean36 = subject0.equals((java.lang.Object) strArray30);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost39 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        boolean boolean40 = cassandraHost39.getLifo();
        boolean boolean41 = subject0.equals((java.lang.Object) cassandraHost39);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost44 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean45 = cassandraHost44.isPerformNameResolution();
        cassandraHost44.setCassandraThriftSocketTimeout(10);
        boolean boolean48 = cassandraHost44.isPerformNameResolution();
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))(127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))):9160", strArray56);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient62 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost44, "(127.0.0.1):102", tSSLTransportParameters61);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient62.equals(null)", !hKerberosThriftClient62.equals(null));
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1237");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):101", (-1));
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1238");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str26 = cassandraHost25.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1239");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str20 = cassandraHost19.getIp();
        java.lang.String str21 = cassandraHost19.getHost();
        java.lang.String str22 = cassandraHost19.getIp();
        java.lang.String str23 = cassandraHost19.getIp();
        java.lang.String[] strArray38 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray38);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, ":0(:0)", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1240");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray15);
        boolean boolean21 = subject0.equals((java.lang.Object) tSSLTransportParameters20);
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPublicCredentials();
        boolean boolean24 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost27 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 9);
        boolean boolean28 = cassandraHost27.isPerformNameResolution();
        java.lang.String[] strArray35 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray35, false);
        tSSLTransportParameters39.setKeyStore("11", "(127.0.0.1):100");
        tSSLTransportParameters39.setKeyStore("101:1", "214");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost27, "hi!(hi!)", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1241");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean10 = cassandraHost9.getUseSocketKeepalive();
        boolean boolean11 = cassandraHost9.getLifo();
        cassandraHost9.setMaxActive(102);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "9561");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1242");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1243");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30);
        boolean boolean36 = subject0.equals((java.lang.Object) strArray30);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost39 = new me.prettyprint.cassandra.service.CassandraHost(":0", (int) (short) 12);
        boolean boolean40 = cassandraHost39.getUseSocketKeepalive();
        java.lang.String[] strArray51 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray51, false);
        tSSLTransportParameters55.setTrustStore("", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost39, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)", tSSLTransportParameters55);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1244");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("0.0.1.45", (int) (byte) -1);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100)(100(0.0.0.100)):100", strArray21);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "111", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1245");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        boolean boolean8 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("1001", (int) (byte) -2);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1246");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):98", (int) (short) -2);
        java.lang.String[] strArray21 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):1", strArray21);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "0.0.0.0(0.0.0.0):9160", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1247");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str22 = subject0.toString();
        java.lang.String str23 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("214:9");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "44");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1248");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        java.util.Set<java.security.Principal> principalSet11 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (-1));
        java.lang.String str15 = cassandraHost14.getUrl();
        cassandraHost14.setMaxActive(0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "Subject(Subject):32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1249");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("9269", (int) (short) 9);
        boolean boolean21 = cassandraHost20.getLifo();
        java.lang.String str22 = cassandraHost20.toString();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray39, true);
        tSSLTransportParameters53.setKeyStore(":100", "10", ":0(", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "-2", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1250");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("-1:32", (int) (short) 199);
        cassandraHost10.setMaxWaitTimeWhenExhausted((long) (short) 0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "32(0.0.0.32):50");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1251");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean18 = subject0.isReadOnly();
        java.lang.String str19 = subject0.toString();
        boolean boolean20 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1))");
        cassandraHost22.setLifo(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray44, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray44, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject)", strArray44);
        tSSLTransportParameters62.setTrustStore("9269(0.0.36.53)", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "127.0.0.1(127.0.0.1):97", tSSLTransportParameters62);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1252");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost6.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str9 = cassandraHost6.toString();
        cassandraHost6.setMaxActive(9160);
        cassandraHost6.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1253");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '4');
        boolean boolean23 = cassandraHost22.getLifo();
        cassandraHost22.setMaxActive(9160);
        boolean boolean26 = cassandraHost22.getUseSocketKeepalive();
        boolean boolean27 = cassandraHost22.getUseThriftFramedTransport();
        cassandraHost22.setLifo(false);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray39);
        tSSLTransportParameters44.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):102", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1254");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long11 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        cassandraHost10.setCassandraThriftSocketTimeout((-1));
        cassandraHost10.setMaxWaitTimeWhenExhausted(1L);
        cassandraHost10.setMaxWaitTimeWhenExhausted(161L);
        java.lang.String str18 = cassandraHost10.getName();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray23);
        tSSLTransportParameters25.setTrustStore("Subject:\n", "hi!:100", "CassandraClient<%s-%d>", "CassandraClient<%s-%d>:9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "hi!(hi!)", tSSLTransportParameters25);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1255");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet10 = subject0.getPrincipals();
        boolean boolean11 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):0", (int) (byte) -2);
        java.lang.String str15 = cassandraHost14.getName();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):11", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:110", strArray29, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1256");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        java.lang.String str5 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong6 = new java.util.concurrent.atomic.AtomicLong();
        float float7 = atomicLong6.floatValue();
        long long9 = atomicLong6.getAndSet((long) (byte) 100);
        long long10 = atomicLong6.incrementAndGet();
        long long11 = atomicLong6.getAndIncrement();
        long long12 = atomicLong6.incrementAndGet();
        long long14 = atomicLong6.getAndSet((long) ' ');
        java.lang.String str15 = atomicLong6.toString();
        atomicLong6.set((long) (byte) 1);
        atomicLong6.lazySet((long) 50);
        long long20 = atomicLong6.decrementAndGet();
        boolean boolean21 = subject0.equals((java.lang.Object) long20);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)", (-1));
        boolean boolean26 = cassandraHost25.isPerformNameResolution();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):35", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:35", strArray42, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):9160", strArray42, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient56 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "0.0.0.100(0.0.0.100):9160", tSSLTransportParameters55);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient56.equals(null)", !hKerberosThriftClient56.equals(null));
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1257");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        boolean boolean23 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean27 = cassandraHost26.getUseSocketKeepalive();
        boolean boolean28 = cassandraHost26.getLifo();
        java.lang.String str29 = cassandraHost26.getName();
        cassandraHost26.setCassandraThriftSocketTimeout((int) ' ');
        boolean boolean32 = cassandraHost26.getUseSocketKeepalive();
        int int33 = cassandraHost26.getCassandraThriftSocketTimeout();
        int int34 = cassandraHost26.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1258");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        long long16 = atomicLong7.longValue();
        atomicLong7.set(99L);
        int int19 = atomicLong7.intValue();
        boolean boolean20 = subject0.equals((java.lang.Object) atomicLong7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("9269(0.0.36.53):1", (int) (short) 137);
        cassandraHost23.setMaxWaitTimeWhenExhausted((long) 0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1259");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        boolean boolean7 = subject0.isReadOnly();
        boolean boolean9 = subject0.equals((java.lang.Object) 108L);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        boolean boolean11 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet12 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100", (int) 'a');
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray25, false);
        boolean boolean31 = cassandraHost15.equals((java.lang.Object) false);
        java.lang.String str32 = cassandraHost15.getIp();
        boolean boolean33 = cassandraHost15.getLifo();
        java.lang.String[] strArray42 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("111", strArray42, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "214:9", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1260");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters12 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray10, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray10, false);
        boolean boolean15 = subject0.equals((java.lang.Object) "Subject:\n");
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", (int) (byte) 9);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray33);
        tSSLTransportParameters43.setTrustStore("CassandraClient<%s-%d>:9160", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", "100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "115", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1261");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPublicCredentials();
        java.lang.String str10 = subject7.toString();
        boolean boolean11 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPublicCredentials();
        boolean boolean14 = subject0.equals((java.lang.Object) subject7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost(":0", (-1));
        boolean boolean18 = subject0.equals((java.lang.Object) cassandraHost17);
        boolean boolean19 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9);
        java.lang.String str23 = cassandraHost22.getUrl();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:101", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40, true);
        boolean boolean59 = cassandraHost22.equals((java.lang.Object) tSSLTransportParameters58);
        boolean boolean60 = subject0.equals((java.lang.Object) cassandraHost22);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost63 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong65 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean66 = cassandraHost63.equals((java.lang.Object) '#');
        java.lang.String str67 = cassandraHost63.getHost();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters69.setKeyStore("hi!", "");
        tSSLTransportParameters69.setKeyStore("CassandraClient<%s-%d>", "CassandraClient<%s-%d>");
        tSSLTransportParameters69.setTrustStore("Subject:\n", "hi!:100", "", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        tSSLTransportParameters69.setKeyStore("hi!:100", "CassandraClient<%s-%d>");
        tSSLTransportParameters69.setTrustStore("127.0.0.1(127.0.0.1):102", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient87 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost63, ":9160", tSSLTransportParameters69);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient87.equals(null)", !hKerberosThriftClient87.equals(null));
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1262");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30);
        boolean boolean36 = subject0.equals((java.lang.Object) strArray30);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost39 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        boolean boolean40 = cassandraHost39.getLifo();
        boolean boolean41 = subject0.equals((java.lang.Object) cassandraHost39);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost43 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost43.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str46 = cassandraHost43.toString();
        cassandraHost43.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost43.setCassandraThriftSocketTimeout((int) '4');
        boolean boolean51 = cassandraHost43.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost43, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1263");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("");
        int int11 = cassandraHost10.getMaxActive();
        cassandraHost10.setUseThriftFramedTransport(true);
        boolean boolean14 = cassandraHost10.getLifo();
        java.lang.String[] strArray19 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray19);
        tSSLTransportParameters20.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "-1:0", tSSLTransportParameters20);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1264");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 10);
        cassandraHost6.setUseSocketKeepalive(true);
        java.lang.String str9 = cassandraHost6.getHost();
        cassandraHost6.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "CassandraClient<%s-%d>:1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1265");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long22 = cassandraHost21.getMaxWaitTimeWhenExhausted();
        cassandraHost21.setLifo(true);
        int int25 = cassandraHost21.getPort();
        java.lang.String[] strArray40 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100)(100(0.0.0.100)):1", strArray40, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "100(0.0.0.100)(100(0.0.0.100)):99", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1266");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "Subject:\n");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1267");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        boolean boolean6 = subject0.isReadOnly();
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("10", (int) (short) 35);
        java.lang.String[] strArray26 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):101", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:0", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", strArray26);
        boolean boolean41 = cassandraHost10.equals((java.lang.Object) tSSLTransportParameters40);
        java.lang.String[] strArray59 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray59, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray59, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray59, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters70 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray59, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters72 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters74 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))(127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))):9160", strArray59, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient75 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1)((127.0.0.1)):9160", tSSLTransportParameters74);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient75.equals(null)", !hKerberosThriftClient75.equals(null));
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1268");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        boolean boolean8 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):32");
        int int11 = cassandraHost10.getCassandraThriftSocketTimeout();
        cassandraHost10.setMaxActive((int) (byte) 112);
        java.lang.String[] strArray21 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray21);
        tSSLTransportParameters25.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "127.0.0.1:10", tSSLTransportParameters25);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1269");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        int int11 = cassandraHost10.getMaxActive();
        java.lang.String str12 = cassandraHost10.getIp();
        cassandraHost10.setMaxWaitTimeWhenExhausted(10L);
        java.lang.String str15 = cassandraHost10.getName();
        java.lang.String[] strArray26 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, ":0", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1270");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        boolean boolean17 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) (byte) -2);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):97", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray36);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1271");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("9269");
        java.lang.String str24 = cassandraHost23.getUrl();
        cassandraHost23.setCassandraThriftSocketTimeout(50);
        java.lang.String[] strArray39 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0)", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):1", strArray39, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "13", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1272");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) '4');
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:52", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":102", strArray24);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "104", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1273");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        java.util.Set<java.lang.Object> objSet40 = subject5.getPrivateCredentials();
        javax.security.auth.Subject subject41 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet42 = subject41.getPublicCredentials();
        subject41.setReadOnly();
        java.lang.String str44 = subject41.toString();
        java.lang.String str45 = subject41.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost47 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean49 = cassandraHost47.equals((java.lang.Object) 0.0f);
        java.lang.String str50 = cassandraHost47.getName();
        boolean boolean51 = subject41.equals((java.lang.Object) cassandraHost47);
        java.lang.String str52 = cassandraHost47.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost47, ":9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1274");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong4 = new java.util.concurrent.atomic.AtomicLong();
        float float5 = atomicLong4.floatValue();
        long long6 = atomicLong4.get();
        long long8 = atomicLong4.getAndSet(0L);
        long long9 = atomicLong4.incrementAndGet();
        atomicLong4.lazySet((long) (short) 102);
        boolean boolean12 = subject0.equals((java.lang.Object) atomicLong4);
        java.util.concurrent.atomic.AtomicLong atomicLong14 = new java.util.concurrent.atomic.AtomicLong((long) (short) 10);
        atomicLong14.set(1L);
        atomicLong14.set((long) 10);
        atomicLong14.set(467L);
        boolean boolean21 = subject0.equals((java.lang.Object) 467L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (byte) 1);
        int int25 = cassandraHost24.getMaxActive();
        boolean boolean26 = cassandraHost24.getLifo();
        java.lang.String str27 = cassandraHost24.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "12");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1275");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray15);
        boolean boolean21 = subject0.equals((java.lang.Object) tSSLTransportParameters20);
        java.lang.String str22 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost25 = new me.prettyprint.cassandra.service.CassandraHost("98", (int) (short) 10);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost25, "Subject:52");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1276");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", (int) (byte) 53);
        javax.security.auth.Subject subject14 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet15 = subject14.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet16 = subject14.getPrivateCredentials();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray26, false);
        boolean boolean33 = subject14.equals((java.lang.Object) strArray26);
        boolean boolean34 = subject14.isReadOnly();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray44);
        boolean boolean50 = subject14.equals((java.lang.Object) strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52", strArray44);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, ":9160:100", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1277");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        java.lang.String str9 = cassandraHost6.getName();
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost6);
        java.util.concurrent.atomic.AtomicLong atomicLong12 = new java.util.concurrent.atomic.AtomicLong(9313L);
        long long13 = atomicLong12.decrementAndGet();
        boolean boolean14 = subject0.equals((java.lang.Object) long13);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) '#');
        cassandraHost17.setMaxWaitTimeWhenExhausted((long) ' ');
        long long20 = cassandraHost17.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray36, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "CassandraClient<%s-%d>:9160", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1278");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):0", (int) (byte) -2);
        cassandraHost7.setUseThriftFramedTransport(false);
        java.lang.String str10 = cassandraHost7.getHost();
        java.lang.String[] strArray23 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))", strArray23);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "0.0.1.45", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1279");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost10.setMaxActive((int) (byte) 10);
        boolean boolean13 = cassandraHost10.getUseThriftFramedTransport();
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        tSSLTransportParameters36.setTrustStore("1", "127.0.0.1(127.0.0.1):102", "209", "127.0.0.1(127.0.0.1):10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "100(0.0.0.100)(100(0.0.0.100)):99", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1280");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", (int) (byte) 45);
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray22);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "-1:102", tSSLTransportParameters26);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1281");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.util.Set<java.security.Principal> principalSet17 = subject0.getPrincipals();
        javax.security.auth.Subject subject18 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet19 = subject18.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet20 = subject18.getPrincipals();
        subject18.setReadOnly();
        subject18.setReadOnly();
        java.util.Set<java.lang.Object> objSet23 = subject18.getPrivateCredentials();
        java.lang.Class<?> wildcardClass24 = subject18.getClass();
        boolean boolean25 = subject0.equals((java.lang.Object) subject18);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        cassandraHost28.setMaxWaitTimeWhenExhausted((long) '4');
        java.lang.String str31 = cassandraHost28.getHost();
        java.lang.String str32 = cassandraHost28.getName();
        cassandraHost28.setUseThriftFramedTransport(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "111");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1282");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        boolean boolean11 = cassandraHost8.getLifo();
        java.lang.String str12 = cassandraHost8.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.100(0.0.0.100):8");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1283");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean7 = cassandraHost5.equals((java.lang.Object) 0.0f);
        int int8 = cassandraHost5.getPort();
        java.lang.String str9 = cassandraHost5.getName();
        java.lang.String str10 = cassandraHost5.getHost();
        boolean boolean11 = cassandraHost5.getUseThriftFramedTransport();
        cassandraHost5.setMaxWaitTimeWhenExhausted(103L);
        java.lang.String[] strArray30 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:32", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9160", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9261", strArray30, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "Subject(Subject)", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1284");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        java.util.Set<java.lang.Object> objSet40 = subject5.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost43 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long44 = cassandraHost43.getMaxWaitTimeWhenExhausted();
        cassandraHost43.setCassandraThriftSocketTimeout((-1));
        cassandraHost43.setMaxWaitTimeWhenExhausted(1L);
        cassandraHost43.setMaxWaitTimeWhenExhausted(161L);
        java.lang.String str51 = cassandraHost43.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost43, "209");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1285");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPrivateCredentials();
        boolean boolean10 = subject7.isReadOnly();
        java.lang.String[] strArray19 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray19);
        boolean boolean22 = subject7.equals((java.lang.Object) tSSLTransportParameters21);
        java.util.Set<java.lang.Object> objSet23 = subject7.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet24 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet25 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet26 = subject7.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("100:0", 9);
        boolean boolean30 = subject7.equals((java.lang.Object) cassandraHost29);
        java.lang.String[] strArray49 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray49, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray49, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray49, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray49, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray49);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray49, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("301:10", strArray49);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "CassandraClient<%s-%d>:10", tSSLTransportParameters65);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1286");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) (short) -1);
        int int11 = cassandraHost10.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "51");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1287");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("-1:0", 32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "0.0.0.100(0.0.0.100):45");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1288");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong12 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean13 = cassandraHost10.equals((java.lang.Object) '#');
        java.lang.String str14 = cassandraHost10.getHost();
        boolean boolean15 = cassandraHost7.equals((java.lang.Object) cassandraHost10);
        cassandraHost10.setLifo(false);
        java.lang.String str18 = cassandraHost10.getName();
        cassandraHost10.setUseSocketKeepalive(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):9160", strArray35, true);
        tSSLTransportParameters48.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient51 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "11", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient51.equals(null)", !hKerberosThriftClient51.equals(null));
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1289");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (short) 102);
        boolean boolean10 = subject0.equals((java.lang.Object) "127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean14 = cassandraHost13.getLifo();
        int int15 = cassandraHost13.getPort();
        long long16 = cassandraHost13.getMaxWaitTimeWhenExhausted();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "(127.0.0.1)((127.0.0.1)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1290");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.lang.String str8 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong15 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean16 = cassandraHost13.equals((java.lang.Object) '#');
        java.lang.String str17 = cassandraHost13.getHost();
        boolean boolean18 = cassandraHost10.equals((java.lang.Object) cassandraHost13);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "0.0.0.0(0.0.0.0):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1291");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("199", 52);
        boolean boolean11 = cassandraHost10.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "127.0.0.1(127.0.0.1):97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1292");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters12 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray10, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray10, false);
        boolean boolean15 = subject0.equals((java.lang.Object) "Subject:\n");
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray20);
        java.lang.Class<?> wildcardClass24 = strArray20.getClass();
        boolean boolean25 = subject0.equals((java.lang.Object) strArray20);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost(":0", (int) (short) 12);
        boolean boolean29 = cassandraHost28.getUseThriftFramedTransport();
        cassandraHost28.setUseThriftFramedTransport(true);
        javax.security.auth.Subject subject34 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet35 = subject34.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet36 = subject34.getPrivateCredentials();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray46, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray46, false);
        boolean boolean53 = subject34.equals((java.lang.Object) strArray46);
        boolean boolean54 = subject34.isReadOnly();
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray64, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray64);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray64);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray64);
        boolean boolean70 = subject34.equals((java.lang.Object) strArray64);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52", strArray64);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient72 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):50", tSSLTransportParameters71);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient72.equals(null)", !hKerberosThriftClient72.equals(null));
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1293");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean8 = cassandraHost7.getLifo();
        cassandraHost7.setCassandraThriftSocketTimeout(100);
        cassandraHost7.setMaxActive(0);
        java.lang.String str13 = cassandraHost7.getUrl();
        cassandraHost7.setMaxActive(10);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        cassandraHost18.setMaxWaitTimeWhenExhausted((long) 98);
        boolean boolean21 = cassandraHost7.equals((java.lang.Object) cassandraHost18);
        java.lang.String str22 = cassandraHost18.getUrl();
        cassandraHost18.setUseSocketKeepalive(false);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray34);
        tSSLTransportParameters38.setTrustStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", "127.0.0.1(127.0.0.1):10", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "CassandraClient<%s-%d>");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", tSSLTransportParameters38);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1294");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)", (int) (short) 100);
        boolean boolean14 = cassandraHost13.isPerformNameResolution();
        java.lang.String str15 = cassandraHost13.getHost();
        java.lang.String[] strArray22 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray22, false);
        tSSLTransportParameters26.setKeyStore("11", "(127.0.0.1):100");
        tSSLTransportParameters26.setKeyStore("101:1", "214");
        tSSLTransportParameters26.setTrustStore("13", "hi!:100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "214:101", tSSLTransportParameters26);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1295");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (byte) 1);
        int int8 = cassandraHost7.getMaxActive();
        boolean boolean9 = subject0.equals((java.lang.Object) int8);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) 0.0f);
        int int14 = cassandraHost11.getPort();
        java.lang.String str15 = cassandraHost11.getName();
        java.lang.String str16 = cassandraHost11.getHost();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("214", 9);
        boolean boolean20 = cassandraHost11.equals((java.lang.Object) "214");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        tSSLTransportParameters38.setKeyStore("-1:0", "102");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", tSSLTransportParameters38);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1296");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.lang.String str8 = subject5.toString();
        java.lang.String str9 = subject5.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) 0.0f);
        java.lang.String str14 = cassandraHost11.getName();
        boolean boolean15 = subject5.equals((java.lang.Object) cassandraHost11);
        java.lang.String str16 = cassandraHost11.toString();
        int int17 = cassandraHost11.getPort();
        int int18 = cassandraHost11.getMaxActive();
        java.lang.String str19 = cassandraHost11.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient21 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient21.equals(null)", !hKerberosThriftClient21.equals(null));
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1297");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost(":9160", (int) (short) 11);
        javax.security.auth.Subject subject12 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet13 = subject12.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet14 = subject12.getPrincipals();
        subject12.setReadOnly();
        boolean boolean16 = subject12.isReadOnly();
        java.lang.String str17 = subject12.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong19 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int20 = atomicLong19.intValue();
        boolean boolean21 = subject12.equals((java.lang.Object) int20);
        boolean boolean22 = subject12.isReadOnly();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray34, true);
        boolean boolean43 = subject12.equals((java.lang.Object) strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):1", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", strArray34, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1298");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("-1:0", (int) (short) 0);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 10);
        cassandraHost14.setUseSocketKeepalive(true);
        java.lang.String[] strArray31 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray31);
        boolean boolean44 = cassandraHost14.equals((java.lang.Object) tSSLTransportParameters43);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "Subject(Subject)", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1299");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        int int8 = cassandraHost7.getMaxActive();
        java.lang.String str9 = cassandraHost7.getIp();
        cassandraHost7.setMaxWaitTimeWhenExhausted(10L);
        boolean boolean12 = cassandraHost7.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "32(0.0.0.32)(32(0.0.0.32))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1300");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong();
        float float6 = atomicLong5.floatValue();
        long long8 = atomicLong5.getAndSet((long) (byte) 100);
        long long9 = atomicLong5.incrementAndGet();
        double double10 = atomicLong5.doubleValue();
        long long12 = atomicLong5.getAndAdd((-1L));
        boolean boolean13 = subject0.equals((java.lang.Object) (-1L));
        javax.security.auth.Subject subject14 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet15 = subject14.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet16 = subject14.getPrincipals();
        subject14.setReadOnly();
        boolean boolean18 = subject14.isReadOnly();
        java.lang.String str19 = subject14.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong21 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int22 = atomicLong21.intValue();
        boolean boolean23 = subject14.equals((java.lang.Object) int22);
        java.util.Set<java.lang.Object> objSet24 = subject14.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("1");
        boolean boolean28 = cassandraHost26.equals((java.lang.Object) ":100");
        boolean boolean29 = subject14.equals((java.lang.Object) cassandraHost26);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray48, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray48, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray48, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray48, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray48, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray48, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))", strArray48, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray48, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient69 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", tSSLTransportParameters68);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient69.equals(null)", !hKerberosThriftClient69.equals(null));
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1301");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        java.util.Set<java.lang.Object> objSet40 = subject5.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost43 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)", (int) (byte) -1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost43, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1302");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray17 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        boolean boolean25 = subject0.equals((java.lang.Object) tSSLTransportParameters24);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        cassandraHost28.setMaxWaitTimeWhenExhausted((long) '4');
        java.lang.String str31 = cassandraHost28.getHost();
        java.lang.String str32 = cassandraHost28.getName();
        cassandraHost28.setMaxActive(100);
        java.lang.String[] strArray47 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray47);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray47, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray47, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("209:-2", strArray47, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1", strArray47, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient57 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "44", tSSLTransportParameters56);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient57.equals(null)", !hKerberosThriftClient57.equals(null));
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1303");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):1");
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20, false);
        tSSLTransportParameters28.setKeyStore("-2", "-2", "102", "102");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1304");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean12 = cassandraHost10.equals((java.lang.Object) 0.0f);
        int int13 = cassandraHost10.getCassandraThriftSocketTimeout();
        java.lang.String str14 = cassandraHost10.getName();
        java.lang.String str15 = cassandraHost10.getUrl();
        java.lang.String str16 = cassandraHost10.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1305");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("Subject(Subject):35", (-2));
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "101:1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1306");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)", (int) (short) 9359);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "32(0.0.0.32)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1307");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)", 9260);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost13.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str16 = cassandraHost13.getHost();
        boolean boolean17 = cassandraHost10.equals((java.lang.Object) cassandraHost13);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "-1(-1):35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1308");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", 50);
        java.lang.String str9 = cassandraHost8.toString();
        java.lang.String[] strArray17 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray17);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.0(0.0.0.0)(0.0.0.0(0.0.0.0)):9160", tSSLTransportParameters22);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1309");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        java.lang.String str9 = cassandraHost6.getName();
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost6);
        java.util.concurrent.atomic.AtomicLong atomicLong12 = new java.util.concurrent.atomic.AtomicLong(9313L);
        long long13 = atomicLong12.decrementAndGet();
        boolean boolean14 = subject0.equals((java.lang.Object) long13);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0):10", (int) (byte) 11);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray30);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "100(0.0.0.100)(100(0.0.0.100)):99", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1310");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("Subject", (int) (short) 60);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "Subject(Subject)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1311");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean7 = cassandraHost5.equals((java.lang.Object) 0.0f);
        int int8 = cassandraHost5.getCassandraThriftSocketTimeout();
        java.lang.String str9 = cassandraHost5.getName();
        java.lang.String str10 = cassandraHost5.getUrl();
        java.lang.String str11 = cassandraHost5.getIp();
        java.lang.String str12 = cassandraHost5.getIp();
        cassandraHost5.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1312");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPrivateCredentials();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray34, false);
        boolean boolean42 = subject0.equals((java.lang.Object) tSSLTransportParameters41);
        boolean boolean43 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost45 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)");
        java.lang.String str46 = cassandraHost45.getUrl();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray58, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray58);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray58, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost45, ":0(", tSSLTransportParameters65);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1313");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray13);
        boolean boolean16 = subject0.equals((java.lang.Object) "Subject(Subject):10");
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost21.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str24 = cassandraHost21.toString();
        cassandraHost21.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost21.setMaxWaitTimeWhenExhausted((long) (byte) 1);
        java.lang.String str29 = cassandraHost21.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "9261");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1314");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost42 = new me.prettyprint.cassandra.service.CassandraHost("-2", 102);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost42, "Subject(Subject):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1315");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet21 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean26 = cassandraHost24.equals((java.lang.Object) 0.0f);
        int int27 = cassandraHost24.getCassandraThriftSocketTimeout();
        java.lang.String str28 = cassandraHost24.getName();
        boolean boolean29 = cassandraHost24.getUseThriftFramedTransport();
        java.lang.String str30 = cassandraHost24.toString();
        java.lang.String str31 = cassandraHost24.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "0.0.0.101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1316");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("209", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1:9260", strArray32, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient54 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "32(0.0.0.32):50", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient54.equals(null)", !hKerberosThriftClient54.equals(null));
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1317");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (short) 102);
        boolean boolean10 = subject0.equals((java.lang.Object) "127.0.0.1");
        java.util.Set<java.lang.Object> objSet11 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject0.getPrivateCredentials();
        boolean boolean13 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260");
        cassandraHost16.setUseThriftFramedTransport(true);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):10", strArray31);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient40 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "Subject(Subject):52", tSSLTransportParameters39);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient40.equals(null)", !hKerberosThriftClient40.equals(null));
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1318");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        boolean boolean7 = subject0.isReadOnly();
        boolean boolean9 = subject0.equals((java.lang.Object) 108L);
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        boolean boolean11 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet12 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost14.setUseThriftFramedTransport(true);
        boolean boolean17 = cassandraHost14.getUseSocketKeepalive();
        long long18 = cassandraHost14.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray33);
        tSSLTransportParameters44.setTrustStore(":10", "0.0.1.45", ":10", ":0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "9160", tSSLTransportParameters44);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1319");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.util.Set<java.lang.Object> objSet12 = subject5.getPrivateCredentials();
        java.lang.String str13 = subject5.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean17 = cassandraHost16.isPerformNameResolution();
        cassandraHost16.setUseThriftFramedTransport(true);
        cassandraHost16.setUseSocketKeepalive(false);
        int int22 = cassandraHost16.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray39 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214:9", strArray39, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient52 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost16, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", tSSLTransportParameters51);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient52.equals(null)", !hKerberosThriftClient52.equals(null));
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1320");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String str4 = subject0.toString();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("100");
        cassandraHost8.setCassandraThriftSocketTimeout((int) (byte) 53);
        cassandraHost8.setMaxWaitTimeWhenExhausted(9280L);
        cassandraHost8.setCassandraThriftSocketTimeout((int) (short) 102);
        java.lang.String str15 = cassandraHost8.getName();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        cassandraHost19.setMaxWaitTimeWhenExhausted((long) '4');
        java.lang.String str22 = cassandraHost19.getHost();
        java.lang.String str23 = cassandraHost19.getName();
        java.lang.String str24 = cassandraHost19.toString();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray38, false);
        boolean boolean50 = cassandraHost19.equals((java.lang.Object) tSSLTransportParameters49);
        tSSLTransportParameters49.setTrustStore("(127.0.0.1)((127.0.0.1))", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)");
        tSSLTransportParameters49.setTrustStore("Subject(Subject):102", ":0(:0)", "(127.0.0.1)((127.0.0.1)):102", ":0(:0)");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1):100", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1321");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (short) 102);
        boolean boolean10 = subject0.equals((java.lang.Object) "127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1");
        cassandraHost12.setCassandraThriftSocketTimeout((int) (short) 198);
        java.lang.String[] strArray22 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32):-125", strArray22, false);
        tSSLTransportParameters28.setKeyStore("Subject(Subject):101", "32", "Subject:110", "9");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "Subject:52", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1322");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        long long16 = atomicLong7.longValue();
        atomicLong7.set(99L);
        int int19 = atomicLong7.intValue();
        boolean boolean20 = subject0.equals((java.lang.Object) atomicLong7);
        boolean boolean21 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)(hi!(hi!)):9261", (int) (byte) 103);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1323");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean9 = cassandraHost7.equals((java.lang.Object) 0.0f);
        java.lang.String[] strArray18 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray18, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray18, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray18, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "9468", tSSLTransportParameters25);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1324");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        cassandraHost10.setMaxWaitTimeWhenExhausted(0L);
        cassandraHost10.setMaxWaitTimeWhenExhausted((long) (short) -1);
        cassandraHost10.setUseSocketKeepalive(true);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:110", strArray32, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "0.0.0.0", tSSLTransportParameters45);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1325");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160");
        cassandraHost8.setLifo(true);
        cassandraHost8.setUseThriftFramedTransport(false);
        cassandraHost8.setCassandraThriftSocketTimeout((int) (short) -1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "209:-2");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1326");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean6 = cassandraHost4.equals((java.lang.Object) 0.0f);
        cassandraHost4.setUseSocketKeepalive(false);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray17, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray17);
        boolean boolean23 = cassandraHost4.equals((java.lang.Object) strArray17);
        cassandraHost4.setUseSocketKeepalive(false);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("209:-2", strArray35);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost4, "50", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1327");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost4.setMaxWaitTimeWhenExhausted((long) 10);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean9 = cassandraHost4.equals((java.lang.Object) cassandraHost8);
        long long10 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100:35", strArray24, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.10", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1328");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        boolean boolean7 = subject0.isReadOnly();
        javax.security.auth.Subject subject8 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet9 = subject8.getPublicCredentials();
        subject8.setReadOnly();
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet12 = subject11.getPublicCredentials();
        subject11.setReadOnly();
        java.lang.String str14 = subject11.toString();
        java.lang.String str15 = subject11.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean19 = cassandraHost17.equals((java.lang.Object) 0.0f);
        java.lang.String str20 = cassandraHost17.getName();
        boolean boolean21 = subject11.equals((java.lang.Object) cassandraHost17);
        cassandraHost17.setUseThriftFramedTransport(false);
        boolean boolean24 = subject8.equals((java.lang.Object) cassandraHost17);
        java.lang.String str25 = cassandraHost17.getIp();
        java.lang.String str26 = cassandraHost17.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "0.0.0.0(0.0.0.0):101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1329");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        java.lang.String str11 = cassandraHost10.getUrl();
        cassandraHost10.setMaxWaitTimeWhenExhausted(137L);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray24);
        tSSLTransportParameters29.setTrustStore("10", "0.0.0.0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):102", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1330");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray20, true);
        tSSLTransportParameters27.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean31 = subject0.equals((java.lang.Object) tSSLTransportParameters27);
        java.util.Set<java.lang.Object> objSet32 = subject0.getPrivateCredentials();
        boolean boolean33 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost37 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) (byte) -2);
        java.lang.String str38 = cassandraHost37.getHost();
        boolean boolean39 = cassandraHost37.isPerformNameResolution();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray47);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray47);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray47);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0", strArray47, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray47, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient55 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost37, "CassandraClient<%s-%d>", tSSLTransportParameters54);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient55.equals(null)", !hKerberosThriftClient55.equals(null));
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1331");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray15, true);
        boolean boolean24 = subject0.equals((java.lang.Object) tSSLTransportParameters23);
        java.util.Set<java.lang.Object> objSet25 = subject0.getPrivateCredentials();
        boolean boolean26 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)", 9160);
        int int30 = cassandraHost29.getCassandraThriftSocketTimeout();
        boolean boolean31 = cassandraHost29.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "0(0.0.0.0):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1332");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost2 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int3 = cassandraHost2.getMaxActive();
        boolean boolean4 = cassandraHost2.getUseThriftFramedTransport();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject5.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject5.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong10 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float11 = atomicLong10.floatValue();
        long long12 = atomicLong10.incrementAndGet();
        double double13 = atomicLong10.doubleValue();
        boolean boolean14 = subject5.equals((java.lang.Object) double13);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray25, true);
        tSSLTransportParameters32.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean36 = subject5.equals((java.lang.Object) tSSLTransportParameters32);
        java.util.Set<java.lang.Object> objSet37 = subject5.getPrivateCredentials();
        boolean boolean38 = subject5.isReadOnly();
        boolean boolean39 = cassandraHost2.equals((java.lang.Object) subject5);
        java.lang.String str40 = subject5.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost43 = new me.prettyprint.cassandra.service.CassandraHost("209", (int) (byte) -2);
        java.lang.String str44 = cassandraHost43.getUrl();
        java.lang.String[] strArray52 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray52);
        tSSLTransportParameters56.requireClientAuth(true);
        tSSLTransportParameters56.setKeyStore("Subject(Subject):52", ":100", "hi!:100", "199");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient64 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject5, cassandraHost43, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", tSSLTransportParameters56);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient64.equals(null)", !hKerberosThriftClient64.equals(null));
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1333");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray15, false);
        boolean boolean24 = subject0.equals((java.lang.Object) false);
        javax.security.auth.Subject subject25 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet26 = subject25.getPublicCredentials();
        subject25.setReadOnly();
        java.lang.String str28 = subject25.toString();
        java.lang.String str29 = subject25.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost31 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean33 = cassandraHost31.equals((java.lang.Object) 0.0f);
        java.lang.String str34 = cassandraHost31.getName();
        boolean boolean35 = subject25.equals((java.lang.Object) cassandraHost31);
        java.lang.String str36 = cassandraHost31.toString();
        int int37 = cassandraHost31.getPort();
        java.lang.String str38 = cassandraHost31.toString();
        cassandraHost31.setUseThriftFramedTransport(true);
        boolean boolean41 = cassandraHost31.isPerformNameResolution();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray61, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray61);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray61);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray61);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray61);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray61, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters70 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray61);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray61);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters73 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray61, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters75 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray61, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters77 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray61, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters78 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269:9160", strArray61);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters79 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0", strArray61);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient80 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost31, "0.0.0.101", tSSLTransportParameters79);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient80.equals(null)", !hKerberosThriftClient80.equals(null));
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1334");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0)", (int) (byte) 98);
        java.lang.String str10 = cassandraHost9.toString();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray23, false);
        tSSLTransportParameters33.setKeyStore("(127.0.0.1):9160", "1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", "9269");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1):0", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1335");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        javax.security.auth.Subject subject6 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet7 = subject6.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject6.getPrincipals();
        java.util.Set<java.lang.Object> objSet9 = subject6.getPrivateCredentials();
        java.lang.String str10 = subject6.toString();
        java.util.Set<java.security.Principal> principalSet11 = subject6.getPrincipals();
        boolean boolean12 = subject0.equals((java.lang.Object) subject6);
        java.util.Set<java.lang.Object> objSet13 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long16 = cassandraHost15.getMaxWaitTimeWhenExhausted();
        cassandraHost15.setLifo(false);
        boolean boolean19 = cassandraHost15.getLifo();
        cassandraHost15.setMaxActive((int) (byte) 1);
        boolean boolean22 = cassandraHost15.getUseThriftFramedTransport();
        int int23 = cassandraHost15.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray40 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray40, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray40, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray40);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):9", strArray40, true);
        boolean boolean56 = cassandraHost15.equals((java.lang.Object) strArray40);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient58 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):12");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient58.equals(null)", !hKerberosThriftClient58.equals(null));
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1336");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("100:35", (int) (byte) 32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "9561");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1337");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):0", (int) (short) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("2", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "9269(0.0.36.53):1", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1338");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean8 = cassandraHost7.getLifo();
        int int9 = cassandraHost7.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):301");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1339");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160");
        cassandraHost6.setLifo(true);
        java.lang.String str9 = cassandraHost6.getUrl();
        java.lang.String[] strArray21 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("102", strArray21, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "101", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1340");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong8 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean9 = cassandraHost6.equals((java.lang.Object) '#');
        java.lang.String str10 = cassandraHost6.getHost();
        java.lang.String str11 = cassandraHost6.getIp();
        java.lang.String[] strArray25 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:101", strArray25, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "0.0.0.100", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1341");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet22 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost24.setMaxActive((int) (short) 0);
        int int27 = cassandraHost24.getCassandraThriftSocketTimeout();
        cassandraHost24.setCassandraThriftSocketTimeout(100);
        cassandraHost24.setLifo(true);
        java.lang.String[] strArray43 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray43);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "0(0.0.0.0):0", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1342");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        cassandraHost12.setCassandraThriftSocketTimeout((-1));
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "127.0.0.1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1343");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) (byte) -2);
        boolean boolean8 = cassandraHost7.getLifo();
        int int9 = cassandraHost7.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "1:9260");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1344");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        java.util.Set<java.security.Principal> principalSet20 = subject0.getPrincipals();
        java.lang.String[] strArray33 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray33);
        boolean boolean42 = subject0.equals((java.lang.Object) "100");
        java.util.Set<java.security.Principal> principalSet43 = subject0.getPrincipals();
        javax.security.auth.Subject subject44 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet45 = subject44.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet46 = subject44.getPrivateCredentials();
        boolean boolean47 = subject44.isReadOnly();
        java.util.Set<java.lang.Object> objSet48 = subject44.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet49 = subject44.getPrivateCredentials();
        subject44.setReadOnly();
        javax.security.auth.Subject subject51 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet52 = subject51.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet53 = subject51.getPublicCredentials();
        java.lang.String str54 = subject51.toString();
        boolean boolean55 = subject51.isReadOnly();
        java.util.Set<java.lang.Object> objSet56 = subject51.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet57 = subject51.getPublicCredentials();
        boolean boolean58 = subject44.equals((java.lang.Object) subject51);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost61 = new me.prettyprint.cassandra.service.CassandraHost(":0", (-1));
        boolean boolean62 = subject44.equals((java.lang.Object) cassandraHost61);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient64 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost61, "127.0.0.1(127.0.0.1):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient64.equals(null)", !hKerberosThriftClient64.equals(null));
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1345");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("-1", 101);
        java.lang.String str6 = cassandraHost5.getIp();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):50", strArray20);
        tSSLTransportParameters28.setKeyStore(":0(", "100(0.0.0.100):100");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "hi!", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1346");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        long long9 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        java.lang.String str10 = cassandraHost8.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1)((127.0.0.1)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1347");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):97", (int) (short) 20);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "104");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1348");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):-1");
        javax.security.auth.Subject subject23 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet24 = subject23.getPublicCredentials();
        subject23.setReadOnly();
        javax.security.auth.Subject subject26 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet27 = subject26.getPublicCredentials();
        subject26.setReadOnly();
        java.lang.String str29 = subject26.toString();
        java.lang.String str30 = subject26.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost32 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean34 = cassandraHost32.equals((java.lang.Object) 0.0f);
        java.lang.String str35 = cassandraHost32.getName();
        boolean boolean36 = subject26.equals((java.lang.Object) cassandraHost32);
        cassandraHost32.setUseThriftFramedTransport(false);
        boolean boolean39 = subject23.equals((java.lang.Object) cassandraHost32);
        java.lang.String str40 = subject23.toString();
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters41.setKeyStore("hi!", "");
        tSSLTransportParameters41.setTrustStore("", "hi!");
        tSSLTransportParameters41.setKeyStore("hi!", "hi!", "hi!", "hi!");
        boolean boolean53 = subject23.equals((java.lang.Object) "hi!");
        boolean boolean54 = subject23.isReadOnly();
        boolean boolean55 = subject23.isReadOnly();
        java.lang.String str56 = subject23.toString();
        boolean boolean57 = cassandraHost22.equals((java.lang.Object) subject23);
        java.lang.String[] strArray70 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray70);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters72 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray70);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters74 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray70, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters75 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray70);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters77 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray70, true);
        tSSLTransportParameters77.setTrustStore("9261", "CassandraClient<%s-%d>:-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient81 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "(127.0.0.1)((127.0.0.1)):35", tSSLTransportParameters77);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient81.equals(null)", !hKerberosThriftClient81.equals(null));
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1349");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) 0.0f);
        int int11 = cassandraHost8.getCassandraThriftSocketTimeout();
        java.lang.String str12 = cassandraHost8.getName();
        boolean boolean13 = cassandraHost8.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "9313");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1350");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("32", 50);
        cassandraHost7.setCassandraThriftSocketTimeout(0);
        boolean boolean10 = cassandraHost7.isPerformNameResolution();
        java.lang.String[] strArray21 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("11", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9160", strArray21, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "114", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1351");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("", 102);
        cassandraHost19.setLifo(true);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray34, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray34);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray34, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray34, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, ":0(:0):-1", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1352");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        subject0.setReadOnly();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41, false);
        tSSLTransportParameters54.setTrustStore("127.0.0.1", "hi!(hi!):9160");
        boolean boolean58 = subject0.equals((java.lang.Object) tSSLTransportParameters54);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet60 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost63 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", (int) (short) 12);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost63, "32(0.0.0.32)(32(0.0.0.32)):-125");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1353");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("9160", (int) (short) 1);
        java.lang.String str13 = cassandraHost12.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):-1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1354");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):100", strArray25);
        tSSLTransportParameters36.setKeyStore("CassandraClient<%s-%d>:10", "127.0.0.1(127.0.0.1):9160");
        boolean boolean40 = subject0.equals((java.lang.Object) "CassandraClient<%s-%d>:10");
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost44 = new me.prettyprint.cassandra.service.CassandraHost(":100:9", (int) (byte) 32);
        boolean boolean45 = cassandraHost44.getUseThriftFramedTransport();
        java.lang.String[] strArray57 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray57);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray57, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray57, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray57, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost44, "0.0.0.0(0.0.0.0):9160", tSSLTransportParameters64);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1355");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong4 = new java.util.concurrent.atomic.AtomicLong();
        float float5 = atomicLong4.floatValue();
        long long6 = atomicLong4.get();
        long long8 = atomicLong4.getAndSet(0L);
        long long9 = atomicLong4.incrementAndGet();
        atomicLong4.lazySet((long) (short) 102);
        boolean boolean12 = subject0.equals((java.lang.Object) atomicLong4);
        java.lang.String str13 = subject0.toString();
        boolean boolean14 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean18 = cassandraHost17.getUseThriftFramedTransport();
        cassandraHost17.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost17.setMaxWaitTimeWhenExhausted(2L);
        java.util.concurrent.atomic.AtomicLong atomicLong24 = new java.util.concurrent.atomic.AtomicLong((long) (short) 102);
        int int25 = atomicLong24.intValue();
        long long27 = atomicLong24.addAndGet(199L);
        boolean boolean28 = cassandraHost17.equals((java.lang.Object) long27);
        int int29 = cassandraHost17.getCassandraThriftSocketTimeout();
        long long30 = cassandraHost17.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray42 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray42);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray42, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray42);
        tSSLTransportParameters48.requireClientAuth(true);
        tSSLTransportParameters48.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "(127.0.0.1)((127.0.0.1)):1", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1356");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("1:9260", (int) (byte) 43);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient7 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "Subject(Subject)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient7.equals(null)", !hKerberosThriftClient7.equals(null));
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1357");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        cassandraHost13.setMaxActive((int) (byte) 10);
        boolean boolean16 = cassandraHost13.getUseThriftFramedTransport();
        java.util.concurrent.atomic.AtomicLong atomicLong18 = new java.util.concurrent.atomic.AtomicLong((long) (short) 0);
        boolean boolean19 = cassandraHost13.equals((java.lang.Object) (short) 0);
        cassandraHost13.setUseSocketKeepalive(false);
        java.lang.String str22 = cassandraHost13.getHost();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray38, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray38, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:52", strArray38);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray38, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "(127.0.0.1)((127.0.0.1)):102", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1358");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        boolean boolean8 = subject0.isReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        java.lang.String str11 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("32(0.0.0.32):50", (int) (byte) -125);
        cassandraHost14.setMaxWaitTimeWhenExhausted((long) (short) 11);
        javax.security.auth.Subject subject17 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet18 = subject17.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet19 = subject17.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet20 = subject17.getPrincipals();
        java.util.Set<java.security.Principal> principalSet21 = subject17.getPrincipals();
        java.util.Set<java.security.Principal> principalSet22 = subject17.getPrincipals();
        java.lang.String str23 = subject17.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong24 = new java.util.concurrent.atomic.AtomicLong();
        float float25 = atomicLong24.floatValue();
        long long26 = atomicLong24.get();
        long long28 = atomicLong24.getAndSet(0L);
        long long29 = atomicLong24.incrementAndGet();
        boolean boolean32 = atomicLong24.compareAndSet(10L, (long) 1);
        boolean boolean33 = subject17.equals((java.lang.Object) boolean32);
        java.util.Set<java.security.Principal> principalSet34 = subject17.getPrincipals();
        boolean boolean35 = cassandraHost14.equals((java.lang.Object) principalSet34);
        boolean boolean36 = subject0.equals((java.lang.Object) boolean35);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost38 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str39 = cassandraHost38.getIp();
        java.lang.String str40 = cassandraHost38.getHost();
        java.lang.String str41 = cassandraHost38.getIp();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost38, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):301");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1359");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long13 = cassandraHost12.getMaxWaitTimeWhenExhausted();
        cassandraHost12.setLifo(false);
        long long16 = cassandraHost12.getMaxWaitTimeWhenExhausted();
        cassandraHost12.setCassandraThriftSocketTimeout(9260);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray29, true);
        boolean boolean37 = cassandraHost12.equals((java.lang.Object) tSSLTransportParameters36);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "Subject(Subject)", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1360");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) '4');
        long long10 = cassandraHost9.getMaxWaitTimeWhenExhausted();
        cassandraHost9.setCassandraThriftSocketTimeout((-1));
        boolean boolean13 = cassandraHost9.isPerformNameResolution();
        java.lang.String str14 = cassandraHost9.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "0.0.0.32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1361");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet10 = subject7.getPrincipals();
        boolean boolean11 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int16 = cassandraHost15.getCassandraThriftSocketTimeout();
        java.lang.String str17 = cassandraHost15.toString();
        boolean boolean18 = subject7.equals((java.lang.Object) cassandraHost15);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray28);
        tSSLTransportParameters33.setKeyStore("127.0.0.1(127.0.0.1):97", "Subject", ":100", "2");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "hi!(hi!):100", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1362");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean7 = cassandraHost6.getUseThriftFramedTransport();
        cassandraHost6.setMaxActive((int) (byte) -1);
        cassandraHost6.setCassandraThriftSocketTimeout((int) (short) 102);
        cassandraHost6.setUseSocketKeepalive(false);
        java.util.concurrent.atomic.AtomicLong atomicLong15 = new java.util.concurrent.atomic.AtomicLong((long) (short) 102);
        int int16 = atomicLong15.intValue();
        long long18 = atomicLong15.addAndGet(199L);
        java.lang.String str19 = atomicLong15.toString();
        boolean boolean20 = cassandraHost6.equals((java.lang.Object) str19);
        java.lang.String[] strArray31 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("102", strArray31, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "-1:102", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1363");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45", (int) (byte) 99);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient8 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "hi!");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient8.equals(null)", !hKerberosThriftClient8.equals(null));
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1364");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        cassandraHost9.setMaxActive(32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "hi!(hi!)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1365");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        boolean boolean6 = subject0.isReadOnly();
        java.lang.String str7 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean11 = cassandraHost10.getUseThriftFramedTransport();
        cassandraHost10.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost10.setMaxWaitTimeWhenExhausted(10L);
        boolean boolean16 = cassandraHost10.getLifo();
        java.lang.String str17 = cassandraHost10.getHost();
        cassandraHost10.setCassandraThriftSocketTimeout(35);
        int int20 = cassandraHost10.getCassandraThriftSocketTimeout();
        boolean boolean21 = cassandraHost10.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):52");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1366");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("-1:101", 9260);
        int int8 = cassandraHost7.getPort();
        java.lang.String[] strArray19 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray19);
        tSSLTransportParameters22.setTrustStore("Subject:35", "hi!:9160", "32", "(127.0.0.1)");
        tSSLTransportParameters22.setTrustStore("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", "127.0.0.1(127.0.0.1):10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "100(0.0.0.100):0", tSSLTransportParameters22);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1367");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray13);
        boolean boolean17 = subject0.equals((java.lang.Object) tSSLTransportParameters16);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean21 = cassandraHost20.getLifo();
        cassandraHost20.setCassandraThriftSocketTimeout(100);
        cassandraHost20.setMaxActive(0);
        java.lang.String str26 = cassandraHost20.getUrl();
        cassandraHost20.setMaxWaitTimeWhenExhausted((long) (byte) 103);
        boolean boolean29 = cassandraHost20.getLifo();
        java.lang.String str30 = cassandraHost20.getIp();
        java.lang.String[] strArray46 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray46, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray46, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray46, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray46, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray46);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", strArray46, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient60 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "(127.0.0.1):11", tSSLTransportParameters59);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient60.equals(null)", !hKerberosThriftClient60.equals(null));
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1368");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("1", 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):102", strArray20);
        tSSLTransportParameters29.setTrustStore("0(0.0.0.0):0", "100(0.0.0.100)(100(0.0.0.100)):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "32(0.0.0.32)(32(0.0.0.32))", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1369");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str9 = cassandraHost8.getIp();
        boolean boolean10 = subject0.equals((java.lang.Object) str9);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", (int) (byte) 10);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160)", strArray29, false);
        tSSLTransportParameters41.setKeyStore("100:0", "2", ":100", "0(0.0.0.0)");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "0.0.0.8", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1370");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean8 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)", (int) (short) 8);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "hi!");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1371");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost9.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str12 = cassandraHost9.toString();
        cassandraHost9.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost9.setLifo(false);
        int int17 = cassandraHost9.getMaxActive();
        cassandraHost9.setUseSocketKeepalive(false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters();
        tSSLTransportParameters21.setKeyStore("hi!", "");
        tSSLTransportParameters21.setTrustStore("", "hi!");
        tSSLTransportParameters21.setTrustStore("", "CassandraClient<%s-%d>", "", "");
        tSSLTransportParameters21.setTrustStore("hi!:9160", "", "0", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        tSSLTransportParameters21.setKeyStore("0.0.0.100", ":0(:0):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "hi!(hi!)", tSSLTransportParameters21);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1372");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet10 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (byte) 10);
        cassandraHost14.setLifo(false);
        javax.security.auth.Subject subject21 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet22 = subject21.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet23 = subject21.getPrivateCredentials();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray33, false);
        boolean boolean40 = subject21.equals((java.lang.Object) strArray33);
        boolean boolean41 = subject21.isReadOnly();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray51, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray51);
        boolean boolean57 = subject21.equals((java.lang.Object) strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":100", strArray51);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:102", strArray51, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient62 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "(127.0.0.1):11", tSSLTransportParameters61);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient62.equals(null)", !hKerberosThriftClient62.equals(null));
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1373");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        javax.security.auth.Subject subject6 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet7 = subject6.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject6.getPrincipals();
        java.util.Set<java.lang.Object> objSet9 = subject6.getPrivateCredentials();
        java.lang.String str10 = subject6.toString();
        java.util.Set<java.security.Principal> principalSet11 = subject6.getPrincipals();
        boolean boolean12 = subject0.equals((java.lang.Object) subject6);
        java.util.Set<java.lang.Object> objSet13 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str17 = cassandraHost16.getUrl();
        boolean boolean18 = cassandraHost16.isPerformNameResolution();
        cassandraHost16.setUseSocketKeepalive(true);
        boolean boolean21 = cassandraHost16.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "Subject(Subject):35");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1374");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("10", (int) (short) 35);
        java.lang.String[] strArray23 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):101", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1:0", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", strArray23);
        boolean boolean38 = cassandraHost7.equals((java.lang.Object) tSSLTransportParameters37);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray59, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray59, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters68 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters71 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray59, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters73 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray59, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters75 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray59, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters77 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("209", strArray59, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters78 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray59);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters80 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.1.45", strArray59, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient81 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", tSSLTransportParameters80);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient81.equals(null)", !hKerberosThriftClient81.equals(null));
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1375");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100", (int) (byte) 10);
        java.lang.String str8 = cassandraHost7.toString();
        int int9 = cassandraHost7.getMaxActive();
        java.lang.String[] strArray27 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100):0", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("208", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)(hi!(hi!)):9261", strArray27, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "0:9160", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1376");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost4.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str7 = cassandraHost4.toString();
        cassandraHost4.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost4.setLifo(false);
        boolean boolean12 = cassandraHost4.getUseSocketKeepalive();
        cassandraHost4.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost4, "104");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1377");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        boolean boolean7 = subject0.isReadOnly();
        subject0.setReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost11.setMaxActive((int) (short) 0);
        int int14 = cassandraHost11.getCassandraThriftSocketTimeout();
        java.lang.String str15 = cassandraHost11.getIp();
        int int16 = cassandraHost11.getPort();
        java.lang.String str17 = cassandraHost11.getIp();
        boolean boolean18 = subject0.equals((java.lang.Object) str17);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("100");
        cassandraHost21.setCassandraThriftSocketTimeout((int) (byte) 53);
        cassandraHost21.setMaxWaitTimeWhenExhausted(9280L);
        cassandraHost21.setCassandraThriftSocketTimeout((int) (short) 102);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray39, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray39);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray39);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "hi!(hi!):9160", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1378");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost11.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str14 = cassandraHost11.getHost();
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) 10.0f);
        boolean boolean17 = subject0.equals((java.lang.Object) boolean16);
        boolean boolean19 = subject0.equals((java.lang.Object) 8L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-1", strArray30, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "9269(0.0.36.53):1", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1379");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String str4 = subject0.toString();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):10", (int) (short) 10);
        cassandraHost8.setMaxWaitTimeWhenExhausted((long) 102);
        int int11 = cassandraHost8.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient13 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient13.equals(null)", !hKerberosThriftClient13.equals(null));
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1380");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray15);
        boolean boolean21 = subject0.equals((java.lang.Object) tSSLTransportParameters20);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0):-1");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "hi!(hi!)(hi!(hi!))", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1381");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str8 = cassandraHost7.getUrl();
        boolean boolean9 = cassandraHost7.isPerformNameResolution();
        java.util.concurrent.atomic.AtomicLong atomicLong11 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean12 = cassandraHost7.equals((java.lang.Object) atomicLong11);
        boolean boolean13 = cassandraHost7.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1382");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray20, true);
        tSSLTransportParameters27.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean31 = subject0.equals((java.lang.Object) tSSLTransportParameters27);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet33 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost35 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        int int36 = cassandraHost35.getCassandraThriftSocketTimeout();
        cassandraHost35.setLifo(false);
        cassandraHost35.setUseThriftFramedTransport(false);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray55, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters63 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray55, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray55);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters66 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0", strArray55, false);
        tSSLTransportParameters66.setTrustStore("31", "100(0.0.0.100)(100(0.0.0.100)):1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient70 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost35, "9562", tSSLTransportParameters66);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient70.equals(null)", !hKerberosThriftClient70.equals(null));
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1383");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):10");
        int int10 = cassandraHost9.getMaxActive();
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):9260", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1):1", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1384");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        boolean boolean6 = cassandraHost5.getLifo();
        boolean boolean7 = cassandraHost5.getLifo();
        cassandraHost5.setMaxWaitTimeWhenExhausted(55L);
        java.lang.String[] strArray18 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray18);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray18, false);
        tSSLTransportParameters24.setTrustStore("100", "102", "", "-1:0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, ":0(", tSSLTransportParameters24);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1385");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", (int) (byte) 1);
        java.util.concurrent.atomic.AtomicLong atomicLong12 = new java.util.concurrent.atomic.AtomicLong();
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) atomicLong12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1");
        boolean boolean16 = cassandraHost11.equals((java.lang.Object) "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray27, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100", strArray27);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray27);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))))", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1386");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost4 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean6 = cassandraHost4.equals((java.lang.Object) 0.0f);
        int int7 = cassandraHost4.getCassandraThriftSocketTimeout();
        cassandraHost4.setUseSocketKeepalive(false);
        cassandraHost4.setLifo(false);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str15 = cassandraHost14.getHost();
        boolean boolean16 = cassandraHost14.getUseSocketKeepalive();
        java.lang.String str17 = cassandraHost14.getName();
        boolean boolean18 = cassandraHost4.equals((java.lang.Object) cassandraHost14);
        java.lang.String str19 = cassandraHost4.getUrl();
        cassandraHost4.setMaxWaitTimeWhenExhausted(32L);
        java.lang.String str22 = cassandraHost4.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost4, "9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1387");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int8 = atomicLong7.intValue();
        boolean boolean9 = subject0.equals((java.lang.Object) int8);
        boolean boolean10 = subject0.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray22, true);
        boolean boolean31 = subject0.equals((java.lang.Object) strArray22);
        java.util.Set<java.lang.Object> objSet32 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost34 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost34.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str37 = cassandraHost34.toString();
        cassandraHost34.setMaxWaitTimeWhenExhausted((long) (short) 1);
        cassandraHost34.setMaxWaitTimeWhenExhausted((long) (byte) 1);
        java.lang.String str42 = cassandraHost34.getHost();
        boolean boolean43 = cassandraHost34.getUseSocketKeepalive();
        boolean boolean44 = cassandraHost34.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost34, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1388");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray15, true);
        boolean boolean24 = subject0.equals((java.lang.Object) tSSLTransportParameters23);
        java.util.Set<java.lang.Object> objSet25 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet26 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong31 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean32 = cassandraHost29.equals((java.lang.Object) '#');
        java.lang.String str33 = cassandraHost29.getHost();
        cassandraHost29.setMaxActive(98);
        java.lang.String[] strArray50 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray50);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray50);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray50, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray50);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1)):35", strArray50, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray50, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters61 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray50, false);
        tSSLTransportParameters61.setTrustStore("hi!(hi!)(hi!(hi!)):9160", "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):102", "", "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):52");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient67 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "104", tSSLTransportParameters61);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient67.equals(null)", !hKerberosThriftClient67.equals(null));
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1389");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        boolean boolean10 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost(":9160", (int) (short) 11);
        cassandraHost13.setMaxWaitTimeWhenExhausted((long) (byte) -125);
        boolean boolean16 = cassandraHost13.getUseThriftFramedTransport();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9359");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1390");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 9160);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "100:0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1391");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        boolean boolean10 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "-1:102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1392");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong(20L);
        boolean boolean8 = subject0.equals((java.lang.Object) 20L);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long11 = cassandraHost10.getMaxWaitTimeWhenExhausted();
        cassandraHost10.setLifo(false);
        boolean boolean14 = cassandraHost10.getLifo();
        cassandraHost10.setMaxActive((int) (byte) 1);
        boolean boolean17 = cassandraHost10.getUseThriftFramedTransport();
        int int18 = cassandraHost10.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray35 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):1", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53):9", strArray35, true);
        boolean boolean51 = cassandraHost10.equals((java.lang.Object) strArray35);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "-2");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1393");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("209", (int) (byte) -2);
        cassandraHost7.setMaxWaitTimeWhenExhausted((long) (short) 221);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient11 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "Subject:\n");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient11.equals(null)", !hKerberosThriftClient11.equals(null));
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1394");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray13);
        boolean boolean17 = subject0.equals((java.lang.Object) tSSLTransportParameters16);
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.lang.Object> objSet19 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet20 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("32", (int) (byte) -2);
        java.lang.String str24 = cassandraHost23.getName();
        boolean boolean25 = cassandraHost23.isPerformNameResolution();
        cassandraHost23.setCassandraThriftSocketTimeout((int) (byte) 8);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1395");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.lang.String str16 = subject0.toString();
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)(hi!(hi!)):9261");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient21 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "209:-2");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient21.equals(null)", !hKerberosThriftClient21.equals(null));
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1396");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str8 = cassandraHost7.getUrl();
        boolean boolean9 = cassandraHost7.isPerformNameResolution();
        java.util.concurrent.atomic.AtomicLong atomicLong11 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean12 = cassandraHost7.equals((java.lang.Object) atomicLong11);
        cassandraHost7.setLifo(true);
        cassandraHost7.setUseThriftFramedTransport(false);
        java.lang.String str17 = cassandraHost7.toString();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray29);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269(0.0.36.53)", strArray29);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "202", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1397");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        java.lang.String str10 = cassandraHost9.toString();
        java.lang.String str11 = cassandraHost9.getHost();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray25);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1)):9", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1398");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet10 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", (int) (byte) 52);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1399");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str9 = cassandraHost8.getIp();
        boolean boolean10 = subject0.equals((java.lang.Object) str9);
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("11", 98);
        cassandraHost14.setLifo(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "100(0.0.0.100)(100(0.0.0.100)):99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1400");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("1", (int) (byte) 110);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray25, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1)", strArray25);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0(0.0.0.0):0", strArray25);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "-1:0", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1401");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) 0.0f);
        int int14 = cassandraHost11.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "8(0.0.0.8):60");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1402");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!):100", (int) ' ');
        java.lang.String[] strArray23 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray23, false);
        tSSLTransportParameters29.setKeyStore("CassandraClient<%s-%d>:9160", "(127.0.0.1)((127.0.0.1))");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1403");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        boolean boolean20 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str22 = subject0.toString();
        java.lang.String str23 = subject0.toString();
        java.util.Set<java.lang.Object> objSet24 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet25 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost(":9160", (int) (short) 11);
        java.lang.String str29 = cassandraHost28.getName();
        int int30 = cassandraHost28.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "115");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1404");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean9 = cassandraHost7.equals((java.lang.Object) 0.0f);
        int int10 = cassandraHost7.getCassandraThriftSocketTimeout();
        java.lang.String str11 = cassandraHost7.getName();
        boolean boolean12 = cassandraHost7.getUseThriftFramedTransport();
        cassandraHost7.setMaxActive((int) (short) 9);
        boolean boolean15 = cassandraHost7.getUseThriftFramedTransport();
        java.lang.String str16 = cassandraHost7.getName();
        int int17 = cassandraHost7.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient19 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "214");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient19.equals(null)", !hKerberosThriftClient19.equals(null));
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1405");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        boolean boolean17 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", 101);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray35, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, ":10", tSSLTransportParameters48);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1406");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong4 = new java.util.concurrent.atomic.AtomicLong();
        float float5 = atomicLong4.floatValue();
        long long6 = atomicLong4.get();
        long long8 = atomicLong4.getAndSet(0L);
        long long9 = atomicLong4.incrementAndGet();
        atomicLong4.lazySet((long) (short) 102);
        boolean boolean12 = subject0.equals((java.lang.Object) atomicLong4);
        java.util.Set<java.lang.Object> objSet13 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean17 = cassandraHost16.getUseSocketKeepalive();
        boolean boolean18 = cassandraHost16.getLifo();
        cassandraHost16.setMaxWaitTimeWhenExhausted(9261L);
        cassandraHost16.setMaxActive((int) (byte) -123);
        cassandraHost16.setMaxActive(18580);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "(127.0.0.1)((127.0.0.1)):99");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1407");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        javax.security.auth.Subject subject9 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet10 = subject9.getPublicCredentials();
        subject9.setReadOnly();
        java.lang.String str12 = subject9.toString();
        java.lang.String str13 = subject9.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean17 = cassandraHost15.equals((java.lang.Object) 0.0f);
        java.lang.String str18 = cassandraHost15.getName();
        boolean boolean19 = subject9.equals((java.lang.Object) cassandraHost15);
        java.lang.String str20 = cassandraHost15.toString();
        int int21 = cassandraHost15.getPort();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost(":0");
        boolean boolean24 = cassandraHost15.equals((java.lang.Object) cassandraHost23);
        int int25 = cassandraHost23.getMaxActive();
        java.lang.String[] strArray43 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("301", strArray43, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0((:0():98", strArray43);
        tSSLTransportParameters56.setTrustStore("CassandraClient<%s-%d>:-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))", "0(0.0.0.0):9160", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):10");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient62 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "0.0.1.45", tSSLTransportParameters56);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient62.equals(null)", !hKerberosThriftClient62.equals(null));
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1408");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.lang.String str4 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean8 = cassandraHost6.equals((java.lang.Object) 0.0f);
        java.lang.String str9 = cassandraHost6.getName();
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost6);
        java.util.Set<java.security.Principal> principalSet11 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet12 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int16 = cassandraHost15.getMaxActive();
        cassandraHost15.setMaxWaitTimeWhenExhausted(33L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "0.0.0.100:102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1409");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.lang.String str21 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("10", (int) (byte) 100);
        java.lang.String str25 = cassandraHost24.getIp();
        boolean boolean26 = cassandraHost24.getUseSocketKeepalive();
        java.lang.String[] strArray33 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray33);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray33, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "(127.0.0.1)((127.0.0.1))", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1410");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        long long16 = atomicLong7.longValue();
        atomicLong7.set(99L);
        int int19 = atomicLong7.intValue();
        boolean boolean20 = subject0.equals((java.lang.Object) atomicLong7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", 10);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "214:101");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1411");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):52");
        cassandraHost6.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient10 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "114");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient10.equals(null)", !hKerberosThriftClient10.equals(null));
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1412");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long10 = cassandraHost9.getMaxWaitTimeWhenExhausted();
        boolean boolean11 = cassandraHost9.getUseThriftFramedTransport();
        java.lang.String str12 = cassandraHost9.toString();
        java.lang.String str13 = cassandraHost9.toString();
        java.lang.String str14 = cassandraHost9.getUrl();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "13");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1413");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        boolean boolean6 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", 0);
        boolean boolean10 = subject0.equals((java.lang.Object) "-1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("100", 0);
        cassandraHost13.setLifo(false);
        cassandraHost13.setCassandraThriftSocketTimeout(13);
        cassandraHost13.setCassandraThriftSocketTimeout((int) (short) 12);
        java.lang.String str20 = cassandraHost13.getHost();
        boolean boolean21 = cassandraHost13.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "13");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1414");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("10");
        boolean boolean8 = subject0.equals((java.lang.Object) cassandraHost7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean12 = cassandraHost11.getUseThriftFramedTransport();
        cassandraHost11.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost11.setMaxWaitTimeWhenExhausted(10L);
        boolean boolean17 = cassandraHost11.getLifo();
        java.lang.String str18 = cassandraHost11.getHost();
        boolean boolean19 = cassandraHost11.getLifo();
        cassandraHost11.setUseThriftFramedTransport(true);
        int int22 = cassandraHost11.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient24 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "0.0.0.0(0.0.0.0)(0.0.0.0(0.0.0.0)):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient24.equals(null)", !hKerberosThriftClient24.equals(null));
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1415");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("-1", (int) '#');
        boolean boolean10 = subject0.equals((java.lang.Object) cassandraHost9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean14 = cassandraHost12.equals((java.lang.Object) 0.0f);
        cassandraHost12.setMaxActive(301);
        cassandraHost12.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1416");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":9160(:9160):11", strArray15, true);
        boolean boolean24 = subject0.equals((java.lang.Object) tSSLTransportParameters23);
        java.util.Set<java.lang.Object> objSet25 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet26 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) '4');
        cassandraHost29.setCassandraThriftSocketTimeout((int) (byte) 103);
        long long32 = cassandraHost29.getMaxWaitTimeWhenExhausted();
        java.lang.String[] strArray39 = new java.lang.String[] { "(127.0.0.1):9160", "", "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray39, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:-1", strArray39);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "118", tSSLTransportParameters42);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1417");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        boolean boolean10 = subject0.isReadOnly();
        java.lang.String str11 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 9160);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "0.0.0.100:102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1418");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.lang.String str9 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) 1);
        int int13 = cassandraHost12.getMaxActive();
        boolean boolean14 = cassandraHost12.getUseThriftFramedTransport();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):10", strArray19);
        tSSLTransportParameters22.setTrustStore("0.0.0.100", "0", "(127.0.0.1)((127.0.0.1)):35", "10");
        boolean boolean28 = cassandraHost12.equals((java.lang.Object) tSSLTransportParameters22);
        cassandraHost12.setUseThriftFramedTransport(false);
        java.lang.String[] strArray45 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray45);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray45, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray45, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0)", strArray45, false);
        tSSLTransportParameters55.setKeyStore("221:100", "9261", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):52", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient61 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "9280(0.0.36.64):98", tSSLTransportParameters55);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient61.equals(null)", !hKerberosThriftClient61.equals(null));
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1419");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("hi!", (int) (byte) 100);
        java.lang.String str10 = cassandraHost9.getUrl();
        boolean boolean11 = cassandraHost9.isPerformNameResolution();
        java.util.concurrent.atomic.AtomicLong atomicLong13 = new java.util.concurrent.atomic.AtomicLong((long) 1);
        boolean boolean14 = cassandraHost9.equals((java.lang.Object) atomicLong13);
        cassandraHost9.setLifo(true);
        java.lang.String[] strArray28 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269:9160", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":102", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", strArray28);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient34 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "214(0.0.0.214):9160", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient34.equals(null)", !hKerberosThriftClient34.equals(null));
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1420");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        boolean boolean7 = subject0.isReadOnly();
        boolean boolean8 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        int int11 = cassandraHost10.getMaxActive();
        java.lang.String str12 = cassandraHost10.getIp();
        cassandraHost10.setMaxWaitTimeWhenExhausted(10L);
        java.lang.String str15 = cassandraHost10.toString();
        int int16 = cassandraHost10.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 10);
        cassandraHost19.setUseSocketKeepalive(true);
        java.lang.String[] strArray36 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray36);
        boolean boolean49 = cassandraHost19.equals((java.lang.Object) tSSLTransportParameters48);
        cassandraHost19.setLifo(true);
        boolean boolean52 = cassandraHost10.equals((java.lang.Object) true);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters74 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray72, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters75 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray72);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters76 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray72);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters77 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray72);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters78 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray72);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters80 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray72, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters81 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray72);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters82 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray72);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters84 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray72, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters86 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray72, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters87 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray72);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters88 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray72);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters90 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0)", strArray72, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient91 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):-56", tSSLTransportParameters90);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient91.equals(null)", !hKerberosThriftClient91.equals(null));
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1421");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", (int) (short) 102);
        boolean boolean10 = subject0.equals((java.lang.Object) "127.0.0.1");
        java.util.Set<java.lang.Object> objSet11 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("", 102);
        cassandraHost14.setUseThriftFramedTransport(true);
        java.lang.String[] strArray31 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray31);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray31, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray31, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0)", strArray31, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient42 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "-1(-1):35", tSSLTransportParameters41);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient42.equals(null)", !hKerberosThriftClient42.equals(null));
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1422");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPrivateCredentials();
        boolean boolean10 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet11 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet14 = subject7.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet15 = subject7.getPrincipals();
        subject7.setReadOnly();
        boolean boolean17 = subject0.equals((java.lang.Object) subject7);
        java.lang.String str18 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("Subject:\n", (int) (short) 102);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1");
        cassandraHost23.setUseThriftFramedTransport(true);
        boolean boolean26 = cassandraHost21.equals((java.lang.Object) cassandraHost23);
        boolean boolean27 = cassandraHost21.getUseThriftFramedTransport();
        boolean boolean28 = cassandraHost21.getLifo();
        cassandraHost21.setMaxActive(50);
        java.lang.String[] strArray43 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.32", strArray43, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "32(0.0.0.32)(32(0.0.0.32))", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1423");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0):-1", (int) 'a');
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray21, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray21);
        tSSLTransportParameters29.setKeyStore(":9160", ":100", "9269", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))(127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1))):9160", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1424");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray22, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray22);
        boolean boolean34 = subject0.equals((java.lang.Object) "Subject:\n");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost37 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100", (int) (short) 221);
        java.lang.String[] strArray48 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray48, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214", strArray48, true);
        tSSLTransportParameters53.setKeyStore("-2", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient57 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost37, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):12", tSSLTransportParameters53);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient57.equals(null)", !hKerberosThriftClient57.equals(null));
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1425");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        boolean boolean10 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0:101", (int) (short) 214);
        java.lang.String[] strArray32 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray32, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):102", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, "32(0.0.0.32)(32(0.0.0.32))(32(0.0.0.32)(32(0.0.0.32))):9", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1426");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.lang.String str6 = subject0.toString();
        boolean boolean7 = subject0.isReadOnly();
        java.lang.String str8 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost(":0", (-1));
        long long12 = cassandraHost11.getMaxWaitTimeWhenExhausted();
        boolean boolean13 = cassandraHost11.getUseThriftFramedTransport();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", strArray24);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "0.0.0.10", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1427");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost6.setMaxWaitTimeWhenExhausted((long) 10);
        cassandraHost6.setCassandraThriftSocketTimeout((int) (short) 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray21);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray21, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray21, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "CassandraClient<%s-%d>:-1", tSSLTransportParameters26);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1428");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost24.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str27 = cassandraHost24.getHost();
        cassandraHost24.setMaxActive(100);
        cassandraHost24.setMaxActive(100);
        cassandraHost24.setLifo(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "Subject(Subject):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1429");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        java.util.Set<java.lang.Object> objSet25 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!)", 1);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "9269(0.0.36.53):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1430");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        java.lang.String str7 = subject0.toString();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9160", (int) (short) 101);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9", strArray24);
        tSSLTransportParameters32.setKeyStore("118", "0.0.1.45", "0.0.0.8", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))):50");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "-1", tSSLTransportParameters32);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1431");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.lang.String str7 = subject0.toString();
        java.util.Set<java.lang.Object> objSet8 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        cassandraHost12.setMaxWaitTimeWhenExhausted((long) '4');
        java.lang.String str15 = cassandraHost12.getHost();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1432");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("214", (int) (byte) -1);
        boolean boolean8 = cassandraHost7.getUseThriftFramedTransport();
        java.lang.String[] strArray13 = new java.lang.String[] { "(127.0.0.1)((127.0.0.1)):9260", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient15 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "Subject(Subject):52", tSSLTransportParameters14);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient15.equals(null)", !hKerberosThriftClient15.equals(null));
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1433");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", (int) (short) -1);
        cassandraHost9.setUseThriftFramedTransport(false);
        cassandraHost9.setUseSocketKeepalive(true);
        cassandraHost9.setUseSocketKeepalive(true);
        boolean boolean16 = cassandraHost9.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1434");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100:102", (int) (short) 60);
        boolean boolean10 = cassandraHost9.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):98");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1435");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean7 = cassandraHost5.equals((java.lang.Object) 0.0f);
        int int8 = cassandraHost5.getPort();
        java.lang.String str9 = cassandraHost5.getName();
        boolean boolean10 = cassandraHost5.getUseSocketKeepalive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost5, "127.0.0.1(127.0.0.1):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1436");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.util.Set<java.lang.Object> objSet18 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 9160);
        java.util.concurrent.atomic.AtomicLong atomicLong25 = new java.util.concurrent.atomic.AtomicLong((long) '#');
        boolean boolean26 = cassandraHost23.equals((java.lang.Object) '#');
        java.lang.String str27 = cassandraHost23.getHost();
        boolean boolean28 = cassandraHost20.equals((java.lang.Object) cassandraHost23);
        cassandraHost23.setLifo(false);
        java.lang.String str31 = cassandraHost23.toString();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray44, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101", strArray44, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100)", strArray44, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient57 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "-1:101", tSSLTransportParameters56);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient57.equals(null)", !hKerberosThriftClient57.equals(null));
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1437");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):102");
        int int8 = cassandraHost7.getPort();
        java.lang.String str9 = cassandraHost7.toString();
        java.lang.String[] strArray23 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:10", strArray23);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient31 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "9269(0.0.36.53)", tSSLTransportParameters30);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient31.equals(null)", !hKerberosThriftClient31.equals(null));
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1438");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        boolean boolean7 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        int int12 = cassandraHost9.getPort();
        java.lang.String str13 = cassandraHost9.getName();
        java.lang.String str14 = cassandraHost9.getHost();
        java.lang.String str15 = cassandraHost9.toString();
        boolean boolean16 = cassandraHost9.getLifo();
        java.lang.String[] strArray26 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26, false);
        tSSLTransportParameters29.setTrustStore("9269", ":9160", "hi!:9160", "127.0.0.1(127.0.0.1):10");
        tSSLTransportParameters29.setKeyStore("127.0.0.1(127.0.0.1):10", "CassandraClient<%s-%d>:9160", "(127.0.0.1)((127.0.0.1)):35", "hi!(hi!):9160");
        tSSLTransportParameters29.setKeyStore("100(0.0.0.100):0", "(127.0.0.1)((127.0.0.1)):102", "101:1", "(127.0.0.1):1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient45 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", tSSLTransportParameters29);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient45.equals(null)", !hKerberosThriftClient45.equals(null));
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1439");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        boolean boolean8 = subject0.isReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray22);
        boolean boolean31 = subject0.equals((java.lang.Object) "127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost34 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 10);
        cassandraHost34.setUseSocketKeepalive(true);
        java.lang.String str37 = cassandraHost34.getHost();
        cassandraHost34.setUseSocketKeepalive(true);
        cassandraHost34.setLifo(false);
        int int42 = cassandraHost34.getPort();
        java.lang.String[] strArray56 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray56);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters60 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray56, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters62 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray56, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters64 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9160", strArray56, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32)(32(0.0.0.32))(32(0.0.0.32)(32(0.0.0.32))):9", strArray56);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient66 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost34, "301:10", tSSLTransportParameters65);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient66.equals(null)", !hKerberosThriftClient66.equals(null));
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1440");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", 50);
        java.lang.String str8 = cassandraHost7.toString();
        cassandraHost7.setUseThriftFramedTransport(false);
        cassandraHost7.setUseSocketKeepalive(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient14 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "-1(-1)");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient14.equals(null)", !hKerberosThriftClient14.equals(null));
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1441");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.lang.String str5 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160", (int) (short) 12);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray23);
        tSSLTransportParameters36.setTrustStore("hi!:9160", "(127.0.0.1)((127.0.0.1)):9260");
        tSSLTransportParameters36.setTrustStore("32(0.0.0.32)(32(0.0.0.32))", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient43 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "0.0.0.10", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient43.equals(null)", !hKerberosThriftClient43.equals(null));
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1442");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong(9260L);
        int int8 = atomicLong7.intValue();
        boolean boolean9 = subject0.equals((java.lang.Object) int8);
        boolean boolean10 = subject0.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray22, true);
        boolean boolean31 = subject0.equals((java.lang.Object) strArray22);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost34 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100(0.0.0.100):9260", 101);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost34, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1443");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("hi!(hi!):100", 209);
        cassandraHost7.setUseSocketKeepalive(true);
        int int10 = cassandraHost7.getCassandraThriftSocketTimeout();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray20, false);
        tSSLTransportParameters25.setTrustStore("10", "127.0.0.1(127.0.0.1):102", "(127.0.0.1):9160", "Subject:\n");
        tSSLTransportParameters25.requireClientAuth(true);
        tSSLTransportParameters25.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9260", tSSLTransportParameters25);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1444");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong4 = new java.util.concurrent.atomic.AtomicLong();
        float float5 = atomicLong4.floatValue();
        long long6 = atomicLong4.get();
        long long8 = atomicLong4.getAndSet(0L);
        long long9 = atomicLong4.incrementAndGet();
        atomicLong4.lazySet((long) (short) 102);
        boolean boolean12 = subject0.equals((java.lang.Object) atomicLong4);
        java.util.Set<java.lang.Object> objSet13 = subject0.getPublicCredentials();
        javax.security.auth.Subject subject14 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet15 = subject14.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet16 = subject14.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet17 = subject14.getPrincipals();
        java.util.Set<java.security.Principal> principalSet18 = subject14.getPrincipals();
        java.util.Set<java.security.Principal> principalSet19 = subject14.getPrincipals();
        java.lang.String str20 = subject14.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost23.setMaxActive((int) (short) 11);
        boolean boolean26 = subject14.equals((java.lang.Object) (short) 11);
        subject14.setReadOnly();
        boolean boolean28 = subject0.equals((java.lang.Object) subject14);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost31 = new me.prettyprint.cassandra.service.CassandraHost(":0(:0):10", (int) (short) 9390);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient33 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject14, cassandraHost31, "10");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient33.equals(null)", !hKerberosThriftClient33.equals(null));
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1445");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPublicCredentials();
        java.lang.String str10 = subject7.toString();
        boolean boolean11 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPublicCredentials();
        boolean boolean14 = subject0.equals((java.lang.Object) subject7);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost(":0", (-1));
        boolean boolean18 = subject0.equals((java.lang.Object) cassandraHost17);
        boolean boolean19 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):35", (int) '4');
        int int23 = cassandraHost22.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1446");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        java.util.concurrent.atomic.AtomicLong atomicLong9 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 100);
        long long10 = atomicLong9.longValue();
        long long11 = atomicLong9.getAndIncrement();
        long long12 = atomicLong9.getAndIncrement();
        java.lang.String str13 = atomicLong9.toString();
        long long14 = atomicLong9.getAndDecrement();
        atomicLong9.set(9260L);
        boolean boolean17 = subject0.equals((java.lang.Object) atomicLong9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost20.setMaxWaitTimeWhenExhausted((long) 10);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean25 = cassandraHost20.equals((java.lang.Object) cassandraHost24);
        java.lang.String str26 = cassandraHost20.getHost();
        cassandraHost20.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "12");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1447");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray13, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray13);
        boolean boolean18 = subject0.equals((java.lang.Object) tSSLTransportParameters17);
        boolean boolean19 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet21 = subject0.getPrincipals();
        java.lang.String str22 = subject0.toString();
        java.util.Set<java.lang.Object> objSet23 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean27 = cassandraHost26.getUseSocketKeepalive();
        boolean boolean28 = cassandraHost26.getLifo();
        java.lang.String str29 = cassandraHost26.getName();
        int int30 = cassandraHost26.getPort();
        cassandraHost26.setUseSocketKeepalive(true);
        java.lang.String[] strArray48 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters51 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray48, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269:9160", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214:9", strArray48);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("1", strArray48);
        tSSLTransportParameters57.setKeyStore(":0(:0)(:0(:0)):97", "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):52");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient61 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "CassandraClient<%s-%d>(CassandraClient<%s-%d>):98", tSSLTransportParameters57);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient61.equals(null)", !hKerberosThriftClient61.equals(null));
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1448");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("100(0.0.0.100):100", (int) (short) 10);
        int int16 = cassandraHost15.getMaxActive();
        int int17 = cassandraHost15.getMaxActive();
        java.lang.String[] strArray30 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:35", strArray30);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient37 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "100(0.0.0.100):50", tSSLTransportParameters36);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient37.equals(null)", !hKerberosThriftClient37.equals(null));
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1449");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost7.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str10 = cassandraHost7.getHost();
        cassandraHost7.setMaxActive(100);
        cassandraHost7.setMaxActive(100);
        cassandraHost7.setLifo(true);
        java.lang.String str17 = cassandraHost7.getUrl();
        boolean boolean18 = cassandraHost7.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "CassandraClient<%s-%d>:32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1450");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>", 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray23, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray23, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray23, false);
        tSSLTransportParameters33.setKeyStore("Subject", "Subject:35", "", "(127.0.0.1)");
        tSSLTransportParameters33.setKeyStore("0.0.0.10", "127.0.0.1(127.0.0.1):102", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", "(127.0.0.1):9160");
        tSSLTransportParameters33.setKeyStore("hi!(hi!)", "hi!", ":0(:0)", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient49 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "1", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient49.equals(null)", !hKerberosThriftClient49.equals(null));
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1451");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 10);
        boolean boolean8 = cassandraHost7.getLifo();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "127.0.0.1", "-1", "Subject:\n" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray17, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):50", tSSLTransportParameters21);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1452");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.lang.String str5 = subject0.toString();
        java.lang.String[] strArray15 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray15, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray15);
        boolean boolean20 = subject0.equals((java.lang.Object) strArray15);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost23 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160", 102);
        cassandraHost23.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient27 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost23, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient27.equals(null)", !hKerberosThriftClient27.equals(null));
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1453");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("-1", 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray13);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray13, false);
        boolean boolean17 = cassandraHost8.equals((java.lang.Object) tSSLTransportParameters16);
        int int18 = cassandraHost8.getMaxActive();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray35);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0):101", strArray35, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:52", strArray35, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray35, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1):100", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1454");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("100");
        cassandraHost7.setCassandraThriftSocketTimeout((int) (byte) 53);
        java.lang.String str10 = cassandraHost7.toString();
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:9160", strArray24);
        tSSLTransportParameters31.requireClientAuth(false);
        tSSLTransportParameters31.setTrustStore("", "127.0.0.1");
        tSSLTransportParameters31.requireClientAuth(true);
        tSSLTransportParameters31.setTrustStore("0.0.0.0", "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260");
        tSSLTransportParameters31.setKeyStore("Subject:110", "127.0.0.1(127.0.0.1)", "CassandraClient<%s-%d>:-1", "");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "0.0.0.100(0.0.0.100):9160", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1455");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.lang.String str12 = subject0.toString();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet15 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost18.setMaxActive((-1));
        int int21 = cassandraHost18.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost18, "221:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1456");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        subject5.setReadOnly();
        java.lang.String str8 = subject5.toString();
        java.lang.String str9 = subject5.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean13 = cassandraHost11.equals((java.lang.Object) 0.0f);
        java.lang.String str14 = cassandraHost11.getName();
        boolean boolean15 = subject5.equals((java.lang.Object) cassandraHost11);
        java.lang.String str16 = cassandraHost11.toString();
        java.lang.String str17 = cassandraHost11.toString();
        cassandraHost11.setCassandraThriftSocketTimeout(11);
        java.lang.String[] strArray28 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray28, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.0(0.0.0.0)", strArray28, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost11, "(127.0.0.1)((127.0.0.1)):10", tSSLTransportParameters35);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1457");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        boolean boolean6 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        int int12 = cassandraHost9.getCassandraThriftSocketTimeout();
        java.lang.String str13 = cassandraHost9.getName();
        boolean boolean14 = cassandraHost9.getUseThriftFramedTransport();
        cassandraHost9.setMaxActive((int) (short) 9);
        java.lang.String str17 = cassandraHost9.getHost();
        cassandraHost9.setUseSocketKeepalive(false);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray29, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray29, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray29);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient35 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, ":0((:0():98", tSSLTransportParameters34);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient35.equals(null)", !hKerberosThriftClient35.equals(null));
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1458");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray20, true);
        tSSLTransportParameters27.setTrustStore("", "(127.0.0.1)((127.0.0.1)):9260");
        boolean boolean31 = subject0.equals((java.lang.Object) tSSLTransportParameters27);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet33 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost36 = new me.prettyprint.cassandra.service.CassandraHost("Subject:35", 98);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost36, "CassandraClient<%s-%d>:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1459");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean6 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.100(0.0.0.100):9160", (int) (byte) 32);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient12 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "214");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient12.equals(null)", !hKerberosThriftClient12.equals(null));
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1460");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        boolean boolean20 = subject0.isReadOnly();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray30, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray30);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray30);
        boolean boolean36 = subject0.equals((java.lang.Object) strArray30);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost40 = new me.prettyprint.cassandra.service.CassandraHost("hi!:9160", (int) (byte) 103);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters54 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray52, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters56 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray52, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters58 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray52);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters59 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45", strArray52);
        tSSLTransportParameters59.setKeyStore("Subject(Subject):102", "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))):9160", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", "32(0.0.0.32):-1");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient65 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost40, "9313", tSSLTransportParameters59);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient65.equals(null)", !hKerberosThriftClient65.equals(null));
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1461");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean9 = cassandraHost8.getUseThriftFramedTransport();
        cassandraHost8.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost8.setMaxWaitTimeWhenExhausted(2L);
        java.util.concurrent.atomic.AtomicLong atomicLong15 = new java.util.concurrent.atomic.AtomicLong((long) (short) 102);
        int int16 = atomicLong15.intValue();
        long long18 = atomicLong15.addAndGet(199L);
        boolean boolean19 = cassandraHost8.equals((java.lang.Object) long18);
        int int20 = cassandraHost8.getCassandraThriftSocketTimeout();
        long long21 = cassandraHost8.getMaxWaitTimeWhenExhausted();
        cassandraHost8.setCassandraThriftSocketTimeout((int) (short) 9359);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray37, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray37, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:52", strArray37, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient48 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):-1", tSSLTransportParameters47);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient48.equals(null)", !hKerberosThriftClient48.equals(null));
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1462");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("Subject:50");
        cassandraHost8.setMaxActive((int) (short) 31);
        javax.security.auth.Subject subject11 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet12 = subject11.getPublicCredentials();
        subject11.setReadOnly();
        java.lang.String str14 = subject11.toString();
        java.lang.String str15 = subject11.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean19 = cassandraHost17.equals((java.lang.Object) 0.0f);
        java.lang.String str20 = cassandraHost17.getName();
        boolean boolean21 = subject11.equals((java.lang.Object) cassandraHost17);
        int int22 = cassandraHost17.getCassandraThriftSocketTimeout();
        boolean boolean23 = cassandraHost8.equals((java.lang.Object) cassandraHost17);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "100(0.0.0.100)(100(0.0.0.100)):1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1463");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1", 10);
        boolean boolean7 = cassandraHost6.isPerformNameResolution();
        boolean boolean8 = subject0.equals((java.lang.Object) boolean7);
        javax.security.auth.Subject subject9 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet10 = subject9.getPublicCredentials();
        subject9.setReadOnly();
        java.lang.String str12 = subject9.toString();
        java.lang.String str13 = subject9.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost15 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean17 = cassandraHost15.equals((java.lang.Object) 0.0f);
        java.lang.String str18 = cassandraHost15.getName();
        boolean boolean19 = subject9.equals((java.lang.Object) cassandraHost15);
        java.lang.String str20 = cassandraHost15.toString();
        int int21 = cassandraHost15.getPort();
        java.lang.String str22 = cassandraHost15.toString();
        cassandraHost15.setUseThriftFramedTransport(true);
        cassandraHost15.setUseSocketKeepalive(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost15, "208");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1464");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost(":0(", (int) (byte) -123);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray14);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):1", strArray14);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!)(hi!(hi!)):0", strArray14);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient18 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "51", tSSLTransportParameters17);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient18.equals(null)", !hKerberosThriftClient18.equals(null));
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1465");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet8 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>:9160", (int) (byte) -126);
        cassandraHost13.setMaxWaitTimeWhenExhausted((long) ' ');
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "104");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1466");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.lang.String[] strArray15 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters17 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray15);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray15, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray15);
        boolean boolean21 = subject0.equals((java.lang.Object) tSSLTransportParameters20);
        java.lang.String str22 = subject0.toString();
        boolean boolean23 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (byte) 10);
        cassandraHost26.setLifo(false);
        java.lang.String str29 = cassandraHost26.getHost();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray44, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray44, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters53 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray44);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters55 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):-1", strArray44, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters57 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):9160", strArray44, true);
        tSSLTransportParameters57.requireClientAuth(false);
        tSSLTransportParameters57.setKeyStore("127.0.0.1(127.0.0.1):10", "100(0.0.0.100):0");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient63 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "(127.0.0.1)((127.0.0.1)):9260", tSSLTransportParameters57);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient63.equals(null)", !hKerberosThriftClient63.equals(null));
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1467");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong5 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 10);
        float float6 = atomicLong5.floatValue();
        long long7 = atomicLong5.incrementAndGet();
        double double8 = atomicLong5.doubleValue();
        boolean boolean9 = subject0.equals((java.lang.Object) double8);
        boolean boolean10 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet11 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost13.setMaxActive((int) (short) 0);
        int int16 = cassandraHost13.getPort();
        cassandraHost13.setUseThriftFramedTransport(false);
        boolean boolean19 = cassandraHost13.getUseSocketKeepalive();
        cassandraHost13.setUseSocketKeepalive(false);
        cassandraHost13.setUseSocketKeepalive(false);
        boolean boolean24 = cassandraHost13.isPerformNameResolution();
        int int25 = cassandraHost13.getPort();
        int int26 = cassandraHost13.getMaxActive();
        boolean boolean27 = cassandraHost13.getLifo();
        java.lang.String str28 = cassandraHost13.toString();
        java.lang.String[] strArray41 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))", strArray41);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("221:100", strArray41);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient47 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))):50", tSSLTransportParameters46);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient47.equals(null)", !hKerberosThriftClient47.equals(null));
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1468");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("208", (int) (byte) -1);
        cassandraHost9.setMaxActive((int) (short) 11);
        boolean boolean12 = subject0.equals((java.lang.Object) (short) 11);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>");
        java.lang.String str15 = cassandraHost14.getIp();
        int int16 = cassandraHost14.getMaxActive();
        java.lang.String str17 = cassandraHost14.getUrl();
        boolean boolean18 = cassandraHost14.getUseThriftFramedTransport();
        java.lang.String[] strArray32 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray32, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("-2", strArray32);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray32, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost14, ":9160:100", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1469");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray12, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters15 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters16 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters18 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray12, false);
        boolean boolean19 = subject0.equals((java.lang.Object) strArray12);
        java.lang.String str20 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.32", (int) (short) 8);
        javax.security.auth.Subject subject25 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet26 = subject25.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet27 = subject25.getPrincipals();
        subject25.setReadOnly();
        boolean boolean29 = subject25.isReadOnly();
        java.lang.String str30 = subject25.toString();
        java.util.Set<java.lang.Object> objSet31 = subject25.getPrivateCredentials();
        subject25.setReadOnly();
        java.util.Set<java.security.Principal> principalSet33 = subject25.getPrincipals();
        boolean boolean34 = cassandraHost24.equals((java.lang.Object) principalSet33);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient36 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):97");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient36.equals(null)", !hKerberosThriftClient36.equals(null));
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1470");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost19.setUseSocketKeepalive(false);
        cassandraHost19.setLifo(false);
        boolean boolean24 = subject0.equals((java.lang.Object) cassandraHost19);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost28 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost28.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str31 = cassandraHost28.getHost();
        cassandraHost28.setMaxActive(100);
        cassandraHost28.setMaxActive(100);
        cassandraHost28.setLifo(true);
        java.lang.String str38 = cassandraHost28.getUrl();
        boolean boolean39 = cassandraHost28.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost28, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1471");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.lang.String str4 = subject0.toString();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost8.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str11 = cassandraHost8.getHost();
        cassandraHost8.setMaxActive(100);
        boolean boolean14 = cassandraHost8.isPerformNameResolution();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "127.0.0.1(127.0.0.1):100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1472");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.security.Principal> principalSet7 = subject0.getPrincipals();
        boolean boolean8 = subject0.isReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        java.lang.String[] strArray22 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("10", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray22);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray22, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray22);
        boolean boolean31 = subject0.equals((java.lang.Object) "127.0.0.1");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost34 = new me.prettyprint.cassandra.service.CassandraHost("", (int) (short) 100);
        cassandraHost34.setMaxWaitTimeWhenExhausted(0L);
        java.lang.String str37 = cassandraHost34.getHost();
        cassandraHost34.setMaxActive(100);
        boolean boolean40 = cassandraHost34.isPerformNameResolution();
        cassandraHost34.setCassandraThriftSocketTimeout(0);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost44 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):10");
        int int45 = cassandraHost44.getMaxActive();
        boolean boolean46 = cassandraHost34.equals((java.lang.Object) cassandraHost44);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost49 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean50 = cassandraHost49.getUseThriftFramedTransport();
        cassandraHost49.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost49.setMaxWaitTimeWhenExhausted(10L);
        boolean boolean55 = cassandraHost49.getLifo();
        java.lang.String str56 = cassandraHost49.getHost();
        boolean boolean57 = cassandraHost44.equals((java.lang.Object) cassandraHost49);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient59 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost44, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient59.equals(null)", !hKerberosThriftClient59.equals(null));
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1473");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.util.Set<java.lang.Object> objSet16 = subject0.getPublicCredentials();
        boolean boolean17 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.lang.String str19 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100");
        long long22 = cassandraHost21.getMaxWaitTimeWhenExhausted();
        boolean boolean23 = cassandraHost21.getUseThriftFramedTransport();
        java.lang.String str24 = cassandraHost21.toString();
        java.lang.String str25 = cassandraHost21.toString();
        long long26 = cassandraHost21.getMaxWaitTimeWhenExhausted();
        long long27 = cassandraHost21.getMaxWaitTimeWhenExhausted();
        int int28 = cassandraHost21.getCassandraThriftSocketTimeout();
        cassandraHost21.setMaxActive(0);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost21, "9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1474");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        boolean boolean4 = subject0.isReadOnly();
        boolean boolean6 = subject0.equals((java.lang.Object) "(127.0.0.1)((127.0.0.1)):102");
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("9269");
        cassandraHost8.setMaxActive((int) (short) 11);
        boolean boolean11 = cassandraHost8.getUseSocketKeepalive();
        java.lang.String[] strArray20 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray20, false);
        tSSLTransportParameters26.setTrustStore("", "");
        tSSLTransportParameters26.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "", tSSLTransportParameters26);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1475");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) objSet6);
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet9 = subject0.getPublicCredentials();
        java.lang.String str10 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost13 = new me.prettyprint.cassandra.service.CassandraHost("hi!:100", (int) (byte) 10);
        java.lang.String str14 = cassandraHost13.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost13, "104");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1476");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.lang.String str2 = subject0.toString();
        java.lang.String str3 = subject0.toString();
        boolean boolean4 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("100(0.0.0.100):9160", (int) 'a');
        java.lang.String str8 = cassandraHost7.getUrl();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray17, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):0", strArray17, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient22 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "(127.0.0.1)((127.0.0.1)):35", tSSLTransportParameters21);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient22.equals(null)", !hKerberosThriftClient22.equals(null));
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1477");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost5 = new me.prettyprint.cassandra.service.CassandraHost("hi!", 100);
        boolean boolean6 = subject0.equals((java.lang.Object) "hi!");
        boolean boolean7 = subject0.isReadOnly();
        boolean boolean8 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost10 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>:52");
        int int11 = cassandraHost10.getPort();
        java.lang.String[] strArray24 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("98", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("11", strArray24, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost10, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):100", tSSLTransportParameters31);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1478");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        boolean boolean5 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1):102");
        int int8 = cassandraHost7.getPort();
        java.lang.String str9 = cassandraHost7.getUrl();
        java.lang.String str10 = cassandraHost7.toString();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>:52", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.10", strArray26, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45", tSSLTransportParameters40);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1479");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        boolean boolean7 = subject0.equals((java.lang.Object) (short) 9260);
        java.lang.String str8 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet9 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean13 = cassandraHost12.getUseThriftFramedTransport();
        cassandraHost12.setMaxActive((int) (byte) -1);
        java.lang.String str16 = cassandraHost12.getHost();
        boolean boolean17 = cassandraHost12.getUseSocketKeepalive();
        int int18 = cassandraHost12.getCassandraThriftSocketTimeout();
        boolean boolean19 = cassandraHost12.getUseSocketKeepalive();
        java.lang.String[] strArray28 = new java.lang.String[] { "-1", "CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters29 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:9160", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters33 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)", strArray28);
        tSSLTransportParameters33.requireClientAuth(false);
        tSSLTransportParameters33.setKeyStore("hi!:9160", "Subject", "214", "0.0.0.0(0.0.0.0)");
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient41 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost12, "9269(0.0.36.53):1", tSSLTransportParameters33);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient41.equals(null)", !hKerberosThriftClient41.equals(null));
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1480");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        java.lang.String str4 = subject0.toString();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9269", strArray24);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!(hi!):100", strArray24, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32)(32(0.0.0.32))", strArray24, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters48 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9270", strArray24, false);
        boolean boolean49 = subject0.equals((java.lang.Object) strArray24);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost52 = new me.prettyprint.cassandra.service.CassandraHost("99", (int) (short) 199);
        java.lang.String str53 = cassandraHost52.getIp();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters65 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray63, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters67 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray63, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters69 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("11", strArray63, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient70 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost52, "-1", tSSLTransportParameters69);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient70.equals(null)", !hKerberosThriftClient70.equals(null));
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1481");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        java.lang.String str18 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet21 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost24 = new me.prettyprint.cassandra.service.CassandraHost("Subject:35", 100);
        java.lang.String str25 = cassandraHost24.getIp();
        java.lang.String[] strArray37 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject(Subject):10", strArray37);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):97", strArray37, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("9(0.0.0.9):9160", strArray37, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient44 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost24, "(127.0.0.1):11", tSSLTransportParameters43);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient44.equals(null)", !hKerberosThriftClient44.equals(null));
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1482");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        boolean boolean4 = subject0.isReadOnly();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", (int) (byte) 1);
        java.util.concurrent.atomic.AtomicLong atomicLong9 = new java.util.concurrent.atomic.AtomicLong();
        boolean boolean10 = cassandraHost8.equals((java.lang.Object) atomicLong9);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost12 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1");
        boolean boolean13 = cassandraHost8.equals((java.lang.Object) "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):-1");
        cassandraHost8.setCassandraThriftSocketTimeout((int) (byte) -126);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient17 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, ":9160:100");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient17.equals(null)", !hKerberosThriftClient17.equals(null));
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1483");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.lang.String[] strArray12 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters13 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray12);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters14 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray12);
        boolean boolean15 = subject0.equals((java.lang.Object) tSSLTransportParameters14);
        java.lang.String str16 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost19 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))):50", (int) (byte) 110);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("127.0.0.1(127.0.0.1)(127.0.0.1(127.0.0.1)):9160", (int) (byte) 0);
        boolean boolean23 = cassandraHost19.equals((java.lang.Object) cassandraHost22);
        int int24 = cassandraHost19.getCassandraThriftSocketTimeout();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient26 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost19, "-1:32");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient26.equals(null)", !hKerberosThriftClient26.equals(null));
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1484");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        java.lang.String str10 = cassandraHost9.getHost();
        boolean boolean11 = cassandraHost9.getUseSocketKeepalive();
        java.lang.String str12 = cassandraHost9.getName();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost14 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        boolean boolean16 = cassandraHost14.equals((java.lang.Object) (byte) 10);
        boolean boolean17 = cassandraHost9.equals((java.lang.Object) (byte) 10);
        java.lang.String str18 = cassandraHost9.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "13(0.0.0.13):221");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1485");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", 101);
        java.lang.String str10 = cassandraHost9.toString();
        cassandraHost9.setCassandraThriftSocketTimeout(0);
        boolean boolean14 = cassandraHost9.equals((java.lang.Object) 215L);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient16 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "-1:102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient16.equals(null)", !hKerberosThriftClient16.equals(null));
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1486");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet7 = subject0.getPrivateCredentials();
        javax.security.auth.Subject subject8 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet9 = subject8.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet10 = subject8.getPrincipals();
        java.util.Set<java.lang.Object> objSet11 = subject8.getPrivateCredentials();
        java.lang.String str12 = subject8.toString();
        subject8.setReadOnly();
        java.util.Set<java.lang.Object> objSet14 = subject8.getPrivateCredentials();
        java.util.concurrent.atomic.AtomicLong atomicLong16 = new java.util.concurrent.atomic.AtomicLong((long) (byte) 0);
        long long17 = atomicLong16.getAndDecrement();
        long long18 = atomicLong16.decrementAndGet();
        long long19 = atomicLong16.longValue();
        long long20 = atomicLong16.longValue();
        long long21 = atomicLong16.incrementAndGet();
        atomicLong16.set((long) (short) 12);
        boolean boolean24 = subject8.equals((java.lang.Object) (short) 12);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost26 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean28 = cassandraHost26.equals((java.lang.Object) 0.0f);
        int int29 = cassandraHost26.getPort();
        java.lang.String str30 = cassandraHost26.getName();
        java.lang.String str31 = cassandraHost26.getHost();
        int int32 = cassandraHost26.getCassandraThriftSocketTimeout();
        boolean boolean33 = cassandraHost26.isPerformNameResolution();
        int int34 = cassandraHost26.getPort();
        boolean boolean35 = subject8.equals((java.lang.Object) cassandraHost26);
        boolean boolean36 = cassandraHost26.getUseThriftFramedTransport();
        boolean boolean37 = cassandraHost26.getLifo();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost26, "");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1487");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPrivateCredentials();
        boolean boolean10 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet11 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet14 = subject7.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet15 = subject7.getPrincipals();
        subject7.setReadOnly();
        boolean boolean17 = subject0.equals((java.lang.Object) subject7);
        java.util.Set<java.lang.Object> objSet18 = subject7.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost21 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):100", 9260);
        int int22 = cassandraHost21.getCassandraThriftSocketTimeout();
        java.lang.String str23 = cassandraHost21.toString();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject7, cassandraHost21, "9269(0.0.36.53):9");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1488");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject3 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet4 = subject3.getPublicCredentials();
        subject3.setReadOnly();
        java.lang.String str6 = subject3.toString();
        java.lang.String str7 = subject3.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean11 = cassandraHost9.equals((java.lang.Object) 0.0f);
        java.lang.String str12 = cassandraHost9.getName();
        boolean boolean13 = subject3.equals((java.lang.Object) cassandraHost9);
        cassandraHost9.setUseThriftFramedTransport(false);
        boolean boolean16 = subject0.equals((java.lang.Object) cassandraHost9);
        java.lang.String str17 = subject0.toString();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost20 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters39 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters41 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101", strArray33, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters43 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0(:0):-1", strArray33, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100(0.0.0.100)", strArray33, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient46 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost20, "0.0.0.8", tSSLTransportParameters45);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient46.equals(null)", !hKerberosThriftClient46.equals(null));
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1489");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        javax.security.auth.Subject subject7 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet8 = subject7.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet9 = subject7.getPublicCredentials();
        java.lang.String str10 = subject7.toString();
        boolean boolean11 = subject7.isReadOnly();
        java.util.Set<java.lang.Object> objSet12 = subject7.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet13 = subject7.getPublicCredentials();
        boolean boolean14 = subject0.equals((java.lang.Object) subject7);
        subject7.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost18 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1)((127.0.0.1)):9260", 10);
        cassandraHost18.setLifo(true);
        java.lang.String[] strArray36 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters40 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters42 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1", strArray36, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters44 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray36, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters(":0", strArray36);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):9160", strArray36, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient50 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject7, cassandraHost18, "100(0.0.0.100)(100(0.0.0.100)):100", tSSLTransportParameters49);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient50.equals(null)", !hKerberosThriftClient50.equals(null));
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1490");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        boolean boolean2 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost6 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) (byte) 103);
        int int7 = cassandraHost6.getPort();
        java.lang.String[] strArray19 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray19, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214", strArray19, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray19);
        tSSLTransportParameters25.requireClientAuth(true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient28 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost6, "(127.0.0.1)((127.0.0.1)):9", tSSLTransportParameters25);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient28.equals(null)", !hKerberosThriftClient28.equals(null));
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1491");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        boolean boolean3 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPrivateCredentials();
        subject0.setReadOnly();
        boolean boolean7 = subject0.isReadOnly();
        subject0.setReadOnly();
        boolean boolean9 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost11 = new me.prettyprint.cassandra.service.CassandraHost("hi!");
        cassandraHost11.setMaxActive((int) (short) 0);
        int int14 = cassandraHost11.getCassandraThriftSocketTimeout();
        java.lang.String str15 = cassandraHost11.getIp();
        int int16 = cassandraHost11.getPort();
        java.lang.String str17 = cassandraHost11.getIp();
        boolean boolean18 = subject0.equals((java.lang.Object) str17);
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("-1:0", (int) (byte) 1);
        int int23 = cassandraHost22.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient25 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, ":102");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient25.equals(null)", !hKerberosThriftClient25.equals(null));
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1492");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters19 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray17, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters20 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray17);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray17, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray17, false);
        boolean boolean26 = subject0.equals((java.lang.Object) strArray17);
        me.prettyprint.cassandra.service.CassandraHost cassandraHost29 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", (int) ' ');
        int int30 = cassandraHost29.getMaxActive();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost29, "32(0.0.0.32)(32(0.0.0.32)):0");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1493");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.lang.String str6 = subject0.toString();
        java.util.concurrent.atomic.AtomicLong atomicLong7 = new java.util.concurrent.atomic.AtomicLong();
        float float8 = atomicLong7.floatValue();
        long long9 = atomicLong7.get();
        long long11 = atomicLong7.getAndSet(0L);
        long long12 = atomicLong7.incrementAndGet();
        boolean boolean15 = atomicLong7.compareAndSet(10L, (long) 1);
        boolean boolean16 = subject0.equals((java.lang.Object) boolean15);
        java.util.Set<java.lang.Object> objSet17 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet18 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet19 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost22 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean23 = cassandraHost22.isPerformNameResolution();
        cassandraHost22.setUseThriftFramedTransport(true);
        cassandraHost22.setUseSocketKeepalive(false);
        java.lang.String str28 = cassandraHost22.getHost();
        cassandraHost22.setUseThriftFramedTransport(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient32 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost22, "CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>))(CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)))):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient32.equals(null)", !hKerberosThriftClient32.equals(null));
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1494");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.lang.String str3 = subject0.toString();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("9468");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray19, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters22 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters24 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray19, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32", strArray19);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray19, false);
        tSSLTransportParameters27.requireClientAuth(false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient30 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "209:-2", tSSLTransportParameters27);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient30.equals(null)", !hKerberosThriftClient30.equals(null));
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1495");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost8 = new me.prettyprint.cassandra.service.CassandraHost("0.0.0.0", (int) (byte) 100);
        cassandraHost8.setMaxActive(0);
        java.lang.String[] strArray26 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters27 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("Subject:\n", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray26);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):10", strArray26, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters36 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray26, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters38 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("127.0.0.1(127.0.0.1):9160", strArray26, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient39 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost8, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1)))((127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))))", tSSLTransportParameters38);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient39.equals(null)", !hKerberosThriftClient39.equals(null));
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1496");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.lang.String str12 = subject0.toString();
        subject0.setReadOnly();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet15 = subject0.getPrivateCredentials();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost17 = new me.prettyprint.cassandra.service.CassandraHost("");
        boolean boolean19 = cassandraHost17.equals((java.lang.Object) 0.0f);
        int int20 = cassandraHost17.getCassandraThriftSocketTimeout();
        cassandraHost17.setUseSocketKeepalive(false);
        java.lang.String str23 = cassandraHost17.getHost();
        java.lang.String str24 = cassandraHost17.getHost();
        java.lang.String str25 = cassandraHost17.toString();
        cassandraHost17.setLifo(false);
        java.lang.String str28 = cassandraHost17.getIp();
        java.lang.String str29 = cassandraHost17.toString();
        boolean boolean30 = cassandraHost17.getUseThriftFramedTransport();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters45 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray43, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters46 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters47 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters49 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!:100", strArray43, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters50 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("100", strArray43);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters52 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("32(0.0.0.32)(32(0.0.0.32)):-125", strArray43, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient53 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost17, "(127.0.0.1):100", tSSLTransportParameters52);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient53.equals(null)", !hKerberosThriftClient53.equals(null));
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1497");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        javax.security.auth.Subject subject5 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet6 = subject5.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet7 = subject5.getPublicCredentials();
        java.lang.String str8 = subject5.toString();
        boolean boolean9 = subject5.isReadOnly();
        java.util.Set<java.lang.Object> objSet10 = subject5.getPrivateCredentials();
        boolean boolean11 = subject0.equals((java.lang.Object) subject5);
        java.lang.String str12 = subject0.toString();
        boolean boolean13 = subject0.isReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost16 = new me.prettyprint.cassandra.service.CassandraHost("", 0);
        boolean boolean17 = cassandraHost16.getUseSocketKeepalive();
        boolean boolean18 = cassandraHost16.getLifo();
        java.lang.String str19 = cassandraHost16.getName();
        java.lang.String str20 = cassandraHost16.getHost();
        java.lang.String str21 = cassandraHost16.getName();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient23 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost16, "9269(0.0.36.53):1");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient23.equals(null)", !hKerberosThriftClient23.equals(null));
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1498");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        java.util.Set<java.lang.Object> objSet2 = subject0.getPublicCredentials();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet5 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet6 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("(127.0.0.1):9160", 1);
        boolean boolean10 = cassandraHost9.getUseThriftFramedTransport();
        cassandraHost9.setMaxWaitTimeWhenExhausted(10L);
        cassandraHost9.setLifo(false);
        boolean boolean15 = cassandraHost9.isPerformNameResolution();
        cassandraHost9.setMaxActive((int) (short) 98);
        int int18 = cassandraHost9.getPort();
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient20 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "0(0.0.0.0):9160");
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient20.equals(null)", !hKerberosThriftClient20.equals(null));
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1499");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        subject0.setReadOnly();
        boolean boolean4 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet5 = subject0.getPublicCredentials();
        java.lang.String str6 = subject0.toString();
        subject0.setReadOnly();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost9 = new me.prettyprint.cassandra.service.CassandraHost("");
        cassandraHost9.setMaxWaitTimeWhenExhausted((long) (short) 10);
        java.lang.String str12 = cassandraHost9.toString();
        int int13 = cassandraHost9.getMaxActive();
        java.lang.String str14 = cassandraHost9.getName();
        boolean boolean15 = cassandraHost9.isPerformNameResolution();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "CassandraClient<%s-%d>", "(127.0.0.1):9160", "CassandraClient<%s-%d>", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters30 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1):9160", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters31 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters32 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters34 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("CassandraClient<%s-%d>(CassandraClient<%s-%d>):-1", strArray28, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters35 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("101:1", strArray28);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters37 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("0.0.0.100(0.0.0.100)(0.0.0.100(0.0.0.100)):45", strArray28, true);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient38 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost9, "(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9359", tSSLTransportParameters37);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient38.equals(null)", !hKerberosThriftClient38.equals(null));
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1500");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPublicCredentials();
        subject0.setReadOnly();
        java.util.Set<java.lang.Object> objSet3 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet4 = subject0.getPrincipals();
        me.prettyprint.cassandra.service.CassandraHost cassandraHost7 = new me.prettyprint.cassandra.service.CassandraHost("CassandraClient<%s-%d>(CassandraClient<%s-%d>)(CassandraClient<%s-%d>(CassandraClient<%s-%d>)):98", (int) 'a');
        java.lang.String[] strArray20 = new java.lang.String[] { "CassandraClient<%s-%d>", "hi!", "hi!", "hi!", "hi!", "(127.0.0.1):9160" };
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters21 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters23 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("hi!", strArray20, false);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters25 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("214", strArray20, true);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters26 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("199", strArray20);
        org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters tSSLTransportParameters28 = new org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters("(127.0.0.1)((127.0.0.1))((127.0.0.1)((127.0.0.1))):9260", strArray20, false);
        me.prettyprint.cassandra.connection.client.HKerberosThriftClient hKerberosThriftClient29 = new me.prettyprint.cassandra.connection.client.HKerberosThriftClient(subject0, cassandraHost7, "hi!(hi!)(hi!(hi!)):9160", tSSLTransportParameters28);
        org.junit.Assert.assertTrue("Contract failed: !hKerberosThriftClient29.equals(null)", !hKerberosThriftClient29.equals(null));
    }
}

