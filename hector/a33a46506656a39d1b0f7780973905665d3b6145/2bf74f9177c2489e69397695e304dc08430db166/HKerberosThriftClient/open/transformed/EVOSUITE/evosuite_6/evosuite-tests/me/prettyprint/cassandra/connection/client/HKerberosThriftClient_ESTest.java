/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 03:38:51 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Principal;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.security.auth.Subject;
import me.prettyprint.cassandra.connection.client.HKerberosThriftClient;
import me.prettyprint.cassandra.connection.client.HThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.cassandra.thrift.Cassandra;
import org.apache.thrift.protocol.TCompactProtocol;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.helpers.NOPLogger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HKerberosThriftClient_ESTest extends HKerberosThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "reating a ew ;rif nnectio<)to {}";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("reating a ew ;rif nnectio<)to {}(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("reating a ew ;rif nnectio<)to {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("reating a ew ;rif nnectio<)to {}", cassandraHost0.getHost());
      assertEquals("reating a ew ;rif nnectio<)to {}:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      Subject subject0 = null;
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("reating a ew ;rif nnectio<)to {}(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("reating a ew ;rif nnectio<)to {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("reating a ew ;rif nnectio<)to {}", cassandraHost0.getHost());
      assertEquals("reating a ew ;rif nnectio<)to {}:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1L, hKerberosThriftClient0.getmySerial());
      assertEquals("reating a ew ;rif nnectio<)to {}", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(1L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to reating a ew ;rif nnectio<)to {}(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2c210058
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "$tR2&";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("$tR2&", cassandraHost0.getHost());
      assertEquals("$tR2&:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("$tR2&", cassandraHost0.getHost());
      assertEquals("$tR2&:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("$tR2&", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("$tR2&", cassandraHost0.getHost());
      assertEquals("$tR2&:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("$tR2&", cassandraHost0.getHost());
      assertEquals("$tR2&:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      Logger logger0 = hKerberosThriftClient0.getlog();
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("$tR2&", cassandraHost0.getHost());
      assertEquals("$tR2&:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("$tR2&", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(logger0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      
      hKerberosThriftClient0.setlog(logger0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("$tR2&", cassandraHost0.getHost());
      assertEquals("$tR2&:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("$tR2&", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      
      hKerberosThriftClient0.setkerberosTicket(subject0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("$tR2&(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("$tR2&", cassandraHost0.getHost());
      assertEquals("$tR2&:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(2L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("$tR2&", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(2L, hKerberosThriftClient0.mySerial);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to $tR2&(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2c210058
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "|";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("|", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|:9160", cassandraHost0.getUrl());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("|", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|:9160", cassandraHost0.getUrl());
      assertEquals("|", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertNotNull(tMemoryInputTransport0);
      
      hKerberosThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("|", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|:9160", cassandraHost0.getUrl());
      assertEquals("|", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hKerberosThriftClient0.transport.getBufferPosition());
      assertEquals(0, hKerberosThriftClient0.transport.getBytesRemainingInBuffer());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hKerberosThriftClient0.getparams();
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("|", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|:9160", cassandraHost0.getUrl());
      assertEquals("|", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      String string1 = hKerberosThriftClient0.getservicePrincipalName();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("|", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|:9160", cassandraHost0.getUrl());
      assertEquals("|", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNotNull(string1);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals("|", string1);
      
      hKerberosThriftClient0.setparams(hKerberosThriftClient0.params);
      assertSame(string0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("|", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|:9160", cassandraHost0.getUrl());
      assertEquals("|", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      hKerberosThriftClient0.setservicePrincipalName(hKerberosThriftClient0.servicePrincipalName);
      assertSame(string0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("|", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|:9160", cassandraHost0.getUrl());
      assertEquals("|", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(3L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "I;put streIm may not be null";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("I;put streIm may not be null", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("I;put streIm may not be null(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("I;put streIm may not be null(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("I;put streIm may not be null:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("I;put streIm may not be null", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("I;put streIm may not be null(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("I;put streIm may not be null(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("I;put streIm may not be null:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(4L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("I;put streIm may not be null", hKerberosThriftClient0.getservicePrincipalName());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(4L, hKerberosThriftClient0.mySerial);
      
      Subject subject1 = hKerberosThriftClient0.getkerberosTicket();
      assertSame(subject0, subject1);
      assertSame(subject1, subject0);
      assertEquals("I;put streIm may not be null", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("I;put streIm may not be null(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("I;put streIm may not be null(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("I;put streIm may not be null:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(4L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("I;put streIm may not be null", hKerberosThriftClient0.getservicePrincipalName());
      assertNotNull(subject1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(4L, hKerberosThriftClient0.mySerial);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = "vZ(g";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("vZ(g", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(5L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(5L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = "";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(6L, hKerberosThriftClient0.getmySerial());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(6L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "Open called on already open connection. You should not have gotten here.";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Open called on already open connection. You should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Open called on already open connection. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Open called on already open connection. You should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Open called on already open connection. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(7L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("Open called on already open connection. You should not have gotten here.", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(7L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to Open called on already open connection. You should not have gotten here.(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2c210058
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "L7Arj`\"r#hU*,C?}";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("L7Arj`\"r#hU*,C?}(200.42.42.0):0", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("L7Arj`\"r#hU*,C?}(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("L7Arj`\"r#hU*,C?}", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("L7Arj`\"r#hU*,C?}:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals("L7Arj`\"r#hU*,C?}(200.42.42.0):0", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("L7Arj`\"r#hU*,C?}(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("L7Arj`\"r#hU*,C?}", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("L7Arj`\"r#hU*,C?}:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("L7Arj`\"r#hU*,C?}", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(8L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(8L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to L7Arj`\"r#hU*,C?}(200.42.42.0):0 , Cannot open without port.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "hLlt@Q*cF+UF('e'3f";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("hLlt@Q*cF+UF('e'3f", cassandraHost0.getHost());
      assertEquals("hLlt@Q*cF+UF('e'3f(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("hLlt@Q*cF+UF('e'3f(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("hLlt@Q*cF+UF('e'3f:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("hLlt@Q*cF+UF('e'3f", cassandraHost0.getHost());
      assertEquals("hLlt@Q*cF+UF('e'3f(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("hLlt@Q*cF+UF('e'3f(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("hLlt@Q*cF+UF('e'3f:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("hLlt@Q*cF+UF('e'3f", hKerberosThriftClient0.getservicePrincipalName());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(9L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      String string1 = hKerberosThriftClient0.getservicePrincipalName();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("hLlt@Q*cF+UF('e'3f", cassandraHost0.getHost());
      assertEquals("hLlt@Q*cF+UF('e'3f(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("hLlt@Q*cF+UF('e'3f(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("hLlt@Q*cF+UF('e'3f:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("hLlt@Q*cF+UF('e'3f", hKerberosThriftClient0.getservicePrincipalName());
      assertNotNull(string1);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(9L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals("hLlt@Q*cF+UF('e'3f", string1);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = "b";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(3, stringArray0.length);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("b", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(10L, hKerberosThriftClient0.getmySerial());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(10L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(3, stringArray0.length);
      
      String string1 = hKerberosThriftClient0.getservicePrincipalName();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("b", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(10L, hKerberosThriftClient0.getmySerial());
      assertNotNull(string1);
      assertEquals(10L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(3, stringArray0.length);
      assertEquals("b", string1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      boolean boolean0 = true;
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Class<Principal> class0 = Principal.class;
      Set<Principal> set0 = subject0.getPublicCredentials(class0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Subject subject1 = new Subject(boolean0, set0, set0, set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(subject1.equals((Object)subject0));
      assertNotNull(subject1);
      
      String string0 = ")?]K^(?oL-S^";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(")?]K^(?oL-S^(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(")?]K^(?oL-S^(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(")?]K^(?oL-S^", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(")?]K^(?oL-S^:9160", cassandraHost0.getUrl());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject1, cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(")?]K^(?oL-S^(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(")?]K^(?oL-S^(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(")?]K^(?oL-S^", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(")?]K^(?oL-S^:9160", cassandraHost0.getUrl());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(")?]K^(?oL-S^", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(11L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertNotNull(hKerberosThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(11L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      Subject subject2 = hKerberosThriftClient0.getkerberosTicket();
      assertNotSame(subject0, subject1);
      assertNotSame(subject0, subject2);
      assertNotSame(subject1, subject0);
      assertSame(subject1, subject2);
      assertNotSame(subject2, subject0);
      assertSame(subject2, subject1);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(")?]K^(?oL-S^(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(")?]K^(?oL-S^(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(")?]K^(?oL-S^", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(")?]K^(?oL-S^:9160", cassandraHost0.getUrl());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(")?]K^(?oL-S^", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(11L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(subject2.equals((Object)subject0));
      assertNotNull(subject2);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(11L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      hKerberosThriftClient0.setkerberosTicket(subject2);
      assertNotSame(subject0, subject1);
      assertNotSame(subject0, subject2);
      assertNotSame(subject1, subject0);
      assertSame(subject1, subject2);
      assertNotSame(subject2, subject0);
      assertSame(subject2, subject1);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(")?]K^(?oL-S^(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(")?]K^(?oL-S^(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(")?]K^(?oL-S^", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(")?]K^(?oL-S^:9160", cassandraHost0.getUrl());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(")?]K^(?oL-S^", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(11L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject0.equals((Object)subject2));
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(subject2.equals((Object)subject0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(11L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(12L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      Subject subject1 = hKerberosThriftClient0.getkerberosTicket();
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(subject1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(12L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      boolean boolean0 = true;
      TCompactProtocol tCompactProtocol0 = new TCompactProtocol(hKerberosThriftClient0.transport);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(tCompactProtocol0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(12L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      boolean boolean1 = cassandraHost0.isPerformNameResolution();
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean1);
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tCompactProtocol0);
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hKerberosThriftClient0.getmySerial());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(cassandra_Client0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(12L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      // Undeclared exception!
      try { 
        cassandra_Client0.recv_get_indexed_slices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.protocol.TCompactProtocol", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      String string1 = "0w=$%lk<|PJ";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(13L, hKerberosThriftClient0.getmySerial());
      assertEquals("0w=$%lk<|PJ", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hKerberosThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(13L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      hKerberosThriftClient0.useageStartTime = (long) cassandraHost0.DEFAULT_MAX_ACTIVE;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(13L, hKerberosThriftClient0.getmySerial());
      assertEquals("0w=$%lk<|PJ", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(1392409281270L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(50L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      
      String string2 = "";
      hKerberosThriftClient0.setservicePrincipalName(string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(13L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281270L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(50L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(13L, hKerberosThriftClient0.mySerial);
      assertEquals(50L, hKerberosThriftClient0.useageStartTime);
      
      hKerberosThriftClient0.setkerberosTicket(subject0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(13L, hKerberosThriftClient0.getmySerial());
      assertEquals(1392409281270L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(50L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(13L, hKerberosThriftClient0.mySerial);
      assertEquals(50L, hKerberosThriftClient0.useageStartTime);
      
      boolean boolean0 = false;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(string0.equals((Object)string1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):9160 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "\\.<#9,6x";
      int int0 = 611;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("\\.<#9,6x", cassandraHost0.getHost());
      assertEquals("\\.<#9,6x:611", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(611, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("\\.<#9,6x(200.42.42.0):611", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("\\.<#9,6x(200.42.42.0):611", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      String string1 = "lqUg*v<*7(r*vo=5St";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("\\.<#9,6x", cassandraHost0.getHost());
      assertEquals("\\.<#9,6x:611", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(611, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("\\.<#9,6x(200.42.42.0):611", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("\\.<#9,6x(200.42.42.0):611", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("lqUg*v<*7(r*vo=5St", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(14L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(14L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      hKerberosThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("\\.<#9,6x", cassandraHost0.getHost());
      assertEquals("\\.<#9,6x:611", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(611, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("\\.<#9,6x(200.42.42.0):611", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("\\.<#9,6x(200.42.42.0):611", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("lqUg*v<*7(r*vo=5St", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(14L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(14L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "ETb!fm\\>xn]+bj";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ETb!fm\\>xn]+bj", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ETb!fm\\>xn]+bj(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("ETb!fm\\>xn]+bj:9160", cassandraHost0.getUrl());
      assertEquals("ETb!fm\\>xn]+bj(200.42.42.0):9160", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String string1 = "Requested Range Not Satisfiable";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ETb!fm\\>xn]+bj", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ETb!fm\\>xn]+bj(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("ETb!fm\\>xn]+bj:9160", cassandraHost0.getUrl());
      assertEquals("ETb!fm\\>xn]+bj(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(15L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("Requested Range Not Satisfiable", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(15L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      Logger logger0 = hKerberosThriftClient0.getlog();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ETb!fm\\>xn]+bj", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ETb!fm\\>xn]+bj(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("ETb!fm\\>xn]+bj:9160", cassandraHost0.getUrl());
      assertEquals("ETb!fm\\>xn]+bj(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(15L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("Requested Range Not Satisfiable", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(logger0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(15L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(16L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(16L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(hKerberosThriftClient0.NAME_FORMAT, stringArray0, boolean0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(16L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(16L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0, stringArray0.length);
      
      hKerberosThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(16L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(16L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "5TD/fI;Bd c!6l.;";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("5TD/fI;Bd c!6l.;:9160", cassandraHost0.getUrl());
      assertEquals("5TD/fI;Bd c!6l.;(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("5TD/fI;Bd c!6l.;", cassandraHost0.getHost());
      assertEquals("5TD/fI;Bd c!6l.;(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String string1 = ")\\#B_+BR<\\fL";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals("5TD/fI;Bd c!6l.;:9160", cassandraHost0.getUrl());
      assertEquals("5TD/fI;Bd c!6l.;(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("5TD/fI;Bd c!6l.;", cassandraHost0.getHost());
      assertEquals("5TD/fI;Bd c!6l.;(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(17L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(")\\#B_+BR<\\fL", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(17L, hKerberosThriftClient0.mySerial);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hKerberosThriftClient0.getparams();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("5TD/fI;Bd c!6l.;:9160", cassandraHost0.getUrl());
      assertEquals("5TD/fI;Bd c!6l.;(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("5TD/fI;Bd c!6l.;", cassandraHost0.getHost());
      assertEquals("5TD/fI;Bd c!6l.;(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(17L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(")\\#B_+BR<\\fL", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(17L, hKerberosThriftClient0.mySerial);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = ").*65eU?53";
      int int0 = 49;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(49, cassandraHost0.getPort());
      assertEquals(").*65eU?53", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(").*65eU?53:49", cassandraHost0.getUrl());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.toString());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int1 = 726;
      cassandraHost0.setMaxActive(int1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(49, cassandraHost0.getPort());
      assertEquals(").*65eU?53", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(726, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(").*65eU?53:49", cassandraHost0.getUrl());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.toString());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.getName());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = "me.prettyprint.cassandra.connection.client.HKerberosThriftClient";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(49, cassandraHost0.getPort());
      assertEquals(").*65eU?53", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(726, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(").*65eU?53:49", cassandraHost0.getUrl());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.toString());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.getName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hKerberosThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      String string2 = hKerberosThriftClient0.getservicePrincipalName();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(49, cassandraHost0.getPort());
      assertEquals(").*65eU?53", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(726, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(").*65eU?53:49", cassandraHost0.getUrl());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.toString());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.getName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", string2);
      
      Logger logger0 = hKerberosThriftClient0.getlog();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(49, cassandraHost0.getPort());
      assertEquals(").*65eU?53", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(726, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(").*65eU?53:49", cassandraHost0.getUrl());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.toString());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.getName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(logger0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      hKerberosThriftClient0.setlog(logger0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(49, cassandraHost0.getPort());
      assertEquals(").*65eU?53", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(726, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(").*65eU?53:49", cassandraHost0.getUrl());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.toString());
      assertEquals(").*65eU?53(200.42.42.0):49", cassandraHost0.getName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(18L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(18L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String string1 = "p4O(X*UbY\"& K";
      String[] stringArray0 = new String[3];
      boolean boolean0 = false;
      cassandraHost0.setLifo(boolean0);
      assertNotSame(string0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(3, stringArray0.length);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("p4O(X*UbY\"& K", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(19L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(19L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3, stringArray0.length);
      
      hKerberosThriftClient0.setservicePrincipalName(stringArray0[2]);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(19L, hKerberosThriftClient0.getmySerial());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(19L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3, stringArray0.length);
      
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      assertNotNull(nOPLogger0);
      
      hKerberosThriftClient0.setlog(nOPLogger0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(19L, hKerberosThriftClient0.getmySerial());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(19L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3, stringArray0.length);
      
      hKerberosThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(19L, hKerberosThriftClient0.getmySerial());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(19L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3, stringArray0.length);
      
      hKerberosThriftClient0.setkerberosTicket(subject0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(19L, hKerberosThriftClient0.getmySerial());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(19L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3, stringArray0.length);
      
      hKerberosThriftClient0.setlog(nOPLogger0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(19L, hKerberosThriftClient0.getmySerial());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(19L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "AF patst4qe6WC=Hk";
      int int0 = 3138;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("AF patst4qe6WC=Hk(200.42.42.0):3138", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("AF patst4qe6WC=Hk:3138", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("AF patst4qe6WC=Hk(200.42.42.0):3138", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(3138, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AF patst4qe6WC=Hk", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = "Status code may not be negative.";
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("AF patst4qe6WC=Hk(200.42.42.0):3138", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("AF patst4qe6WC=Hk:3138", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("AF patst4qe6WC=Hk(200.42.42.0):3138", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(3138, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AF patst4qe6WC=Hk", cassandraHost0.getHost());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertEquals("Status code may not be negative.", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters1 = new TSSLTransportFactory.TSSLTransportParameters();
      assertFalse(tSSLTransportFactory_TSSLTransportParameters1.equals((Object)tSSLTransportFactory_TSSLTransportParameters0));
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters1);
      
      hKerberosThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters1, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("AF patst4qe6WC=Hk(200.42.42.0):3138", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("AF patst4qe6WC=Hk:3138", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("AF patst4qe6WC=Hk(200.42.42.0):3138", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(3138, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AF patst4qe6WC=Hk", cassandraHost0.getHost());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertEquals("Status code may not be negative.", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters1.equals((Object)tSSLTransportFactory_TSSLTransportParameters0));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters2 = hKerberosThriftClient0.getparams();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters2, tSSLTransportFactory_TSSLTransportParameters0);
      assertSame(tSSLTransportFactory_TSSLTransportParameters2, tSSLTransportFactory_TSSLTransportParameters1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("AF patst4qe6WC=Hk(200.42.42.0):3138", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("AF patst4qe6WC=Hk:3138", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("AF patst4qe6WC=Hk(200.42.42.0):3138", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(3138, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("AF patst4qe6WC=Hk", cassandraHost0.getHost());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(20L, hKerberosThriftClient0.getmySerial());
      assertEquals("Status code may not be negative.", hKerberosThriftClient0.getservicePrincipalName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters2.equals((Object)tSSLTransportFactory_TSSLTransportParameters0));
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters2);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(20L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      Set<Object> set0 = subject0.getPrivateCredentials();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = "No more data available.";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(21L, hKerberosThriftClient0.getmySerial());
      assertEquals("No more data available.", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(21L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      Class<Principal> class0 = Principal.class;
      Set<Principal> set1 = subject0.getPublicCredentials(class0);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      
      Set<Object> set2 = subject0.getPublicCredentials();
      assertNotSame(set2, set0);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertTrue(set2.equals((Object)set0));
      assertNotNull(set2);
      
      hKerberosThriftClient0.params = tSSLTransportFactory_TSSLTransportParameters0;
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(21L, hKerberosThriftClient0.getmySerial());
      assertEquals("No more data available.", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      String string1 = "n";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("n", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(22L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(hKerberosThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(22L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      Subject subject1 = new Subject();
      assertNotNull(subject1);
      
      hKerberosThriftClient0.kerberosTicket = subject1;
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("n", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(22L, hKerberosThriftClient0.getmySerial());
      
      hKerberosThriftClient0.setkerberosTicket(subject0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("n", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(22L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(22L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      boolean boolean0 = true;
      LinkedHashSet<Principal> linkedHashSet0 = new LinkedHashSet<Principal>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Class<Object> class0 = Object.class;
      Set<Object> set0 = subject0.getPublicCredentials(class0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Subject subject1 = new Subject(boolean0, linkedHashSet0, linkedHashSet0, set0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(subject1.equals((Object)subject0));
      assertNotNull(subject1);
      
      String string0 = "";
      int int0 = (-858);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-858), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-858", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-858", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-858", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject1, cassandraHost0, string0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-858), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-858", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-858", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-858", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(23L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertNotNull(hKerberosThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(23L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      String string1 = hKerberosThriftClient0.getservicePrincipalName();
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-858), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-858", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-858", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-858", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(23L, hKerberosThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertNotNull(string1);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(23L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals("", string1);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "";
      int int0 = 1396;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("(127.0.0.1):1396", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":1396", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1396, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):1396", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      String string1 = "";
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertSame(string0, string1);
      assertEquals("(127.0.0.1):1396", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":1396", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1396, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):1396", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals("(127.0.0.1):1396", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":1396", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1396, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):1396", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(24L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(24L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      boolean boolean1 = cassandraHost0.isPerformNameResolution();
      assertSame(string0, string1);
      assertEquals("(127.0.0.1):1396", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":1396", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1396, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):1396", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):1396 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      long long0 = 255L;
      System.setCurrentTimeMillis(long0);
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = null;
      String string1 = "";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string1;
      stringArray0[5] = string1;
      stringArray0[6] = string0;
      String string2 = "";
      stringArray0[7] = string2;
      boolean boolean0 = false;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0, boolean0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(8, stringArray0.length);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(255L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(25L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(25L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(8, stringArray0.length);
      
      hKerberosThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertSame(string1, string2);
      assertEquals(255L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(25L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals(25L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(8, stringArray0.length);
      
      String string3 = hKerberosThriftClient0.getservicePrincipalName();
      assertSame(string1, string2);
      assertEquals(255L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(25L, hKerberosThriftClient0.getmySerial());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertNull(string3);
      assertEquals(25L, hKerberosThriftClient0.mySerial);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "VL^";
      int int0 = 80;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(80, cassandraHost0.getPort());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.toString());
      assertEquals("VL^", cassandraHost0.getHost());
      assertEquals("VL^:80", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(80, cassandraHost0.getPort());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.toString());
      assertEquals("VL^", cassandraHost0.getHost());
      assertEquals("VL^:80", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(80, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(80, cassandraHost0.getPort());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.toString());
      assertEquals("VL^", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("VL^:80", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(80, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(80, cassandraHost0.getPort());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.toString());
      assertEquals("VL^", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("VL^:80", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(80, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.getName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(26L, hKerberosThriftClient0.getmySerial());
      assertEquals("VL^", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(26L, hKerberosThriftClient0.mySerial);
      assertEquals(80, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      cassandraHost0.setLifo(boolean0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(80, cassandraHost0.getPort());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.toString());
      assertEquals("VL^", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("VL^:80", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(80, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      boolean boolean1 = true;
      cassandraHost0.setLifo(boolean1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(80, cassandraHost0.getPort());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.toString());
      assertEquals("VL^", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("VL^:80", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(80, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.getName());
      assertFalse(boolean1 == boolean0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      
      Subject subject1 = hKerberosThriftClient0.getkerberosTicket();
      assertSame(subject0, subject1);
      assertSame(subject1, subject0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(80, cassandraHost0.getPort());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.toString());
      assertEquals("VL^", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("VL^:80", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(80, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("VL^(200.42.42.0):80", cassandraHost0.getName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(26L, hKerberosThriftClient0.getmySerial());
      assertEquals("VL^", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNotNull(subject1);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(26L, hKerberosThriftClient0.mySerial);
      assertEquals(80, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to VL^(200.42.42.0):80 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2c1cb4d0
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 9160);
          boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
          assertTrue(boolean0);
          
          Subject subject0 = null;
          String string0 = "system_add_column_family_args(";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals("system_add_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
          assertEquals("system_add_column_family_args(:9160", cassandraHost0.getUrl());
          assertEquals("system_add_column_family_args(", cassandraHost0.getHost());
          assertEquals("system_add_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertTrue(cassandraHost0.getLifo());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(9160, cassandraHost0.getPort());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertNotNull(cassandraHost0);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          
          HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
          assertEquals("system_add_column_family_args((200.42.42.0):9160", cassandraHost0.toString());
          assertEquals("system_add_column_family_args(:9160", cassandraHost0.getUrl());
          assertEquals("system_add_column_family_args(", cassandraHost0.getHost());
          assertEquals("system_add_column_family_args((200.42.42.0):9160", cassandraHost0.getName());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertTrue(cassandraHost0.getLifo());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(9160, cassandraHost0.getPort());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
          assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
          assertEquals("system_add_column_family_args(", hKerberosThriftClient0.getservicePrincipalName());
          assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
          assertEquals(27L, hKerberosThriftClient0.getmySerial());
          assertNull(hKerberosThriftClient0.getkeyspaceName());
          assertNotNull(hKerberosThriftClient0);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertEquals(0, hKerberosThriftClient0.timeout);
          assertEquals(27L, hKerberosThriftClient0.mySerial);
          assertEquals(0L, hKerberosThriftClient0.useageStartTime);
          
          // Undeclared exception!
          try { 
            hKerberosThriftClient0.open();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"javax.security.auth.AuthPermission\" \"doAs\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // javax.security.auth.Subject.doAs(Subject.java:348)
             // me.prettyprint.cassandra.connection.security.KerberosHelper.authenticateClient(KerberosHelper.java:73)
             // me.prettyprint.cassandra.connection.client.HKerberosThriftClient.open(HKerberosThriftClient.java:86)
             // sun.reflect.GeneratedMethodAccessor176.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      boolean boolean0 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String string1 = "";
      long long0 = 1615L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertSame(string0, string1);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertSame(string0, string1);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      cassandraHost0.setLifo(boolean0);
      assertSame(string0, string1);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      hKerberosThriftClient0.setservicePrincipalName(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      Logger logger0 = hKerberosThriftClient0.getlog();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertNotNull(logger0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      hKerberosThriftClient0.params = tSSLTransportFactory_TSSLTransportParameters0;
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      
      boolean boolean1 = hKerberosThriftClient0.equals(logger0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertFalse(boolean1);
      
      boolean boolean2 = false;
      hKerberosThriftClient0.clearAuthentication();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertSame(string0, string1);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      cassandraHost0.setLifo(boolean2);
      assertSame(string0, string1);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      Subject subject1 = hKerberosThriftClient0.getkerberosTicket();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertNull(subject1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      String string2 = "aU";
      hKerberosThriftClient0.setkeyspaceName(string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      boolean boolean3 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String string3 = hKerberosThriftClient0.getservicePrincipalName();
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertSame(string3, string1);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals("", string3);
      
      String string4 = hKerberosThriftClient0.getservicePrincipalName();
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string4);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertSame(string4, string1);
      assertSame(string4, string3);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals("", string4);
      
      String string5 = hKerberosThriftClient0.getservicePrincipalName();
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertSame(string0, string4);
      assertSame(string1, string5);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertSame(string5, string3);
      assertNotSame(string5, string2);
      assertSame(string5, string0);
      assertSame(string5, string1);
      assertSame(string5, string4);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals("", string5);
      
      hKerberosThriftClient0.setservicePrincipalName(string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertSame(string0, string4);
      assertSame(string1, string5);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      String string6 = HThriftClient.NAME_FORMAT;
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("CassandraClient<%s-%d>", string6);
      
      hKerberosThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(string0, string4);
      assertSame(string1, string5);
      assertNotSame(string1, string6);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      int int0 = 507;
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(int0);
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertNotNull(tMemoryBuffer0);
      
      hKerberosThriftClient0.settransport(tMemoryBuffer0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(string0, string4);
      assertSame(string1, string5);
      assertNotSame(string1, string6);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      Logger logger1 = hKerberosThriftClient0.getlog();
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(string0, string4);
      assertSame(logger1, logger0);
      assertSame(string1, string5);
      assertNotSame(string1, string6);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(logger1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      hKerberosThriftClient0.setlog(logger1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(string0, string4);
      assertSame(logger1, logger0);
      assertSame(string1, string5);
      assertNotSame(string1, string6);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      Logger logger2 = hKerberosThriftClient0.getlog();
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(string0, string4);
      assertSame(logger2, logger0);
      assertSame(logger2, logger1);
      assertSame(string1, string5);
      assertNotSame(string1, string6);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(logger2);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      hKerberosThriftClient0.setkerberosTicket(subject0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(string0, string4);
      assertSame(string1, string5);
      assertNotSame(string1, string6);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      hKerberosThriftClient0.setkerberosTicket(subject0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(string0, string4);
      assertSame(string1, string5);
      assertNotSame(string1, string6);
      assertSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1615L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals("aU", hKerberosThriftClient0.getkeyspaceName());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(28L, hKerberosThriftClient0.getmySerial());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(28L, hKerberosThriftClient0.mySerial);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(0, hKerberosThriftClient0.timeout);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      boolean boolean0 = subject0.isReadOnly();
      assertFalse(boolean0);
      
      String string0 = "7gq#`Y-o}2P4w%";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      boolean boolean1 = false;
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertTrue(boolean1 == boolean0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      int int0 = 30;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals(30, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      boolean boolean2 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-37);
      byteArray0[0] = byte0;
      boolean boolean3 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37)}, byteArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean3);
      
      cassandraHost0.setMaxActive(int0);
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals(30, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(30, cassandraHost0.getMaxActive());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals("7gq#`Y-o}2P4w%", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(29L, hKerberosThriftClient0.getmySerial());
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals(30, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(30, cassandraHost0.getMaxActive());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(30, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(29L, hKerberosThriftClient0.mySerial);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      String string1 = "!KkV-HA,*d=h_ao";
      Logger logger0 = null;
      HKerberosThriftClient.log = logger0;
      hKerberosThriftClient0.servicePrincipalName = string1;
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("!KkV-HA,*d=h_ao", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(29L, hKerberosThriftClient0.getmySerial());
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals(30, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(30, cassandraHost0.getMaxActive());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      
      Logger logger1 = hKerberosThriftClient0.getlog();
      assertNotSame(string0, string1);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("!KkV-HA,*d=h_ao", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(29L, hKerberosThriftClient0.getmySerial());
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals(30, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(30, cassandraHost0.getMaxActive());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertFalse(string0.equals((Object)string1));
      assertNull(logger1);
      assertEquals(30, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(29L, hKerberosThriftClient0.mySerial);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      Logger logger2 = hKerberosThriftClient0.getlog();
      assertNotSame(string0, string1);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("!KkV-HA,*d=h_ao", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(29L, hKerberosThriftClient0.getmySerial());
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals(30, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(30, cassandraHost0.getMaxActive());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertFalse(string0.equals((Object)string1));
      assertNull(logger2);
      assertEquals(30, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(29L, hKerberosThriftClient0.mySerial);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      Logger logger3 = hKerberosThriftClient0.getlog();
      assertNotSame(string0, string1);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("!KkV-HA,*d=h_ao", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(29L, hKerberosThriftClient0.getmySerial());
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals(30, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(30, cassandraHost0.getMaxActive());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertFalse(string0.equals((Object)string1));
      assertNull(logger3);
      assertEquals(30, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(29L, hKerberosThriftClient0.mySerial);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      Logger logger4 = hKerberosThriftClient0.getlog();
      assertNotSame(string0, string1);
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals("!KkV-HA,*d=h_ao", hKerberosThriftClient0.getservicePrincipalName());
      assertEquals(29L, hKerberosThriftClient0.getmySerial());
      assertEquals("7gq#`Y-o}2P4w%:9160", cassandraHost0.getUrl());
      assertEquals(30, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(30, cassandraHost0.getMaxActive());
      assertEquals("7gq#`Y-o}2P4w%(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("7gq#`Y-o}2P4w%", cassandraHost0.getHost());
      assertFalse(string0.equals((Object)string1));
      assertNull(logger4);
      assertEquals(30, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(29L, hKerberosThriftClient0.mySerial);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "E01";
      Subject subject0 = null;
      int int0 = Integer.MAX_VALUE;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("E01(200.42.42.0):2147483647", cassandraHost0.toString());
      assertEquals("E01:2147483647", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("E01(200.42.42.0):2147483647", cassandraHost0.getName());
      assertEquals("E01", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("E01(200.42.42.0):2147483647", cassandraHost0.toString());
      assertEquals("E01:2147483647", cassandraHost0.getUrl());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("E01(200.42.42.0):2147483647", cassandraHost0.getName());
      assertEquals("E01", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(30L, hKerberosThriftClient0.getmySerial());
      assertEquals("E01", hKerberosThriftClient0.getservicePrincipalName());
      assertNull(hKerberosThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hKerberosThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hKerberosThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hKerberosThriftClient0.timeout);
      assertEquals(0L, hKerberosThriftClient0.useageStartTime);
      assertEquals(30L, hKerberosThriftClient0.mySerial);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:2147483647
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
}
