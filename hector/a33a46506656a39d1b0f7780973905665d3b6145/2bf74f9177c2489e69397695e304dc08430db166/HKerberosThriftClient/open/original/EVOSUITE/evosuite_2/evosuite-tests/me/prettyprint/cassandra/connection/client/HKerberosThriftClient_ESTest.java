/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 03:06:09 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.security.AccessControlContext;
import java.security.Principal;
import java.util.HashMap;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.security.auth.Subject;
import me.prettyprint.cassandra.connection.client.HKerberosThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.cassandra.thrift.Cassandra;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HKerberosThriftClient_ESTest extends HKerberosThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "insert_result";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("insert_result:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("insert_result", cassandraHost0.getHost());
      assertEquals("insert_result(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("insert_result(200.42.42.0):9160", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("insert_result:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("insert_result", cassandraHost0.getHost());
      assertEquals("insert_result(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("insert_result(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("insert_result:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("insert_result", cassandraHost0.getHost());
      assertEquals("insert_result(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("insert_result(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to insert_result(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@68f4feef
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "<%D)wwE768GN";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("<%D)wwE768GN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("<%D)wwE768GN:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("<%D)wwE768GN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("<%D)wwE768GN", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("<%D)wwE768GN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("<%D)wwE768GN:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("<%D)wwE768GN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("<%D)wwE768GN", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = ">S~f6";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(">S~f6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(">S~f6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(">S~f6", cassandraHost0.getHost());
      assertEquals(">S~f6:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(">S~f6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(">S~f6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(">S~f6", cassandraHost0.getHost());
      assertEquals(">S~f6:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport();
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertNotNull(tMemoryInputTransport0);
      
      hKerberosThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(">S~f6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(">S~f6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(">S~f6", cassandraHost0.getHost());
      assertEquals(">S~f6:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hKerberosThriftClient0.transport.getBufferPosition());
      assertEquals(0, hKerberosThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "[KX[b";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("[KX[b", cassandraHost0.getHost());
      assertEquals("[KX[b:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[KX[b(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("[KX[b(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("[KX[b", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("[KX[b:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[KX[b(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("[KX[b(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("[KX[b", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("[KX[b:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[KX[b(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("[KX[b(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to [KX[b(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@68f4feef
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "Jh25_Io;5w~";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Jh25_Io;5w~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Jh25_Io;5w~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Jh25_Io;5w~", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Jh25_Io;5w~:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Jh25_Io;5w~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Jh25_Io;5w~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Jh25_Io;5w~", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Jh25_Io;5w~:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):9160 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Subject subject0 = null;
      String string0 = "org.apache.thrift.transport.TMemoryBuffer";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("org.apache.thrift.transport.TMemoryBuffer:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("org.apache.thrift.transport.TMemoryBuffer(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("org.apache.thrift.transport.TMemoryBuffer", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("org.apache.thrift.transport.TMemoryBuffer(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("org.apache.thrift.transport.TMemoryBuffer:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("org.apache.thrift.transport.TMemoryBuffer(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("org.apache.thrift.transport.TMemoryBuffer", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("org.apache.thrift.transport.TMemoryBuffer(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "@#tsB]";
      int int0 = 1;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("@#tsB](200.42.42.0):1", cassandraHost0.toString());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals("@#tsB]", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("@#tsB](200.42.42.0):1", cassandraHost0.getName());
      assertEquals("@#tsB]:1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Set<Object> set0 = subject0.getPrivateCredentials();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("@#tsB](200.42.42.0):1", cassandraHost0.toString());
      assertEquals(1, cassandraHost0.getPort());
      assertEquals("@#tsB]", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("@#tsB](200.42.42.0):1", cassandraHost0.getName());
      assertEquals("@#tsB]:1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to @#tsB](200.42.42.0):1 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@68f0a9d6
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      CassandraHost cassandraHost0 = null;
      String string0 = null;
      boolean boolean0 = subject0.isReadOnly();
      assertFalse(boolean0);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      boolean boolean0 = true;
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Class<Object> class0 = Object.class;
      Set<Object> set0 = subject0.getPrivateCredentials(class0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Class<Principal> class1 = Principal.class;
      Set<Principal> set1 = subject0.getPrivateCredentials(class1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      
      Subject subject1 = new Subject(boolean0, set1, set1, set1);
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(subject1);
      
      String string0 = "KVXLIC0>@AY2Om\"\\";
      Set<Principal> set2 = subject1.getPrincipals();
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(set2.equals((Object)set1));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertNotNull(set2);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      
      Class<HKerberosThriftClient> class2 = HKerberosThriftClient.class;
      Set<HKerberosThriftClient> set3 = subject1.getPrivateCredentials(class2);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set2));
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(0, set3.size());
      assertTrue(set3.isEmpty());
      assertNotNull(set3);
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("KVXLIC0>@AY2Om\"\\:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("KVXLIC0>@AY2Om\"\\(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("KVXLIC0>@AY2Om\"\\(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("KVXLIC0>@AY2Om\"\\", cassandraHost0.getHost());
      assertNotNull(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("KVXLIC0>@AY2Om\"\\:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("KVXLIC0>@AY2Om\"\\(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("KVXLIC0>@AY2Om\"\\(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("KVXLIC0>@AY2Om\"\\", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      long long0 = 0L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertEquals("KVXLIC0>@AY2Om\"\\:9160", cassandraHost0.getUrl());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("KVXLIC0>@AY2Om\"\\(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("KVXLIC0>@AY2Om\"\\(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("KVXLIC0>@AY2Om\"\\", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject1, cassandraHost0, string0);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(set1.equals((Object)set2));
      assertTrue(subject1.equals((Object)subject0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("KVXLIC0>@AY2Om\"\\:9160", cassandraHost0.getUrl());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("KVXLIC0>@AY2Om\"\\(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("KVXLIC0>@AY2Om\"\\(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("KVXLIC0>@AY2Om\"\\", cassandraHost0.getHost());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to KVXLIC0>@AY2Om\"\\(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@68f4feef
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "org.apache.http.auth.AuthenticationException";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("org.apache.http.auth.AuthenticationException:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("org.apache.http.auth.AuthenticationException", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertNotNull(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = cassandraHost0.isPerformNameResolution();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("org.apache.http.auth.AuthenticationException:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("org.apache.http.auth.AuthenticationException", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean2);
      
      int int0 = (-3099);
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("org.apache.http.auth.AuthenticationException:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("org.apache.http.auth.AuthenticationException", cassandraHost0.getHost());
      assertEquals((-3099), cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      cassandraHost0.setUseThriftFramedTransport(boolean1);
      assertTrue(boolean1 == boolean2);
      assertEquals("org.apache.http.auth.AuthenticationException:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("org.apache.http.auth.AuthenticationException", cassandraHost0.getHost());
      assertEquals((-3099), cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertTrue(boolean0 == boolean2);
      assertEquals("org.apache.http.auth.AuthenticationException:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("org.apache.http.auth.AuthenticationException", cassandraHost0.getHost());
      assertEquals((-3099), cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = "Could not set SO_KEEPALIVE on socket: ";
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.http.auth.AuthenticationException:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("org.apache.http.auth.AuthenticationException(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("org.apache.http.auth.AuthenticationException", cassandraHost0.getHost());
      assertEquals((-3099), cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to org.apache.http.auth.AuthenticationException(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@68f4feef
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Subject subject0 = new Subject();
          assertNotNull(subject0);
          
          String string0 = ")I8+1g6";
          CassandraHost cassandraHost0 = new CassandraHost(string0);
          assertEquals(")I8+1g6(200.42.42.0):9160", cassandraHost0.getName());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(")I8+1g6:9160", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(")I8+1g6(200.42.42.0):9160", cassandraHost0.toString());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals(")I8+1g6", cassandraHost0.getHost());
          assertEquals(9160, cassandraHost0.getPort());
          assertFalse(cassandraHost0.getUseSocketKeepalive());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertNotNull(cassandraHost0);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          
          boolean boolean0 = true;
          cassandraHost0.setUseSocketKeepalive(boolean0);
          assertEquals(")I8+1g6(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(")I8+1g6:9160", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(")I8+1g6(200.42.42.0):9160", cassandraHost0.toString());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals(")I8+1g6", cassandraHost0.getHost());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          
          String string1 = "(v";
          EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 9160);
          boolean boolean1 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
          assertTrue(boolean1 == boolean0);
          assertTrue(boolean1);
          
          HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
          assertFalse(string0.equals((Object)string1));
          assertFalse(string1.equals((Object)string0));
          assertEquals(")I8+1g6(200.42.42.0):9160", cassandraHost0.getName());
          assertTrue(cassandraHost0.getUseSocketKeepalive());
          assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
          assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
          assertEquals(")I8+1g6:9160", cassandraHost0.getUrl());
          assertTrue(cassandraHost0.getLifo());
          assertEquals(")I8+1g6(200.42.42.0):9160", cassandraHost0.toString());
          assertTrue(cassandraHost0.getUseThriftFramedTransport());
          assertEquals("200.42.42.0", cassandraHost0.getIp());
          assertEquals(")I8+1g6", cassandraHost0.getHost());
          assertEquals(9160, cassandraHost0.getPort());
          assertEquals(50, cassandraHost0.getMaxActive());
          assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
          assertNotNull(hKerberosThriftClient0);
          assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
          assertEquals(9160, CassandraHost.DEFAULT_PORT);
          assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
          assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
          assertTrue(CassandraHost.DEFAULT_LIFO);
          
          // Undeclared exception!
          try { 
            hKerberosThriftClient0.open();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"javax.security.auth.AuthPermission\" \"doAs\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // javax.security.auth.Subject.doAs(Subject.java:348)
             // me.prettyprint.cassandra.connection.security.KerberosHelper.authenticateClient(KerberosHelper.java:73)
             // me.prettyprint.cassandra.connection.client.HKerberosThriftClient.open(HKerberosThriftClient.java:109)
             // sun.reflect.GeneratedMethodAccessor165.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      String string0 = "Creating a new thrift connection to {}";
      int int0 = (-2961);
      Class<Object> class0 = Object.class;
      Set<Object> set0 = subject0.getPublicCredentials(class0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Creating a new thrift connection to {}:-2961", cassandraHost0.getUrl());
      assertEquals((-2961), cassandraHost0.getPort());
      assertEquals("Creating a new thrift connection to {}", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):-2961", cassandraHost0.toString());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):-2961", cassandraHost0.getName());
      assertNotNull(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Creating a new thrift connection to {}:-2961", cassandraHost0.getUrl());
      assertEquals((-2961), cassandraHost0.getPort());
      assertEquals("Creating a new thrift connection to {}", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):-2961", cassandraHost0.toString());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):-2961", cassandraHost0.getName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      Cassandra.Client cassandra_Client0 = hKerberosThriftClient0.cassandraClient;
      assertNull(cassandra_Client0);
      
      Class<Principal> class1 = Principal.class;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)58;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-70);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-74);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-98);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-21);
      byteArray0[5] = byte5;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0, byte0, byte0);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte5);
      assertFalse(byte0 == byte2);
      assertArrayEquals(new byte[] {(byte)0, (byte)58, (byte) (-70), (byte) (-74), (byte) (-98), (byte) (-21)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertNotNull(tMemoryInputTransport0);
      
      hKerberosThriftClient0.transport = (TTransport) tMemoryInputTransport0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Creating a new thrift connection to {}:-2961", cassandraHost0.getUrl());
      assertEquals((-2961), cassandraHost0.getPort());
      assertEquals("Creating a new thrift connection to {}", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):-2961", cassandraHost0.toString());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):-2961", cassandraHost0.getName());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      assertEquals(0, hKerberosThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hKerberosThriftClient0.transport.getBufferPosition());
      
      Set<Principal> set1 = subject0.getPrincipals(class1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      
      hKerberosThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Creating a new thrift connection to {}:-2961", cassandraHost0.getUrl());
      assertEquals((-2961), cassandraHost0.getPort());
      assertEquals("Creating a new thrift connection to {}", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):-2961", cassandraHost0.toString());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):-2961", cassandraHost0.getName());
      assertEquals(1392409281320L, hKerberosThriftClient0.getSinceLastUsed());
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HKerberosThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      long long0 = 1178L;
      System.setCurrentTimeMillis(long0);
      Subject subject0 = null;
      String string0 = ".\"X)E+Im`!t2KYeZ27";
      int int0 = Integer.MAX_VALUE;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".\"X)E+Im`!t2KYeZ27(200.42.42.0):2147483647", cassandraHost0.getName());
      assertEquals(".\"X)E+Im`!t2KYeZ27", cassandraHost0.getHost());
      assertEquals(".\"X)E+Im`!t2KYeZ27(200.42.42.0):2147483647", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(".\"X)E+Im`!t2KYeZ27:2147483647", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getPort());
      assertNotNull(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String string1 = "me.prettyprint.cassandra.connection.client.HKerberosThriftClient";
      int int1 = (-1402);
      cassandraHost0.setMaxActive(int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".\"X)E+Im`!t2KYeZ27(200.42.42.0):2147483647", cassandraHost0.getName());
      assertEquals(".\"X)E+Im`!t2KYeZ27", cassandraHost0.getHost());
      assertEquals((-1402), cassandraHost0.getMaxActive());
      assertEquals(".\"X)E+Im`!t2KYeZ27(200.42.42.0):2147483647", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(".\"X)E+Im`!t2KYeZ27:2147483647", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getPort());
      assertNotSame(string0, string1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HKerberosThriftClient hKerberosThriftClient0 = new HKerberosThriftClient(subject0, cassandraHost0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".\"X)E+Im`!t2KYeZ27(200.42.42.0):2147483647", cassandraHost0.getName());
      assertEquals(".\"X)E+Im`!t2KYeZ27", cassandraHost0.getHost());
      assertEquals((-1402), cassandraHost0.getMaxActive());
      assertEquals(".\"X)E+Im`!t2KYeZ27(200.42.42.0):2147483647", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(".\"X)E+Im`!t2KYeZ27:2147483647", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(Integer.MAX_VALUE, cassandraHost0.getPort());
      assertEquals(1178L, hKerberosThriftClient0.getSinceLastUsed());
      assertNotNull(hKerberosThriftClient0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        hKerberosThriftClient0.open();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:2147483647
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
}
